{"version":3,"file":"static/js/7480.dcdc1b3e.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Dashboard/chartComp.jsx","Pages/Reports/barChartComp.jsx","Pages/Reports/chartReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import React, { useEffect, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-datalabels';\n\n\nconst PieChartComp = ({ TasksArray }) => {\n    const [chartData, setChartData] = useState(null);\n    const [chartInstance, setChartInstance] = useState(null);\n    const [totalTime, setTotalTime] = useState(null);\n\n    useEffect(() => {\n        if (TasksArray.length > 0) {\n            const totalDuration = TasksArray.reduce((acc, task) => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                return acc + (end - start);\n            }, 0);\n\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\n            const totalTime = lastTaskEnd - firstTaskStart;\n            const freeTime = totalTime - totalDuration;\n\n            const totalSeconds = Math.floor(totalTime / 1000);\n            const hours = Math.floor(totalSeconds / 3600);\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\n            const seconds = totalSeconds % 60;\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\n\n            const taskData = TasksArray.map(task => {\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\n                const duration = end - start;\n                return {\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\n                    duration,\n                    backgroundColor: getRandomColor()\n                };\n            });\n\n            const chartData = {\n                labels: taskData.map(task => task.label),\n                datasets: [{\n                    data: taskData.map(task => task.duration),\n                    backgroundColor: taskData.map(task => task.backgroundColor),\n                    borderColor: 'rgba(255, 255, 255, 1)',\n                    borderWidth: 1\n                }]\n            };\n\n            chartData.labels.push('Free Time');\n            chartData.datasets[0].data.push(freeTime);\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\n\n            setChartData(chartData);\n        }\n    }, [TasksArray]);\n\n    useEffect(() => {\n        if (chartData) {\n            if (chartInstance) {\n                chartInstance.destroy();\n            }\n\n            const ctx = document.getElementById('empWokHours');\n            const newChartInstance = new Chart(ctx, {\n                type: 'pie',\n                data: chartData,\n                options: {\n                    responsive: true,\n                    plugins: {\n                        tooltip: {\n                            callbacks: {\n                                label: function (context) {\n                                    // const label = context.label || '';\n                                    const value = context.parsed || 0;\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                    const percentage = Math.round((value / total) * 100);\n                                    const minutes = Math.round(value / (1000 * 60));\n                                    return `${minutes} minutes (${percentage}%)`;\n                                }\n                            }\n                        },\n                        datalabels: {\n                            color: '#fff',\n                            formatter: (value, context) => {\n                                const label = context.chart.data.labels[context.dataIndex];\n                                const value1 = context.parsed || 0;\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\n                                const percentage = Math.round((value1 / total) * 100);\n                                return `${label}: ${value} (${percentage}%)`;\n                            }\n                        }                        \n                    }\n                }\n            });\n\n            setChartInstance(newChartInstance);\n        }\n    }, [chartData]);\n\n    // for Dynamic background colors\n    const getRandomColor = () => {\n        const letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    return TasksArray.length > 0 ? (\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\n        </div>\n    ) : (\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\n    )\n};\n\nexport default PieChartComp;\n","import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\n\nconst TaskActivityChart = ({ startDate, endDate, taskActivity }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n\n      const labels = taskActivity.map(task => new Date(task.Work_Dt));\n      const data = taskActivity.map(task => task.Worked_Minutes);\n\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n\n      chartInstance.current = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Worked Minutes',\n            data: data,\n            borderColor: 'blue',\n            backgroundColor: 'transparent',\n            pointBackgroundColor: 'blue',\n            pointRadius: 5,\n            pointHoverRadius: 7,\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'day',\n                min: startDate,\n                max: endDate,\n              },\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Worked Minutes'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  let label = context.dataset.label || '';\n                  if (label) {\n                    label += ': ';\n                  }\n                  if (context.parsed.y !== null) {\n                    label += context.parsed.y + ' minutes';\n                  }\n                  const task = taskActivity[context.dataIndex];\n                  if (task) {\n                    label += ` (${task.Employee_Name}, Time: ${task.Start_Time}-${task.End_Time})`;\n                  }\n                  return label;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [startDate, endDate, taskActivity]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default TaskActivityChart;\n","import React, { useEffect, useState } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Select from 'react-select';\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\nimport PieChartComp from \"../Dashboard/chartComp\";\nimport LineChartComp from \"./barChartComp\";\nimport { Card, CardContent } from '@mui/material';\nimport { fetchLink } from '../../Components/fetchComponent'\n\nconst ChartsReport = () => {\n    const localData = localStorage.getItem(\"user\");\n    const parseData = JSON.parse(localData);\n    const [empData, setEmpData] = useState([]);\n    const [taskData, setTaskData] = useState([]);\n    const [usersDropDown, setUsersDropdown] = useState([]);\n    const [filteredUser, setFilteredUser] = useState([]);\n    const [taskDropDown, setTaskDropDown] = useState([]);\n\n    const initialValueFilter = {\n        Emp_Id: parseData?.UserId,\n        date: new Date().toISOString().split('T')[0],\n        EmpGet: parseData?.Name,\n    }\n\n    const initialValueBarChart = {\n        Emp_Id: parseData?.UserId,\n        From: new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0],\n        To: new Date().toISOString().split('T')[0],\n        EmpGet: parseData?.Name,\n        Task_Id: '',\n        TaskGet: ''\n    }\n\n    const [filters, setFileters] = useState(initialValueFilter);\n    const [barChartFilter, setBarChartFilter] = useState(initialValueBarChart)\n\n\n    useEffect(() => {\n        fetchLink({\n            address: `taskManagement/task/work?Emp_Id=${filters.Emp_Id}&from=${filters.date}&to=${filters.date}`\n        }).then(data => {\n            if (data.success) {\n                setEmpData(data.data)\n            }\n        }).catch(e => console.error(e))\n    }, [filters?.Emp_Id, filters?.date])\n\n    useEffect(() => {\n        fetchLink({\n            address: `taskManagement/task/assignEmployee/user/dropDown?Company_id=${parseData?.Company_id}`\n        }).then(data => {\n            if (data.success) {\n                setUsersDropdown(data.data)\n            }\n        }).catch(e => console.error(e))\n\n        fetchLink({\n            address: `taskManagement/task/assignEmployee/task/dropDown`\n        }).then(data => {\n            if (data.success) {\n                setTaskDropDown(data.data)\n            }\n            if (data?.data?.length > 0) {\n                setBarChartFilter(pre => ({ ...pre, Task_Id: data.data[0].Task_Id, TaskGet: data.data[0].Task_Name }))\n            }\n        }).catch(e => console.error(e))\n\n    }, [])\n\n    useEffect(() => {\n        fetchLink({\n            address: `taskManagement/task/work/barChart?Emp_Id=${barChartFilter?.Emp_Id}&From=${barChartFilter?.From}&To=${barChartFilter?.To}&Task_Id=${barChartFilter?.Task_Id}`\n        }).then(data => {\n            if (data.success) {\n                setTaskData(data.data)\n            }\n        }).catch(e => console.error(e))\n\n    }, [barChartFilter.Emp_Id, barChartFilter.From, barChartFilter.To, barChartFilter.Task_Id]);\n\n    useEffect(() => {\n        setFilteredUser([])\n        fetchLink({\n            address: `taskManagement/task/workedUsers/dropDown?Task_Id=${barChartFilter.Task_Id}`\n        }).then(data => {\n            if (data.success) {\n                setFilteredUser(data.data)\n            }\n        }).catch(e => console.error(e))\n    }, [barChartFilter?.Task_Id])\n\n\n    return (\n        <>\n            <Card>\n                <CardContent style={{ minHeight: 500 }}>\n                    <h5>User Work Report</h5>\n                    <div className=\"row\">\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <Select\n                                value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\n                                onChange={(e) => setFileters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\n                                options={[\n                                    { value: '', label: 'All Employee' }, \n                                    ...usersDropDown.map(obj => ({ value: obj.UserId, label: obj.Name }))\n                                ]}\n                                styles={customSelectStyles}\n                                isSearchable={true}\n                                placeholder={\"Employee Name\"} />\n                        </div>\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <input\n                                type=\"date\"\n                                value={filters.date}\n                                onChange={e => setFileters({ ...filters, date: e.target.value })}\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }} />\n                        </div>\n                    </div>\n\n\n                    {/* <PieChartEmpData TasksArray={empData} /> */}\n                    {/* <MuiPieChart TasksArray={empData} /> */}\n                    <PieChartComp TasksArray={empData} />\n                    {/* <ReChartPieChart data={empData} /> */}\n                </CardContent>\n            </Card>\n\n            <Card className=\"mt-3\">\n                <CardContent style={{ minHeight: 500 }}>\n                    <h5>Task Activity Report</h5>\n                    <div className=\"row\">\n\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <Select\n                                value={{ value: barChartFilter?.Task_Id, label: barChartFilter?.TaskGet }}\n                                onChange={(e) => setBarChartFilter({ ...barChartFilter, Task_Id: e.value, TaskGet: e.label })}\n                                options={[...taskDropDown.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))]}\n                                styles={customSelectStyles}\n                                isSearchable={true}\n                                placeholder={\"Task Name\"} \n                            />\n                        </div>\n\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <Select\n                                value={{ value: barChartFilter?.Emp_Id, label: barChartFilter?.EmpGet }}\n                                onChange={e => setBarChartFilter({ ...barChartFilter, Emp_Id: e.value, EmpGet: e.label })}\n                                options={[{ value: '', label: 'All Employee' }, ...filteredUser.map(obj => ({ value: obj?.Emp_Id, label: obj?.Name }))]}\n                                styles={customSelectStyles}\n                                isSearchable={true}\n                                placeholder={\"Employee Name\"} \n                            />\n                        </div>\n\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <input\n                                type=\"date\"\n                                value={barChartFilter.From}\n                                onChange={e => setBarChartFilter({ ...barChartFilter, From: e.target.value })}\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\n                            />\n                        </div>\n\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\n                            <input\n                                type=\"date\"\n                                value={barChartFilter.To}\n                                onChange={e => setBarChartFilter({ ...barChartFilter, To: e.target.value })}\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\n                            />\n                        </div>\n\n                    </div>\n\n                    <LineChartComp taskActivity={taskData} startDate={barChartFilter.From} endDate={barChartFilter.To} />\n                </CardContent>\n            </Card>\n        </>\n    );\n}\n\nexport default ChartsReport;\n"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","control","provided","state","_objectSpread","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","TasksArray","chartData","setChartData","useState","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","length","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","concat","String","padStart","taskData","map","duration","label","Task_Name","getRandomColor","labels","datasets","data","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","type","options","responsive","plugins","tooltip","callbacks","context","value","parsed","total","dataset","curr","percentage","round","datalabels","formatter","chart","dataIndex","value1","i","random","_jsxs","className","maxHeight","children","_jsx","startDate","endDate","taskActivity","chartRef","useRef","current","getContext","Work_Dt","Worked_Minutes","pointBackgroundColor","pointRadius","pointHoverRadius","scales","x","time","unit","min","max","title","display","text","y","Employee_Name","ref","ChartsReport","localData","localStorage","getItem","parseData","JSON","parse","empData","setEmpData","setTaskData","usersDropDown","setUsersDropdown","filteredUser","setFilteredUser","taskDropDown","setTaskDropDown","initialValueFilter","Emp_Id","UserId","date","EmpGet","Name","initialValueBarChart","From","setDate","getDate","To","Task_Id","TaskGet","filters","setFileters","barChartFilter","setBarChartFilter","fetchLink","then","success","catch","e","console","error","Company_id","_data$data","pre","_Fragment","Card","CardContent","minHeight","Select","onChange","obj","styles","isSearchable","placeholder","target","PieChartComp","LineChartComp"],"sourceRoot":""}
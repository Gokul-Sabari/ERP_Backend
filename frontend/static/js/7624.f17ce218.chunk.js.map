{"version":3,"file":"static/js/7624.f17ce218.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/DeliveryDetailsList.jsx","Pages/Sales/TripMaster/SalesDeliveryAdd.jsx","Pages/Sales/convertedStatus.js"],"sourcesContent":["\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, Button, Dialog, Tooltip, IconButton, DialogTitle, DialogContent, DialogActions, Switch } from \"@mui/material\";\r\n// import '../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { getPreviousDate, isEqualNumber, ISOString, isValidObject } from \"../../../Components/functions\";\r\nimport DeliveryInvoiceTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Edit, FilterAlt,Delete } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\n// import SalesDelivery from \"./SalesReportComponent/SalesDeliveryConvert\"\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NewDeliveryOrder from \"./NewDeliveryOrder\";\r\nconst DeliveryDetailsList = ({ loadingOn, loadingOff, onToggle,reload }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    \r\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\r\n   const [itemTodelete,setItemToDelete]=useState({})\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] = useState(false)\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Delivery_Person_Id: '',\r\n        Delivery_Person_Name: 'ALL',\r\n        Cancel_status: 0\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderList?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Delivery_Person_Id=${filters?.Delivery_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSaleOrders(data?.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n       \r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Delivery_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        reload\r\n    ])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsers(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n    const openDeleteDialog = (itemData) => {\r\n      \r\n        setItemToDelete({\r\n            So_No: itemData.So_No,\r\n            Do_Id: itemData.Do_Id\r\n        });\r\n        setDeleteConfirm(true);\r\n    };\r\n    \r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: 'Do_Id',\r\n            ColumnHeader: 'Delivery ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'So_No',\r\n            ColumnHeader: 'Sale Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Customer',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'SalesDate',\r\n            ColumnHeader: 'Sale Order Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Do_Date',\r\n            ColumnHeader: 'Delivery Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'DeliveryStatusName',\r\n            ColumnHeader: 'Delivery Status ',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        // {\r\n        //     Field_Name: 'DeliveryStatusName',\r\n        //     // ColumnHeader: 'DeliveryStatusName',\r\n        //     isVisible: 1,\r\n        //     Field_Data:'String',\r\n        //     align: 'center',\r\n        //     // isCustomCell: true,\r\n         \r\n        // },\r\n        // {\r\n        //     Field_Name: 'Sales_Person_Name',\r\n        //     ColumnHeader: 'Sales Person',\r\n        //     Fied_Data: 'string',\r\n        //     isVisible: 1,\r\n        // },\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                      \r\n                        <Tooltip title='Edit'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row, isEdit: true });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <Edit className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Delete'>\r\n                            <IconButton\r\n                               onClick={()=>openDeleteDialog(row)}\r\n                            \r\n                                size=\"small\"\r\n                            >\r\n                                <Delete className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Delivery Person</td>\r\n                            <td className=\"border p-2\">{row.Delivery_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen)\r\n        setOrderInfo({});\r\n        setIsDeliveryDetailsVisible(!isDeliveryDetailsVisible);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n   \r\n      \r\n        setDeleteConfirm(false)  \r\n      }\r\n\r\n        const confirmData = async () => {\r\n       \r\n            if (!itemTodelete) return;\r\n            fetchLink({\r\n                address: 'delivery/deliveryOrder',\r\n                method: 'DELETE',\r\n                bodyData: ({ Order_Id: itemTodelete.So_No, Do_Id: itemTodelete.Do_Id })\r\n\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    toast.success(data?.message);\r\n                   reload()\r\n                } else {\r\n                    toast.error(data?.message)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => loadingOff())\r\n\r\n            setDeleteConfirm(false) \r\n        \r\n        };\r\n        \r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">{\r\n                        screen\r\n                            ? 'Delivery Orders'\r\n                            : isValidObject(orderInfo)\r\n                                ? 'Modify Delivery Order'\r\n                                : ''  }\r\n                    </h6>\r\n                    <span>\r\n                        {screen && (\r\n                            <Tooltip title='Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n\r\n                        {screen && (\r\n                          <Switch\r\n                                checked={!screen}\r\n                                onChange={onToggle}\r\n                                label={'Delivery Details'}\r\n                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                \r\n                            />\r\n                        )}\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent className=\"p-0 \">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setScreen(pre => !pre)\r\n                            }}\r\n                            switchScreen={switchScreen}\r\n                        />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <DeliveryInvoiceTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Sale Order'}\r\n                />\r\n            )}\r\n\r\n\r\n            <Dialog\r\n                open={deleteConfirm}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Delete</DialogTitle>\r\n                <DialogContent>\r\n                 <div>Are You Want to Move the order Into the Sale Order Again</div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                   \r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button onClick={confirmData}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Delivery Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Delivery_Person_Id, label: filters?.Delivery_Person_Name }}\r\n                                            onChange={(e) => setFilters({ ...filters, Delivery_Person_Id: e.value, Delivery_Person_Name: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeliveryDetailsList;\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, Button, Dialog, Tooltip, TextField, IconButton, DialogTitle, DialogContent, DialogActions, Switch } from \"@mui/material\";\r\nimport '../../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { getPreviousDate, isEqualNumber, ISOString, isValidObject } from \"../../../Components/functions\";\r\n// import NewDeliveryOrder from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { FilterAlt, Visibility } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport NewDeliveryOrder from \"../SalesReportComponent/NewDeliveryOrder\";\r\nimport InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\n\r\nimport TwoWheelerIcon from '@mui/icons-material/TwoWheeler';\r\nimport DeliveryDetailsList from \"../SalesReportComponent/DeliveryDetailsList\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nconst SalesDeliveryConvert = ({ loadingOn, loadingOff }) => {\r\n\r\n  const nav = useNavigate();\r\n\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [reload, setReload] = useState(false)\r\n    const [routes, setRoutes] = useState([])\r\n    const [area, setArea] = useState([])\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] = useState(false)\r\n\r\n    const [checked, setChecked] = useState(true)\r\n    const [Product_Array, setProductArray] = useState([]);\r\n\r\n    const [tripDetailsData, setTripDetailsData] = useState({\r\n        Trip_ST_KM: '',\r\n        Branch_Id: '',\r\n        Vehicle_No: '',\r\n        Trip_No: '',\r\n        Trip_Date: '',\r\n        StartTime: '',\r\n        Created_By: '',\r\n        GST_Inclusive: 1,\r\n        IS_IGST: 0,\r\n        Delivery_Person_Id: '',\r\n        Delivery_Location: '',\r\n        // Delivery_Time,               \r\n        // Payment_Ref_No,       \r\n        // Payment_Mode,           \r\n        // Payment_Status,            \r\n        // Narration,                \r\n        Alter_Id: '',\r\n        Delivery_Status: '',\r\n    });\r\n\r\n    const Created_By = storage?.UserId;\r\n    const Branch_Id = storage?.BranchId;\r\n    const Cost_Center_Type_Id = storage?.UserTypeId\r\n    const [deliveryDialogBox, setDeliveryDialogBox] = useState(false)\r\n    const handleOpenDialog = () => setDeliveryDialogBox(true);\r\n    const handleCloseDialog = () => setDeliveryDialogBox(false);\r\n\r\n    const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n    const [DeliveryList, setDeliveryList] = useState([]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Sales_Person_Id: '',\r\n        SalsePersonGet: 'ALL',\r\n        Cancel_status: 0,\r\n        Route_Id: '',\r\n        RoutesGet: 'ALL',\r\n        Area_Id: '',\r\n        AreaGet: 'ALL'\r\n    });\r\n\r\n    const [deliveryDetails, setDeliveryDetails] = useState({\r\n        Do_Date: ISOString(),\r\n        Vehicle_No: '',\r\n        Trip_No: '',\r\n        Trip_Date: ISOString(),\r\n        StartTime: '',\r\n        Created_By: '',\r\n        Delivery_Person_Id: '',\r\n        Delivery_Location: '',\r\n        Delivery_Time: '',\r\n        Payment_Ref_No: '',\r\n        Payment_Mode: '',\r\n        Payment_Status: '',\r\n        Narration: '',\r\n        Alter_Id: '',\r\n        Delivery_Status: '',\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDeliveryDetails((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleDelivery?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}&Route_Id=${filters?.Route_Id}&Area_Id=${filters?.Area_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSaleOrders(data?.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Sales_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        filters?.Route_Id,\r\n        filters?.Area_Id,\r\n        reload\r\n    ])\r\n\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        const EmployeesInvolved = {\r\n            Trip_ST_KM: deliveryDetails.Trip_ST_KM || \"\",\r\n            Branch_Id: deliveryDetails.Branch_Id || \"\",\r\n            Vehicle_No: deliveryDetails.Vehicle_No || \"\",\r\n            Trip_No: deliveryDetails.Trip_No || \"\",\r\n            StartTime: deliveryDetails.StartTime || \"\",\r\n            Delivery_Person_Id: deliveryPerson?.UserId || \"\",\r\n            Delivery_Location: deliveryDetails.Delivery_Location || \"\",\r\n            Alter_Id: deliveryDetails.Alter_Id || \"\",\r\n            Delivery_Status: deliveryDetails.Delivery_Status || \"\",\r\n            Cost_Center_Type_Id: Cost_Center_Type_Id,\r\n\r\n        };\r\n\r\n        const Trip_ST_KM = setTripDetailsData?.Trip_ST_KM;\r\n\r\n\r\n\r\n        const tripData = {\r\n            ...deliveryDetails,\r\n            DeliveryList,\r\n            Product_Array,\r\n            EmployeesInvolved,\r\n            deliveryPerson: deliveryPerson?.UserId,\r\n            Do_Date: deliveryDetails?.Do_Date,\r\n            Trip_Date: deliveryDetails?.Trip_Date,\r\n            Vehicle_No: deliveryDetails?.Vehicle_No,\r\n            Created_By: Number(Created_By),\r\n            Branch_Id: Branch_Id,\r\n            Involved_Emp_Id: deliveryPerson?.UserId,\r\n            Trip_ST_KM: deliveryDetails?.Trip_ST_KM,\r\n            Vehicle_No: deliveryDetails?.Vehicle_No\r\n\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `delivery/deliveryOrderTrip`,\r\n                method: \"POST\",\r\n                bodyData: tripData,\r\n            });\r\n\r\n            if (!response.success) {\r\n                toast.error(\"Failed to add Trip Data\");\r\n                handleCloseDialog(true);\r\n                return false;\r\n            }\r\n            toast.success(response.message);\r\n            handleCloseDialog(true);\r\n            return true;\r\n        } catch (error) {   \r\n            console.error(\"Error during API call:\", error);\r\n            handleCloseDialog(true);\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsers(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setDeliveryPersonList(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/routes/dropdown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRoutes(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/areas/dropdown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setArea(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n    }, [])\r\n\r\n    const handleDeliveryPersonChange = (selectedOption) => {\r\n\r\n        setDeliveryPerson(selectedOption ? { UserId: selectedOption.value, Name: selectedOption.label } : null);\r\n    };\r\n\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        const isSelected = selectedRows.some((selectedRow) => selectedRow.So_Id === row.So_Id);\r\n\r\n        if (isSelected) {\r\n\r\n            setSelectedRows(selectedRows.filter((selectedRow) => selectedRow.So_Id !== row.So_Id));\r\n        } else {\r\n\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: 'checkbox',\r\n            ColumnHeader: '',\r\n            isVisible: 1,\r\n            pointer: true,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const isSelected = selectedRows.some((selectedRow) => selectedRow.So_Id === row.So_Id);\r\n\r\n                return (\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleCheckboxChange(row)}\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            transform: 'scale(1.5)',\r\n                            width: '14px',\r\n                            height: '20px',\r\n                        }}\r\n\r\n                    />\r\n                );\r\n            },\r\n        },\r\n        {\r\n            Field_Name: 'So_Id',\r\n            ColumnHeader: 'Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Customer',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'So_Date',\r\n            ColumnHeader: 'Sale Order Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            ColumnHeader: 'Status',\r\n            isVisible: 1,\r\n            align: 'center',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const convert = convertedStatus.find(status => status.id === Number(row?.isConverted));\r\n                return (\r\n                    <span className={'py-0 fw-bold px-2 rounded-4 fa-12 ' + convert?.color ?? 'bg-secondary text-white'}>\r\n                        {convert?.label ?? 'Undefined'}\r\n                    </span>\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title='View Order'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    })\r\n                                }}\r\n                                color='primary' size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n\r\n                        <Tooltip title='Sales Delivery'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <TwoWheelerIcon className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const setTripDetails = (data) => {\r\n        if (!Array.isArray(data)) {\r\n            console.error(\"Invalid data format. Expected an array.\");\r\n            return;\r\n        }\r\n\r\n        setDeliveryDialogBox(true);\r\n\r\n        const DeliveryList = [];\r\n        const Product_Array = [];\r\n\r\n        data.forEach((item) => {\r\n            if (item) {\r\n                DeliveryList.push(item);\r\n\r\n                if (item.Products_List && Array.isArray(item.Products_List)) {\r\n                    Product_Array.push(...item.Products_List);\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        setDeliveryList(DeliveryList);\r\n        setProductArray(Product_Array);\r\n\r\n        setDeliveryDetails({\r\n            DeliveryList,\r\n            Product_Array,\r\n        });\r\n    };\r\n\r\n\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen)\r\n        setOrderInfo({});\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n    }\r\n    const handleToggle = () => {\r\n\r\n        setScreen((prev) => !prev);\r\n        setIsDeliveryDetailsVisible((prev) => !prev);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">\r\n                        {screen\r\n                            ? 'Sale Orders'\r\n                            : isValidObject(orderInfo)\r\n                        }\r\n\r\n                    </h6>\r\n\r\n                    <div>\r\n                        { \r\n                            <Tooltip title=\"Filters\">\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        }\r\n\r\n                        {/* { selectedRows.length >0 && screen && (\r\n                              <Button variant=\"outlined\" \r\n                              onClick={\r\n                                \r\n                                () => setTripDetails(selectedRows)\r\n                            }>\r\n                                Convert to Trip</Button>\r\n                         )} */}\r\n                     \r\n                        {selectedRows.length > 0 && screen && (\r\n                         \r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                \r\n                                onClick={() =>{\r\n                                  \r\n                                    nav('/erp/sales/Tripsheet/Tripsheetcreation', {\r\n                                        state: [\r\n                                           ...selectedRows\r\n                                        ],\r\n                                    })\r\n                                }}\r\n                            >\r\n                                Convert to Trip\r\n                            </Button>\r\n                        )}\r\n\r\n\r\n                        {/* {screen && (\r\n                            <Switch\r\n                                checked={checked}\r\n                                onChange={() => {\r\n                                    setScreen(false);\r\n                                    setIsDeliveryDetailsVisible(true);\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'controlled' }}\r\n                            />\r\n                        )} */}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <CardContent className=\"p-0\">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : isDeliveryDetailsVisible ? (\r\n                        <DeliveryDetailsList\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => { setReload(prev => !prev); setScreen(pre => !pre) }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            onToggle={handleToggle}\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload(prev => !prev); setScreen(prev => !prev)\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            editOn={true}\r\n                        />\r\n                        // reload={() => {\r\n                        //     setReload(pre => !pre);\r\n                        //     setScreen(pre => !pre)\r\n                        // }}\r\n                        // switchScreen={switchScreen}\r\n                    )}\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Sale Order'}\r\n                />\r\n            )}\r\n            <Dialog open={deliveryDialogBox} onClose={handleCloseDialog} fullWidth maxWidth=\"sm\">\r\n                <DialogTitle>Delivery Details</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <td style={{ verticalAlign: 'middle' }}>Delivery Date</td>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            type=\"date\"\r\n                            name=\"Do_Date\"\r\n                            value={deliveryDetails.Do_Date}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"delivery-person\">Delivery Person</label>\r\n                        <Select\r\n                            id=\"delivery-person\"\r\n                            name=\"deliveryPerson\"\r\n                            value={\r\n                                deliveryPerson\r\n                                    ? { value: deliveryPerson.UserId, label: deliveryPerson.Name }\r\n                                    : null\r\n                            }\r\n                            onChange={handleDeliveryPersonChange}\r\n                            options={[\r\n                                { value: '', label: 'Select', isDisabled: true },\r\n                                ...(deliveryPersonList || []).map((obj) => ({\r\n                                    value: obj.UserId,\r\n                                    label: obj.Name,\r\n                                })),\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable\r\n                            placeholder=\"Sales Person Name\"\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Vehicle Number\"\r\n                            name=\"Vehicle_No\"\r\n                            value={deliveryDetails.Vehicle_No}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Start KM\"\r\n                            name=\"Trip_ST_KM\"\r\n                            value={deliveryDetails.Trip_ST_KM}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Trip Date\"\r\n                            type=\"date\"\r\n                            name=\"Trip_Date\"\r\n                            value={deliveryDetails.Trip_Date}\r\n                            onChange={handleInputChange}\r\n\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            label=\"Start Time\"\r\n                            name=\"StartTime\"\r\n                            value={deliveryDetails.StartTime}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n\r\n\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Salse Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Sales_Person_Id, label: filters?.SalsePersonGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Sales_Person_Id: e.value, SalsePersonGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Routes</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Route_Id, label: filters?.RoutesGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Route_Id: e.value, RoutesGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...routes.map(obj => ({ value: obj?.Route_Id, label: obj?.Route_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Route Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Area</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Area_Id, label: filters?.AreaGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Area_Id: e.value, AreaGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...area.map(obj => ({ value: obj?.Area_Id, label: obj?.Area_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Area Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesDeliveryConvert;\r\n\r\n\r\n","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]"],"names":["_ref","loadingOn","loadingOff","onToggle","reload","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","useState","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","deleteConfirm","setDeleteConfirm","itemTodelete","setItemToDelete","isDeliveryDetailsVisible","setIsDeliveryDetailsVisible","filters","setFilters","Fromdate","getPreviousDate","Todate","ISOString","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Delivery_Person_Id","Delivery_Person_Name","Cancel_status","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","Company_id","saleOrderColumn","Field_Name","ColumnHeader","Fied_Data","isVisible","align","isCustomCell","Cell","_ref2","row","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","switchScreen","_objectSpread","isEdit","size","Edit","className","openDeleteDialog","So_No","itemData","Do_Id","Delete","closeDialog","Card","isValidObject","FilterAlt","Switch","checked","onChange","label","inputProps","CardContent","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref3","Branch_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","Sales_Person_Name","colSpan","Narration","NewDeliveryOrder","editValues","pre","Object","keys","length","DeliveryInvoiceTemplate","orderProducts","download","actionOpen","clearDetails","TitleText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","Button","async","method","bodyData","Order_Id","toast","message","finally","onClose","style","verticalAlign","Select","value","options","map","obj","Retailer_Name","styles","customSelectStyles","isSearchable","placeholder","UserId","Name","type","target","Number","nav","useNavigate","selectedRows","setSelectedRows","setReload","routes","setRoutes","area","setArea","setChecked","Product_Array","setProductArray","tripDetailsData","setTripDetailsData","Trip_ST_KM","Branch_Id","Vehicle_No","Trip_No","Trip_Date","StartTime","Created_By","Delivery_Location","Alter_Id","Delivery_Status","BranchId","Cost_Center_Type_Id","UserTypeId","deliveryDialogBox","setDeliveryDialogBox","handleCloseDialog","deliveryPerson","setDeliveryPerson","deliveryPersonList","setDeliveryPersonList","DeliveryList","setDeliveryList","Sales_Person_Id","SalsePersonGet","Route_Id","RoutesGet","Area_Id","AreaGet","deliveryDetails","setDeliveryDetails","Do_Date","Delivery_Time","Payment_Ref_No","Payment_Mode","Payment_Status","handleInputChange","name","prev","pointer","isSelected","some","selectedRow","So_Id","filter","handleCheckboxChange","cursor","transform","width","height","_ref4","_convert$label","convert","convertedStatus","find","status","id","isConverted","color","_ref5","Products_List","Visibility","TwoWheelerIcon","variant","state","_ref6","DeliveryDetailsList","handleToggle","editOn","InvoiceBillTemplate","TextField","InputLabelProps","shrink","htmlFor","selectedOption","isDisabled","margin","EmployeesInvolved","tripData","Involved_Emp_Id","response","Route_Name","Area_Name"],"sourceRoot":""}
{"version":3,"file":"static/js/4064.50d80b9c.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Attendance/fingerPrintAttendance.jsx","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card, CardContent, Button, Chip, Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Autocomplete,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport * as XLSX from 'xlsx';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst FingerPrintAttendanceReport = (loadingOn, loadingOff) => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const userTypeId = storage?.UserTypeId;\r\n    const parseData = storage;\r\n    const [attendanceData, setAttendanceData] = useState([]);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const Add_Rights = contextObj?.Add_Rights;\r\n\r\n\r\n    const getCurrentMonthYear = () => {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n        return `${year}-${month}`;\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n\r\n    };\r\n\r\n    const initialValue = {\r\n        From: getCurrentMonthYear(),\r\n        To: getCurrentMonthYear(),\r\n        EmpId: 0,\r\n        Name: '',\r\n    };\r\n\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [filter, setFilter] = useState(initialValue);\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n    const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n    const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setDebouncedFilter(filter);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                let filteredEmployees = [];\r\n\r\n                if (Number(userTypeId) === 1 || Number(userTypeId) === 0 || Number(Add_Rights) === 1) {\r\n                    filteredEmployees = data.data;\r\n                    setFilter(prev => ({ ...prev, EmpId: 0, Name: 'ALL' }));\r\n                    setIsDropdownDisabled(false);\r\n                    setDropdownPlaceholder(\"ALL\");\r\n                } else {\r\n                    filteredEmployees = data.data.filter(employee => employee.UserId === userId);\r\n                    setFilter(prev => ({ ...prev, EmpId: userId, Name: storage?.Name }));\r\n                    setIsDropdownDisabled(true);\r\n                    setDropdownPlaceholder(storage?.Name);\r\n                }\r\n\r\n                setEmployees(filteredEmployees);\r\n            }\r\n        }).catch(e => console.error(\"Error fetching employees:\", e));\r\n    }, [storage?.UserTypeId, storage?.UserId, storage?.Company_id, storage?.Name]);\r\n\r\n    const fetchAttendanceData = async (From, EmpId) => {\r\n        try {\r\n            const userTypeId = storage?.UserTypeId;\r\n            const [year, month] = From.split(\"-\");\r\n\r\n            const startDate = `${year}-${month}-01`;\r\n\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                setAttendanceData(response.data);\r\n            }\r\n        } catch (e) {\r\n\r\n            console.error(\"Error fetching attendance data:\", e);\r\n        }\r\n    };\r\n\r\n    const handleOverallDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n\r\n            if (response.success) {\r\n                const overallData = response.data;\r\n\r\n                const getWorkingDays = (fromDate, endDate) => {\r\n                    const allDays = [];\r\n                    const currentDate = new Date(fromDate);\r\n                    const endDateObj = new Date(endDate);\r\n\r\n                    while (currentDate <= endDateObj) {\r\n                        allDays.push(new Date(currentDate).toISOString().split(\"T\")[0]);\r\n                        currentDate.setDate(currentDate.getDate() + 1);\r\n                    }\r\n                    if (allDays.length === 0) {\r\n                        allDays.push(\"No days in this range\");\r\n                    }\r\n                    return {\r\n                        days: allDays,\r\n                        count: allDays.length,\r\n                    };\r\n                };\r\n\r\n                const { days: dateRange } = getWorkingDays(startDate, endDate);\r\n\r\n                const exportData = overallData.map(row => {\r\n                    const punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n\r\n                    const dailyAttendance = {};\r\n\r\n                    dateRange.forEach((date, index) => {\r\n                        if (Array.isArray(punchDetails)) {\r\n                            const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n                            const isSunday = new Date(date).getDay() === 0;\r\n\r\n                            if (isSunday) {\r\n                                dailyAttendance[`Day ${index + 1}`] = detail ? 'P' : 'H';\r\n                            } else {\r\n                                dailyAttendance[`Day ${index + 1}`] = detail ? detail.AttendanceStatus : 'A';\r\n                            }\r\n                        } else {\r\n                            dailyAttendance[`Day ${index + 1}`] = 'A';\r\n                        }\r\n                    });\r\n\r\n                    return {\r\n                        EmployeeName: row.Name,\r\n                        TotalPresent: row.TotalPresent || punchDetails.filter(detail => detail.AttendanceStatus === 'P').length,\r\n                        ...dailyAttendance,\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n                const headers = [\r\n                    \"EmployeeName\",\r\n                    \"TotalPresent\",\r\n                    ...dateRange.map((_, id) => `Day ${id + 1}`),\r\n                ];\r\n\r\n                XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, \"Overall Attendance Report\");\r\n\r\n                XLSX.writeFile(wb, \"Overall_Attendance_Report.xlsx\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading overall report:\", error);\r\n        }\r\n    };\r\n\r\n    const getDaysInMonth = (monthYear) => {\r\n        if (!monthYear) return 0;\r\n\r\n        const [year, month] = monthYear.split('-');\r\n\r\n        return new Date(year, month, 0).getDate();\r\n    };\r\n\r\n    useEffect(() => {\r\n        const { From, EmpId } = debouncedFilter;\r\n        if (From && (EmpId || EmpId === 0)) {\r\n            fetchAttendanceData(From, EmpId);\r\n            fetchDropdownEmployees();\r\n        }\r\n\r\n    }, [debouncedFilter]);\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleFromChange = (e) => {\r\n        const getDaysInMonth = (monthYear) => {\r\n            if (!monthYear) return 0;\r\n\r\n            const [year, month] = monthYear.split('-');\r\n\r\n            return new Date(year, month, 0).getDate();\r\n        };\r\n        const selectedMonth = e.target.value;\r\n        const [year, month] = selectedMonth.split(\"-\");\r\n        const startDate = `${year}-${month}-01`;\r\n        const dayCount = getDaysInMonth(`${year}-${month}`);\r\n        const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n        setFilter({\r\n            From: startDate,\r\n            To: endDate,\r\n            EmpId: filter.EmpId || 0,\r\n            Name: filter?.Name,\r\n        });\r\n    };\r\n\r\n    const handleDownload = () => {\r\n        const maxPunches = 6;\r\n\r\n        const exportData = attendanceData.map(row => {\r\n\r\n            const punchDetails = row.AttendanceDetails ? row.AttendanceDetails.split(',').map(detail => detail.trim()) : [];\r\n            const punchColumns = {};\r\n\r\n\r\n            let allPunchesEmpty = true;\r\n\r\n            for (let i = 0; i < maxPunches; i++) {\r\n                const punch = punchDetails[i] || '--';\r\n                punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n                if (punch !== '--') {\r\n                    allPunchesEmpty = false;\r\n                }\r\n            }\r\n\r\n            const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n\r\n            return {\r\n                Employee: row.username,\r\n                \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                \"Attendance Status\": attendanceStatus,\r\n                ...punchColumns,\r\n            };\r\n        });\r\n\r\n\r\n        const columnsOrder = [\r\n            \"Employee\",\r\n            \"Log Date\",\r\n            \"Attendance Status\",\r\n            ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`)\r\n        ];\r\n\r\n        const reorderedData = exportData.map(row =>\r\n            columnsOrder.reduce((acc, col) => {\r\n                acc[col] = row[col] || '--';\r\n                return acc;\r\n            }, {})\r\n        );\r\n        const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n        XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n    };\r\n\r\n    const formatAttendanceDate = (logDateTime) => {\r\n        if (!logDateTime) return '--';\r\n        const [date] = logDateTime.split('T');\r\n        return `${date} `;\r\n    };\r\n\r\n    const handleOverallWithPunch = () => {\r\n        const maxPunches = 6;\r\n        const filteredAttendanceData = attendanceData.filter((row) => {\r\n\r\n            const isUserSelected = selectedEmployees.some((user) => user.UserId === row.User_Mgt_Id);\r\n\r\n            return isUserSelected || selectedEmployees.some(user => user.UserId === 'all');\r\n        });\r\n\r\n        const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n            const username = row.username;\r\n            if (!acc[username]) {\r\n                acc[username] = [];\r\n            }\r\n            acc[username].push(row);\r\n            return acc;\r\n        }, {});\r\n\r\n        const wb = XLSX.utils.book_new();\r\n\r\n        const firstLogDate = filteredAttendanceData[0]?.LogDate;\r\n        if (!firstLogDate) {\r\n\r\n            return;\r\n        }\r\n\r\n        const date = new Date(firstLogDate);\r\n        const year = date.getFullYear();\r\n        const month = date.toLocaleString(\"default\", { month: \"long\" });\r\n\r\n\r\n        Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n            const exportData = userAttendance.map(row => {\r\n                const punchDetails = row.AttendanceDetails ? row.AttendanceDetails.split(',').map(detail => detail.trim()) : [];\r\n                const punchColumns = {};\r\n\r\n                let allPunchesEmpty = true;\r\n\r\n\r\n                for (let i = 0; i < maxPunches; i++) {\r\n                    const punch = punchDetails[i] || '--';\r\n                    punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n                    if (punch !== '--') {\r\n                        allPunchesEmpty = false;\r\n                    }\r\n                }\r\n\r\n                const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n                return {\r\n                    Employee: row.username,\r\n                    \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                    \"Attendance Status\": attendanceStatus,\r\n                    ...punchColumns,\r\n                };\r\n            });\r\n\r\n            const columnsOrder = [\r\n                \"Employee\",\r\n                \"Log Date\",\r\n                \"Attendance Status\",\r\n                ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n            ];\r\n\r\n\r\n            const reorderedData = exportData.map(row =>\r\n                columnsOrder.reduce((acc, col) => {\r\n                    acc[col] = row[col] || '--';\r\n                    return acc;\r\n                }, {})\r\n            );\r\n\r\n\r\n            const sheetName = `${username}`.slice(0, 31);\r\n\r\n\r\n            const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n            XLSX.utils.book_append_sheet(wb, ws, sheetName);\r\n        });\r\n\r\n\r\n        const fileName = `Attendance_Report_${month}_${year}.xlsx`;\r\n        XLSX.writeFile(wb, fileName);\r\n    };\r\n\r\n    const handleSummaryDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n\r\n            if (response.success) {\r\n                const overallData = response.data;\r\n\r\n                const getWorkingDays = (fromDate, endDate) => {\r\n                    const allDays = [];\r\n                    const currentDate = new Date(fromDate);\r\n                    const endDateObj = new Date(endDate);\r\n                    let sundayCount = 0;\r\n\r\n                    while (currentDate <= endDateObj) {\r\n                        const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n                        allDays.push(dateStr);\r\n\r\n                        // Count Sundays\r\n                        if (currentDate.getDay() === 0) {\r\n                            sundayCount++;\r\n                        }\r\n\r\n                        currentDate.setDate(currentDate.getDate() + 1);\r\n                    }\r\n\r\n                    if (allDays.length === 0) {\r\n                        allDays.push(\"No days in this range\");\r\n                    }\r\n\r\n                    return {\r\n                        days: allDays,\r\n                        sundayCount,\r\n                        totalDays: allDays.length,\r\n                    };\r\n                };\r\n\r\n                const { days: dateRange, sundayCount, totalDays } = getWorkingDays(startDate, endDate);\r\n\r\n                let totalWorkingDaysSummary = 0;\r\n                let totalLeaveDaysSummary = 0;\r\n\r\n                const summaryData = overallData.map(row => {\r\n                    const punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n                    let totalWorkingDays = 0;\r\n                    let totalLeaveDays = 0;\r\n\r\n                    dateRange.forEach((date) => {\r\n                        if (Array.isArray(punchDetails)) {\r\n                            const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n                            const isSunday = new Date(date).getDay() === 0;\r\n\r\n                            // Skip Sundays for leave day calculation\r\n                            if (isSunday) {\r\n                                return; // Do nothing for Sundays\r\n                            }\r\n\r\n                            if (detail) {\r\n                                if (detail.AttendanceStatus === 'P') {\r\n                                    totalWorkingDays++;\r\n                                } else if (detail.AttendanceStatus === 'A') {\r\n                                    totalLeaveDays++;\r\n                                }\r\n                            } else {\r\n                                totalLeaveDays++;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    totalWorkingDaysSummary += totalWorkingDays;\r\n                    totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n                    return {\r\n                        EmployeeName: row.Name,\r\n                        EmployeeID: row.EmployeeID,\r\n                        Month: `${month}-${year}`,\r\n                        Branch: row.Branch,\r\n                        NumberOfSundays: sundayCount,\r\n                        NumberOfDaysInMonth: totalDays,\r\n                        TotalWorkingDays: totalWorkingDays,\r\n                        TotalLeaveDays: totalLeaveDays,\r\n                    };\r\n                });\r\n\r\n                const exportData = summaryData.map(item => ({\r\n                    EmployeeName: item.EmployeeName,\r\n                    EmployeeID: item.EmployeeID,\r\n                    Month: item.Month,\r\n                    Branch: item.Branch,\r\n                    NumberOfSundays: item.NumberOfSundays,\r\n                    NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n                    TotalWorkingDays: item.TotalWorkingDays,\r\n                    TotalLeaveDays: item.TotalLeaveDays,\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n                const headers = [\r\n                    \"EmployeeName\",\r\n                    \"EmployeeID\",\r\n                    \"Month\",\r\n                    \"Branch\",\r\n                    \"NumberOfSundays\",\r\n                    \"NumberOfDaysInMonth\",\r\n                    \"TotalWorkingDays\",\r\n                    \"TotalLeaveDays\",\r\n                ];\r\n\r\n                XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n                // Write to file\r\n                XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading overall report:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"md\"\r\n                PaperProps={{\r\n                    style: { width: '500px', height: '500px' },\r\n                }}\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={[{ UserId: 'all', Name: 'ALL' }, ...dropdownEmployees]}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            if (value.some((selected) => selected.UserId === 'all')) {\r\n                                setSelectedEmployees(dropdownEmployees);\r\n                            } else {\r\n                                const uniqueValues = value.filter((val, index, self) =>\r\n                                    index === self.findIndex((t) => t.UserId === val.UserId)\r\n                                );\r\n                                setSelectedEmployees(uniqueValues);\r\n                            }\r\n                        }}\r\n                        value={selectedEmployees.some((user) => user.UserId === 'all')\r\n                            ? [{ UserId: 'all', Name: 'ALL' }]\r\n                            : selectedEmployees}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                    <Button\r\n                        type=\"button\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => setSelectedEmployees([])}\r\n                    >\r\n                        Clear\r\n                    </Button>\r\n                    <span>\r\n                        <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                        <Button onClick={handleOverallWithPunch}>Download</Button>\r\n\r\n                    </span>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Card>\r\n                <CardContent sx={{ minHeight: '50vh' }}>\r\n                    <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                        <h6 className=\"fa-18\">Employee Attendance</h6>\r\n\r\n                        {Number(userTypeId == 1) || Number(userTypeId) == 0 ? (\r\n                            <>\r\n                                <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                    <Button\r\n\r\n                                        onClick={handleDownload}\r\n                                        variant=\"contained\"\r\n\r\n                                        disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                                    >\r\n\r\n                                        Individual Report\r\n                                    </Button>\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            handleOverallDownload(filter?.From, filter?.To);\r\n\r\n                                        }}\r\n                                    >\r\n                                        Monthly Report\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            setAddEmployeeDialogOpen(true)\r\n                                            // handleOverallWithPunch(filter?.From, filter?.To);\r\n\r\n                                        }}\r\n                                    >\r\n                                        Cummulative Monthly Report\r\n                                    </Button>\r\n\r\n\r\n                                    <Button\r\n                                        onClick={\r\n                                            handleSummaryDownload\r\n                                        }\r\n                                    >\r\n                                        Summary\r\n                                    </Button>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <div> </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"px-2 row mb-4\">\r\n                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                            <label>Employee</label>\r\n                            <Select\r\n                                value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                onChange={(e) => setFilter({ ...filter, EmpId: e.value, Name: e.label })}\r\n                                options={[{ value: 0, label: `ALL` }, ...employees.map(obj => ({ value: obj?.UserId, label: obj?.Name }))]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={dropdownPlaceholder}\r\n                                isDisabled={isDropdownDisabled}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                            <label>From</label>\r\n                            <input\r\n                                type=\"month\"\r\n                                className=\"cus-inpt\"\r\n                                value={filter?.From?.slice(0, 7)}\r\n                                onChange={handleFromChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <FilterableTable\r\n                        dataArray={attendanceData}\r\n                        columns={[\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => row.username,\r\n                                ColumnHeader: 'Employee',\r\n                                isVisible: 1,\r\n                                width: '20%',\r\n                                CellProps: {\r\n                                    sx: {\r\n                                        padding: '10px',\r\n                                        textAlign: 'left',\r\n                                        fontWeight: 'bold',\r\n                                    },\r\n                                },\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => formatAttendanceDate(row.LogDate || '--'),\r\n                                ColumnHeader: 'Log Date',\r\n                                isVisible: 1,\r\n                                width: '20%',\r\n                                CellProps: {\r\n                                    sx: {\r\n                                        padding: '10px',\r\n                                        textAlign: 'center',\r\n                                        color: 'gray',\r\n                                    },\r\n                                },\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                ColumnHeader: 'Punch Details',\r\n                                isVisible: 1,\r\n                                width: '40%',\r\n                                CellProps: {\r\n                                    sx: {\r\n                                        display: 'flex',\r\n                                        flexWrap: 'wrap',\r\n                                        justifyContent: 'center',\r\n                                    },\r\n                                },\r\n                                Cell: ({ row }) => (\r\n                                    <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\r\n                                        {row.AttendanceDetails ? (\r\n                                            row.AttendanceDetails.split(',')\r\n                                                .map((detail) => detail.trim())\r\n                                                .filter((detail) => detail !== '')\r\n                                                .map((detail, index) => {\r\n\r\n                                                    const parts = detail.split(' (');\r\n                                                    const time = parts[0];\r\n\r\n                                                    return (\r\n                                                        <Chip\r\n                                                            key={index}\r\n                                                            label={time}\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"small\"\r\n                                                            sx={{ margin: '2px', color: 'green' }}\r\n                                                        />\r\n                                                    );\r\n                                                })\r\n                                        ) : (\r\n                                            <div>No Punch Details</div>\r\n                                        )}\r\n                                    </div>\r\n                                ),\r\n                            }\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        CellSize=\"small\"\r\n                        disablePagination={false}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FingerPrintAttendanceReport;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","FingerPrintAttendanceReport","loadingOn","loadingOff","_filter$From","loading","setLoading","storage","JSON","parse","localStorage","getItem","userTypeId","UserTypeId","parseData","attendanceData","setAttendanceData","dropdownEmployees","setDropdownEmployees","contextObj","useContext","MyContext","selectedEmployees","setSelectedEmployees","Add_Rights","getCurrentMonthYear","date","Date","year","getFullYear","month","getMonth","toString","padStart","initialValue","From","To","EmpId","Name","addEmployeeDialogOpen","setAddEmployeeDialogOpen","setFilter","employees","setEmployees","isDropdownDisabled","setIsDropdownDisabled","dropdownPlaceholder","setDropdownPlaceholder","debouncedFilter","setDebouncedFilter","useEffect","timer","setTimeout","clearTimeout","userId","UserId","companyId","Company_id","fetchLink","Authorization","then","success","filteredEmployees","prev","employee","catch","getDaysInMonth","monthYear","split","getDate","async","startDate","dayCount","endDate","response","fetchAttendanceData","fetchDropdownEmployees","toast","formatAttendanceDate","logDateTime","Dialog","maxWidth","PaperProps","DialogTitle","DialogContent","Autocomplete","multiple","options","getOptionLabel","option","isOptionEqualToValue","onChange","some","selected","uniqueValues","self","findIndex","t","user","renderInput","params","TextField","placeholder","DialogActions","Button","handleAddEmployeeClose","handleOverallWithPunch","_filteredAttendanceDa","filteredAttendanceData","User_Mgt_Id","groupedData","reduce","acc","username","push","wb","firstLogDate","LogDate","toLocaleString","userAttendance","exportData","punchDetails","AttendanceDetails","detail","trim","punchColumns","allPunchesEmpty","punch","attendanceStatus","Employee","columnsOrder","_","reorderedData","col","sheetName","ws","fileName","CardContent","minHeight","handleDownload","fromDate","overallData","getWorkingDays","allDays","currentDate","endDateObj","toISOString","setDate","days","dateRange","dailyAttendance","isArray","isSunday","getDay","AttendanceStatus","EmployeeName","TotalPresent","sheet_add_aoa","origin","handleOverallDownload","sundayCount","dateStr","totalDays","totalWorkingDaysSummary","totalLeaveDaysSummary","totalWorkingDays","totalLeaveDays","EmployeeID","Month","Branch","NumberOfSundays","NumberOfDaysInMonth","TotalWorkingDays","TotalLeaveDays","item","Select","label","obj","styles","isSearchable","isDisabled","selectedMonth","CellProps","padding","fontWeight","display","flexWrap","justifyContent","time","Chip","margin","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
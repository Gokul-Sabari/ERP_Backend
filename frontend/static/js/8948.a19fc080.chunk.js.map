{"version":3,"file":"static/js/8948.a19fc080.chunk.js","mappings":"wSASA,MAAMA,EAAe,CACjBC,SAAU,GACVC,WAAY,IAwShB,QApSA,SAASC,IACL,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,IAC1BG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAeC,IAAoBN,EAAAA,EAAAA,UAAS,KAC5CO,EAAoBC,IAAyBR,EAAAA,EAAAA,WAAS,IACtDS,EAAYC,IAAiBV,EAAAA,EAAAA,UAASN,IACtCiB,EAAWC,IAAgBZ,EAAAA,EAAAA,WAAS,IACpCa,EAAYC,IAAiBd,EAAAA,EAAAA,UAAS,IACvCe,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SACvCC,EAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,OACfC,EAAiB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,WAEnBC,GAAaC,EAAAA,EAAAA,cAAYC,UAC3B,IACI,MAAMC,QAAaC,EAAAA,EAAAA,GAAU,CACzBC,QAAU,kBAEVF,EAAKG,UACL1B,EAASuB,EAAKA,MACdrB,EAAiBqB,EAAKA,MAE9B,CAAE,MAAOI,GACLC,QAAQC,MAAMF,GACdG,EAAAA,GAAMD,MAAM,yBAChB,IACD,IAgGH,OA9FAE,EAAAA,EAAAA,YAAU,KACNX,GAAY,GACb,CAACA,EAAY1B,KAEhBqC,EAAAA,EAAAA,YAAU,KACN,GAA0B,KAAtBtB,EAAWuB,OACX9B,EAAiBH,OACd,CACH,MAAMkC,EAAWlC,EAAMmC,QAAOC,GAC1BA,EAAK3C,WAAW4C,cAAcC,SAAS5B,EAAW2B,gBAClDD,EAAK5C,SAAS+C,WAAWD,SAAS5B,KAEtCP,EAAiB+B,EACrB,IACD,CAACxB,EAAYhB,KAiFZ8C,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAMD,SAAA,EACjBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iFAAgFD,SAAA,CAAC,gBAE5FF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,4BAA2BD,SAAA,EACtCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,6BAA4BD,UACvCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,MAAME,MAAO,CAAEC,MAAO,SAAUJ,UAC3CF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kCAAiCD,SAAA,EAC5CE,EAAAA,EAAAA,KAACG,EAAAA,EAAM,KACPH,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CACNC,WAAS,EACTC,QAAQ,WACRC,YAAY,kBACZC,MAAO1C,EACP2C,SAAWzB,GAAMjB,EAAciB,EAAE0B,OAAOF,OACxCG,WAAY,CACRV,MAAO,CAAEW,OAAQ,mBAMrCZ,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACHd,UAAU,wBACVe,QAASA,IAAMrD,GAAsB,GAAMqC,SAC9C,wBAMTE,EAAAA,EAAAA,KAACe,EAAAA,GAAe,CACZC,UAAW1D,EACX2D,oBAAoB,EACpBC,cAAc,EACdC,iBAAe,EACfC,QAAS,EACLC,EAAAA,EAAAA,IAAU,aAAc,SAAU,cAClC,CACIC,WAAY,UACZC,aAAc,UACdC,UAAW,EACXC,cAAc,EACdC,KAAMC,IAAc,IAAb,IAAEC,GAAKD,EACV,OACI/B,EAAAA,EAAAA,MAAA,MAAIG,UAAU,QAAQE,MAAO,CAAE4B,SAAU,QAAS/B,SAAA,EAC9CE,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACPhB,QAASA,IA9EhC9C,KACbH,GAAa,GACbF,EAAc,CACVf,SAAUoB,EAAKpB,SACfC,WAAYmB,EAAKnB,WACjBkF,SAAU1D,GACZ,EAwEiD2D,CAAQJ,GACvBK,KAAK,QAAOnC,UAEZE,EAAAA,EAAAA,KAACkC,EAAAA,EAAI,CAACnC,UAAU,aAEpBC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACPhB,QAASA,KACL3D,GAAQ,GACRQ,EAAc,CAAEf,SAAUgF,EAAIhF,UAAW,EAE7CqF,KAAK,QACLE,MAAM,QAAOrC,UAEbE,EAAAA,EAAAA,KAACoC,EAAAA,EAAM,CAACrC,UAAU,eAErB,UAS7BH,EAAAA,EAAAA,MAACyC,EAAAA,EAAM,CACHnF,KAAMM,EACN8E,QAASA,KACL7E,GAAsB,GACtBE,EAAchB,EAAa,EAE/B,kBAAgB,sBAAqBmD,SAAA,EAErCE,EAAAA,EAAAA,KAACuC,EAAAA,EAAW,CAACC,GAAG,sBAAqB1C,SAAC,kBACtCE,EAAAA,EAAAA,KAACyC,EAAAA,EAAa,CAAA3C,UACVF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,gBACPE,EAAAA,EAAAA,KAAA,SACI0C,KAAK,OACLjC,SAAWkC,GACPhF,EAAc,IACPD,EACHb,WAAY8F,EAAMjC,OAAOF,QAGjCD,YAAY,mBACZC,MAAO9C,EAAWb,WAClBkD,UAAU,mBAItBH,EAAAA,EAAAA,MAACgD,EAAAA,EAAa,CAAA9C,SAAA,EACVE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QAASA,KAChBrD,GAAsB,GACtBE,EAAchB,EAAa,EAC7BmD,SAAC,YAGHE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QAlKNnC,UACjB,IAGI,MAAMC,QAAaC,EAAAA,EAAAA,GAAU,CACzBC,QAAU,gBACVgE,OAAQ,OACRC,SAAU,CACNlG,WAAYa,EAAWb,WACvBmG,WAAYC,OAAO5E,GACnB6E,WAAY3E,KAGhBK,EAAKG,SACLtB,GAAsB,GACtBT,GAAUmG,IAASA,IACnBhE,EAAAA,GAAMJ,QAAQ,0BACdpB,EAAchB,IAEdwC,EAAAA,GAAMD,MAAMN,EAAKwE,QAEzB,CAAE,MAAOpE,GACLC,QAAQC,MAAMF,GACdG,EAAAA,GAAMD,MAAM,uBAChB,GA0I8CiD,MAAM,UAASrC,SAAC,kBAO1DF,EAAAA,EAAAA,MAACyC,EAAAA,EAAM,CACHnF,KAAMU,EACN0E,QAASA,KACLzE,GAAa,GACbF,EAAchB,EAAa,EAE/B,kBAAgB,oBAAmBmD,SAAA,EAEnCE,EAAAA,EAAAA,KAACuC,EAAAA,EAAW,CAACC,GAAG,oBAAmB1C,SAAC,gBACpCE,EAAAA,EAAAA,KAACyC,EAAAA,EAAa,CAAA3C,UACVF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,gBACPE,EAAAA,EAAAA,KAAA,SACI0C,KAAK,OACLjC,SAAWkC,GACPhF,EAAc,IACPD,EACHb,WAAY8F,EAAMjC,OAAOF,QAGjCD,YAAY,mBACZC,MAAO9C,EAAWb,WAClBkD,UAAU,mBAItBH,EAAAA,EAAAA,MAACgD,EAAAA,EAAa,CAAA9C,SAAA,EACVE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QAASA,KAChBjD,GAAa,GACbF,EAAchB,EAAa,EAC7BmD,SAAC,YACHE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QAASA,IApKpBnC,OAAO/B,EAAUC,KAC7B,IACI,MAAM+B,QAAaC,EAAAA,EAAAA,GAAU,CACzBC,QAAU,gBACVgE,OAAQ,MACRC,SAAU,CAAEnG,WAAUC,gBAEtB+B,EAAKG,SACLI,EAAAA,GAAMJ,QAAQH,EAAKwE,SACnBpG,GAAUmG,IAASA,IACnBtF,GAAa,GACbF,EAAchB,IAEdwC,EAAAA,GAAMD,MAAMN,EAAKwE,QAEzB,CAAE,MAAOpE,GACLC,QAAQC,MAAMF,GACdG,EAAAA,GAAMD,MAAM,uBAChB,GAkJsCmE,CAAQ3F,EAAWd,SAAUc,EAAWb,YAAasF,MAAM,UAASrC,SAAC,kBAOvGF,EAAAA,EAAAA,MAACyC,EAAAA,EAAM,CACHnF,KAAMA,EACNoF,QAASA,IAAMnF,GAAQ,GACvB,kBAAgB,qBAAoB2C,SAAA,EAEpCE,EAAAA,EAAAA,KAACuC,EAAAA,EAAW,CAACC,GAAG,qBAAoB1C,SAAC,kBACrCE,EAAAA,EAAAA,KAACyC,EAAAA,EAAa,CAAA3C,UACVE,EAAAA,EAAAA,KAAA,KAAAF,SAAG,yCAEPF,EAAAA,EAAAA,MAACgD,EAAAA,EAAa,CAAA9C,SAAA,EACVE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QAASA,IAAM3D,GAAQ,GAAO2C,SAAC,YAC1CE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAAC/B,QA/ONnC,UACjB,IACI,MAAMC,QAAaC,EAAAA,EAAAA,GAAU,CACzBC,QAAU,gBACVgE,OAAQ,SACRC,SAAU,CAAEnG,SAAUc,EAAWd,YAEjCgC,EAAKG,SACL/B,GAAUmG,IAASA,IACnBhG,GAAQ,GACRgC,EAAAA,GAAMJ,QAAQ,gCAEdI,EAAAA,GAAMD,MAAM,2BAA6BN,EAAKwE,QAEtD,CAAE,MAAOpE,GAELC,QAAQC,MAAMF,GACdG,EAAAA,GAAMD,MAAM,uBAChB,GA6N8CoE,WAAS,EAACnB,MAAM,QAAOrC,SAAC,mBAO9E,C,6DC7SA,SAAeyD,EAAAA,EAAAA,IAA4BvD,EAAAA,EAAAA,KAAK,OAAQ,CACtDwD,EAAG,6EACD,S,4DCFJ,SAAeD,EAAAA,EAAAA,IAA4BvD,EAAAA,EAAAA,KAAK,OAAQ,CACtDwD,EAAG,uIACD,O,6DCFJ,SAAeD,EAAAA,EAAAA,IAA4BvD,EAAAA,EAAAA,KAAK,OAAQ,CACtDwD,EAAG,sOACD,S,iOCJG,SAASC,EAAyBC,GACvC,OAAOC,EAAAA,EAAAA,IAAqB,eAAgBD,EAC9C,EACyBE,EAAAA,EAAAA,GAAuB,eAAgB,CAAC,S,eCDjE,MAAMC,EAAY,CAAC,eAAgB,YAAa,WAAY,YAAa,QAAS,eAAgB,WAAY,QAAS,sBAAuB,YAAa,aAAc,KAAM,kBAAmB,aAAc,aAAc,WAAY,QAAS,UAAW,UAAW,YAAa,OAAQ,SAAU,WAAY,UAAW,cAAe,WAAY,OAAQ,SAAU,cAAe,OAAQ,QAAS,WAmBtYC,EAAmB,CACvBC,SAAUC,EAAAA,EACVC,OAAQC,EAAAA,EACRC,SAAUC,EAAAA,GAWNC,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAa,CACxCC,KAAM,eACNd,KAAM,OACNe,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOC,MAHzBN,CAInB,CAAC,GA8UJ,EA5S+BO,EAAAA,YAAiB,SAAmBC,EAASC,GAC1E,MAAML,GAAQM,EAAAA,EAAAA,GAAgB,CAC5BN,MAAOI,EACPN,KAAM,kBAEF,aACFS,EAAY,UACZ3B,GAAY,EAAK,SACjBxD,EAAQ,UACRC,EAAS,MACToC,EAAQ,UAAS,aACjB+C,EAAY,SACZC,GAAW,EAAK,MAChBjG,GAAQ,EAAK,oBACbkG,EAAmB,UACnB/E,GAAY,EAAK,WACjBgF,EACA7C,GAAI8C,EAAU,gBACdC,EAAe,WACfC,EAAU,WACV7E,EAAU,SACV8E,EAAQ,MACRC,EAAK,QACLC,EAAO,QACPC,EAAO,UACPC,GAAY,EAAK,KACjBrB,EAAI,OACJsB,EAAM,SACNrF,EAAQ,QACRsF,EAAO,YACPxF,EAAW,SACXyF,GAAW,EAAK,KAChBC,EAAI,OACJC,GAAS,EAAK,YACdC,EAAW,KACXzD,EAAI,MACJlC,EAAK,QACLF,EAAU,YACRoE,EACJ0B,GAAQC,EAAAA,EAAAA,GAA8B3B,EAAOb,GACzCyC,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAG7B,EAAO,CACrCpB,YACAnB,QACAgD,WACAjG,QACAmB,YACAwF,YACAG,WACAE,SACA5F,YAEIkG,EAlGkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZ7B,KAAM,CAAC,SAEoBnB,EAA0B+C,EAAQ,EA2F/CE,CAAkBJ,GAMlC,MAAMK,EAAY,CAAC,EACH,aAAZrG,IACEiF,GAAqD,qBAA3BA,EAAgBqB,SAC5CD,EAAUE,QAAUtB,EAAgBqB,QAEtCD,EAAUjB,MAAQA,GAEhBQ,IAEGC,GAAgBA,EAAYW,SAC/BH,EAAUnE,QAAKuE,GAEjBJ,EAAU,yBAAsBI,GAElC,MAAMvE,GAAKwE,EAAAA,EAAAA,GAAM1B,GACX2B,GAAe5B,GAAc7C,EAAM,GAAEA,qBAAmBuE,EACxDG,GAAexB,GAASlD,EAAM,GAAEA,eAAauE,EAC7CI,GAAiBrD,EAAiBxD,GAClC8G,IAA4BpH,EAAAA,EAAAA,KAAKmH,IAAgBZ,EAAAA,EAAAA,GAAS,CAC9D,mBAAoBU,GACpBhC,aAAcA,EACd3B,UAAWA,EACX4B,aAAcA,EACd7E,UAAWA,EACXwF,UAAWA,EACXrB,KAAMA,EACNyB,KAAMA,EACNN,QAASA,EACTC,QAASA,EACTlD,KAAMA,EACNlC,MAAOA,EACPgC,GAAIA,EACJiD,SAAUA,EACVK,OAAQA,EACRrF,SAAUA,EACVsF,QAASA,EACTxF,YAAaA,EACbiF,WAAYA,GACXmB,EAAWhG,IACd,OAAoBf,EAAAA,EAAAA,MAAMyE,GAAekC,EAAAA,EAAAA,GAAS,CAChDxG,WAAWsH,EAAAA,EAAAA,GAAKb,EAAQ5B,KAAM7E,GAC9BoF,SAAUA,EACVjG,MAAOA,EACPmB,UAAWA,EACX0E,IAAKA,EACLiB,SAAUA,EACV7D,MAAOA,EACP7B,QAASA,EACTgG,WAAYA,GACXF,EAAO,CACRtG,SAAU,CAAU,MAAT4F,GAA2B,KAAVA,IAA6B1F,EAAAA,EAAAA,KAAKsH,EAAAA,GAAYf,EAAAA,EAAAA,GAAS,CACjFgB,QAAS/E,EACTA,GAAI0E,IACH3B,EAAiB,CAClBzF,SAAU4F,KACPQ,GAAsBlG,EAAAA,EAAAA,KAAKwH,EAAAA,GAAQjB,EAAAA,EAAAA,GAAS,CAC/C,mBAAoBU,GACpBzE,GAAIA,EACJiF,QAASP,GACT1G,MAAOA,EACPkH,MAAON,IACNjB,EAAa,CACdrG,SAAUA,KACNsH,GAAc/B,IAA2BrF,EAAAA,EAAAA,KAAK2H,EAAAA,GAAgBpB,EAAAA,EAAAA,GAAS,CAC3E/D,GAAIyE,IACH7B,EAAqB,CACtBtF,SAAUuF,QAGhB,G,uECzMA,MAAMxB,EAAY,CAAC,KAAM,YAOlB,SAAS+D,EAAcC,GAU3B,IAV4B,QAC7BC,EAAO,SACP3C,EAAQ,KACR4C,EAAI,OACJrH,EAAM,IACNsH,EAAG,KACHC,EAAI,QACJnH,EAAO,SACPoH,EAAW,EAAC,KACZxF,GACDmF,EACMC,IAEDA,EADU,MAARC,GAA0B,MAAVrH,GAAyB,MAAPsH,EAC1B,IAEA,UAGd,MAAMG,EAAO,CACXL,WAEF,GAAgB,WAAZA,EACF,MAAO,CAAC,CACNpF,KAAMA,GAAQ,SACdyC,YACCgD,GAEL,MAAMC,EAAczF,KACdwC,GAAwB,MAAZ2C,GA/Bb,SAAuBC,GAC5B,OAAQA,GAAwB,MAAhBA,EAAK1I,MACvB,CA6BuCgJ,CAAcN,KAC/CpF,EAAM2F,iBAEJnD,EACFxC,EAAM4F,kBAGG,MAAXzH,GAA2BA,EAAQ6B,EAAM,EAe3C,MAPgB,MAAZmF,IAEFC,IAASA,EAAO,KACZ5C,IACF4C,OAAOhB,IAGJ,CAAC,CACNkB,KAAc,MAARA,EAAeA,EAAO,SAG5B9C,cAAU4B,EACVmB,SAAU/C,OAAW4B,EAAYmB,EACjCH,OACArH,OAAoB,MAAZoH,EAAkBpH,OAASqG,EACnC,gBAAkB5B,QAAW4B,EAC7BiB,IAAiB,MAAZF,EAAkBE,OAAMjB,EAC7BjG,QAASsH,EACTI,UAxBoB7F,IACF,MAAdA,EAAM8F,MACR9F,EAAM2F,iBACNF,EAAYzF,GACd,GAqBCwF,EACL,CACA,MAAMtH,EAAsBgE,EAAAA,YAAiB,CAAClD,EAAMoD,KAClD,IACI2D,GAAIC,EAAM,SACVxD,GACExD,EACJ+C,EA3EJ,SAAuCkE,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAAG,IAA2DH,EAAKK,EAA5DpI,EAAS,CAAC,EAAOqI,EAAaC,OAAOC,KAAKL,GAAqB,IAAKE,EAAI,EAAGA,EAAIC,EAAWG,OAAQJ,IAAOL,EAAMM,EAAWD,GAAQD,EAASM,QAAQV,IAAQ,IAAa/H,EAAO+H,GAAOG,EAAOH,IAAQ,OAAO/H,CAAQ,CA2EtS2F,CAA8B1E,EAAMkC,GAC9C,MAAOuF,GACLtB,QAASuB,IACNzB,EAAeoB,OAAOM,OAAO,CAChCxB,QAASa,EACTxD,YACCT,IACH,OAAoB1E,EAAAA,EAAAA,KAAKqJ,EAAWL,OAAOM,OAAO,CAAC,EAAG5E,EAAO0E,EAAa,CACxErE,IAAKA,IACJ,IAELlE,EAAO0I,YAAc,SACrB,S,qGCjFA,MAAM1I,EAAsBgE,EAAAA,YAAiB,CAAAlD,EAS1CoD,KAAQ,IATmC,GAC5C2D,EAAE,SACFc,EAAQ,QACRlJ,EAAU,UAAS,KACnB2B,EAAI,OACJwH,GAAS,EAAK,SACdtE,GAAW,EAAK,UAChBpF,KACG2E,GACJ/C,EACC,MAAM+H,GAASC,EAAAA,EAAAA,IAAmBH,EAAU,QACrCJ,GAAa,QAClBtB,KACGF,EAAAA,EAAAA,IAAe,CAClBE,QAASY,EACTvD,cACGT,IAEC2E,EAAYvB,EAClB,OAAoB9H,EAAAA,EAAAA,KAAKqJ,EAAW,IAC/BD,KACA1E,EACHK,IAAKA,EACLI,SAAUA,EACVpF,UAAW6J,IAAW7J,EAAW2J,EAAQD,GAAU,SAAUnJ,GAAY,GAAEoJ,KAAUpJ,IAAW2B,GAAS,GAAEyH,KAAUzH,IAAQyC,EAAMqD,MAAQ5C,GAAY,aACvJ,IAEJtE,EAAO0I,YAAc,SACrB,S","sources":["Pages/Masters/Brand.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["import React, { useState, useEffect, Fragment, useCallback } from \"react\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, IconButton, TextField } from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit, Search } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst initialState = {\r\n    Brand_Id: \"\",\r\n    Brand_Name: \"\",\r\n\r\n};\r\n\r\nfunction Brand() {\r\n    const [reload, setReload] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [brand, setBrand] = useState([]);\r\n    const [filteredBrand, setFilteredBrand] = useState([]);\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editBrand, setEditBrand] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const userId = user?.UserId;\r\n    const company_Id = user?.Company_id\r\n\r\n    const fetchBrand = useCallback(async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/brand`\r\n            });\r\n            if (data.success) {\r\n                setBrand(data.data);\r\n                setFilteredBrand(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch states\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchBrand();\r\n    }, [fetchBrand, reload]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() === \"\") {\r\n            setFilteredBrand(brand);\r\n        } else {\r\n            const filtered = brand.filter(item =>\r\n                item.Brand_Name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                item.Brand_Id.toString().includes(searchTerm)\r\n            );\r\n            setFilteredBrand(filtered);\r\n        }\r\n    }, [searchTerm, Brand]);\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/brand`,\r\n                method: \"DELETE\",\r\n                bodyData: { Brand_Id: inputValue.Brand_Id },\r\n            });\r\n            if (data.success) {\r\n                setReload(prev => !prev);\r\n                setOpen(false);\r\n                toast.success(\"Brand deleted successfully!\");\r\n            } else {\r\n                toast.error(\"Failed to delete Brand: \" + data.message);\r\n            }\r\n        } catch (e) {\r\n\r\n            console.error(e);\r\n            toast.error(\"Error deleting Brand\");\r\n        }\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        try {\r\n\r\n\r\n            const data = await fetchLink({\r\n                address: `masters/brand`,\r\n                method: \"POST\",\r\n                bodyData: {\r\n                    Brand_Name: inputValue.Brand_Name,\r\n                    Created_By: Number(userId),\r\n                    Company_Id: company_Id\r\n                },\r\n            });\r\n            if (data.success) {\r\n                setIsCreateDialogOpen(false);\r\n                setReload(prev => !prev);\r\n                toast.success('Data Added Succesfully');\r\n                setInputValue(initialState);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Error creating Brand\");\r\n        }\r\n    };\r\n\r\n    const editRow = (user) => {\r\n        setEditBrand(true);\r\n        setInputValue({\r\n            Brand_Id: user.Brand_Id,\r\n            Brand_Name: user.Brand_Name,\r\n            Alter_By: userId\r\n        });\r\n    };\r\n\r\n    const editFun = async (Brand_Id, Brand_Name) => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/brand`,\r\n                method: \"PUT\",\r\n                bodyData: { Brand_Id, Brand_Name }\r\n            });\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setReload(prev => !prev);\r\n                setEditBrand(false);\r\n                setInputValue(initialState);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Error updating state\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    BRAND MASTER\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <div className=\"p-2\" style={{ width: \"300px\" }}>\r\n                                <div className=\"d-flex align-items-center gap-2\">\r\n                                    <Search />\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        placeholder=\"Search Brand...\"\r\n                                        value={searchTerm}\r\n                                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                                        InputProps={{\r\n                                            style: { height: \"40px\" },\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Button\r\n                            className=\"rounded-1 btn-primary\"\r\n                            onClick={() => setIsCreateDialogOpen(true)}\r\n                        >\r\n                            Create Brand\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <FilterableTable\r\n                    dataArray={filteredBrand}\r\n                    EnableSerialNumber={true}\r\n                    isExpendable={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n                        createCol('Brand_Name', 'string', 'Brand Name'),\r\n                        {\r\n                            Field_Name: \"Actions\",\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                return (\r\n                                    <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                        <IconButton\r\n                                            onClick={() => editRow(row)}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Edit className=\"fa-in\" />\r\n                                        </IconButton>\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                setOpen(true);\r\n                                                setInputValue({ Brand_Id: row.Brand_Id });\r\n                                            }}\r\n                                            size=\"small\"\r\n                                            color='error'\r\n                                        >\r\n                                            <Delete className=\"fa-in \" />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                );\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            {/* Create Dialog */}\r\n            <Dialog\r\n                open={isCreateDialogOpen}\r\n                onClose={() => {\r\n                    setIsCreateDialogOpen(false);\r\n                    setInputValue(initialState);\r\n                }}\r\n                aria-labelledby=\"create-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"create-dialog-title\">CREATE BRAND</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>BRAND NAME</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={(event) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Brand_Name: event.target.value,\r\n                                })\r\n                            }\r\n                            placeholder=\"Enter brand name\"\r\n                            value={inputValue.Brand_Name}\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => {\r\n                        setIsCreateDialogOpen(false);\r\n                        setInputValue(initialState);\r\n                    }}>\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton onClick={handleCreate} color=\"success\">\r\n                        CREATE\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Edit Dialog */}\r\n            <Dialog\r\n                open={editBrand}\r\n                onClose={() => {\r\n                    setEditBrand(false);\r\n                    setInputValue(initialState);\r\n                }}\r\n                aria-labelledby=\"edit-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"edit-dialog-title\">EDIT BRAND</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>BRAND NAME</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={(event) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Brand_Name: event.target.value,\r\n                                })\r\n                            }\r\n                            placeholder=\"Enter state name\"\r\n                            value={inputValue.Brand_Name}\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => {\r\n                        setEditBrand(false);\r\n                        setInputValue(initialState);\r\n                    }}>Cancel</MuiButton>\r\n                    <MuiButton onClick={() => editFun(inputValue.Brand_Id, inputValue.Brand_Name)} color=\"success\">\r\n                        Update\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Delete Confirmation Dialog */}\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    <b>Do you want to delete this Brand?</b>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => setOpen(false)}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus color=\"error\">\r\n                        Delete\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Brand;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"maxRows\", \"minRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport refType from '@mui/utils/refType';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport { getTextFieldUtilityClass } from './textFieldClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n      autoComplete,\n      autoFocus = false,\n      children,\n      className,\n      color = 'primary',\n      defaultValue,\n      disabled = false,\n      error = false,\n      FormHelperTextProps,\n      fullWidth = false,\n      helperText,\n      id: idOverride,\n      InputLabelProps,\n      inputProps,\n      InputProps,\n      inputRef,\n      label,\n      maxRows,\n      minRows,\n      multiline = false,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      required = false,\n      rows,\n      select = false,\n      SelectProps,\n      type,\n      value,\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const InputMore = {};\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n    InputMore.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = /*#__PURE__*/_jsx(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/_jsxs(TextFieldRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState\n  }, other, {\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabel, _extends({\n      htmlFor: id,\n      id: inputLabelId\n    }, InputLabelProps, {\n      children: label\n    })), select ? /*#__PURE__*/_jsx(Select, _extends({\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement\n    }, SelectProps, {\n      children: children\n    })) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperText, _extends({\n      id: helperTextId\n    }, FormHelperTextProps, {\n      children: helperText\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["initialState","Brand_Id","Brand_Name","Brand","reload","setReload","useState","open","setOpen","brand","setBrand","filteredBrand","setFilteredBrand","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editBrand","setEditBrand","searchTerm","setSearchTerm","user","JSON","parse","localStorage","getItem","userId","UserId","company_Id","Company_id","fetchBrand","useCallback","async","data","fetchLink","address","success","e","console","error","toast","useEffect","trim","filtered","filter","item","toLowerCase","includes","toString","_jsxs","Fragment","children","className","_jsx","style","width","Search","TextField","fullWidth","variant","placeholder","value","onChange","target","InputProps","height","Button","onClick","FilterableTable","dataArray","EnableSerialNumber","isExpendable","maxHeightOption","columns","createCol","Field_Name","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","minWidth","IconButton","Alter_By","editRow","size","Edit","color","Delete","Dialog","onClose","DialogTitle","id","DialogContent","type","event","DialogActions","MuiButton","method","bodyData","Created_By","Number","Company_Id","prev","message","editFun","autoFocus","createSvgIcon","d","getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","styled","FormControl","name","overridesResolver","props","styles","root","React","inProps","ref","useDefaultProps","autoComplete","defaultValue","disabled","FormHelperTextProps","helperText","idOverride","InputLabelProps","inputProps","inputRef","label","maxRows","minRows","multiline","onBlur","onFocus","required","rows","select","SelectProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","InputMore","shrink","notched","native","undefined","useId","helperTextId","inputLabelId","InputComponent","InputElement","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText","useButtonProps","_ref2","tagName","href","rel","role","tabIndex","meta","handleClick","isTrivialHref","preventDefault","stopPropagation","onKeyDown","key","as","asProp","source","excluded","i","sourceKeys","Object","keys","length","indexOf","buttonProps","Component","assign","displayName","bsPrefix","active","prefix","useBootstrapPrefix","classNames"],"sourceRoot":""}
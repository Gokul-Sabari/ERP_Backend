{"version":3,"file":"static/js/7480.2a56c561.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Dashboard/chartComp.jsx","Pages/Reports/barChartComp.jsx","Pages/Reports/chartReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useEffect, useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst PieChartComp = ({ TasksArray }) => {\r\n    const [chartData, setChartData] = useState(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n    const [totalTime, setTotalTime] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (TasksArray.length > 0) {\r\n            const totalDuration = TasksArray.reduce((acc, task) => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                return acc + (end - start);\r\n            }, 0);\r\n\r\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\r\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\r\n            const totalTime = lastTaskEnd - firstTaskStart;\r\n            const freeTime = totalTime - totalDuration;\r\n\r\n            const totalSeconds = Math.floor(totalTime / 1000);\r\n            const hours = Math.floor(totalSeconds / 3600);\r\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n            const seconds = totalSeconds % 60;\r\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\r\n\r\n            const taskData = TasksArray.map(task => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                const duration = end - start;\r\n                return {\r\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\r\n                    duration,\r\n                    backgroundColor: getRandomColor()\r\n                };\r\n            });\r\n\r\n            const chartData = {\r\n                labels: taskData.map(task => task.label),\r\n                datasets: [{\r\n                    data: taskData.map(task => task.duration),\r\n                    backgroundColor: taskData.map(task => task.backgroundColor),\r\n                    borderColor: 'rgba(255, 255, 255, 1)',\r\n                    borderWidth: 1\r\n                }]\r\n            };\r\n\r\n            chartData.labels.push('Free Time');\r\n            chartData.datasets[0].data.push(freeTime);\r\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\r\n\r\n            setChartData(chartData);\r\n        }\r\n    }, [TasksArray]);\r\n\r\n    useEffect(() => {\r\n        if (chartData) {\r\n            if (chartInstance) {\r\n                chartInstance.destroy();\r\n            }\r\n\r\n            const ctx = document.getElementById('empWokHours');\r\n            const newChartInstance = new Chart(ctx, {\r\n                type: 'pie',\r\n                data: chartData,\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    // const label = context.label || '';\r\n                                    const value = context.parsed || 0;\r\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                    const percentage = Math.round((value / total) * 100);\r\n                                    const minutes = Math.round(value / (1000 * 60));\r\n                                    return `${minutes} minutes (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        },\r\n                        datalabels: {\r\n                            color: '#fff',\r\n                            formatter: (value, context) => {\r\n                                const label = context.chart.data.labels[context.dataIndex];\r\n                                const value1 = context.parsed || 0;\r\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                const percentage = Math.round((value1 / total) * 100);\r\n                                return `${label}: ${value} (${percentage}%)`;\r\n                            }\r\n                        }                        \r\n                    }\r\n                }\r\n            });\r\n\r\n            setChartInstance(newChartInstance);\r\n        }\r\n    }, [chartData]);\r\n\r\n    // for Dynamic background colors\r\n    const getRandomColor = () => {\r\n        const letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    return TasksArray.length > 0 ? (\r\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\r\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\r\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\r\n        </div>\r\n    ) : (\r\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\r\n    )\r\n};\r\n\r\nexport default PieChartComp;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nconst TaskActivityChart = ({ startDate, endDate, taskActivity }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const labels = taskActivity.map(task => new Date(task.Work_Dt));\r\n      const data = taskActivity.map(task => task.Worked_Minutes);\r\n\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n\r\n      chartInstance.current = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            label: 'Worked Minutes',\r\n            data: data,\r\n            borderColor: 'blue',\r\n            backgroundColor: 'transparent',\r\n            pointBackgroundColor: 'blue',\r\n            pointRadius: 5,\r\n            pointHoverRadius: 7,\r\n          }]\r\n        },\r\n        options: {\r\n          scales: {\r\n            x: {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'day',\r\n                min: startDate,\r\n                max: endDate,\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Date'\r\n              }\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Worked Minutes'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  let label = context.dataset.label || '';\r\n                  if (label) {\r\n                    label += ': ';\r\n                  }\r\n                  if (context.parsed.y !== null) {\r\n                    label += context.parsed.y + ' minutes';\r\n                  }\r\n                  const task = taskActivity[context.dataIndex];\r\n                  if (task) {\r\n                    label += ` (${task.Employee_Name}, Time: ${task.Start_Time}-${task.End_Time})`;\r\n                  }\r\n                  return label;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, [startDate, endDate, taskActivity]);\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default TaskActivityChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport PieChartComp from \"../Dashboard/chartComp\";\r\nimport LineChartComp from \"./barChartComp\";\r\nimport { Card, CardContent } from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent'\r\n\r\nconst ChartsReport = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const [empData, setEmpData] = useState([]);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [usersDropDown, setUsersDropdown] = useState([]);\r\n    const [filteredUser, setFilteredUser] = useState([]);\r\n    const [taskDropDown, setTaskDropDown] = useState([]);\r\n\r\n    const initialValueFilter = {\r\n        Emp_Id: parseData?.UserId,\r\n        date: new Date().toISOString().split('T')[0],\r\n        EmpGet: parseData?.Name,\r\n    }\r\n\r\n    const initialValueBarChart = {\r\n        Emp_Id: parseData?.UserId,\r\n        From: new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0],\r\n        To: new Date().toISOString().split('T')[0],\r\n        EmpGet: parseData?.Name,\r\n        Task_Id: '',\r\n        TaskGet: ''\r\n    }\r\n\r\n    const [filters, setFileters] = useState(initialValueFilter);\r\n    const [barChartFilter, setBarChartFilter] = useState(initialValueBarChart)\r\n\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work?Emp_Id=${filters.Emp_Id}&from=${filters.date}&to=${filters.date}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setEmpData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [filters?.Emp_Id, filters?.date])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/assignEmployee/user/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsersDropdown(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/assignEmployee/task/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskDropDown(data.data)\r\n            }\r\n            if (data?.data?.length > 0) {\r\n                setBarChartFilter(pre => ({ ...pre, Task_Id: data.data[0].Task_Id, TaskGet: data.data[0].Task_Name }))\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work/barChart?Emp_Id=${barChartFilter?.Emp_Id}&From=${barChartFilter?.From}&To=${barChartFilter?.To}&Task_Id=${barChartFilter?.Task_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [barChartFilter.Emp_Id, barChartFilter.From, barChartFilter.To, barChartFilter.Task_Id]);\r\n\r\n    useEffect(() => {\r\n        setFilteredUser([])\r\n        fetchLink({\r\n            address: `taskManagement/task/workedUsers/dropDown?Task_Id=${barChartFilter.Task_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setFilteredUser(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [barChartFilter?.Task_Id])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <h5>User Work Report</h5>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\r\n                                onChange={(e) => setFileters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\r\n                                options={[\r\n                                    { value: '', label: 'All Employee' }, \r\n                                    ...usersDropDown.map(obj => ({ value: obj.UserId, label: obj.Name }))\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Employee Name\"} />\r\n                        </div>\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.date}\r\n                                onChange={e => setFileters({ ...filters, date: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {/* <PieChartEmpData TasksArray={empData} /> */}\r\n                    {/* <MuiPieChart TasksArray={empData} /> */}\r\n                    <PieChartComp TasksArray={empData} />\r\n                    {/* <ReChartPieChart data={empData} /> */}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"mt-3\">\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <h5>Task Activity Report</h5>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: barChartFilter?.Task_Id, label: barChartFilter?.TaskGet }}\r\n                                onChange={(e) => setBarChartFilter({ ...barChartFilter, Task_Id: e.value, TaskGet: e.label })}\r\n                                options={[...taskDropDown.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Task Name\"} \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: barChartFilter?.Emp_Id, label: barChartFilter?.EmpGet }}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, Emp_Id: e.value, EmpGet: e.label })}\r\n                                options={[{ value: '', label: 'All Employee' }, ...filteredUser.map(obj => ({ value: obj?.Emp_Id, label: obj?.Name }))]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Employee Name\"} \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={barChartFilter.From}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, From: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={barChartFilter.To}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, To: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <LineChartComp taskActivity={taskData} startDate={barChartFilter.From} endDate={barChartFilter.To} />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChartsReport;\r\n"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","TasksArray","chartData","setChartData","useState","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","length","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","String","padStart","taskData","map","duration","label","Task_Name","getRandomColor","labels","datasets","data","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","type","options","responsive","plugins","tooltip","callbacks","context","value","parsed","total","dataset","curr","percentage","round","datalabels","formatter","chart","dataIndex","value1","i","random","_jsxs","className","maxHeight","children","_jsx","height","startDate","endDate","taskActivity","chartRef","useRef","current","getContext","Work_Dt","Worked_Minutes","pointBackgroundColor","pointRadius","pointHoverRadius","scales","x","time","unit","min","max","title","display","text","y","Employee_Name","ref","ChartsReport","localData","localStorage","getItem","parseData","JSON","parse","empData","setEmpData","setTaskData","usersDropDown","setUsersDropdown","filteredUser","setFilteredUser","taskDropDown","setTaskDropDown","initialValueFilter","Emp_Id","UserId","date","EmpGet","Name","initialValueBarChart","From","setDate","getDate","To","Task_Id","TaskGet","filters","setFileters","barChartFilter","setBarChartFilter","fetchLink","then","success","catch","e","console","error","Company_id","_data$data","pre","_Fragment","Card","CardContent","minHeight","Select","onChange","obj","styles","isSearchable","placeholder","target","PieChartComp","LineChartComp"],"sourceRoot":""}
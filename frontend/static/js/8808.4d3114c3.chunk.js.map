{"version":3,"file":"static/js/8808.4d3114c3.chunk.js","mappings":"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","sources":["Pages/Inventry/liveStockReport.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { getPreviousDate, groupData, calcTotal, ISOString } from \"../../Components/functions\";\r\nimport FilterableTable from '../../Components/filterableTable2'\r\nimport { Card, CardContent, Autocomplete, TextField, Checkbox, Tooltip, IconButton, Button, Dialog, DialogContent, DialogActions, Tab, Box } from \"@mui/material\";\r\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff } from \"@mui/icons-material\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\n\r\nconst LiveStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [groupedData, setGroupedData] = useState([]);\r\n    const [apiFilters, setAPIFilters] = useState({\r\n        Fromdata: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        view: 'Grouped'\r\n    });\r\n    const [filters, setFilters] = useState({});\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filteredData, setFilteredData] = useState(reportData);\r\n\r\n    const columns = [\r\n        { Field_Name: \"Stock_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Grade_Item_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Group_Name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"stock_item_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"godown_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        ...(apiFilters.view === 'List' ? [\r\n            { Field_Name: \"Act_Bags\", Fied_Data: \"number\", ColumnHeader: 'Bags', isVisible: 1 },\r\n            { Field_Name: \"Bal_Act_Qty\", Fied_Data: \"number\", ColumnHeader: 'Balance Quantity', isVisible: 1 }\r\n        ] : [])\r\n    ];\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    useEffect(() => setFilters({}), [apiFilters.view])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of columns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(reportData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: `reports/liveStockReport?Fromdata=${apiFilters.Fromdata}&Todate=${apiFilters.Todate}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(data.data);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }, [apiFilters.Fromdata, apiFilters.Todate])\r\n\r\n    useEffect(() => {\r\n        const runLoading = async () => {\r\n            try {\r\n                const dataToUse = (Object.keys(filters).length > 0) ? filteredData : reportData;\r\n\r\n                if (loadingOn) {\r\n                    await loadingOn();\r\n                }\r\n\r\n                const grouped_Stock_Group = groupData(dataToUse, 'Stock_Group');\r\n                const aggregatedStockGroup = grouped_Stock_Group?.sort((a, b) => String(a.Stock_Group).localeCompare(b.Stock_Group ?? '')).map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    BagsTotal: calcTotal(stockGroup.groupedData, 'Act_Bags'),\r\n                    BalQtyTotal: calcTotal(stockGroup.groupedData, 'Bal_Act_Qty'),\r\n                }));\r\n\r\n                const Grade_Item_Group = aggregatedStockGroup?.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: groupData(stockGroup?.groupedData, 'Grade_Item_Group')\r\n                }));\r\n                const aggregatedGradeItemGroup = Grade_Item_Group.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        BagsTotal: calcTotal(gradeItemGroup.groupedData, 'Act_Bags'),\r\n                        BalQtyTotal: calcTotal(gradeItemGroup.groupedData, 'Bal_Act_Qty'),\r\n                    }))\r\n                }));\r\n\r\n                const GroupName = aggregatedGradeItemGroup.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: groupData(gradeItemGroup?.groupedData, 'Group_Name')\r\n                    }))\r\n                }));\r\n                const aggregatedGroupName = GroupName.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: gradeItemGroup?.groupedData?.map(grouopName => ({\r\n                            ...grouopName,\r\n                            BagsTotal: calcTotal(grouopName.groupedData, 'Act_Bags'),\r\n                            BalQtyTotal: calcTotal(grouopName.groupedData, 'Bal_Act_Qty'),\r\n                        }))\r\n                    }))\r\n                }));\r\n\r\n                // setGroupedData(aggregatedGroupName);\r\n                setTimeout(() => setGroupedData(aggregatedGroupName), 500);\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                if (loadingOff) {\r\n                    setTimeout(() => loadingOff(), 500);\r\n                }\r\n            }\r\n        }\r\n\r\n        runLoading();\r\n    }, [reportData, filters, filteredData])\r\n\r\n    const columnCells = (mainKey) => [\r\n        {\r\n            Field_Name: mainKey,\r\n            isVisible: 1,\r\n            Fied_Data: 'string',\r\n        },\r\n        {\r\n            Field_Name: 'BagsTotal',\r\n            ColumnHeader: 'Bags',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n        {\r\n            Field_Name: 'BalQtyTotal',\r\n            ColumnHeader: 'Balance Quantity',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"p-1 d-flex justify-content-between align-items-center flex-wrap border-bottom\">\r\n                    <h5 className=\"ps-2 pt-2\">Live Stock Report</h5>\r\n                    <span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Fromdata}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Fromdata: e.target.value }))}\r\n                        /> - TO -\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Todate}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                        />\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setDialog(true)}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n\r\n                            <TabContext value={apiFilters.view}>\r\n                                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <TabList\r\n                                        indicatorColor='transparant'\r\n                                        onChange={(e, n) => setAPIFilters(pre => ({ ...pre, view: n }))}\r\n                                        variant=\"scrollable\"\r\n                                        scrollButtons=\"auto\"\r\n                                        allowScrollButtonsMobile\r\n                                    >\r\n                                        <Tab sx={apiFilters.view === 'Grouped' ? { backgroundColor: '#c6d7eb' } : {}} label=\"Grouped\" value='Grouped' />\r\n                                        <Tab sx={apiFilters.view === 'List' ? { backgroundColor: '#c6d7eb' } : {}} label=\"List\" value='List' />\r\n                                    </TabList>\r\n                                </Box>\r\n\r\n                                <TabPanel value={'Grouped'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={groupedData}\r\n                                        title=\"Stock Group\"\r\n                                        columns={columnCells('Stock_Group')}\r\n                                        isExpendable={true}\r\n                                        EnableSerialNumber\r\n                                        expandableComp={({ row }) => (\r\n                                            <FilterableTable\r\n                                                dataArray={row.groupedData}\r\n                                                title=\"Grade Item Group\"\r\n                                                columns={columnCells('Grade_Item_Group')}\r\n                                                isExpendable={true}\r\n                                                EnableSerialNumber\r\n                                                expandableComp={({ row }) => (\r\n                                                    <FilterableTable\r\n                                                        dataArray={row.groupedData}\r\n                                                        title=\"Group Name\"\r\n                                                        columns={columnCells('Group_Name')}\r\n                                                        isExpendable={true}\r\n                                                        EnableSerialNumber\r\n                                                        expandableComp={({ row }) => (\r\n                                                            <FilterableTable\r\n                                                                dataArray={row.groupedData}\r\n                                                                title=\"Stock Item Name\"\r\n                                                                columns={[\r\n                                                                    {\r\n                                                                        Field_Name: 'stock_item_name',\r\n                                                                        ColumnHeader: 'Stock Item Name',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bags',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bal_Act_Qty',\r\n                                                                        ColumnHeader: 'Balance Quantity',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'godown_name',\r\n                                                                        ColumnHeader: 'Godown',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                ]}\r\n                                                                EnableSerialNumber\r\n                                                                tableMaxHeight={2000}\r\n                                                                disablePagination={true}\r\n                                                            />\r\n                                                        )}\r\n                                                        tableMaxHeight={3000}\r\n                                                        disablePagination={true}\r\n\r\n                                                    />\r\n                                                )}\r\n                                                tableMaxHeight={4000}\r\n                                                disablePagination={true}\r\n                                            />\r\n                                        )}\r\n                                        tableMaxHeight={5000}\r\n                                        disablePagination={true}\r\n                                    />\r\n                                </TabPanel>\r\n\r\n                                <TabPanel value={'List'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={(Object.keys(filters).length > 0) ? filteredData : reportData}\r\n                                        columns={columns}\r\n                                    />\r\n                                </TabPanel>\r\n                            </TabContext>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                            <h5 className=\"d-flex justify-content-between px-2\">\r\n                                <span>Filters</span>\r\n                                <span>\r\n                                    <Tooltip title='Clear Filters'>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => setFilters({})}\r\n                                        >\r\n                                            <FilterAltOff />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </span>\r\n                            </h5>\r\n                            <div className=\"border rounded-3 \">\r\n                                {columns.map((column, ke) => (\r\n                                    <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                        <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                        {renderFilter(column)}\r\n                                    </div>\r\n                                ))}\r\n                                <br />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </CardContent>\r\n\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {columns.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveStockReport;"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","loadingOn","loadingOff","reportData","setReportData","useState","groupedData","setGroupedData","apiFilters","setAPIFilters","Fromdata","getPreviousDate","Todate","ISOString","view","filters","setFilters","dialog","setDialog","filteredData","setFilteredData","columns","Field_Name","Fied_Data","isVisible","ColumnHeader","useEffect","applyFilters","handleFilterChange","column","value","prevFilters","filtered","type","min","max","filter","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","length","_item$column$Field_Na","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","map","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","fetchLink","address","then","data","success","catch","console","error","finally","async","dataToUse","Object","keys","grouped_Stock_Group","groupData","aggregatedStockGroup","sort","a","b","_b$Stock_Group","String","Stock_Group","localeCompare","stockGroup","BagsTotal","calcTotal","BalQtyTotal","aggregatedGradeItemGroup","_stockGroup$groupedDa","gradeItemGroup","aggregatedGroupName","_stockGroup$groupedDa2","_stockGroup$groupedDa3","_gradeItemGroup$group","grouopName","setTimeout","runLoading","columnCells","mainKey","_Fragment","Card","pre","Tooltip","title","IconButton","onClick","size","FilterAlt","CardContent","TabContext","Box","sx","borderBottom","borderColor","TabList","indicatorColor","n","variant","scrollButtons","allowScrollButtonsMobile","Tab","backgroundColor","TabPanel","px","py","FilterableTable","dataArray","isExpendable","EnableSerialNumber","expandableComp","_ref3","row","_ref4","_ref5","tableMaxHeight","disablePagination","FilterAltOff","ke","_column$Field_Name","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","_column$Field_Name2","DialogActions","Button","color"],"sourceRoot":""}
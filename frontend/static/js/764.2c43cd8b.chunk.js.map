{"version":3,"file":"static/js/764.2c43cd8b.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Sales/SalesReportComponent/DataSetDisplay.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ dataArray = [], columns = [], ExpandableComp, enableFilters = false }) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleExportRows = (rows) => {\r\n        const csv = generateCsv(csvConfig)(rows);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleExportData = () => {\r\n        const csv = generateCsv(csvConfig)(dataArray);\r\n        download(csvConfig)(csv);\r\n    };\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={handleExportData}\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    All Data\r\n                </Button>\r\n                <Button\r\n                    disabled={filteredData.length === 0}\r\n                    className={enableFilters ? '' : 'd-none'}\r\n                    onClick={() =>\r\n                        handleExportRows(filteredData)\r\n                    }\r\n                    startIcon={<FileDownload />}\r\n                >\r\n                    Filtered Rows\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","csvConfig","mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","CheckBoxOutlineBlank","checkedIcon","CheckBox","ExpandableComp","enableFilters","dispColmn","setDispColmn","filters","setFilters","filteredData","setFilteredData","showData","keys","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","Column_Name","Data_Type","OrderBy","sortedColumns","useMemo","applyFilters","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","Box","display","gap","padding","flexWrap","Button","handleExportData","csv","generateCsv","download","startIcon","FileDownload","handleExportRows","FilterAlt","Settings","FilterAltOff","overflow","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","displayedColumn","oo","Switch","prevColumns","checkIsNumber","width"],"sourceRoot":""}
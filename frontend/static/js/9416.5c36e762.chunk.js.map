{"version":3,"file":"static/js/9416.5c36e762.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Reports/PendingDetails.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import { useState, useEffect, useMemo } from \"react\";\r\nimport { \r\n  Button,Box,\r\n  Dialog, \r\n  Tooltip, \r\n  IconButton, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  ToggleButtonGroup, \r\n  ToggleButton,\r\n  Card,\r\n  Switch,\r\n  Typography\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { \r\n  Addition, \r\n  getSessionFiltersByPageId, \r\n  isEqualNumber, \r\n  ISOString, \r\n  NumberFormat, \r\n  setSessionFilters, \r\n  toNumber \r\n} from \"../../Components/functions\";\r\nimport { Add, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst PendingDetails = ({ loadingOn, loadingOff, AddRights, EditRights, pageID }) => {\r\n    const sessionValue = sessionStorage.getItem('filterValues');\r\n    const defaultFilters = {\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        Retailer: { value: '', label: 'ALL' },\r\n        CreatedBy: { value: '', label: 'ALL' },\r\n        SalesPerson: { value: '', label: 'ALL' },\r\n        VoucherType: { value: '', label: 'ALL' },\r\n        DeliveryPerson: { value: '', label: 'ALL' },\r\n        Cancel_status: 0\r\n    };\r\n\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const navigate = useNavigate();\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [deliveryOrders, setDeliveryOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [voucher, setVoucher] = useState([]);\r\n    const [deliveryPerson, setDeliveryPerson] = useState([]);\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [viewType, setViewType] = useState('sales');\r\n    const [deliveryStatusFilter, setDeliveryStatusFilter] = useState(\"All\");\r\n    const [statusCounts, setStatusCounts] = useState({\r\n        all: 0,\r\n        delivered: 0,\r\n        pending: 0,\r\n        previousDaySalesCount: 0\r\n    });\r\n\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n useEffect(() => {\r\n        const otherSessionFiler = getSessionFiltersByPageId(pageID);\r\n        const {\r\n            Fromdate, Todate,\r\n            Retailer = defaultFilters.Retailer,\r\n            CreatedBy = defaultFilters.CreatedBy,\r\n            SalesPerson = defaultFilters.SalesPerson,\r\n            VoucherType = defaultFilters.VoucherType,\r\n            DeliveryPerson = defaultFilters.DeliveryPerson,\r\n            Cancel_status = defaultFilters.Cancel_status\r\n        } = otherSessionFiler;\r\n\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            Fromdate, Todate,\r\n            Retailer, CreatedBy, SalesPerson,\r\n            VoucherType, DeliveryPerson, Cancel_status\r\n        }));\r\n    }, [sessionValue, pageID, viewType]); \r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleOrder/retailers`\r\n        }).then(data => {\r\n            if (data.success) setRetailers(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) setSalePerson(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) setUsers(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/voucher`\r\n        }).then(data => {\r\n            if (data.success) setVoucher(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `dataEntry/costCenter`\r\n        }).then(data => {\r\n            if (data.success) setDeliveryPerson(data.data);\r\n        }).catch(e => console.error(e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const otherSessionFiler = getSessionFiltersByPageId(pageID);\r\n        const {\r\n            Fromdate, Todate,\r\n            Retailer = defaultFilters.Retailer,\r\n            CreatedBy = defaultFilters.CreatedBy,\r\n            SalesPerson = defaultFilters.SalesPerson,\r\n            VoucherType = defaultFilters.VoucherType,\r\n            DeliveryPerson = defaultFilters.DeliveryPerson,\r\n            Cancel_status = defaultFilters.Cancel_status\r\n        } = otherSessionFiler;\r\n\r\n        if (viewType === 'sales') {\r\n            fetchLink({\r\n                address: `reports/reportsNonconvert/sales?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${Retailer?.value}&Sales_Person_Id=${SalesPerson?.value}&Created_by=${CreatedBy?.value}&VoucherType=${VoucherType?.value}&Cancel_status=${Cancel_status}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) setSaleOrders(data?.data);\r\n            }).catch(e => console.error(e));\r\n        } else {\r\n            fetchLink({\r\n                address: `delivery/deliveryOrderListData?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${Retailer?.value}&Sales_Person_Id=${SalesPerson?.value}&Delivery_Person_Id=${DeliveryPerson?.value}&Created_by=${CreatedBy?.value}&Cancel_status=${Cancel_status}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setDeliveryOrders(data?.data);\r\n                    const delivered = data.data.filter(row => row.DeliveryStatusName === \"Delivered\").length;\r\n                    const pending = data.data.filter(row => row.Delivery_Status === 1).length;\r\n                    const all = data.data.length;\r\n                    const previousDaySalesCount = data.data.length > 0 ? data.data[0].PreviousDaySalesOrderCount || 0 : 0;\r\n                    setStatusCounts({ all, delivered, pending, previousDaySalesCount });\r\n                }\r\n            }).catch(e => console.error(e));\r\n        }\r\n    }, [sessionValue, pageID, viewType]);\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Branch</td>\r\n                        <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                        <td className=\"border p-2 bg-light\">\r\n                            {viewType === 'sales' ? 'Sales Person' : 'Delivery Person'}\r\n                        </td>\r\n                        <td className=\"border p-2\">\r\n                            {viewType === 'sales' ? row.Sales_Person_Name : row.Delivery_Person_Name}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Round off</td>\r\n                        <td className=\"border p-2\">{row.Round_off}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                        <td className=\"border p-2\">\r\n                            {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                            {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                        <td className=\"border p-2\">\r\n                            {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                            {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                        <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Narration</td>\r\n                        <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(prev => ({ ...prev, filters: false, orderDetails: false }));\r\n    };\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const data = viewType === 'sales' ? saleOrders : deliveryOrders;\r\n        return data.reduce((acc, orders) => Addition(acc, orders?.Total_Invoice_value), 0);\r\n    }, [saleOrders, deliveryOrders, viewType]);\r\n\r\n    const filteredDeliveryData = useMemo(() => {\r\n        if (viewType !== 'delivery') return deliveryOrders;\r\n        if (deliveryStatusFilter === \"Delivered\") {\r\n            return deliveryOrders.filter(row => row.Delivery_Status === 7);\r\n        } else if (deliveryStatusFilter === \"Pending\") {\r\n            return deliveryOrders.filter(row => row.Delivery_Status === 1);\r\n        } else {\r\n            return deliveryOrders;\r\n        }\r\n    }, [deliveryOrders, deliveryStatusFilter, viewType]);\r\n\r\n\r\n    const resetFilters = () => {\r\n  setFilters(defaultFilters);\r\n  setSessionFilters({\r\n    ...defaultFilters,\r\n    pageID\r\n  });\r\n};\r\n    const columns = useMemo(() => {\r\n        if (viewType === 'sales') {\r\n            return [\r\n                createCol('So_Date', 'date', 'SoDate'),\r\n                createCol('So_Inv_No', 'string', 'SO ID'),\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('VoucherTypeGet', 'string', 'Voucher'),\r\n                createCol('Total_Before_Tax', 'number', 'Before Tax'),\r\n                createCol('Total_Tax', 'number', 'Tax'),\r\n                createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                {\r\n                    Field_Name: 'Action',\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='View Order'>\r\n                                <IconButton\r\n                                    onClick={() => setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List || []\r\n                                    })}\r\n                                    color='primary' \r\n                                    size=\"small\"\r\n                                >\r\n                                    <Visibility className=\"fa-16\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            {EditRights && (\r\n                                <Tooltip title='Edit'>\r\n                                    <IconButton\r\n                                        onClick={() => navigate('create', {\r\n                                            state: { ...row, isEdit: true }\r\n                                        })}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        <Edit className=\"fa-16\" />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n                        </>\r\n                    ),\r\n                },\r\n            ];\r\n        } else {\r\n            return [\r\n                createCol('Do_Id', 'string', 'Delivery ID'),\r\n                createCol('So_No', 'string', 'Sale Order ID'),\r\n                createCol('Do_Inv_No', 'string', 'DO Inv No'),\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('SalesDate', 'date', 'Sale Order Date'),\r\n                createCol('Do_Date', 'date', 'Delivery Date'),\r\n                createCol('Total_Before_Tax', 'number', 'Before Tax'),\r\n                createCol('Total_Tax', 'number', 'Tax'),\r\n                createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                createCol('DeliveryStatusName', 'string', 'Delivery Status'),\r\n                {\r\n                    Field_Name: 'Action',\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='View Order'>\r\n                                <IconButton\r\n                                    onClick={() => setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List || []\r\n                                    })}\r\n                                    color='primary' \r\n                                    size=\"small\"\r\n                                >\r\n                                    <Visibility className=\"fa-16\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            {EditRights && (\r\n                                <Tooltip title='Edit'>\r\n                                    <IconButton\r\n                                        onClick={() => navigate('create', {\r\n                                            state: { ...row, isEdit: true }\r\n                                        })}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        <Edit className=\"fa-16\" />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n                        </>\r\n                    ),\r\n                },\r\n            ];\r\n        }\r\n    }, [viewType, EditRights, navigate]);\r\n\r\n    return (\r\n        <>\r\n         <FilterableTable\r\n  title={`${viewType === 'sales' ? 'Sale' : 'Delivery'} Orders`}\r\n  dataArray={viewType === 'sales' ? saleOrders : filteredDeliveryData}\r\n  EnableSerialNumber\r\n  columns={columns}\r\n  ButtonArea={\r\n    <>\r\n      <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap', mb: 2 }}>\r\n   \r\n        <ToggleButtonGroup\r\n          value={viewType}\r\n          exclusive\r\n          onChange={(e, newView) => {\r\n            if (newView) {\r\n              resetFilters();\r\n              setViewType(newView);\r\n            }\r\n          }}\r\n          aria-label=\"view type\"\r\n          sx={{ \r\n            '& .MuiToggleButton-root': {\r\n              px: 3,  \r\n              py:1,  \r\n              m: 0.5, \r\n            }\r\n          }}\r\n        >\r\n          <ToggleButton \r\n            value=\"sales\" \r\n            aria-label=\"sales view\"\r\n            sx={{\r\n              backgroundColor: viewType === 'sales' ? '#1976d2' : 'inherit',\r\n              color: viewType === 'sales' ? 'white' : 'inherit',\r\n              fontWeight: viewType === 'sales' ? 'bold' : 'normal',\r\n              '&:hover': {\r\n                backgroundColor: viewType === 'sales' ? '#1565c0' : 'rgba(0, 0, 0, 0.04)'\r\n              }\r\n            }}\r\n          >\r\n            Sales\r\n          </ToggleButton>\r\n          <ToggleButton \r\n            value=\"delivery\" \r\n            aria-label=\"delivery view\"\r\n            sx={{\r\n              backgroundColor: viewType === 'delivery' ? '#1976d2' : 'inherit',\r\n              color: viewType === 'delivery' ? 'white' : 'inherit',\r\n              fontWeight: viewType === 'delivery' ? 'bold' : 'normal',\r\n              '&:hover': {\r\n                backgroundColor: viewType === 'delivery' ? '#1565c0' : 'rgba(0, 0, 0, 0.04)'\r\n              }\r\n            }}\r\n          >\r\n            Delivery\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n     \r\n\r\n        {viewType === 'delivery' && (\r\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n          \r\n            <Button\r\n              variant={deliveryStatusFilter === \"All\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              onClick={() => setDeliveryStatusFilter(\"All\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"All\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              All - {statusCounts.all}\r\n            </Button>\r\n            <Button\r\n              variant={deliveryStatusFilter === \"Delivered\" ? \"contained\" : \"outlined\"}\r\n              color=\"success\"\r\n              onClick={() => setDeliveryStatusFilter(\"Delivered\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"Delivered\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              Delivered - {statusCounts.delivered}\r\n            </Button>\r\n         \r\n            <Button\r\n              variant={deliveryStatusFilter === \"Pending\" ? \"contained\" : \"outlined\"}\r\n              color=\"warning\"\r\n              onClick={() => setDeliveryStatusFilter(\"Pending\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"Pending\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              Pending - {statusCounts.pending}\r\n            </Button>\r\n                  <Typography variant=\"body1\" sx={{ mr: 1, fontWeight: 'bold' }}>\r\n              Sales Order: {statusCounts.previousDaySalesCount}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n      \r\n        <Tooltip title='Filters'>\r\n          <IconButton\r\n            size=\"medium\"\r\n            onClick={() => setDialog(prev => ({ ...prev, filters: true }))}\r\n            sx={{ ml: 1 }}\r\n          >\r\n            <FilterAlt />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        {/* Total Value */}\r\n        <Box sx={{ \r\n          bgcolor: 'background.paper', \r\n          px: 2, \r\n          py: 1, \r\n          borderRadius: 1,\r\n          ml: 'auto'\r\n        }}>\r\n          {toNumber(Total_Invoice_value) > 0 && (\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Total: {NumberFormat(Total_Invoice_value)}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  }\r\n  isExpendable={true}\r\n  tableMaxHeight={550}\r\n  expandableComp={ExpendableComponent}\r\n/>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth \r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Fromdate: e.target.value }))}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Todate: e.target.value }))}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.Retailer}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Retailer: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({\r\n                                                    value: obj?.Retailer_Id,\r\n                                                    label: `${obj?.Retailer_Name} - ₹${NumberFormat(toNumber(obj?.TotalSales))} (${toNumber(obj?.OrderCount)})`\r\n                                                }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Retailer Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                {viewType === 'delivery' && (\r\n                                    <tr>\r\n                                        <td style={{ verticalAlign: 'middle' }}>Delivery Person</td>\r\n                                        <td>\r\n                                            <Select\r\n                                                value={filters.DeliveryPerson}\r\n                                                onChange={e => setFilters(prev => ({ ...prev, DeliveryPerson: e }))}\r\n                                                options={[\r\n                                                    { value: '', label: 'ALL' },\r\n                                                    ...deliveryPerson.map(obj => ({\r\n                                                        value: obj?.Cost_Center_Id,\r\n                                                        label: obj?.Cost_Center_Name\r\n                                                    }))\r\n                                                ]}\r\n                                                isSearchable={true}\r\n                                                placeholder=\"Delivery Person Name\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Sales Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.SalesPerson}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, SalesPerson: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Sales Person Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.CreatedBy}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, CreatedBy: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Created By\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Voucher</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.VoucherType}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, VoucherType: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...voucher.filter(obj => obj.Type === 'SALES')\r\n                                                    .map(obj => ({ value: obj?.Vocher_Type_Id, label: obj?.Voucher_Type }))\r\n                                            ]}\r\n                                            menuPortalTarget={document.body}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Voucher Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Cancel_status: Number(e.target.value) }))}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            closeDialog();\r\n                            setSessionFilters({\r\n                                Fromdate: filters.Fromdate,\r\n                                Todate: filters.Todate,\r\n                                pageID,\r\n                                Retailer: filters.Retailer,\r\n                                CreatedBy: filters.CreatedBy,\r\n                                SalesPerson: filters.SalesPerson,\r\n                                DeliveryPerson: filters.DeliveryPerson,\r\n                                VoucherType: filters.VoucherType,\r\n                                Cancel_status: filters.Cancel_status\r\n                            });\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PendingDetails;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","loadingOn","loadingOff","AddRights","EditRights","pageID","sessionValue","sessionStorage","getItem","defaultFilters","Fromdate","ISOString","Todate","Retailer","label","CreatedBy","SalesPerson","VoucherType","DeliveryPerson","Cancel_status","storage","JSON","parse","localStorage","navigate","useNavigate","saleOrders","setSaleOrders","deliveryOrders","setDeliveryOrders","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","voucher","setVoucher","deliveryPerson","setDeliveryPerson","viewOrder","setViewOrder","viewType","setViewType","deliveryStatusFilter","setDeliveryStatusFilter","statusCounts","setStatusCounts","all","delivered","pending","previousDaySalesCount","filters","setFilters","dialog","setDialog","orderDetails","useEffect","otherSessionFiler","getSessionFiltersByPageId","fetchLink","address","then","success","catch","Company_id","DeliveryStatusName","Delivery_Status","PreviousDaySalesOrderCount","closeDialog","prev","Total_Invoice_value","useMemo","reduce","acc","orders","Addition","filteredDeliveryData","orderProducts","Products_List","Visibility","state","isEdit","Edit","Box","display","gap","alignItems","flexWrap","mb","ToggleButtonGroup","exclusive","onChange","newView","setSessionFilters","px","py","m","ToggleButton","fontWeight","Button","variant","Typography","mr","ml","FilterAlt","bgcolor","borderRadius","toNumber","Branch_Name","Sales_Person_Name","Delivery_Person_Name","Round_off","GST_Inclusive","IS_IGST","Narration","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","style","Select","options","obj","Retailer_Id","Retailer_Name","TotalSales","OrderCount","isSearchable","placeholder","Cost_Center_Id","Cost_Center_Name","UserId","Name","Type","Vocher_Type_Id","Voucher_Type","menuPortalTarget","document","DialogActions","startIcon","Search"],"sourceRoot":""}
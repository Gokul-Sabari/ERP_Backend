{"version":3,"file":"static/js/4668.7b7057ca.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Purchase/billFormat.jsx","Pages/Purchase/purchaseReportForCustomer.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/LaunchOutlined.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { numberToWords } from \"../../Components/functions\";\r\nimport { companyDetails } from \"../../Components/tablecolumn\";\r\n\r\n\r\nconst InvoiceBill = ({ companyInfo, invoieInfo, expencesInfo }) => {\r\n\r\n    const getTotal = (arr, colmn) => {\r\n        let count = 0;\r\n        arr.forEach(obj => {\r\n            count += Number(obj[colmn]);\r\n        })\r\n        return count\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex justify-content-between align-items-center \">\r\n\r\n                <div className=\"d-flex\">\r\n                    <img src={companyDetails[companyInfo?.Company_Id]?.logo} className=\"invoiceLogo\" alt=\"company_logo\" />\r\n\r\n                    <div className=\"\">\r\n                        <p className=\"mb-0 \">{companyInfo?.Company_Name}</p>\r\n                        <p className=\"mb-0 text-muted\">{companyInfo?.Company_address_1}</p>\r\n                        <p className=\"mb-0 text-muted fa-14\">{companyInfo?.Company_address_2}</p>\r\n                        {companyInfo?.Company_address_3 && <p className=\"mb-0 text-muted fa-14\">{companyInfo?.Company_address_3}</p>}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"p-1 border-0 fa-13\">GSTIN</td>\r\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.Company_GSTIN}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-1 border-0 fa-13\">PHONE</td>\r\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.Company_Mobile}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-1 border-0 fa-13\">FSSAI</td>\r\n                                <td className=\"p-1 border-0 fa-13 text-end\">{companyInfo?.fssai_no}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <p className=\"mb-0 fa-13 d-flex\">\r\n                        <span className=\"flex-grow-1 text-muted\"> </span>\r\n                        <span > </span>\r\n                    </p>\r\n                    <p className=\"mb-0 fa-13 d-flex\">\r\n                        <span className=\"flex-grow-1 text-muted\"></span>\r\n                        <span></span>\r\n                    </p>\r\n                    <p className=\"mb-0 fa-13 d-flex\">\r\n                        <span className=\"flex-grow-1 text-muted\"></span>\r\n                        <span></span>\r\n                    </p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* to address */}\r\n            <table className=\"table mb-0 border\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border\">\r\n                            <p className=\"fa-13 mb-0\">To</p>\r\n                            <p className=\"fa-13 mb-0 ps-3 fw-bold\">{companyInfo?.Customer_name}</p>\r\n                            <p className=\"fa-13 mb-0 ps-3\">{companyInfo?.Customer_Mobile}</p>\r\n                            <p className=\"fa-13 mb-0 ps-3\">GSTIN: {companyInfo?.Customer_GSTIN}</p>\r\n                        </td>\r\n                        <td className=\"border\">\r\n                            <p className=\"mb-0 d-flex fa-13\">\r\n                                Date:\r\n                                <span className=\"flex-grow-1 ps-2 text-primary\">\r\n                                    {companyInfo?.invoice_date\r\n                                        ? new Date(companyInfo?.invoice_date).toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: '2-digit' })\r\n                                        : ''\r\n                                    }\r\n                                </span>\r\n                                <span>{companyInfo?.Bill_Type}</span>\r\n                            </p>\r\n                            <p className=\"fa-13 mb-0\">Bill No: {companyInfo?.invoice_no}</p>\r\n                            <p className=\"fa-13 mb-0 d-flex\">\r\n                                <span className=\"flex-grow-1\">Broker: {companyInfo?.Broker_Name}</span>\r\n                                <span>Transpoter: {companyInfo?.Transporter}</span>\r\n                            </p>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* invoice items */}\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table mb-0\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"fa-13 border\">Sno</th>\r\n                            <th className=\"fa-13 border\">Items</th>\r\n                            <th className=\"fa-13 border\">HSN</th>\r\n                            <th className=\"fa-13 border\">GST</th>\r\n                            <th className=\"fa-13 border\">Qty</th>\r\n                            <th className=\"fa-13 border\">Rate</th>\r\n                            <th className=\"fa-13 border\">Bags</th>\r\n                            <th className=\"fa-13 border\">Amount</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {invoieInfo?.map((o, i) => (\r\n                            <tr key={i}>\r\n                                <td className=\"fa-13 border\">{i + 1}</td>\r\n                                <td className=\"fa-13 border\">{o?.stock_item_name}</td>\r\n                                <td className=\"fa-13 border\">{o?.hsn_code}</td>\r\n                                <td className=\"fa-13 border\">{Number(o?.igst) ? o?.igst : Number(o?.cgst) + Number(o.sgst)}</td>\r\n                                <td className=\"fa-13 border\">{Number(o?.bill_qty).toLocaleString('en-IN')}</td>\r\n                                <td className=\"fa-13 border\">{(o?.amount / o?.bill_qty).toLocaleString('en-IN')}</td>\r\n                                <td className=\"fa-13 border\">{Number(o?.bags ? o?.bags : o?.bill_alt_qty).toLocaleString('en-IN')}</td>\r\n                                <td className=\"fa-13 border\">{Number(o?.amount).toLocaleString('en-IN')}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td className=\"fa-13 border\" colSpan={4}>\r\n                                <span className=\"fw-bold\">BANK: </span>\r\n                                {companyInfo?.bank_name}\r\n                            </td>\r\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'bill_qty').toLocaleString('en-IN')}</td>\r\n                            <td className=\"fa-13 border\"></td>\r\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'bill_alt_qty').toLocaleString('en-IN')}</td>\r\n                            <td className=\"fa-13 border\">{getTotal(invoieInfo, 'amount').toLocaleString('en-IN')}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"fa-13 border fw-bold\" colSpan={6}>{numberToWords(companyInfo?.total_invoice_value)} Only</td>\r\n                            <td className=\"fa-13 border\" colSpan={2}>\r\n                                {expencesInfo.map((o, i) => (\r\n                                    <p className=\"d-flex mb-0\" key={i}>\r\n                                        <span className=\"flex-grow-1\">{o?.ledger_name}</span>\r\n                                        <span>{Number(o?.amount_value_DR || o?.amount_value_CR).toLocaleString('en-IN')}</span>\r\n                                    </p>\r\n                                ))}\r\n                                <p className=\"d-flex mb-0\">\r\n                                    <span className=\"flex-grow-1\">Net:</span>\r\n                                    <span className=\"fa-18\">{Number(companyInfo?.total_invoice_value).toLocaleString('en-IN')}</span>\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {/* tax info */}\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"border fa-13 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>HSN / SAC</th>\r\n                            <th className=\"border fa-13 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>Taxable Value</th>\r\n                            <th className=\"border fa-13 text-center\" colSpan={2}>Central Tax</th>\r\n                            <th className=\"border fa-13 text-center\" colSpan={2}>State Tax</th>\r\n                            <th className=\"border fa-13 text-center\">Total</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"border fa-13 text-center\">Rate</th>\r\n                            <th className=\"border fa-13 text-center\">Amount</th>\r\n                            <th className=\"border fa-13 text-center\">Rate</th>\r\n                            <th className=\"border fa-13 text-center\">Amount</th>\r\n                            <th className=\"border fa-13 text-center\">Tax Amount</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {invoieInfo.map((o, i) => (\r\n                            <tr key={i}>\r\n                                <td className=\"border fa-13 text-end\">{o?.hsn_code}</td>\r\n                                <td className=\"border fa-13 text-end\">{Number(o?.amount).toLocaleString('en-IN')}</td>\r\n                                <td className=\"border fa-13 text-end\">{o?.cgst}</td>\r\n                                <td className=\"border fa-13 text-end\">{(o?.cgst ? (o?.amount / 100) * o?.cgst : 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}</td>\r\n                                <td className=\"border fa-13 text-end\">{o?.sgst}</td>\r\n                                <td className=\"border fa-13 text-end\">{(o?.sgst ? (o?.amount / 100) * o?.sgst : 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}</td>\r\n                                <td className=\"border fa-13 text-end\">\r\n                                    {(Number((o?.cgst ? (o?.amount / 100) * o?.cgst : 0) + (o?.sgst ? (o?.amount / 100) * o?.sgst : 0))).toLocaleString('en-IN', { maximumFractionDigits: 2 })}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td className=\"border fa-13 text-end\">Total</td>\r\n                            <td className=\"border fa-13 text-end\">{getTotal(invoieInfo, 'amount').toLocaleString('en-IN')}</td>\r\n                            <td className=\"border fa-13 text-end\"></td>\r\n                            <td className=\"border fa-13 text-end\">\r\n                                {(() => {\r\n                                    let total = 0;\r\n                                    invoieInfo.forEach(o => {\r\n                                        total += o?.cgst ? (o?.amount / 100) * o?.cgst : 0\r\n                                    });\r\n                                    return total.toLocaleString('en-IN', { maximumFractionDigits: 2 });\r\n                                })()}\r\n                            </td>\r\n                            <td className=\"border fa-13 text-end\"></td>\r\n                            <td className=\"border fa-13 text-end\">\r\n                                {(() => {\r\n                                    let total = 0;\r\n                                    invoieInfo.forEach(o => {\r\n                                        total += o?.sgst ? (o?.amount / 100) * o?.sgst : 0\r\n                                    });\r\n                                    return total.toLocaleString('en-IN', { maximumFractionDigits: 2 });\r\n                                })()}\r\n                            </td>\r\n                            <td className=\"border fa-13 text-end\">\r\n                                {(() => {\r\n                                    let totalCGST = 0;\r\n                                    let totalSGST = 0;\r\n                                    invoieInfo.forEach(o => {\r\n                                        totalCGST += o?.cgst ? (o?.amount / 100) * o?.cgst : 0;\r\n                                        totalSGST += o?.sgst ? (o?.amount / 100) * o?.sgst : 0;\r\n                                    });\r\n                                    const totalCombined = totalCGST + totalSGST;\r\n                                    return totalCombined.toLocaleString('en-IN', { maximumFractionDigits: 2 });\r\n                                })()}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceBill;","import { Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Button } from \"@mui/material\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Close, LaunchOutlined, Visibility } from '@mui/icons-material';\r\nimport InvoiceBill from \"./billFormat\";\r\nimport { NumberFormat } from \"../../Components/functions\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\n\r\nconst PurchaseReportForCustomer = () => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [sales, setSales] = useState([]);\r\n    const [salesInfo, setSalesInfo] = useState([]);\r\n    const [total, setTotal] = useState(0)\r\n    const [dialog, setDialog] = useState({\r\n        salesInfoDialog: false,\r\n        billDialog: false\r\n    });\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const [invoieInfo, setInvoiceInfo] = useState([]);\r\n    const [expencesInfo, setExpencesInfo] = useState([]);\r\n    const printRef = useRef()\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `userModule/customer/customerSalesReport?UserId=${storage?.UserId}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSales(data.data)\r\n                let temp = 0;\r\n                data.data.forEach(obj => {\r\n                    temp += Number(obj?.Total_Amount)\r\n                    console.log(obj?.Total_Amount)\r\n                })\r\n                setTotal(temp)\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [])\r\n\r\n    const getSalesDetials = (obj) => {\r\n        setSalesInfo([]);\r\n        fetchLink({\r\n            address: `userModule/customer/salesInfo?Cust_Id=${obj?.Cust_Id}&Acc_Id=${obj?.tally_id}&Company_Id=${obj?.Company_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalesInfo(data.data);\r\n                setDialog(pre => ({ ...pre, salesInfoDialog: true }))\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    const fetchInvoiceDetails = (CompanyId, Invoice_No) => {\r\n        setCompanyInfo({});\r\n        setInvoiceInfo([]);\r\n        setExpencesInfo([]);\r\n        if (CompanyId && Invoice_No) {\r\n            fetchLink({\r\n                address: `userModule/customer/invoiceDetails?Company_Id=${CompanyId}&UserId=${storage?.UserId}&Invoice_No=${Invoice_No}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    if (data?.data[0]?.length) {\r\n                        const company = data.data[0]\r\n                        setCompanyInfo(company[0])\r\n                    }\r\n                    if (data?.data[1]?.length) {\r\n                        setInvoiceInfo(data?.data[1]);\r\n                    }\r\n                    if (data?.data[2].length) {\r\n                        setExpencesInfo(data?.data[2])\r\n                    }\r\n                    setDialog(pre => ({ ...pre, billDialog: true }));\r\n                }\r\n            }).catch(e => console.log(e))\r\n        }\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header py-3 bg-white\" >\r\n                    <p className=\"mb-0 fw-bold\" >\r\n                        <span>Balance of {storage?.Name}</span>\r\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {NumberFormat(total)} {(total < 0 ? ' CR' : ' DR')} )</span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"card-body p-0 table-responsive\" style={{ maxHeight: '80vh' }}>\r\n                    <table className=\"table\" >\r\n                        <thead>\r\n                            <tr>\r\n                                {['S.No', '-', 'Company', 'Ledger', 'Balance', 'Dr/Cr'].map((o, i) => (\r\n                                    <th className=\"tble-hed-stick fa-13\" key={i}>{o}</th>\r\n                                ))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody >\r\n                            {sales.map((o, i) => (\r\n                                <tr key={i}>\r\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\r\n                                    <td style={{ fontSize: '13px' }}>\r\n                                        <button\r\n                                            className=\"icon-btn\"\r\n                                            onClick={() => { getSalesDetials(o) }}>\r\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{NumberFormat(o?.Total_Amount)}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.Total_Count}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog\r\n                fullScreen\r\n                open={dialog.salesInfoDialog}\r\n                onClose={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>\r\n                <DialogTitle className=\"d-flex\">\r\n                    Sales List Of\r\n                    <span className=\"text-primary flex-grow-1\"> {salesInfo[0]?.Customer_name}</span>\r\n                    <IconButton size=\"small\" color='error' onClick={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>\r\n                        <Close />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent> \r\n                    <FilterableTable\r\n                        dataArray={salesInfo}\r\n                        columns={[\r\n                            {\r\n                                Field_Name: 'invoice_date',\r\n                                isVisible: 1,\r\n                                Fied_Data: 'date',\r\n                            },\r\n                            {\r\n                                Field_Name: 'invoice_no',\r\n                                isVisible: 1,\r\n                                Fied_Data: 'string',\r\n                            },\r\n                            {\r\n                                Field_Name: 'total_invoice_value',\r\n                                isVisible: 1,\r\n                                Fied_Data: 'number',\r\n                            },\r\n                            {\r\n                                Field_Name: 'View_Bill',\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <IconButton onClick={() => fetchInvoiceDetails(row?.Company_Id, row?.invoice_no)} size=\"small\">\r\n                                        <Visibility />\r\n                                    </IconButton>\r\n                                )\r\n                            },\r\n                        ]}\r\n                        EnableSerialNumber={true}\r\n                        tableMaxHeight={720}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button color='error' variant='outlined' onClick={() => setDialog(pre => ({ ...pre, salesInfoDialog: false }))}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.billDialog}\r\n                onClose={() => setDialog(pre => ({ ...pre, billDialog: false }))}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\r\n                    <span className=\"flex-grow-1\">Invoice Details</span>\r\n                    <Button\r\n                        className=\"fw-bold\"\r\n                        onClick={handlePrint}>\r\n                        PDF\r\n                    </Button>\r\n                    <IconButton size=\"small\" className=\"bg-light\" onClick={() => setDialog(pre => ({ ...pre, billDialog: false }))}>\r\n                        <Close />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent className=\"p-0\" ref={printRef}>\r\n                    <InvoiceBill invoieInfo={invoieInfo} companyInfo={companyInfo} expencesInfo={expencesInfo} />\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseReportForCustomer;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'LaunchOutlined');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_companyDetails$compa","companyInfo","invoieInfo","expencesInfo","getTotal","arr","colmn","obj","src","Company_Id","alt","Company_Name","Company_address_1","Company_address_2","Company_address_3","Company_GSTIN","Company_Mobile","fssai_no","Customer_name","Customer_Mobile","Customer_GSTIN","invoice_date","Date","toLocaleDateString","day","month","year","Bill_Type","invoice_no","Broker_Name","Transporter","stock_item_name","hsn_code","igst","cgst","sgst","bill_qty","toLocaleString","amount","bags","bill_alt_qty","bank_name","numberToWords","total_invoice_value","ledger_name","amount_value_DR","amount_value_CR","rowSpan","maximumFractionDigits","total","totalCGST","totalSGST","PurchaseReportForCustomer","_salesInfo$","storage","JSON","parse","localStorage","getItem","sales","setSales","salesInfo","setSalesInfo","setTotal","dialog","setDialog","salesInfoDialog","billDialog","setCompanyInfo","setInvoiceInfo","setExpencesInfo","printRef","useRef","useEffect","fetchLink","UserId","then","success","temp","Total_Amount","catch","handlePrint","useReactToPrint","content","current","Name","Cust_Id","tally_id","LaunchOutlined","Total_Count","Dialog","fullScreen","DialogTitle","Close","DialogContent","fetchInvoiceDetails","CompanyId","Invoice_No","_data$data$","_data$data$2","company","Visibility","DialogActions","Button","fullWidth","maxWidth","ref","InvoiceBill","createSvgIcon","d"],"sourceRoot":""}
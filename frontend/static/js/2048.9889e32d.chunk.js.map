{"version":3,"file":"static/js/2048.9889e32d.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/CRM/itemWise.jsx","Pages/Reports/CRM/liveStock.jsx","Pages/Reports/CRM/ledgerWise.jsx","Pages/Reports/CRM/salesPersonWise.jsx","Pages/Reports/CRM/lolBased.jsx","Pages/Reports/CRM/losBased.jsx","Pages/Reports/CRM/customerClosingStockReport.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, ISOString, LocalDate, Multiplication, NumberFormat, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockItemBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        searchItem: { value: '', label: 'Select Item' }\r\n    })\r\n    const [baseData, setBaseData] = useState({\r\n        itemDropDown: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/soldItems`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            setBaseData(pre => ({\r\n                ...pre,\r\n                itemDropDown: data.data\r\n            }))\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(filters.searchItem.value)) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/itemSearch?Item_Id=${filters.searchItem.value}&Fromdate=${Fromdate}&Todate=${Todate}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReportData(data.data)\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters.searchItem.value, Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.stockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Item Wise ${sumValue ? '( Total: ' + NumberFormat(sumValue) + ' )'  : ''}`}\r\n            EnableSerialNumber\r\n            dataArray={reportData}\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.searchItem}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, searchItem: e }))}\r\n                            options={[\r\n                                { value: '', label: 'select', isDisabled: true },\r\n                                ...baseData.itemDropDown.map(item => ({\r\n                                    value: item.Item_Id,\r\n                                    label: item.Item_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Product\"}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? LocalDate(row?.Do_Date) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? LocalDate(row?.closingDate) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? getDaysBetween(row?.Do_Date, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? getDaysBetween(row?.closingDate, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Quantity',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockQuantityOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Rate',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockRateOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Value',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockValueOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockItemBasedReport","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, isEqualNumber, NumberFormat, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockRetailerBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Live Stock: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            dataArray={\r\n                checkIsNumber(filters.retailer.value)\r\n                    ? reportData.filter(\r\n                        row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n                    )\r\n                    : reportData\r\n            }\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockRetailerBasedReport","import { NumberFormat, Addition } from '../../../Components/functions';\r\nimport FilterableTable, { createCol } from '../../../Components/filterableTable2';\r\nimport { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toArray } from '../../../Components/functions';\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\n\r\nconst LedgerBasedClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [productClosingStock, setProductClosingStock] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        customer: { value: '', label: 'Select Retailer' },\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/whoHasClosingStock`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (filters?.customer.value) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/retailerBased/detailedInfo?Retailer_Id=${filters?.customer.value}&Fromdate=${Fromdate}&Todate=${Todate}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setProductClosingStock(toArray(data?.data));\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters?.customer.value, Fromdate, Todate]);\r\n\r\n    const productBasedColumn = [\r\n        createCol('Product_Name', 'string'),\r\n        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('stockQuantityOfItem', 'number', ' Quantity'),\r\n        createCol('stockRateOfItem', 'number', 'Rate'),\r\n        createCol('stockValueOfItem', 'number', 'Stock-Value'),\r\n    ];\r\n\r\n    const productGroupedColumn = [\r\n        createCol('Brand_Name', 'string', 'Brand'),\r\n        createCol('entryDate', 'string', 'Entry Date'),\r\n        createCol('updateDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('totalQty', 'number', ' Quantity'),\r\n        createCol('totalValue', 'number', 'Stock-Value'),\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                title={\" Stock value: ₹\" + NumberFormat(\r\n                    productClosingStock.reduce(\r\n                        (sum, product) => Addition(sum, product.stockValueOfItem),\r\n                        0\r\n                    )\r\n                )}\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <div style={{ minWidth: '360px', marginRight: '10px' }}>\r\n                            <Select\r\n                                value={filters.customer}\r\n                                onChange={(e) => {\r\n                                    setFilters({ ...filters, customer: e });\r\n                                }}\r\n                                options={[\r\n                                    // { value: '', label: 'All Retailer' },\r\n                                    ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                ]}\r\n                                menuPortalTarget={document.body}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Retailer Name\"}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                dataArray={productClosingStock}\r\n                columns={productBasedColumn}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LedgerBasedClosingStock;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\n\r\n\r\nconst SalesPersonWiseGroupedLedgerClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/salesPersonGrouped?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate])\r\n\r\n    const groupedSalesPersonData = useMemo(() => {\r\n        const data = checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n\r\n        const groupSalesPersonWise = groupData(data, 'salesPerson');\r\n\r\n        return groupSalesPersonWise.map(salesPerson => {\r\n\r\n            const groupedData = toArray(salesPerson?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...salesPerson,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        })\r\n    }, [filters.retailer.value, reportData]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Sales Person Based Total: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            headerFontSizePx={12}\r\n            bodyFontSizePx={12}\r\n            dataArray={groupedSalesPersonData}\r\n            ButtonArea={\r\n                <>\r\n                    {/* <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                        />\r\n                    </div> */}\r\n                    {/* <div className=\"d-flex align-items-center\">\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Fromdate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\">{' to '}</span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Todate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\"></span>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\r\n                        ><Search /></IconButton>\r\n                    </div> */}\r\n                        {/* <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span> */}\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('salesPerson', 'string', 'Sales/Delivery Person'),\r\n                createCol('entries', 'number', 'Party   '),\r\n                createCol('entryDate', 'date', 'Entry Date'),\r\n                createCol('updateDate', 'date', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (\r\n                <FilterableTable\r\n                    headerFontSizePx={12}\r\n                    bodyFontSizePx={12}\r\n                    dataArray={row.groupedData}\r\n                    EnableSerialNumber\r\n                    columns={[\r\n                        createCol('Retailer_Name', 'string', 'Customer'),\r\n                        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                        createCol('entryDays', 'number', 'Entry Days'),\r\n                        createCol('updateDays', 'number', 'Update Days'),\r\n                        createCol('liveStockValue', 'number', 'Stock Value'),\r\n                    ]}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SalesPersonWiseGroupedLedgerClosingStock","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst RetailerClosingWithLOL = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Sales Person', column: \"salesPerson\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Delivery Person', column: \"deliveryPerson\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Ledger Name', column: \"Ledger_Name\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Ledger Alias', column: \"Ledger_Alias\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Party with Brokers', column: \"Actual_Party_Name_with_Brokers\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'Party Name', column: \"Party_Name\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Party Location', column: \"Party_Location\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Party Nature', column: \"Party_Nature\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'Party Group', column: \"Party_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'Ref Brokers', column: \"Ref_Brokers\", isVisible: false, OrderBy: 10 },\r\n        { displayName: 'Ref Owners', column: \"Ref_Owners\", isVisible: false, OrderBy: 11 },\r\n        { displayName: 'Party District', column: \"Party_District\", isVisible: false, OrderBy: 12 },\r\n        { displayName: 'Party Mailing Name', column: \"Party_Mailing_Name\", isVisible: false, OrderBy: 13 }\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false,\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/withLOL?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.retailer.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOL Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Party   '),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Retailer_Name', 'string', 'Customer'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('liveStockValue', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Retailer Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.retailer}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Retailer_Id,\r\n                                                    label: item.Retailer_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Retailer\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RetailerClosingWithLOL;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst LosBasedClosingReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Brand', column: \"Brand_Name\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Stock Item', column: \"Stock_Item\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Group ST', column: \"Group_ST\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Bag', column: \"Bag\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Stock Group', column: \"Stock_Group\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'S Sub Group 1', column: \"S_Sub_Group_1\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Grade Item Group', column: \"Grade_Item_Group\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Item Name Modified', column: \"Item_Name_Modified\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'POS Group', column: \"POS_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'POS Item Name', column: \"POS_Item_Name\", isVisible: false, OrderBy: 10 },\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        product: { value: '', label: 'Search Item' },\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/withLOS?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.product.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Product_Id, filters.product.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.product.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.StockValueOfItem), 0),\r\n                StockQuantityOfItem: groupedData.reduce((acc, item) => Addition(acc, item.StockQuantityOfItem), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.StockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOS Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Items'),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Product_Name', 'string', 'Product'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                            createCol('StockValueOfItem', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Product Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.product}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, product: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Product_Name).localeCompare(String(b?.Product_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Product_Id,\r\n                                                    label: item.Product_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Product\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LosBasedClosingReport;","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport ClosingStockItemBasedReport from './itemWise';\r\nimport ClosingStockRetailerBasedReport from './liveStock';\r\n// import RetailerClosingStock from '../../UserModule/retailer/closingStockRetailerBasedReport';\r\nimport LedgerBasedClosingStock from './ledgerWise';\r\nimport SalesPersonWiseGroupedLedgerClosingStock from './salesPersonWise';\r\nimport RetailerClosingWithLOL from './lolBased';\r\nimport LosBasedClosingReport from './losBased';\r\nimport { getPreviousDate, ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: getPreviousDate(30),\r\n        Todate: ISOString(),\r\n        FilterFromDate: getPreviousDate(30),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ClosingStockItemBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Ledger Wise',\r\n            component: (\r\n                <LedgerBasedClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOL Based',\r\n            component: (\r\n                <RetailerClosingWithLOL\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOS Based',\r\n            component: (\r\n                <LosBasedClosingReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Live Stock',\r\n            component: (\r\n                <ClosingStockRetailerBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Sales Person Based',\r\n            component: (\r\n                <SalesPersonWiseGroupedLedgerClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","loadingOn","loadingOff","Fromdate","Todate","reportData","setReportData","useState","filters","setFilters","searchItem","value","label","baseData","setBaseData","itemDropDown","useEffect","fetchLink","then","data","pre","catch","e","console","error","checkIsNumber","success","sumValue","useMemo","reduce","acc","item","Addition","stockValueOfItem","_jsx","FilterableTable","title","NumberFormat","EnableSerialNumber","dataArray","ButtonArea","_Fragment","children","minWidth","Select","menuPortalTarget","document","body","onChange","options","isDisabled","map","Item_Id","Item_Name","styles","isSearchable","required","placeholder","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref2","row","Do_Date","LocalDate","_ref3","closingDate","_ref4","getDaysBetween","ISOString","_ref5","_ref6","stockQuantityOfItem","_ref7","stockRateOfItem","_ref8","retailer","dataValue","toArray","liveStockValue","filter","isEqualNumber","Retailer_Id","sort","a","b","String","Retailer_Name","localeCompare","retailers","setRetailers","productClosingStock","setProductClosingStock","customer","productBasedColumn","sum","product","headerFontSizePx","bodyFontSizePx","marginRight","obj","reload","groupedSalesPersonData","groupData","salesPerson","groupedData","deliveryDates","party","Latest_Delivery_Date","d","isValidDate","closingDates","Latest_Closing_Date","entryDate","length","Date","Math","max","updateDate","entryDays","updateDays","entries","isExpendable","expandableComp","groupingColumns","setGroupingColumns","displayName","column","OrderBy","groupColumn","settingsDialog","groupedArray","lolData","closeDialog","_jsxs","IconButton","size","onClick","FilterAlt","className","col","toNumber","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","target","colKey","stringCompare","colInd","Card","component","Paper","Switch","checked","Boolean","prevColumns","preCol","type","DialogActions","Button","Product_Id","StockValueOfItem","StockQuantityOfItem","Product_Name","tabValue","setTabValue","dateFilter","setDateFilter","getPreviousDate","FilterFromDate","FilterTodate","tabData","ClosingStockItemBasedReport","LedgerBasedClosingStock","RetailerClosingWithLOL","LosBasedClosingReport","ClosingStockRetailerBasedReport","SalesPersonWiseGroupedLedgerClosingStock","htmlFor","Search","TabContext","Box","sx","borderColor","TabList","indicatorColor","n","scrollButtons","tab","tabInd","Tab","TabPanel","p","pt"],"sourceRoot":""}
{"version":3,"file":"static/js/8836.ed9bde5d.chunk.js","mappings":"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","sources":["Pages/Masters/loslist.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  tableCellClasses,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Tooltip,\r\n  Switch,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  Card,\r\n  CircularProgress,\r\n  InputAdornment,\r\n  Chip\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport {\r\n  Settings as SettingsIcon,\r\n  Search as SearchIcon,\r\n  Clear as ClearIcon,\r\n  ArrowUpward as AscIcon,\r\n  ArrowDownward as DescIcon,\r\n  FilterList as FilterIcon,\r\n  Cancel as CancelIcon,\r\n  Save as SaveIcon,\r\n  Edit as EditIcon,\r\n    Download as DownloadIcon,\r\n    Upload as FileUploadIcon\r\n} from \"@mui/icons-material\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport { getSessionUser } from \"../../Components/functions\";\r\nimport api from '../../API';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#b8b8b8\",\r\n    color: \"#000000\",\r\n    fontWeight: \"bold\",\r\n    borderRight: \"1px solid #e0e0e0\",\r\n    \"&:last-child\": {\r\n      borderRight: \"none\",\r\n    },\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"12px 16px\",\r\n    borderRight: \"1px solid #e0e0e0\",\r\n    \"&:last-child\": {\r\n      borderRight: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(even)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.action.selected,\r\n  },\r\n}));\r\n\r\nconst PaginationContainer = styled(\"div\")({\r\n  display: \"flex\",\r\n  justifyContent: \"flex-end\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n  padding: \"16px\",\r\n  backgroundColor: \"#f5f5f5\",\r\n  borderTop: \"1px solid #e0e0e0\",\r\n});\r\n\r\nconst PROTECTED_COLUMNS = ['Auto_Id', 'Stock_Tally_Id', 'Stock_Item', 'Grade_Item_Group', 'Item_Name_Modified'];\r\nfunction Loslist() {\r\n  const [lolData, setLolData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [columnSettings, setColumnSettings] = useState([]);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [originalColumnSettings, setOriginalColumnSettings] = useState([]);\r\n  const [columnDropDown, setColumnDropDown] = useState([]);\r\n  const [allData, setAllData] = useState([]);\r\n  const [isApplying, setIsApplying] = useState(false);\r\n  const [searchValues, setSearchValues] = useState({});\r\n  const [appliedFilters, setAppliedFilters] = useState({});\r\n  const [globalSearch, setGlobalSearch] = useState(\"\");\r\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: \"asc\" });\r\n   const [selectedRows, setSelectedRows] = useState([]);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  // const [currentRowData, setCurrentRowData] = useState(null);\r\n  const [editedData, setEditedData] = useState({});\r\n  const[open,setOpen]=useState(false)\r\n  const [isLoading, setIsLoading] = useState(false);\r\nconst[data,setData]=useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const user = getSessionUser().user;\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n  const fetchColumnData = async () => {\r\n    try {\r\n      const dropData = await fetchLink({\r\n        address: `masters/columns/dropDownLos?company_id=${parseData?.companyId}`,\r\n      });\r\n\r\n      if (dropData.success) {\r\n        setColumnDropDown(dropData.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching columns:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnData();\r\n  }, [parseData?.companyId]);\r\n\r\n\r\nconst handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  {isLoading && (\r\n    <Box sx={{ mt: 2, textAlign: 'center' }}>\r\n      <Typography variant=\"body2\" color=\"text.secondary\">\r\n        Processing your file, please wait...\r\n      </Typography>\r\n    </Box>\r\n  )}\r\n\r\nconst handleCheckboxChange = (row) => {\r\n  setSelectedRows(prevSelected => {\r\n    const isSelected = prevSelected.some(selectedRow => selectedRow.Stock_Tally_Id === row.Stock_Tally_Id);\r\n    return isSelected\r\n      ? prevSelected.filter(selectedRow => selectedRow.Stock_Tally_Id !== row.Stock_Tally_Id )\r\n      : [...prevSelected, row];\r\n  });\r\n};\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const columnRes = await fetchLink({\r\n          address: `masters/displayLosColumn?company_id=${parseData?.companyId}`,\r\n        });\r\n\r\n        if (!columnRes.success || !Array.isArray(columnRes.data)) {\r\n          console.error(\"No display columns found\");\r\n          return;\r\n        }\r\n\r\n        const sortedColumns = [...columnRes.data].sort(\r\n          (a, b) => a.Position - b.Position\r\n        );\r\n        setColumnSettings(sortedColumns);\r\n        setOriginalColumnSettings([...sortedColumns]);\r\n\r\n        const visibleColumns = sortedColumns\r\n          .filter((col) => col.status === 1)\r\n          .sort((a, b) => a.Position - b.Position)\r\n          .map((col) => ({\r\n            header: col.Alias_Name || col.ColumnName,\r\n            accessor: col.ColumnName,\r\n            position: col.Position,\r\n          }));\r\n\r\n        setColumns(visibleColumns);\r\n\r\n        const dataRes = await fetchLink({ address: `masters/getlosDetails` });\r\n\r\n        if (dataRes.success && Array.isArray(dataRes.data)) {\r\n          setAllData(dataRes.data);\r\n\r\n          const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n          const filteredData = dataRes.data.map((row) => {\r\n            const filteredRow = {};\r\n            allowedKeys.forEach((key) => {\r\n              filteredRow[key] = row[key] || \"\";\r\n            });\r\n            return filteredRow;\r\n          });\r\n\r\n          setLolData(filteredData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [data]);\r\n\r\nconst handlePositionChange = (columnId, newPosition) => {\r\n  const positionValue = parseInt(newPosition);\r\n  \r\n  if (!isNaN(positionValue)) {\r\n    setColumnDropDown(prev =>\r\n      prev.map(col =>\r\n        col.Id === columnId ? { ...col, Position: positionValue } : col\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\n  const handleAliasChange = (columnId, newAlias) => {\r\n    setColumnDropDown((prev) =>\r\n      prev.map((col) =>\r\n        col.Id === columnId ? { ...col, Alias_Name: newAlias } : col\r\n      )\r\n    );\r\n  };\r\n\r\n  const getColumnStatus = (columnId) => {\r\n    const column = columnSettings.find((col) => col.Id === columnId);\r\n    return column ? column.status === 1 : false;\r\n  };\r\n\r\n  const handleColumnToggle = (columnId, isChecked) => {\r\n    const column = columnDropDown.find((col) => col.Id === columnId);\r\n\r\n    if (column?.Position <= 5) {\r\n      toast.error(\"First 5 columns cannot be disabled\");\r\n      return;\r\n    }\r\n\r\n    let updatedSettings;\r\n\r\n    if (columnSettings.some((col) => col.Id === columnId)) {\r\n      updatedSettings = columnSettings.map((col) =>\r\n        col.Id === columnId ? { ...col, status: isChecked ? 1 : 0 } : col\r\n      );\r\n    } else {\r\n      const newColumn = columnDropDown.find((col) => col.Id === columnId);\r\n      if (newColumn) {\r\n        updatedSettings = [\r\n          ...columnSettings,\r\n          {\r\n            ...newColumn,\r\n            status: isChecked ? 1 : 0,\r\n          },\r\n        ];\r\n      } else {\r\n        updatedSettings = [...columnSettings];\r\n      }\r\n    }\r\n\r\n    updatedSettings.sort((a, b) => a.Position - b.Position);\r\n    setColumnSettings(updatedSettings);\r\n  };\r\n\r\n  const handleEditClick = (rowData) => {\r\n    // setCurrentRowData(rowData);\r\n    setEditedData({ ...rowData });\r\n    setEditDialogOpen(true);\r\n  };\r\n\r\n  const handleSaveChanges = async () => {\r\n    try {\r\n      const updateResponse = await fetchLink({\r\n        address: \"masters/updateLosDetails\",\r\n        method: \"PUT\",\r\n        bodyData: editedData,\r\n         headers: {\r\n            Db: user?.Company_id,\r\n          },\r\n      });\r\n\r\n      if (!updateResponse.success) {\r\n        throw new Error(updateResponse.message || \"Failed to update row\");\r\n      }\r\n\r\n      setAllData(prevData => \r\n      prevData.map(row => \r\n        row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n      )\r\n    );\r\n\r\n       setLolData(prevData =>\r\n      prevData.map(row => \r\n        row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n      )\r\n    );\r\n\r\n      setEditDialogOpen(false);\r\n      // setIsUpdated(true)\r\n    \r\n    \r\n      toast.success(\"Row updated successfully\");\r\n    } catch (error) {\r\n   \r\n      toast.error(\"Failed to update row\");\r\n  }\r\n  }\r\n\r\n\r\n  \r\nconst applyColumnChanges = async () => {\r\n  setIsApplying(true);\r\n  try {\r\n \r\n    const updatedSettings = columnSettings.map((col) => {\r\n      const dropdownCol = columnDropDown.find((dc) => dc.Id === col.Id);\r\n      return dropdownCol ? {\r\n        ...col,\r\n        Position: dropdownCol.Position,\r\n        Alias_Name: dropdownCol.Alias_Name,\r\n      } : col;\r\n    });\r\n\r\n   \r\n    const positionMap = {};\r\n    const duplicatePositions = new Set();\r\n    \r\n    updatedSettings.forEach((col) => {\r\n      if (positionMap[col.Position]) {\r\n        duplicatePositions.add(col.Position);\r\n      }\r\n      positionMap[col.Position] = true;\r\n    });\r\n\r\n    if (duplicatePositions.size > 0) {\r\n      const positionsList = Array.from(duplicatePositions).join(', ');\r\n      toast.error(`Duplicate positions found: ${positionsList}`);\r\n      return; \r\n    }\r\n\r\n    setColumnSettings(updatedSettings);\r\n    setOriginalColumnSettings(updatedSettings);\r\n\r\n    const updateResponse = await fetchLink({\r\n      address: \"masters/updateLosColumnChanges\",\r\n      method: \"PUT\",\r\n      bodyData: {\r\n        columns: updatedSettings.map((col) => ({\r\n          id: col.Id,\r\n          status: col.status,\r\n          position: col.Position,\r\n          alias_name: col.Alias_Name,\r\n          column_name: col.ColumnName,\r\n        })),\r\n        company_id: parseData?.companyId,\r\n      },\r\n    });\r\n\r\n    if (!updateResponse.success) {\r\n      throw new Error(updateResponse.message || \"Failed to update column statuses\");\r\n    }\r\n\r\n    const visibleColumns = updatedSettings\r\n      .filter((col) => col.status === 1)\r\n      .sort((a, b) => a.Position - b.Position)\r\n      .map((col) => ({\r\n        header: col.Alias_Name || col.ColumnName,\r\n        accessor: col.ColumnName,\r\n        position: col.Position,\r\n      }));\r\n\r\n    setColumns(visibleColumns);\r\n\r\n    if (allData.length > 0) {\r\n      const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n      const filteredData = allData.map((row) => {\r\n        const filteredRow = {};\r\n        allowedKeys.forEach((key) => {\r\n          filteredRow[key] = row[key] || \"\";\r\n        });\r\n        return filteredRow;\r\n      });\r\n      setLolData(filteredData);\r\n    }\r\n\r\n    setDialogOpen(false);\r\n    toast.success(\"Changes Saved\");\r\n  } catch (error) {\r\n    console.error(\"Error updating column statuses:\", error);\r\n    toast.error(error.message || \"Failed to update columns. Please try again.\");\r\n  } finally {\r\n    setIsApplying(false);\r\n  }\r\n};\r\n  \r\n  const resetToDefaults = () => {\r\n    setColumnSettings([...originalColumnSettings]);\r\n    setColumnDropDown([...originalColumnSettings]);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getPageSizeOptions = () => {\r\n    const baseOptions = [5, 10, 15, 30, 60, 120, 240];\r\n    const maxOption = Math.max(...baseOptions);\r\n\r\n    if (lolData.length > maxOption) {\r\n      return [...baseOptions];\r\n    }\r\n    return baseOptions;\r\n  };\r\n\r\n  const handleSearchChange = (columnName, value) => {\r\n    setSearchValues((prev) => ({\r\n      ...prev,\r\n      [columnName]: value,\r\n    }));\r\n  };\r\n\r\n  const applySearch = () => {\r\n    setAppliedFilters({ ...searchValues });\r\n    setPage(0);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setSearchValues({});\r\n    setAppliedFilters({});\r\n    setGlobalSearch(\"\");\r\n    setPage(0);\r\n  };\r\n\r\n  const requestSort = (key) => {\r\n    let direction = \"asc\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n      direction = \"desc\";\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n\r\n  \r\n  const filteredData = useMemo(() => {\r\n    let filterableData = [...allData];\r\n  \r\n    if (globalSearch) {\r\n      const searchTerms = globalSearch\r\n        .split(\",\")\r\n        .map((term) => term.trim().toLowerCase())\r\n        .filter(Boolean);\r\n  \r\n      filterableData = filterableData.filter((row) =>\r\n        searchTerms.some((term) =>\r\n          Object.values(row).some((val) =>\r\n            String(val).toLowerCase().includes(term)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  \r\n    filterableData = filterableData.filter((row) =>\r\n      Object.keys(appliedFilters).every((key) => {\r\n        if (!appliedFilters[key]) return true;\r\n        return String(row[key])\r\n          .toLowerCase()\r\n          .includes(String(appliedFilters[key]).toLowerCase());\r\n      })\r\n    );\r\n  \r\n    if (sortConfig.key) {\r\n      filterableData.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === \"asc\" ? -1 : 1;\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === \"asc\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n  \r\n    return filterableData;\r\n  }, [allData, globalSearch, appliedFilters, sortConfig]);\r\n  \r\n  \r\n  \r\n  const renderTableHeader = () => (\r\n    <TableHead>\r\n      <TableRow>\r\n        <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          S.No\r\n        </StyledTableCell>\r\n           <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          CheckBox\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          Actions\r\n        </StyledTableCell>\r\n        {columns.map((col) => (\r\n          <StyledTableCell key={col.accessor} align=\"center\">\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              {col.header}\r\n              <Tooltip\r\n                title={`Sort ${\r\n                  sortConfig.key === col.accessor\r\n                    ? sortConfig.direction === \"asc\"\r\n                      ? \"Descending\"\r\n                      : \"Ascending\"\r\n                    : \"Ascending\"\r\n                }`}\r\n              >\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={() => requestSort(col.accessor)}\r\n                  color={\r\n                    sortConfig.key === col.accessor ? \"primary\" : \"default\"\r\n                  }\r\n                >\r\n                  {sortConfig.key === col.accessor ? (\r\n                    sortConfig.direction === \"asc\" ? (\r\n                      <AscIcon />\r\n                    ) : (\r\n                      <DescIcon />\r\n                    )\r\n                  ) : (\r\n                    <FilterIcon />\r\n                  )}\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            <TextField\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Filter...\"\r\n              value={searchValues[col.accessor] || \"\"}\r\n              onChange={(e) => handleSearchChange(col.accessor, e.target.value)}\r\n              sx={{ width: \"100%\", mt: 1 }}\r\n              InputProps={{\r\n                endAdornment: searchValues[col.accessor] && (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleSearchChange(col.accessor, \"\")}\r\n                    >\r\n                      <ClearIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n\r\n  const exportSelectedRowsToExcel = (columns, selectedRows) => {\r\n  \r\n    try {\r\n      if (!Array.isArray(columns) || !Array.isArray(selectedRows)) {\r\n        throw new Error(\"Invalid data: columns and selectedRows must be arrays\");\r\n      }\r\n  \r\n      const filteredColumns = columns.filter(\r\n        (col) => col.accessor !== \"Auto_Id\" && col.accessor !== \"Stock_Tally_Id\"\r\n      );\r\n  \r\n      const headers = filteredColumns.map((col) => {\r\n        if (typeof col.header !== \"string\") {\r\n          console.warn(\"Missing or invalid header for column:\", col);\r\n          return \"UNNAMED_COLUMN\";\r\n        }\r\n        return col.header;\r\n      });\r\n  \r\n      const rowData = selectedRows.map((row) =>\r\n        filteredColumns.map((col) => row[col.accessor] ?? \"\")\r\n      );\r\n  \r\n      const excelData = [headers, ...rowData]; \r\n  \r\n      const ws = XLSX.utils.aoa_to_sheet(excelData);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws, \"SelectedData\");\r\n  \r\n      const timestamp = new Date().toISOString().slice(0, 10);\r\n      XLSX.writeFile(wb, `selected_data_${timestamp}.xlsx`);\r\n    } catch (error) {\r\n      console.error(\"Excel export failed:\", error);\r\n      alert(`Export failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFile) return;\r\n\r\n    try {\r\n       setIsLoading(true);\r\n      await uploadExcelFile(selectedFile);\r\n      handleClose();\r\n      \r\n    setData(prev => !prev); \r\n      toast.success(\"File uploaded successfully\");\r\n    } catch (error) {\r\n      toast.error(`Upload failed: ${error.message}`);\r\n    } finally {\r\n    setIsLoading(false);\r\n  }\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSelectedFile(null);\r\n    setIsLoading(false)\r\n  };\r\n const uploadExcelFile = async (file) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('company_id', parseData?.Company_id);\r\n    formData.append('Created_By', parseData?.UserId);\r\n    formData.append('isRetailer', '1');\r\n\r\n    console.log('FormData contents:');\r\n    for (let [key, value] of formData.entries()) {\r\n      console.log(key, value instanceof File ? `File: ${value.name}` : value);\r\n    }\r\n        const response= await fetch(`${api}masters/uploadLosExcel`, {\r\n      method: 'POST',\r\n      body: formData,\r\n        headers: {\r\n          Db: user?.Company_id,\r\n        },\r\n    })\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.message || 'Upload failed');\r\n    }\r\n\r\n  const result = await response.json();\r\n    setIsLoading(false); \r\n    return result;\r\n\r\n  } catch (error) {\r\n    setIsLoading(false)\r\n    console.error('Upload Error:', {\r\n      message: error.message,\r\n      stack: error.stack,\r\n      time: new Date().toISOString()\r\n    });\r\n    throw new Error(`Upload failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      alert(\"File size exceeds 5MB\");\r\n      return;\r\n    }\r\n    setSelectedFile(file);\r\n  };\r\n  return (\r\n    <Box\r\n      sx={{\r\n        p: 3,\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"8px\",\r\n        boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          mb: 3,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\">LOS LIST</Typography>\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  {selectedRows.length > 0 && (\r\n              <Chip\r\n                label={`SELECTED ROWS : ${selectedRows.length} `}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                sx={{ mr: 2 }}\r\n              />\r\n            )}\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            placeholder=\"Search...\"\r\n            value={globalSearch}\r\n            onChange={(e) => setGlobalSearch(e.target.value)}\r\n            sx={{ width: 300, mr: 2 }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n              endAdornment: globalSearch && (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton size=\"small\" onClick={() => setGlobalSearch(\"\")}>\r\n                    <ClearIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <Tooltip title=\"Column Settings\">\r\n            <IconButton onClick={() => setDialogOpen(true)}>\r\n              <SettingsIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SearchIcon />}\r\n            onClick={applySearch}\r\n            disabled={Object.keys(searchValues).length === 0}\r\n            sx={{ ml: 2 }}\r\n          >\r\n            Apply Filters\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<ClearIcon />}\r\n            onClick={clearSearch}\r\n            disabled={Object.keys(appliedFilters).length === 0 && !globalSearch}\r\n            sx={{ ml: 1 }}\r\n          >\r\n            Clear All\r\n          </Button>\r\n               <MenuItem onClick={() => exportSelectedRowsToExcel(columns, selectedRows)}>\r\n                        <DownloadIcon fontSize=\"small\" sx={{ mr: 1 }} /> Download{\" \"}\r\n                      </MenuItem>\r\n                    <MenuItem onClick={handleClickOpen}>\r\n                      <FileUploadIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                      Upload\r\n                    </MenuItem>\r\n          \r\n        </Box>\r\n      </Box>\r\n\r\n      <Dialog\r\n        open={dialogOpen}\r\n        onClose={() => setDialogOpen(false)}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Column Settings</DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"row\">\r\n            {columnDropDown\r\n              .sort((a, b) => a.Position - b.Position)\r\n              .map((column) => (\r\n                <div className=\"col-lg-4 col-md-6 p-2\" key={column.Id}>\r\n                  <Card className=\"p-2\">\r\n                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                      <Switch\r\n                        checked={getColumnStatus(column.Id)}\r\n                        onChange={(e) =>\r\n                          handleColumnToggle(column.Id, e.target.checked)\r\n                        }\r\n                        disabled={column.Position <= 5}\r\n                        color={column.Position <= 5 ? \"default\" : \"primary\"}\r\n                      />\r\n                      <div>{column?.ColumnName}</div>\r\n\r\n                      <div className=\"d-flex align-items-center gap-2\">\r\n                      <TextField\r\n  type=\"number\"\r\n  size=\"small\"\r\n  variant=\"outlined\"\r\n  value={column.Position ?? 0}\r\n  onChange={(e) => handlePositionChange(column.Id, e.target.value)}\r\n  sx={{ width: \"70px\" }}\r\n  inputProps={{\r\n    min: 1,\r\n    readOnly: PROTECTED_COLUMNS.includes(column.ColumnName),\r\n  }}\r\n  disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n/>\r\n\r\n                        <TextField\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          value={column.Alias_Name ?? \"\"}\r\n                          onChange={(e) =>\r\n                            handleAliasChange(column.Id, e.target.value)\r\n                          }\r\n                           inputProps={{\r\n    min: 1,\r\n    readOnly: PROTECTED_COLUMNS.includes(column.ColumnName),\r\n  }}\r\n  disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Card>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={resetToDefaults} variant=\"outlined\">\r\n            Reset\r\n          </Button>\r\n          <Button onClick={() => setDialogOpen(false)} color=\"error\">\r\n            Close\r\n          </Button>\r\n          <Button\r\n            onClick={applyColumnChanges}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isApplying}\r\n          >\r\n            {isApplying ? \"Applying...\" : \"Apply\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={open} fullWidth >\r\n            <DialogTitle>Upload Excel File</DialogTitle>\r\n            <DialogContent>\r\n              <Box\r\n                sx={{ display: \"flex\", alignItems: \"center\", gap: 2, mt: 2 }}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  component=\"label\"\r\n                  //   startIcon={<CloudUploadIcon />}\r\n                >\r\n                  Browse\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".xls,.xlsx\"\r\n                    hidden\r\n                    onChange={handleFileChange}\r\n                  />\r\n                </Button>\r\n                <Typography>\r\n                  {selectedFile ? selectedFile.name : \"No file selected\"}\r\n                </Typography>\r\n              </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose}>Cancel</Button>\r\n              <Button\r\n                onClick={handleUpload}\r\n                variant=\"contained\"\r\n                 disabled={!selectedFile || isLoading}\r\n                startIcon={isLoading ? <CircularProgress size={20} color=\"inherit\" /> : null}  >\r\n                 {isLoading ? 'Uploading...' : 'Upload'}\r\n                \r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n\r\n\r\n      <Dialog\r\n        open={editDialogOpen}\r\n        onClose={() => setEditDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Edit Row</DialogTitle>\r\n  <DialogContent>\r\n  <div className=\"container-fluid\" style={{ maxHeight: '80vh', overflow: 'auto' }}>\r\n    <div className=\"row g-3\">\r\n      {columns.map((col) => (\r\n        <div key={col.accessor} className=\"col-12 col-sm-6 col-md-4\">\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">{col.header}</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-lg\"\r\n              value={editedData[col.accessor] || \"\"}\r\n              onChange={(e) => setEditedData({\r\n                ...editedData,\r\n                [col.accessor]: e.target.value\r\n              })}\r\n              disabled={\r\n                col.accessor === \"Auto_Id\" || \r\n                col.accessor === \"Stock_Tally_Id\" || \r\n                col.accessor === \"Stock_Item\"\r\n              }\r\n              style={{\r\n                padding: '1rem 1rem',\r\n                fontSize: '1rem'\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n</DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => setEditDialogOpen(false)}\r\n            variant=\"outlined\"\r\n            startIcon={<CancelIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSaveChanges}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {columns.length > 0 && allData.length > 0 ? (\r\n        <Paper elevation={0} sx={{ border: \"1px solid #e0e0e0\" }}>\r\n          <TableContainer>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"ledger table\"\r\n              sx={{ minWidth: 650 }}\r\n            >\r\n              {renderTableHeader()}\r\n              <TableBody>\r\n                {filteredData\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, idx) => (\r\n                   <StyledTableRow key={`${row.Auto_Id}-${idx}`}> \r\n                      <StyledTableCell align=\"center\">\r\n                        {page * rowsPerPage + idx + 1}\r\n                      </StyledTableCell>\r\n                        <StyledTableCell>\r\n                                              \r\n                                            <IconButton>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedRows.some(selectedRow => selectedRow.Stock_Tally_Id === row.Stock_Tally_Id)}\r\n                          onChange={() => handleCheckboxChange(row)}\r\n                        \r\n                          onFocus={(e) => e.target.blur()}\r\n                          style={{\r\n                            transform: \"scale(1.5)\",\r\n                            width: \"14px\",\r\n                            height: \"20px\"\r\n                          }}\r\n                        />\r\n                      </IconButton>\r\n                                            </StyledTableCell>\r\n                      <StyledTableCell align=\"center\">\r\n                        <Tooltip title=\"Edit\">\r\n                          <IconButton\r\n                            onClick={() => handleEditClick(row)}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            sx={{\r\n                              \"&:hover\": {\r\n                                backgroundColor: \"rgba(25, 118, 210, 0.08)\",\r\n                                transform: \"scale(1.1)\",\r\n                              },\r\n                              transition: \"transform 0.2s\",\r\n                            }}\r\n                          >\r\n                            <EditIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </StyledTableCell>\r\n                      {columns.map((col) => (\r\n                        <StyledTableCell\r\n                          key={`${idx}-${col.accessor}`}\r\n                          align=\"center\"\r\n                        >\r\n                          {row[col.accessor]}\r\n                        </StyledTableCell>\r\n                      ))}\r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <PaginationContainer>\r\n            <TablePagination\r\n              component=\"div\"\r\n              count={filteredData.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              rowsPerPageOptions={[]}\r\n              sx={{\r\n                \"& .MuiTablePagination-toolbar\": {\r\n                  padding: 0,\r\n                  minHeight: \"auto\",\r\n                },\r\n                \"& .MuiTablePagination-spacer\": {\r\n                  display: \"none\",\r\n                },\r\n                \"& .MuiTablePagination-actions\": {\r\n                  marginLeft: \"16px\",\r\n                },\r\n              }}\r\n            />\r\n            <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\r\n              <InputLabel>Rows per page</InputLabel>\r\n              <Select\r\n                value={rowsPerPage}\r\n                onChange={handleChangeRowsPerPage}\r\n                label=\"Rows per page\"\r\n              >\r\n                {getPageSizeOptions().map((option) => (\r\n                  <MenuItem key={option} value={option}>\r\n                    {option}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </PaginationContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Typography>Loading...</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Loslist;\r\n"],"names":["StyledTableCell","styled","TableCell","_ref","theme","concat","tableCellClasses","head","backgroundColor","color","fontWeight","borderRight","body","fontSize","padding","StyledTableRow","TableRow","_ref2","palette","action","hover","selected","PaginationContainer","display","justifyContent","alignItems","gap","borderTop","PROTECTED_COLUMNS","lolData","setLolData","useState","columns","setColumns","page","setPage","rowsPerPage","setRowsPerPage","columnSettings","setColumnSettings","dialogOpen","setDialogOpen","originalColumnSettings","setOriginalColumnSettings","columnDropDown","setColumnDropDown","allData","setAllData","isApplying","setIsApplying","searchValues","setSearchValues","appliedFilters","setAppliedFilters","globalSearch","setGlobalSearch","sortConfig","setSortConfig","key","direction","selectedRows","setSelectedRows","editDialogOpen","setEditDialogOpen","editedData","setEditedData","open","setOpen","isLoading","setIsLoading","data","setData","selectedFile","setSelectedFile","user","getSessionUser","parseData","JSON","parse","localStorage","getItem","useEffect","async","dropData","fetchLink","address","companyId","success","error","console","fetchColumnData","Box","Typography","columnRes","Array","isArray","sortedColumns","sort","a","b","Position","visibleColumns","filter","col","status","map","header","Alias_Name","ColumnName","accessor","position","dataRes","allowedKeys","filteredData","row","filteredRow","forEach","fetchData","getColumnStatus","columnId","column","find","Id","handleSearchChange","columnName","value","prev","_objectSpread","useMemo","filterableData","searchTerms","split","term","trim","toLowerCase","Boolean","some","Object","values","val","String","includes","keys","every","handleClose","uploadExcelFile","formData","FormData","append","file","Company_id","UserId","log","entries","File","name","response","fetch","api","method","headers","Db","ok","errorData","json","catch","Error","message","result","stack","time","Date","toISOString","_jsxs","sx","p","borderRadius","boxShadow","children","mb","_jsx","variant","length","Chip","label","size","mr","TextField","placeholder","onChange","e","target","width","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onClick","ClearIcon","Tooltip","title","SettingsIcon","Button","startIcon","applySearch","disabled","ml","clearSearch","MenuItem","exportSelectedRowsToExcel","filteredColumns","excelData","warn","_row$col$accessor","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","timestamp","slice","alert","DownloadIcon","handleClickOpen","FileUploadIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","className","_column$Position","_column$Alias_Name","Card","Switch","checked","handleColumnToggle","isChecked","toast","updatedSettings","newColumn","type","handlePositionChange","newPosition","positionValue","parseInt","isNaN","inputProps","min","readOnly","handleAliasChange","newAlias","DialogActions","resetToDefaults","dropdownCol","dc","positionMap","duplicatePositions","Set","add","positionsList","from","join","updateResponse","bodyData","id","alias_name","column_name","company_id","mt","component","accept","hidden","event","files","CircularProgress","style","maxHeight","overflow","CancelIcon","prevData","Auto_Id","SaveIcon","Paper","elevation","border","TableContainer","Table","stickyHeader","minWidth","TableHead","align","requestSort","AscIcon","DescIcon","FilterIcon","TableBody","idx","selectedRow","Stock_Tally_Id","prevSelected","handleCheckboxChange","onFocus","blur","transform","height","handleEditClick","rowData","transition","EditIcon","TablePagination","count","onPageChange","handleChangePage","newPage","rowsPerPageOptions","minHeight","marginLeft","FormControl","InputLabel","Select","getPageSizeOptions","baseOptions","maxOption","Math","max","option"],"sourceRoot":""}
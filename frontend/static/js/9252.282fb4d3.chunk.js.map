{"version":3,"file":"static/js/9252.282fb4d3.chunk.js","mappings":"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","sources":["Pages/Masters/lollist.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    tableCellClasses,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    TablePagination,\r\n    Select,\r\n    MenuItem,\r\n    FormControl,\r\n    InputLabel,\r\n    Box,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n    Switch,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n    Card,\r\n    CircularProgress,\r\n    InputAdornment,\r\n    Chip,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport {\r\n    Settings as SettingsIcon,\r\n    Search as SearchIcon,\r\n    Clear as ClearIcon,\r\n    ArrowUpward as AscIcon,\r\n    ArrowDownward as DescIcon,\r\n    FilterList as FilterIcon,\r\n    Cancel as CancelIcon,\r\n    Save as SaveIcon,\r\n    Edit as EditIcon,\r\n    Download as DownloadIcon,\r\n    Upload as FileUploadIcon,\r\n} from \"@mui/icons-material\";\r\nimport { getSessionUser } from \"../../Components/functions\";\r\nimport * as XLSX from \"xlsx\";\r\nimport api from \"../../API\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: \"#EDF0F7\",\r\n        color: \"#000000\",\r\n        fontWeight: \"bold\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        padding: \"12px 16px\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ highlight }) => ({\r\n    backgroundColor: highlight ? \"#84EAB3\" : \"#fff\",\r\n    ...(highlight && {\r\n        borderLeft: \"4px solid #1976d2\",\r\n    }),\r\n    \"&:hover\": {\r\n        backgroundColor: highlight ? \"#84EAB5\" : \"#f5f5f5\",\r\n    },\r\n}));\r\n\r\nconst PaginationContainer = styled(\"div\")({\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    gap: \"16px\",\r\n    padding: \"16px\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    borderTop: \"1px solid #e0e0e0\",\r\n});\r\n\r\nconst PROTECTED_COLUMNS = [\r\n    // \"Auto_Id\",\r\n    // \"Ledger_Tally_Id\",\r\n    \"Ledger_Name\",\r\n    \"Ledger_Alias\",\r\n    // \"Actual_Party_Name_with_Brokers\",\r\n];\r\n\r\nfunction Lollist({ loadingOn, loadingOff }) {\r\n    const [lolData, setLolData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [columnSettings, setColumnSettings] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [originalColumnSettings, setOriginalColumnSettings] = useState([]);\r\n    const [columnDropDown, setColumnDropDown] = useState([]);\r\n    const [allData, setAllData] = useState([]);\r\n    const [isApplying, setIsApplying] = useState(false);\r\n    const [searchValues, setSearchValues] = useState({});\r\n    const [appliedFilters, setAppliedFilters] = useState({});\r\n    const [globalSearch, setGlobalSearch] = useState(\"\");\r\n    const [sortConfig, setSortConfig] = useState({ key: null, direction: \"asc\" });\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [editedData, setEditedData] = useState({});\r\n    const user = getSessionUser().user;\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState(false);\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const fetchColumnData = async () => {\r\n        try {\r\n            const dropData = await fetchLink({\r\n                address: `masters/columns/dropDown?company_id=${parseData?.companyId}`,\r\n            });\r\n\r\n            if (dropData.success) {\r\n                setColumnDropDown(dropData.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching columns:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchColumnData();\r\n    }, [parseData?.companyId]);\r\n\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n        try {\r\n            setIsLoading(true);  \r\n            loadingOn()\r\n            const columnRes = await fetchLink({\r\n                address: `masters/displayColumn?company_id=${parseData?.companyId}`,\r\n            });\r\n\r\n            if (!columnRes.success || !Array.isArray(columnRes.data)) {\r\n                console.error(\"No display columns found\");\r\n                return;\r\n            }\r\n\r\n            const sortedColumns = [...columnRes.data].sort(\r\n                (a, b) => a.Position - b.Position\r\n            );\r\n            setColumnSettings(sortedColumns);\r\n            setOriginalColumnSettings([...sortedColumns]);\r\n\r\n            const visibleColumns = sortedColumns\r\n                .filter(\r\n                    (col) =>\r\n                        col.status === 1 &&\r\n                        ![\"Auto_Id\", \"Ledger_Tally_Id\"].includes(col.ColumnName)\r\n                )\r\n                .sort((a, b) => a.Position - b.Position)\r\n                .map((col) => ({\r\n                    header: col.Alias_Name || col.ColumnName,\r\n                    accessor: col.ColumnName,\r\n                    position: col.Position,\r\n                }));\r\n            setColumns(visibleColumns);\r\n\r\n            const dataRes = await fetchLink({ address: `masters/getlolDetails` });\r\n\r\n            if (dataRes.success && Array.isArray(dataRes.data)) {\r\n                setAllData(dataRes.data);\r\n\r\n                const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                const filteredData = dataRes.data.map((row) => {\r\n                    const filteredRow = {};\r\n                    allowedKeys.forEach((key) => {\r\n                        filteredRow[key] = row[key] || \"\";\r\n                    });\r\n                    return filteredRow;\r\n                });\r\n\r\n                setLolData(filteredData);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error loading data:\", error);\r\n        } finally {\r\n            setIsLoading(false);  \r\n            loadingOff()\r\n        }\r\n    }\r\n\r\n    fetchData();\r\n}, [data, isApplying, parseData?.companyId]);\r\n\r\n\r\n    const handlePositionChange = (columnId, newPosition) => {\r\n        const positionValue = parseInt(newPosition);\r\n\r\n        if (!isNaN(positionValue)) {\r\n            setColumnDropDown((prev) =>\r\n                prev.map((col) =>\r\n                    col.Id === columnId ? { ...col, Position: positionValue } : col\r\n                )\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleAliasChange = (columnId, newAlias) => {\r\n        setColumnDropDown((prev) =>\r\n            prev.map((col) =>\r\n                col.Id === columnId ? { ...col, Alias_Name: newAlias } : col\r\n            )\r\n        );\r\n    };\r\n\r\n    const getColumnStatus = (columnId) => {\r\n        const column = columnSettings.find((col) => col.Id === columnId);\r\n        return column ? column.status === 1 : false;\r\n    };\r\n\r\n    const handleColumnToggle = (columnId, isChecked) => {\r\n        const column = columnDropDown.find((col) => col.Id === columnId);\r\n\r\n        if (column?.Position <= 5) {\r\n            toast.error(\"First 5 columns cannot be disabled\");\r\n            return;\r\n        }\r\n\r\n        let updatedSettings;\r\n\r\n        if (columnSettings.some((col) => col.Id === columnId)) {\r\n            updatedSettings = columnSettings.map((col) =>\r\n                col.Id === columnId ? { ...col, status: isChecked ? 1 : 0 } : col\r\n            );\r\n        } else {\r\n            const newColumn = columnDropDown.find((col) => col.Id === columnId);\r\n            if (newColumn) {\r\n                updatedSettings = [\r\n                    ...columnSettings,\r\n                    {\r\n                        ...newColumn,\r\n                        status: isChecked ? 1 : 0,\r\n                    },\r\n                ];\r\n            } else {\r\n                updatedSettings = [...columnSettings];\r\n            }\r\n        }\r\n\r\n        updatedSettings.sort((a, b) => a.Position - b.Position);\r\n        setColumnSettings(updatedSettings);\r\n    };\r\n\r\n    const handleEditClick = (rowData) => {\r\n        // setCurrentRowData(rowData);\r\n        setEditedData({ ...rowData });\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateDetails\",\r\n                method: \"PUT\",\r\n                bodyData: editedData,\r\n                headers: {\r\n                    Db: user?.Company_id,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(updateResponse.message || \"Failed to update row\");\r\n            }\r\n\r\n            setAllData((prevData) =>\r\n                prevData.map((row) =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setLolData((prevData) =>\r\n                prevData.map((row) =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setEditDialogOpen(false);\r\n            toast.success(\"Data updated successfully\");\r\n        } catch (error) {\r\n            console.error(\"Error updating row:\", error);\r\n            toast.error(\"Failed to update row\");\r\n        }\r\n    };\r\n\r\n    const applyColumnChanges = async () => {\r\n        setIsApplying(true);\r\n        try {\r\n            const updatedSettings = columnSettings.map((col) => {\r\n                const dropdownCol = columnDropDown.find((dc) => dc.Id === col.Id);\r\n                return dropdownCol\r\n                    ? {\r\n                        ...col,\r\n                        Position: dropdownCol.Position,\r\n                        Alias_Name: dropdownCol.Alias_Name,\r\n                    }\r\n                    : col;\r\n            });\r\n\r\n            const positionMap = {};\r\n            const duplicatePositions = new Set();\r\n\r\n            updatedSettings.forEach((col) => {\r\n                if (positionMap[col.Position]) {\r\n                    duplicatePositions.add(col.Position);\r\n                }\r\n                positionMap[col.Position] = true;\r\n            });\r\n\r\n            if (duplicatePositions.size > 0) {\r\n                const positionsList = Array.from(duplicatePositions).join(\", \");\r\n                toast.error(`Duplicate positions found: ${positionsList}`);\r\n                return;\r\n            }\r\n\r\n            setColumnSettings(updatedSettings);\r\n            setOriginalColumnSettings(updatedSettings);\r\n\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateColumnChanges\",\r\n                method: \"PUT\",\r\n                bodyData: {\r\n                    columns: updatedSettings.map((col) => ({\r\n                        id: col.Id,\r\n                        status: col.status,\r\n                        position: col.Position,\r\n                        alias_name: col.Alias_Name,\r\n                        column_name: col.ColumnName,\r\n                    })),\r\n                    company_id: parseData?.companyId,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(\r\n                    updateResponse.message || \"Failed to update column statuses\"\r\n                );\r\n            }\r\n\r\n            const visibleColumns = updatedSettings\r\n                .filter((col) => col.status === 1)\r\n                .sort((a, b) => a.Position - b.Position)\r\n                .map((col) => ({\r\n                    header: col.Alias_Name || col.ColumnName,\r\n                    accessor: col.ColumnName,\r\n                    position: col.Position,\r\n                }));\r\n\r\n            setColumns(visibleColumns);\r\n\r\n            if (allData.length > 0) {\r\n                const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                const filteredData = allData.map((row) => {\r\n                    const filteredRow = {};\r\n                    allowedKeys.forEach((key) => {\r\n                        filteredRow[key] = row[key] || \"\";\r\n                    });\r\n                    return filteredRow;\r\n                });\r\n                setLolData(filteredData);\r\n            }\r\n\r\n            setDialogOpen(false);\r\n            toast.success(\"Changes Saved\");\r\n        } catch (error) {\r\n            console.error(\"Error updating column statuses:\", error);\r\n            toast.error(\r\n                error.message || \"Failed to update columns. Please try again.\"\r\n            );\r\n        } finally {\r\n            setIsApplying(false);\r\n        }\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setSelectedFile(null);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file.size > 5 * 1024 * 1024) {\r\n            alert(\"File size exceeds 5MB\");\r\n            return;\r\n        }\r\n        setSelectedFile(file);\r\n    };\r\n\r\n    const uploadExcelFile = async (file) => {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            formData.append(\"company_id\", parseData?.Company_id);\r\n            formData.append(\"Created_By\", parseData?.UserId);\r\n            formData.append(\"isRetailer\", \"1\");\r\n\r\n            const response = await fetch(`${api}masters/uploadExcel`, {\r\n                method: \"POST\",\r\n                body: formData,\r\n                headers: {\r\n                    Db: user?.Company_id,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || \"Upload failed\");\r\n            }\r\n\r\n            const result = await response.json();\r\n            setIsLoading(false);\r\n            return result;\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            console.error(\"Upload Error:\", {\r\n                message: error.message,\r\n                stack: error.stack,\r\n                time: new Date().toISOString(),\r\n            });\r\n            throw new Error(`Upload failed: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const exportSelectedRowsToExcel = (columns, selectedRows) => {\r\n        try {\r\n            if (!Array.isArray(columns) || !Array.isArray(selectedRows)) {\r\n                throw new Error(\r\n                    \"Invalid data: columns and selectedRows must be arrays\"\r\n                );\r\n            }\r\n\r\n            const filteredColumns = columns.filter(\r\n                (col) =>\r\n                    col.accessor !== \"Auto_Id\" && col.accessor !== \"Ledger_Tally_Id\"\r\n            );\r\n\r\n            const headers = filteredColumns.map((col) => {\r\n                if (typeof col.header !== \"string\") {\r\n                    console.warn(\"Missing or invalid header for column:\", col);\r\n                    return \"UNNAMED_COLUMN\";\r\n                }\r\n                return col.header;\r\n            });\r\n\r\n            const rowData = selectedRows.map((row) =>\r\n                filteredColumns.map((col) => row[col.accessor] ?? \"\")\r\n            );\r\n\r\n            const excelData = [headers, ...rowData];\r\n\r\n            const ws = XLSX.utils.aoa_to_sheet(excelData);\r\n            const wb = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(wb, ws, \"SelectedData\");\r\n\r\n            const timestamp = new Date().toISOString().slice(0, 10);\r\n            XLSX.writeFile(wb, `selected_data_${timestamp}.xlsx`);\r\n        } catch (error) {\r\n            console.error(\"Excel export failed:\", error);\r\n            alert(`Export failed: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!selectedFile) return;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            await uploadExcelFile(selectedFile);\r\n            handleClose();\r\n            setData((prev) => !prev);\r\n            toast.success(\"File uploaded successfully\");\r\n        } catch (error) {\r\n            toast.error(`Upload failed: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetToDefaults = () => {\r\n        setColumnSettings([...originalColumnSettings]);\r\n        setColumnDropDown([...originalColumnSettings]);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const getPageSizeOptions = () => {\r\n        const baseOptions = [5, 10, 15, 30, 60, 120, 240];\r\n        const maxOption = Math.max(...baseOptions);\r\n\r\n        if (lolData.length > maxOption) {\r\n            return [...baseOptions];\r\n        }\r\n        return baseOptions;\r\n    };\r\n\r\n    const handleSearchChange = (columnName, value) => {\r\n        setSearchValues((prev) => ({\r\n            ...prev,\r\n            [columnName]: value,\r\n        }));\r\n    };\r\n\r\n    const applySearch = () => {\r\n        setAppliedFilters({ ...searchValues });\r\n        setPage(0);\r\n    };\r\n\r\n    const clearSearch = () => {\r\n        setSearchValues({});\r\n        setAppliedFilters({});\r\n        setGlobalSearch(\"\");\r\n        setPage(0);\r\n    };\r\n\r\n    const requestSort = (key) => {\r\n        let direction = \"asc\";\r\n        if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n            direction = \"desc\";\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const filteredData = useMemo(() => {\r\n        let filterableData = [...allData];\r\n\r\n        if (globalSearch) {\r\n            const searchTerms = globalSearch\r\n                .split(\",\")\r\n                .map((term) => term.trim().toLowerCase())\r\n                .filter(Boolean);\r\n\r\n            filterableData = filterableData.filter((row) =>\r\n                searchTerms.some((term) =>\r\n                    Object.values(row).some((val) =>\r\n                        String(val).toLowerCase().includes(term)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        filterableData = filterableData.filter((row) =>\r\n            Object.keys(appliedFilters).every((key) => {\r\n                if (!appliedFilters[key]) return true;\r\n                return String(row[key])\r\n                    .toLowerCase()\r\n                    .includes(String(appliedFilters[key]).toLowerCase());\r\n            })\r\n        );\r\n\r\n        if (sortConfig.key) {\r\n            filterableData.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return filterableData;\r\n    }, [allData, globalSearch, appliedFilters, sortConfig]);\r\n\r\n    const renderTableHeader = () => (\r\n        <TableHead>\r\n            <TableRow>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    S.No\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    CheckBox\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    Actions\r\n                </StyledTableCell>\r\n\r\n                {columns.map((col) => (\r\n                    <StyledTableCell key={col.accessor} align=\"center\">\r\n                        <Box\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            {col.header}\r\n                            <Tooltip\r\n                                title={`Sort ${sortConfig.key === col.accessor\r\n                                    ? sortConfig.direction === \"asc\"\r\n                                        ? \"Descending\"\r\n                                        : \"Ascending\"\r\n                                    : \"Ascending\"\r\n                                    }`}\r\n                            >\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => requestSort(col.accessor)}\r\n                                    color={\r\n                                        sortConfig.key === col.accessor ? \"primary\" : \"default\"\r\n                                    }\r\n                                >\r\n                                    {sortConfig.key === col.accessor ? (\r\n                                        sortConfig.direction === \"asc\" ? (\r\n                                            <AscIcon />\r\n                                        ) : (\r\n                                            <DescIcon />\r\n                                        )\r\n                                    ) : (\r\n                                        <FilterIcon />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Filter...\"\r\n                            value={searchValues[col.accessor] || \"\"}\r\n                            onChange={(e) => handleSearchChange(col.accessor, e.target.value)}\r\n                            sx={{ width: \"100%\", mt: 1 }}\r\n                            InputProps={{\r\n                                endAdornment: searchValues[col.accessor] && (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => handleSearchChange(col.accessor, \"\")}\r\n                                        >\r\n                                            <ClearIcon fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </StyledTableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n\r\n//    if (isLoading) {\r\n//     return (\r\n//         <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"50vh\" }}>\r\n//             <CircularProgress size={50} />\r\n//         </Box>\r\n//     );\r\n// }\r\n\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        setSelectedRows((prevSelected) => {\r\n            const isSelected = prevSelected.some(\r\n                (selectedRow) => selectedRow.Ledger_Tally_Id === row.Ledger_Tally_Id\r\n            );\r\n            return isSelected\r\n                ? prevSelected.filter(\r\n                    (selectedRow) => selectedRow.Ledger_Tally_Id !== row.Ledger_Tally_Id\r\n                )\r\n                : [...prevSelected, row];\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 3,\r\n                backgroundColor: \"white\",\r\n                borderRadius: \"8px\",\r\n                boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    mb: 3,\r\n                }}\r\n            >\r\n                <Typography variant=\"h5\">LOL List</Typography>\r\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    {selectedRows.length > 0 && (\r\n                        <Chip\r\n                            label={`SELECTED ROWS : ${selectedRows.length} `}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            sx={{ mr: 2 }}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        placeholder=\"Search...\"\r\n                        value={globalSearch}\r\n                        onChange={(e) => setGlobalSearch(e.target.value)}\r\n                        sx={{\r\n                            width: 250,\r\n                            mr: 2,\r\n                            \"& .MuiInputBase-root\": {\r\n                                height: 32,\r\n                            },\r\n                        }}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                            endAdornment: globalSearch && (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton size=\"small\" onClick={() => setGlobalSearch(\"\")}>\r\n                                        <ClearIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    <Tooltip title=\"Column Settings\">\r\n                        <IconButton onClick={() => setDialogOpen(true)}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon />}\r\n                        onClick={applySearch}\r\n                        disabled={Object.keys(searchValues).length === 0}\r\n                        sx={{ ml: 2 }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<ClearIcon />}\r\n                        onClick={clearSearch}\r\n                        disabled={Object.keys(appliedFilters).length === 0 && !globalSearch}\r\n                        sx={{ ml: 1 }}\r\n                    >\r\n                        Clear All\r\n                    </Button>\r\n                    <MenuItem\r\n                        onClick={() => exportSelectedRowsToExcel(columns, selectedRows)}\r\n                    >\r\n                        <DownloadIcon fontSize=\"small\" sx={{ mr: 1 }} /> Download{\" \"}\r\n                    </MenuItem>\r\n                    <MenuItem onClick={handleClickOpen}>\r\n                        <FileUploadIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                        Upload\r\n                    </MenuItem>\r\n\r\n                    <Dialog open={open} fullWidth>\r\n                        <DialogTitle>Upload Excel File</DialogTitle>\r\n                        <DialogContent>\r\n                            <Box\r\n                                sx={{ display: \"flex\", alignItems: \"center\", gap: 2, mt: 2 }}\r\n                            >\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    component=\"label\"\r\n                                //   startIcon={<CloudUploadIcon />}\r\n                                >\r\n                                    Browse\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        accept=\".xls,.xlsx\"\r\n                                        hidden\r\n                                        onChange={handleFileChange}\r\n                                    />\r\n                                </Button>\r\n                                <Typography>\r\n                                    {selectedFile ? selectedFile.name : \"No file selected\"}\r\n                                </Typography>\r\n                            </Box>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleClose}>Cancel</Button>\r\n                            <Button\r\n                                onClick={handleUpload}\r\n                                variant=\"contained\"\r\n                                disabled={!selectedFile || isLoading}\r\n                                startIcon={\r\n                                    isLoading ? (\r\n                                        <CircularProgress size={20} color=\"inherit\" />\r\n                                    ) : null\r\n                                }\r\n                            >\r\n                                {isLoading ? \"Uploading...\" : \"Upload\"}\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Dialog\r\n                open={dialogOpen}\r\n                onClose={() => setDialogOpen(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columnDropDown\r\n                            .sort((a, b) => a.Position - b.Position)\r\n                            .map((column) => (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={column.Id}>\r\n                                    <Card className=\"p-2\">\r\n                                        <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                            <Switch\r\n                                                checked={getColumnStatus(column.Id)}\r\n                                                onChange={(e) =>\r\n                                                    handleColumnToggle(column.Id, e.target.checked)\r\n                                                }\r\n                                                disabled={column.Position <= 5}\r\n                                                color={column.Position <= 5 ? \"default\" : \"primary\"}\r\n                                            />\r\n                                            <div>{column?.ColumnName}</div>\r\n\r\n                                            <div className=\"d-flex align-items-center gap-2\">\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Position ?? 0}\r\n                                                    onChange={(e) =>\r\n                                                        handlePositionChange(column.Id, e.target.value)\r\n                                                    }\r\n                                                    sx={{ width: \"70px\" }}\r\n                                                    inputProps={{\r\n                                                        min: 1,\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(\r\n                                                            column.ColumnName\r\n                                                        ),\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(\r\n                                                        column.ColumnName\r\n                                                    )}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Alias_Name ?? \"\"}\r\n                                                    onChange={(e) =>\r\n                                                        !PROTECTED_COLUMNS.includes(column.ColumnName) &&\r\n                                                        handleAliasChange(column.Id, e.target.value)\r\n                                                    }\r\n                                                    sx={{\r\n                                                        '& .MuiInputBase-input': {\r\n                                                            cursor: PROTECTED_COLUMNS.includes(column.ColumnName) ? 'default' : 'text',\r\n                                                            backgroundColor: PROTECTED_COLUMNS.includes(column.ColumnName) ? '#f5f5f5' : 'inherit'\r\n                                                        }\r\n                                                    }}\r\n                                                    inputProps={{\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(column.ColumnName)\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetToDefaults} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialogOpen(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        onClick={applyColumnChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isApplying}\r\n                    >\r\n                        {isApplying ? \"Applying...\" : \"Apply\"}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editDialogOpen}\r\n                onClose={() => setEditDialogOpen(false)}\r\n                maxWidth=\"md\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Edit Row</DialogTitle>\r\n\r\n                <div\r\n                    className=\"container-fluid\"\r\n                    style={{ maxHeight: \"80vh\", overflow: \"auto\" }}\r\n                >\r\n                    <div className=\"row g-3\">\r\n                        {columns.map((col) => (\r\n                            <div key={col.accessor} className=\"col-12 col-sm-6 col-md-4\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-label\">{col.header}</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control form-control-lg\"\r\n                                        value={editedData[col.accessor] || \"\"}\r\n                                        onChange={(e) =>\r\n                                            setEditedData({\r\n                                                ...editedData,\r\n                                                [col.accessor]: e.target.value,\r\n                                            })\r\n                                        }\r\n                                        disabled={\r\n                                            col.accessor === \"Auto_Id\" ||\r\n                                            col.accessor === \"Ledger_Tally_Id\" ||\r\n                                            col.accessor === \"Ledger_Name\"\r\n                                        }\r\n                                        style={{\r\n                                            padding: \"1rem 1rem\",\r\n                                            fontSize: \"1rem\",\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setEditDialogOpen(false)}\r\n                        variant=\"outlined\"\r\n                        startIcon={<CancelIcon />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleSaveChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<SaveIcon />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {columns.length > 0 && allData.length > 0 ? (\r\n                <Paper elevation={0} sx={{ border: \"1px solid #e0e0e0\" }}>\r\n                    <TableContainer>\r\n                        <Table\r\n                            stickyHeader\r\n                            aria-label=\"ledger table\"\r\n                            sx={{ minWidth: 650 }}\r\n                        >\r\n                            {renderTableHeader()}\r\n                            <TableBody>\r\n                                {filteredData\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, idx) => (\r\n                                        <StyledTableRow\r\n                                            key={idx}\r\n                                            highlight={row.Is_Tally_Updated === 1}\r\n                                        >\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {page * rowsPerPage + idx + 1}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n                                                <IconButton>\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        checked={selectedRows.some(\r\n                                                            (selectedRow) =>\r\n                                                                selectedRow.Ledger_Tally_Id ===\r\n                                                                row.Ledger_Tally_Id\r\n                                                        )}\r\n                                                        onChange={() => handleCheckboxChange(row)}\r\n                                                        onFocus={(e) => e.target.blur()}\r\n                                                        style={{\r\n                                                            transform: \"scale(1.5)\",\r\n                                                            width: \"14px\",\r\n                                                            height: \"20px\",\r\n                                                        }}\r\n                                                    />\r\n                                                </IconButton>\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                <Tooltip title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        onClick={() => handleEditClick(row)}\r\n                                                        color=\"primary\"\r\n                                                        size=\"small\"\r\n                                                        sx={{\r\n                                                            \"&:hover\": {\r\n                                                                backgroundColor: \"rgba(25, 118, 210, 0.08)\",\r\n                                                                transform: \"scale(1.1)\",\r\n                                                            },\r\n                                                            transition: \"transform 0.2s\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </StyledTableCell>\r\n                                            {columns.map((col) => (\r\n                                                <StyledTableCell\r\n                                                    key={`${idx}-${col.accessor}`}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {row[col.accessor]}\r\n                                                </StyledTableCell>\r\n                                            ))}\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <PaginationContainer>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={filteredData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            rowsPerPageOptions={[]}\r\n                            sx={{\r\n                                \"& .MuiTablePagination-toolbar\": {\r\n                                    padding: 0,\r\n                                    minHeight: \"auto\",\r\n                                },\r\n                                \"& .MuiTablePagination-spacer\": {\r\n                                    display: \"none\",\r\n                                },\r\n                                \"& .MuiTablePagination-actions\": {\r\n                                    marginLeft: \"16px\",\r\n                                },\r\n                            }}\r\n                        />\r\n                        <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\r\n                            <InputLabel>Rows per page</InputLabel>\r\n                            <Select\r\n                                value={rowsPerPage}\r\n                                onChange={handleChangeRowsPerPage}\r\n                                label=\"Rows per page\"\r\n                            >\r\n                                {getPageSizeOptions().map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </PaginationContainer>\r\n                </Paper>\r\n            ) : (\r\n                <Typography>Loading...</Typography>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Lollist;"],"names":["StyledTableCell","styled","TableCell","_ref","theme","tableCellClasses","head","backgroundColor","color","fontWeight","borderRight","body","fontSize","padding","StyledTableRow","TableRow","_ref2","highlight","borderLeft","PaginationContainer","display","justifyContent","alignItems","gap","borderTop","PROTECTED_COLUMNS","_ref3","loadingOn","loadingOff","lolData","setLolData","useState","columns","setColumns","page","setPage","rowsPerPage","setRowsPerPage","columnSettings","setColumnSettings","dialogOpen","setDialogOpen","originalColumnSettings","setOriginalColumnSettings","columnDropDown","setColumnDropDown","allData","setAllData","isApplying","setIsApplying","searchValues","setSearchValues","appliedFilters","setAppliedFilters","globalSearch","setGlobalSearch","sortConfig","setSortConfig","key","direction","editDialogOpen","setEditDialogOpen","editedData","setEditedData","user","getSessionUser","parseData","JSON","parse","localStorage","getItem","open","setOpen","selectedFile","setSelectedFile","isLoading","setIsLoading","data","setData","selectedRows","setSelectedRows","useEffect","async","dropData","fetchLink","address","companyId","success","error","console","fetchColumnData","columnRes","Array","isArray","sortedColumns","sort","a","b","Position","visibleColumns","filter","col","status","includes","ColumnName","map","header","Alias_Name","accessor","position","dataRes","allowedKeys","filteredData","row","filteredRow","forEach","fetchData","getColumnStatus","columnId","column","find","Id","handleClose","handleSearchChange","columnName","value","prev","useMemo","filterableData","searchTerms","split","term","trim","toLowerCase","Boolean","some","Object","values","val","String","keys","every","_jsxs","Box","sx","p","borderRadius","boxShadow","children","mb","_jsx","Typography","variant","length","Chip","label","size","mr","TextField","placeholder","onChange","e","target","width","height","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onClick","ClearIcon","Tooltip","title","SettingsIcon","Button","startIcon","applySearch","disabled","ml","clearSearch","MenuItem","exportSelectedRowsToExcel","Error","filteredColumns","excelData","warn","_row$col$accessor","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","timestamp","Date","toISOString","slice","alert","message","DownloadIcon","handleClickOpen","FileUploadIcon","Dialog","fullWidth","DialogTitle","DialogContent","mt","component","type","accept","hidden","event","file","files","name","DialogActions","formData","FormData","append","Company_id","UserId","response","fetch","api","method","headers","Db","ok","errorData","json","catch","result","stack","time","uploadExcelFile","toast","CircularProgress","onClose","maxWidth","className","_column$Position","_column$Alias_Name","Card","Switch","checked","handleColumnToggle","isChecked","updatedSettings","newColumn","handlePositionChange","newPosition","positionValue","parseInt","isNaN","inputProps","min","readOnly","newAlias","handleAliasChange","cursor","resetToDefaults","dropdownCol","dc","positionMap","duplicatePositions","Set","add","positionsList","from","join","updateResponse","bodyData","id","alias_name","column_name","company_id","style","maxHeight","overflow","CancelIcon","prevData","Auto_Id","SaveIcon","Paper","elevation","border","TableContainer","Table","stickyHeader","minWidth","TableHead","align","requestSort","AscIcon","DescIcon","FilterIcon","TableBody","idx","Is_Tally_Updated","selectedRow","Ledger_Tally_Id","prevSelected","handleCheckboxChange","onFocus","blur","transform","handleEditClick","rowData","transition","EditIcon","TablePagination","count","onPageChange","handleChangePage","newPage","rowsPerPageOptions","minHeight","marginLeft","FormControl","InputLabel","Select","getPageSizeOptions","baseOptions","maxOption","Math","max","option"],"sourceRoot":""}
{"version":3,"file":"static/js/216.79229d2b.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/deliveryReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n            ? '#E2ECF9'\r\n            : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport {\r\n    Card,\r\n    Button,\r\n    Dialog,\r\n    Tooltip,\r\n    IconButton,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Switch,\r\n} from \"@mui/material\";\r\n// import '../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport {\r\n\r\n    isEqualNumber,\r\n\r\n} from \"../../Components/functions\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst DeliveryReports = ({\r\n\r\n    onToggle,\r\n    reload,\r\n}) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [statusCounts, setStatusCounts] = useState({\r\n        all: 0,\r\n        delivered: 0,\r\n        pending: 0,\r\n    });\r\n\r\n    const initialFromDate = new Date();\r\n    const initialToDate = new Date(initialFromDate);\r\n    initialToDate.setDate(initialFromDate.getDate() + 1);\r\n\r\n    const getFormattedDate = (date) => {\r\n        const offset = date.getTimezoneOffset();\r\n        const localDate = new Date(date.getTime() - offset * 60 * 1000);\r\n        return localDate.toISOString().split(\"T\")[0];\r\n    };\r\n\r\n\r\n\r\n    const [deliveryPerson, setDeliveryPerson] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getFormattedDate(initialFromDate),\r\n        Todate: getFormattedDate(initialToDate),\r\n        Retailer_Id: \"\",\r\n        RetailerGet: \"ALL\",\r\n        Created_by: \"\",\r\n        CreatedByGet: \"ALL\",\r\n        Delivery_Person_Id: \"\",\r\n        Delivery_Person_Name: \"ALL\",\r\n        Sales_Person_Id: \"\",\r\n        Sales_Person_Name: \"ALL\",\r\n        Cancel_status: 0,\r\n    });\r\n    const [deliveryStatusFilter, setDeliveryStatusFilter] = useState(\"All\");\r\n\r\n    const [pageLoad, setPageLoad] = useState(false);\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderListData?Fromdate=${filters?.Fromdate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Delivery_Person_Id=${filters?.Delivery_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSaleOrders(data?.data);\r\n                    const delivered = data.data.filter(row => row.Delivery_Status === 7).length;\r\n                    const pending = data.data.filter(row => row.Delivery_Status === 1).length;\r\n                    const all = data.data.length;\r\n                    const previousDaySalesCount =\r\n                        data.data.length > 0 ? data.data[0].PreviousDaySalesOrderCount || 0 : 0;\r\n\r\n\r\n\r\n                    setStatusCounts({ all, delivered, pending, previousDaySalesCount });\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Retailer_Id,\r\n        filters?.Delivery_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        filters?.Sales_Person_Id,\r\n        reload,\r\n        pageLoad,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `dataEntry/costCenter`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDeliveryPerson(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setRetailers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSalePerson(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUsers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, []);\r\n\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: \"Do_Id\",\r\n            ColumnHeader: \"Delivery ID\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"So_No\",\r\n            ColumnHeader: \"Sale Order ID\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n\r\n        {\r\n            Field_Name: \"Do_Inv_No\",\r\n            ColumnHeader: \"Do_Inv_No \",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Retailer_Name\",\r\n            ColumnHeader: \"Customer\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"SalesDate\",\r\n            ColumnHeader: \"Sale Order Date\",\r\n            Fied_Data: \"date\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Do_Date\",\r\n            ColumnHeader: \"Delivery Date\",\r\n            Fied_Data: \"date\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n\r\n        {\r\n            Field_Name: \"Total_Before_Tax\",\r\n            ColumnHeader: \"Before Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Tax\",\r\n            ColumnHeader: \"Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Invoice_value\",\r\n            ColumnHeader: \"Invoice Value\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"DeliveryStatusName\",\r\n            ColumnHeader: \"Delivery Status \",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        }\r\n    ];\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Delivery Person</td>\r\n                            <td className=\"border p-2\">{row.Delivery_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && \"Inclusive\"}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && \"Exclusive\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && \"IGST\"}\r\n                                {isEqualNumber(row.IS_IGST, 0) && \"GST\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>\r\n                                {row.Narration}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n\r\n    };\r\n\r\n    const filteredSalesData = useMemo(() => {\r\n        if (deliveryStatusFilter === \"Delivered\") {\r\n            return saleOrders.filter(row => row.Delivery_Status === 7);\r\n        } else if (deliveryStatusFilter === \"Pending\") {\r\n            return saleOrders.filter(row => row.Delivery_Status === 1);\r\n        } else {\r\n            return saleOrders;\r\n        }\r\n    }, [saleOrders, deliveryStatusFilter]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">\r\n                        Delivery Orders\r\n\r\n                    </h6>\r\n                    <input\r\n                        type={'date'}\r\n                        className='cus-inpt mt-3 w-auto ps-3 border rounded-5 me-1'\r\n                        // min={firstDayOfMonth()}\r\n                        value={filters.Fromdate}\r\n                        onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                    />\r\n\r\n                    {/* <span>\r\n                        {(\r\n                            // <Tooltip title=\"Filters\">\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            // </Tooltip>\r\n                        )}\r\n\r\n                        \r\n                    </span> */}\r\n                </div>\r\n\r\n                <div className=\"mx-2 flex flex-wrap items-center gap-2\">\r\n                    <Button className=\"fw-bold\">\r\n                        Sales Order: {statusCounts.previousDaySalesCount}\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={`${deliveryStatusFilter === \"All\" ? \"btn-primary\" : \"btn-outline-primary\"\r\n                            }`}\r\n                        onClick={() => setDeliveryStatusFilter(\"All\")}\r\n                    >\r\n                        All - {statusCounts.all}\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={`${deliveryStatusFilter === \"Delivered\" ? \"btn-success\" : \"btn-outline-success\"\r\n                            }`}\r\n                        onClick={() => setDeliveryStatusFilter(\"Delivered\")}\r\n                    >\r\n                        Delivered - {statusCounts.delivered}\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={`${deliveryStatusFilter === \"Pending\" ? \"btn-warning\" : \"btn-outline-warning\"\r\n                            }`}\r\n                        onClick={() => setDeliveryStatusFilter(\"Pending\")}\r\n                    >\r\n                        Pending - {statusCounts.pending}\r\n                    </Button>\r\n                </div>\r\n\r\n\r\n                <FilterableTable\r\n                    dataArray={filteredSalesData}\r\n                    columns={saleOrderColumn}\r\n                    isExpendable={true}\r\n                    tableMaxHeight={550}\r\n                    expandableComp={ExpendableComponent}\r\n                />\r\n            </Card>\r\n\r\n\r\n\r\n\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Retailer_Id,\r\n                                                label: filters?.RetailerGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Retailer_Id: e.value,\r\n                                                    RetailerGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...retailers.map((obj) => ({\r\n                                                    value: obj?.Retailer_Id,\r\n                                                    label: obj?.Retailer_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Delivery Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Delivery_Person_Id,\r\n                                                label: filters?.Delivery_Person_Name,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Delivery_Person_Id: e.value,\r\n                                                    Delivery_Person_Name: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...deliveryPerson.map((obj) => ({\r\n                                                    value: obj?.Cost_Center_Id,\r\n                                                    label: obj?.Cost_Center_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Sales Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Sales_Person_Id,\r\n                                                label: filters?.Sales_Person_Name,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Sales_Person_Id: e.value,\r\n                                                    Sales_Person_Name: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...salesPerson.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Created_by,\r\n                                                label: filters?.CreatedByGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Created_by: e.value,\r\n                                                    CreatedByGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...users.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Fromdate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeliveryReports;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","onToggle","reload","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","useState","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","statusCounts","setStatusCounts","all","delivered","pending","initialFromDate","Date","initialToDate","setDate","getDate","getFormattedDate","date","offset","getTimezoneOffset","getTime","toISOString","split","deliveryPerson","setDeliveryPerson","filters","setFilters","Fromdate","Todate","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Delivery_Person_Id","Delivery_Person_Name","Sales_Person_Id","Sales_Person_Name","Cancel_status","deliveryStatusFilter","setDeliveryStatusFilter","pageLoad","setPageLoad","dialog","setDialog","orderDetails","useEffect","fetchLink","concat","then","data","success","filter","row","Delivery_Status","length","previousDaySalesCount","PreviousDaySalesOrderCount","catch","e","console","error","Company_id","closeDialog","filteredSalesData","useMemo","_jsxs","_Fragment","children","Card","className","_jsx","type","value","onChange","pre","target","Button","onClick","FilterableTable","dataArray","columns","Field_Name","ColumnHeader","Fied_Data","isVisible","isExpendable","tableMaxHeight","expandableComp","_ref2","Branch_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","Narration","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","verticalAlign","Select","label","options","map","obj","Retailer_Name","styles","isSearchable","placeholder","Cost_Center_Id","Cost_Center_Name","UserId","Name","DialogActions"],"sourceRoot":""}
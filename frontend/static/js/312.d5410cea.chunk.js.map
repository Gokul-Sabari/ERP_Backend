{"version":3,"file":"static/js/312.d5410cea.chunk.js","mappings":"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","sources":["Pages/Reports/storageClosingStock/itemWise.jsx","Pages/Reports/storageClosingStock/variable.js","Pages/Reports/storageClosingStock/stockInHand.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Addition, checkIsNumber, filterableText,\r\n    groupData, isEqualNumber, stringCompare, toArray, toNumber,\r\n} from \"../../../Components/functions\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport {\r\n    Autocomplete, Button, Card, Checkbox, Dialog,\r\n    DialogActions, DialogContent, DialogTitle, IconButton, \r\n    Paper, Switch, TextField, Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, Settings,\r\n} from \"@mui/icons-material\";\r\nimport { useMemo } from \"react\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst ItemWiseStockReport = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    Fromdate,\r\n    Todate,\r\n    api = \"itemWise\",\r\n    defaultGrouping = \"\",\r\n    storageStockColumns = [],\r\n    groupingOption = true,\r\n}) => {\r\n\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState(defaultGrouping);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const [columnSettings, setColumnSettings] = useState([]);\r\n\r\n    const propsColumns = storageStockColumns.map((col, colInd) => ({\r\n        isVisible: colInd < 11 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1,\r\n        isEnabled: true,\r\n    }));\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const companyId = parseData?.Company_id;\r\n\r\n    useEffect(() => {\r\n        loadingOn();\r\n\r\n        const fetchReportData = fetchLink({\r\n            address: `reports/storageStock/${api}?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setReportData(toArray(data.data));\r\n            }\r\n        });\r\n\r\n        const fetchColumnSettings = fetchLink({\r\n            address: `masters/displayLosColumn?company_id=${companyId}`,\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                const settings = toArray(data.data);\r\n                setColumnSettings(settings);\r\n\r\n                setColumns((prevColumns) =>\r\n                    prevColumns.map((col, index) => {\r\n                        const setting = settings.find(\r\n                            (s) =>\r\n                                s.Column_Name?.toLowerCase() ===\r\n                                col.Field_Name?.toLowerCase() ||\r\n                                s.ColumnName?.toLowerCase() === col.Field_Name?.toLowerCase()\r\n                        );\r\n                        const status = Number(setting?.status);\r\n\r\n                        const isFirstFive = index < 5;\r\n\r\n                        return {\r\n                            ...col,\r\n                            isEnabled: isFirstFive ? true : setting ? status === 1 : true,\r\n                            isVisible: isFirstFive ? 1 : setting ? (status === 1 ? 1 : 0) : 0,\r\n                        };\r\n                    })\r\n                );\r\n            }\r\n        });\r\n\r\n        Promise.all([fetchReportData, fetchColumnSettings])\r\n            .catch((error) => console.error(\"Fetch error:\", error))\r\n            .finally(() => loadingOff());\r\n    }, [Fromdate, Todate, companyId, api, loadingOn, loadingOff]);\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...columns].sort((a, b) =>\r\n            a?.OrderBy && b?.OrderBy\r\n                ? a?.OrderBy - b?.OrderBy\r\n                : b?.OrderBy - a?.OrderBy\r\n        );\r\n    }, [columns]);\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedColumns.filter(\r\n            (col) =>\r\n                (isEqualNumber(col?.Defult_Display, 1) ||\r\n                    isEqualNumber(col?.isVisible, 1)) &&\r\n                col.isEnabled === true\r\n        );\r\n    }, [sortedColumns]);\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0;\r\n        const grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : reportData;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(\r\n            (fil) => filterableText(fil.Fied_Data) === \"number\"\r\n        ).map((col) => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map((grp) => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map((key) => [\r\n                        key,\r\n                        grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ),\r\n                    ])\r\n                ),\r\n            };\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered;\r\n    }, [filters, reportData, filteredData, groupBy, DisplayColumn]);\r\n\r\n    const getDisplayName = (columnName) => {\r\n        if (!columnName) return \"\";\r\n\r\n        const columnSetting = columnSettings.find(\r\n            (cs) =>\r\n                cs.Column_Name?.toLowerCase() === columnName?.toLowerCase() ||\r\n                cs.ColumnName?.toLowerCase() === columnName?.toLowerCase()\r\n        );\r\n\r\n        if (columnSetting?.Alias_Name) {\r\n            return columnSetting.Alias_Name;\r\n        }\r\n\r\n        const storageColumn = storageStockColumns.find(\r\n            (col) => col.Column_Name?.toLowerCase() === columnName?.toLowerCase()\r\n        );\r\n\r\n        if (storageColumn?.Alias_Name) {\r\n            return storageColumn.Alias_Name;\r\n        }\r\n\r\n        return columnName?.replace(/_/g, \" \");\r\n    };\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters((prevFilters) => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of sortedColumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === \"range\") {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter((item) => {\r\n                        const value = item[column.Field_Name];\r\n                        return (\r\n                            (min === undefined || value >= min) &&\r\n                            (max === undefined || value <= max)\r\n                        );\r\n                    });\r\n                } else if (filters[column.Field_Name].type === \"date\") {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter((item) => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (\r\n                            (start === undefined || dateValue >= new Date(start)) &&\r\n                            (end === undefined || dateValue <= new Date(end))\r\n                        );\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered =\r\n                        filters[column.Field_Name]?.length > 0\r\n                            ? filtered.filter((item) =>\r\n                                filters[column.Field_Name].includes(\r\n                                    item[column.Field_Name]?.toLowerCase().trim()\r\n                                )\r\n                            )\r\n                            : filtered;\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === \"number\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                min: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                max: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"date\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    start: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    end: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"string\") {\r\n            const distinctValues = [\r\n                ...new Set(\r\n                    reportData.map((item) => item[Field_Name]?.toLowerCase()?.trim())\r\n                ),\r\n            ];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={(option) => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) =>\r\n                        handleFilterChange(Field_Name, newValue)\r\n                    }\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={getDisplayName(Field_Name)}\r\n                            placeholder={`Select ${getDisplayName(Field_Name)}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    };\r\n\r\n    const resetColumns = () => {\r\n        setColumns(propsColumns);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Wise\"\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title=\"Column Visibility\">\r\n                            <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Clear Filters\">\r\n                            <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        {groupingOption && (\r\n                            <div className=\"d-flex align-items-center flex-wrap\">\r\n                                <span>Group-By: </span>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={(e) => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">select group</option>\r\n                                    {DisplayColumn.filter(\r\n                                        (fil) =>\r\n                                            filterableText(fil.Fied_Data) === \"string\" &&\r\n                                            fil?.Field_Name !== \"Ledger_Name\" &&\r\n                                            fil.isEnabled\r\n                                    ).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>\r\n                                            {getDisplayName(col?.Field_Name)}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(\r\n                            (fil) =>\r\n                                showData.length > 0 &&\r\n                                Object.keys(showData[0]).includes(fil.Field_Name) &&\r\n                                fil.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))\r\n                        : DisplayColumn.filter((col) => col.isEnabled).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))\r\n                }\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(\r\n                            (clm) => !stringCompare(clm.Field_Name, groupBy) && clm.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog open={filterDialog} onClose={closeDialog} maxWidth=\"sm\" fullWidth>\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title=\"Column Visibility\">\r\n                                <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Clear Filters\">\r\n                                <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n\r\n                    <div className=\"border rounded-3\">\r\n                        {DisplayColumn.filter((col) => col.isEnabled).map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className=\"mt-2 mb-1\">\r\n                                    {getDisplayName(column?.Field_Name)}\r\n                                </label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? \"bg-light\" : \"\"\r\n                                        } ${!o.isEnabled ? \"opacity-50\" : \"\"}`}\r\n                                >\r\n                                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isVisible) && o.isEnabled}\r\n                                            onChange={(e) =>\r\n                                                o.isEnabled &&\r\n                                                setColumns((prevColumns) =>\r\n                                                    prevColumns.map((oo) =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        // disabled={!o.isEnabled}\r\n                                        />\r\n                                        <h6 className=\"fa-13 mb-0 fw-bold\">\r\n                                            {getDisplayName(o.Field_Name)}\r\n                                            {!o.isEnabled && (\r\n                                                <span className=\"text-muted small\"></span>\r\n                                            )}\r\n                                        </h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : \"\"}\r\n                                        onChange={(e) =>\r\n                                            o.isEnabled &&\r\n                                            setColumns((prevColumns) =>\r\n                                                prevColumns.map((oo) =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        disabled={!o.isEnabled}\r\n                                        className=\"mt-2 p-1 border-0 cus-inpt\"\r\n                                        style={{ width: \"80px\" }}\r\n                                        placeholder=\"Order\"\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetColumns} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialog(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ItemWiseStockReport;","export const storageStockColumnsForItemWise = [\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n];\r\n\r\nexport const storageStockColumnsForGodownWise = [\r\n    // { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Godown_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n]","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\nimport ItemWiseStockReport from './itemWise';\r\nimport { storageStockColumnsForItemWise, storageStockColumnsForGodownWise } from './variable';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        FilterFromDate: ISOString(),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='itemWise'\r\n                    defaultGrouping=''\r\n                    storageStockColumns={storageStockColumnsForItemWise}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Godown Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='godownWise'\r\n                    defaultGrouping='Godown_Name'\r\n                    storageStockColumns={storageStockColumnsForGodownWise}\r\n                    groupingOption={false}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","loadingOn","loadingOff","Fromdate","Todate","api","defaultGrouping","storageStockColumns","groupingOption","reportData","setReportData","useState","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","columnSettings","setColumnSettings","propsColumns","map","col","colInd","isVisible","Field_Name","Column_Name","Fied_Data","Data_Type","OrderBy","isEnabled","columns","setColumns","parseData","JSON","parse","localStorage","getItem","companyId","Company_id","useEffect","fetchReportData","fetchLink","address","concat","then","data","success","toArray","fetchColumnSettings","settings","prevColumns","index","setting","find","s","_s$Column_Name","_col$Field_Name","_s$ColumnName","_col$Field_Name2","toLowerCase","ColumnName","status","Number","isFirstFive","_objectSpread","Promise","all","catch","error","console","finally","sortedColumns","useMemo","sort","a","b","DisplayColumn","filter","isEqualNumber","Defult_Display","showData","Object","keys","length","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","fromEntries","key","_grp$groupedData","groupedData","reduce","acc","colmn","Addition","toNumber","getDisplayName","columnName","columnSetting","cs","_cs$Column_Name","_cs$ColumnName","Alias_Name","storageColumn","_col$Column_Name","replace","applyFilters","handleFilterChange","column","value","prevFilters","type","min","max","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","_item$column$Field_Na","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","closeDialog","_Fragment","FilterableTable","title","EnableSerialNumber","headerFontSizePx","bodyFontSizePx","maxHeightOption","ButtonArea","Tooltip","IconButton","size","onClick","Settings","FilterAltOff","FilterAlt","ExcelPrintOption","dataArray","ColumnHeader","isExpendable","expandableComp","_ref3","row","clm","stringCompare","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","ke","DialogActions","Button","color","DialogTitle","o","i","Card","component","Paper","Switch","Boolean","oo","checkIsNumber","disabled","width","resetColumns","variant","storageStockColumnsForItemWise","storageStockColumnsForGodownWise","tabValue","setTabValue","dateFilter","setDateFilter","ISOString","FilterFromDate","FilterTodate","tabData","name","ItemWiseStockReport","htmlFor","pre","Search","TabContext","Box","sx","borderBottom","borderColor","TabList","indicatorColor","n","scrollButtons","tab","tabInd","Tab","backgroundColor","TabPanel","p","pt"],"sourceRoot":""}
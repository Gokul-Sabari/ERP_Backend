{"version":3,"file":"static/js/9052.068ed2cc.chunk.js","mappings":"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","sources":["Pages/Masters/DistrictMaster.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContentText,\r\n    TextField,\r\n\r\n\r\n\r\n\r\n} from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit, Search } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst initialState = {\r\n    District_Id: 0,\r\n    District_Name: \"\",\r\n    State_Id: 0,\r\n    State_Name: \"\"\r\n};\r\n\r\nfunction DistrictMaster() {\r\n    const [reload, setReload] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [districtList, setDistrictList] = useState([]);\r\n    const [filteredAccountList, setFilteredAccountList] = useState([]);\r\n    const [dropDown, setDropDown] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchDistrict = async () => {\r\n            try {\r\n                const data = await fetchLink({ address: `masters/district` });\r\n                if (data.success) {\r\n\r\n                    setDistrictList(data.data);\r\n                    setFilteredAccountList(data.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load districts\");\r\n            }\r\n        };\r\n\r\n        const fetchDropDown = async () => {\r\n            try {\r\n                const datafetch = await fetchLink({ address: `masters/state/dropDown` });\r\n                if (datafetch.success) {\r\n                    setDropDown(datafetch.data);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n                toast.error(\"Failed to load State dropdown\");\r\n            }\r\n        };\r\n\r\n        fetchDistrict();\r\n        fetchDropDown();\r\n    }, [reload]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() === \"\") {\r\n            setFilteredAccountList(districtList);\r\n        } else {\r\n            const filtered = districtList.filter((account) => {\r\n                const searchLower = searchTerm.toLowerCase();\r\n                return (\r\n                    String(account.District_Id).toLowerCase().includes(searchLower) ||\r\n                    (account.District_Name && account.District_Name.toLowerCase().includes(searchLower)) ||\r\n                    (account.State_Name && account.State_Name.toLowerCase().includes(searchLower))\r\n                );\r\n            });\r\n            setFilteredAccountList(filtered);\r\n        }\r\n    }, [searchTerm, districtList]);\r\n    const handleDelete = async () => {\r\n        setIsSubmitting(true);\r\n        const deletedItemId = inputValue.District_Id;\r\n\r\n        try {\r\n            setDistrictList(prev => prev.filter(item => item.District_Id !== deletedItemId));\r\n            setFilteredAccountList(prev => prev.filter(item => item.District_Id !== deletedItemId));\r\n\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"DELETE\",\r\n                bodyData: { District_Id: deletedItemId },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District deleted successfully!\");\r\n            } else {\r\n                setReload(prev => !prev);\r\n                toast.error(data.message || \"Failed to delete district\");\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setReload(prev => !prev);\r\n            toast.error(\"Failed to delete district\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        const { District_Name, State_Id } = inputValue;\r\n        if (!District_Name || !State_Id) {\r\n            toast.error(\"Please fill all required fields.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"POST\",\r\n                bodyData: {\r\n                    ...inputValue\r\n                },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District Created successfully!\");\r\n                setIsCreateDialogOpen(false);\r\n                setInputValue(initialState);\r\n                setReload(prev => !prev);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to Create District\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const editRow = (row) => {\r\n        setInputValue({\r\n            District_Id: Number(row.District_Id),\r\n            District_Name: row.District_Name,\r\n            State_Id: Number(row.State_Id),\r\n            State_Name: row.State_Name || \"\"\r\n        });\r\n        setEditMode(true);\r\n    };\r\n    const handleEdit = async () => {\r\n        const { District_Id, District_Name, State_Id } = inputValue;\r\n\r\n        // Convert to proper types\r\n        const payload = {\r\n            District_Id: Number(District_Id),\r\n            District_Name: District_Name.trim(),\r\n            State_Id: Number(State_Id),\r\n            State_Name: inputValue.State_Name?.trim() || null\r\n        };\r\n\r\n        if (!payload.District_Id || !payload.District_Name || !payload.State_Id) {\r\n            toast.error(\"All required fields must be properly filled.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"PUT\",\r\n                bodyData: payload\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District updated successfully!\");\r\n\r\n                setDistrictList(prev => prev.map(item =>\r\n                    item.District_Id === payload.District_Id ?\r\n                        { ...item, ...payload } :\r\n                        item\r\n                ));\r\n                setFilteredAccountList(prev => prev.map(item =>\r\n                    item.District_Id === payload.District_Id ?\r\n                        { ...item, ...payload } :\r\n                        item\r\n                ));\r\n                setEditMode(false);\r\n                setInputValue(initialState);\r\n            } else {\r\n                toast.error(data.message || \"Update failed\");\r\n                setReload(prev => !prev); // Refresh data if update failed\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Update error:\", e);\r\n            toast.error(`Failed to update district: ${e.message}`);\r\n            setReload(prev => !prev); // Refresh data on error\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n    const handleCloseCreateDialog = () => {\r\n        if (!isSubmitting) {\r\n            setIsCreateDialogOpen(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseEditDialog = () => {\r\n        if (!isSubmitting) {\r\n            setEditMode(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseDeleteDialog = () => {\r\n        if (!isSubmitting) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleStateChange = (e) => {\r\n        const selectedStateId = Number(e.target.value);\r\n        if (isNaN(selectedStateId)) {\r\n            toast.error(\"Invalid state selected\");\r\n            return;\r\n        }\r\n        const selectedState = dropDown.find(state => state.State_Id === selectedStateId);\r\n        setInputValue({\r\n            ...inputValue,\r\n            State_Id: selectedStateId,\r\n            State_Name: selectedState ? selectedState.State_Name : \"\"\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    DISTRICT MASTER\r\n                    <div className=\"d-flex align-items-center gap-3\">\r\n                        <div style={{ width: \"300px\" }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                placeholder=\"Search District...\"\r\n                                value={searchTerm}\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: <Search fontSize=\"small\" sx={{ mr: 1 }} />,\r\n                                    style: { height: \"40px\" },\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className=\"rounded-1 btn-primary\"\r\n                            onClick={() => {\r\n                                setIsCreateDialogOpen(true);\r\n                                setInputValue(initialState);\r\n                            }}\r\n                            sx={{\r\n                                textTransform: 'none',\r\n                                fontWeight: 500,\r\n                                px: 2,\r\n                                height: '40px'\r\n                            }}\r\n                        >\r\n                            Create District\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <FilterableTable\r\n                    dataArray={filteredAccountList}\r\n                    EnableSerialNumber={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n                        createCol(\"District_Name\", \"string\", \"District Name\"),\r\n                        createCol(\"State_Name\", \"string\", \"State\"),\r\n                        {\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <td style={{ minWidth: \"80px\" }}>\r\n                                    <IconButton onClick={() => editRow(row)} size=\"small\">\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            setOpen(true);\r\n                                            setInputValue({\r\n                                                District_Id: row.District_Id,\r\n                                                District_Name: row.District_Name\r\n                                            });\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                    >\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </td>\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Dialog open={isCreateDialogOpen} onClose={handleCloseCreateDialog}>\r\n                <DialogTitle>Create District</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"stateSelect\">State *</label>\r\n                            <select\r\n                                className=\"form-select form-select-sm\"\r\n                                id=\"editStateSelect\"\r\n                                value={inputValue.State_Id || \"\"}\r\n                                onChange={(e) => {\r\n                                    const selectedStateId = Number(e.target.value);\r\n                                    const selectedState = dropDown.find(state => state.State_Id === selectedStateId);\r\n                                    setInputValue({\r\n                                        ...inputValue,\r\n                                        State_Id: selectedStateId,\r\n                                        State_Name: selectedState ? selectedState.State_Name : \"\"\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <option value=\"\">Select State</option>\r\n                                {dropDown.map((state) => (\r\n                                    <option key={state.State_Id} value={state.State_Id}>\r\n                                        {state.State_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"districtName\" className=\"form-label\">District Name *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-mdf\"\r\n                                id=\"districtName\"\r\n                                value={inputValue.District_Name}\r\n                                onChange={(e) => setInputValue({ ...inputValue, District_Name: e.target.value })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        className=\"btn btn-secondary btn-sm\"\r\n                        onClick={handleCloseCreateDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-primary btn-sm\"\r\n                        onClick={handleCreate}\r\n                        disabled={isSubmitting || !inputValue.District_Name || !inputValue.State_Id}\r\n                    >\r\n                        {isSubmitting ? \"Creating...\" : \"Create\"}\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Edit Dialog */}\r\n            <Dialog open={editMode} onClose={handleCloseEditDialog}>\r\n                <DialogTitle>Edit District</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-3\">\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"editStateSelect\" className=\"form-label\">State *</label>\r\n                            <select\r\n                                className=\"form-select form-select-sm\"\r\n                                id=\"editStateSelect\"\r\n                                value={inputValue.State_Id || \"\"}\r\n                                onChange={handleStateChange}\r\n                            >\r\n                                <option value=\"\">Select State</option>\r\n                                {dropDown.map((state) => (\r\n                                    <option key={state.State_Id} value={state.State_Id}>\r\n                                        {state.State_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"editDistrictName\" className=\"form-label\">District Name *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-sm\"\r\n                                id=\"editDistrictName\"\r\n                                value={inputValue.District_Name}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, District_Name: e.target.value })\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        className=\"btn btn-secondary btn-sm me-2\"\r\n                        onClick={handleCloseEditDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-primary btn-sm\"\r\n                        onClick={handleEdit}\r\n                        disabled={isSubmitting || !inputValue.District_Name || !inputValue.State_Id}\r\n                    >\r\n                        {isSubmitting ? (\r\n                            <>\r\n                                <span className=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                Updating...\r\n                            </>\r\n                        ) : (\r\n                            \"Update\"\r\n                        )}\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleCloseDeleteDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Confirmation\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <b>{`Do you want to delete the ${inputValue.District_Name}?`}</b>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={handleCloseDeleteDialog}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus sx={{ color: 'red' }}>\r\n                        {isSubmitting ? \"Deleting...\" : \"Delete\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DistrictMaster;"],"names":["initialState","District_Id","District_Name","State_Id","State_Name","reload","setReload","useState","open","setOpen","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editMode","setEditMode","districtList","setDistrictList","filteredAccountList","setFilteredAccountList","dropDown","setDropDown","searchTerm","setSearchTerm","isSubmitting","setIsSubmitting","useEffect","async","data","fetchLink","address","success","e","console","error","toast","fetchDistrict","datafetch","log","fetchDropDown","trim","filtered","filter","account","searchLower","toLowerCase","String","includes","handleCloseCreateDialog","handleCloseEditDialog","handleCloseDeleteDialog","_jsxs","_Fragment","children","className","_jsx","style","width","TextField","fullWidth","size","variant","placeholder","value","onChange","target","InputProps","startAdornment","Search","fontSize","sx","mr","height","Button","onClick","textTransform","fontWeight","px","FilterableTable","dataArray","EnableSerialNumber","maxHeightOption","columns","createCol","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","minWidth","IconButton","Number","editRow","Edit","color","Delete","Dialog","onClose","DialogTitle","DialogContent","htmlFor","id","selectedStateId","selectedState","find","state","map","type","DialogActions","disabled","method","bodyData","prev","message","isNaN","_inputValue$State_Nam","payload","item","role","DialogContentText","MuiButton","deletedItemId","autoFocus"],"sourceRoot":""}
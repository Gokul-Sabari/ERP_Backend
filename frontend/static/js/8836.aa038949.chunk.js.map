{"version":3,"file":"static/js/8836.aa038949.chunk.js","mappings":"kkBAuBA,MAAMA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACtD,CAAC,KAADE,OAAMC,EAAAA,EAAiBC,OAAS,CAC5BC,gBAAiB,UACjBC,MAAO,UACPC,WAAY,OACZC,YAAa,oBACb,eAAgB,CACZA,YAAa,SAGrB,CAAC,KAADN,OAAMC,EAAAA,EAAiBM,OAAS,CAC5BC,SAAU,GACVC,QAAS,YACTH,YAAa,oBACb,eAAgB,CACZA,YAAa,SAGxB,IAEKI,GAAiBd,EAAAA,EAAAA,IAAOe,EAAAA,EAAPf,EAAiBgB,IAAA,IAAC,MAAEb,GAAOa,EAAA,MAAM,CACpD,sBAAuB,CACnBT,gBAAiBJ,EAAMc,QAAQC,OAAOC,OAE1C,UAAW,CACPZ,gBAAiBJ,EAAMc,QAAQC,OAAOE,UAE7C,IAEKC,GAAsBrB,EAAAA,EAAAA,IAAO,MAAPA,CAAc,CACtCsB,QAAS,OACTC,eAAgB,WAChBC,WAAY,SACZC,IAAK,OACLZ,QAAS,OACTN,gBAAiB,UACjBmB,UAAW,sBAGTC,EAAoB,CAAC,UAAW,iBAAkB,aAAc,mBAAoB,sBAiuB1F,QAhuBA,WACI,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,IAC1BK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,IACxCO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAYC,KAAiBV,EAAAA,EAAAA,WAAS,IACtCW,GAAwBC,KAA6BZ,EAAAA,EAAAA,UAAS,KAC9Da,GAAgBC,KAAqBd,EAAAA,EAAAA,UAAS,KAC9Ce,GAASC,KAAchB,EAAAA,EAAAA,UAAS,KAChCiB,GAAYC,KAAiBlB,EAAAA,EAAAA,WAAS,IACtCmB,GAAcC,KAAmBpB,EAAAA,EAAAA,UAAS,CAAC,IAC3CqB,GAAgBC,KAAqBtB,EAAAA,EAAAA,UAAS,CAAC,IAC/CuB,GAAcC,KAAmBxB,EAAAA,EAAAA,UAAS,KAC1CyB,GAAYC,KAAiB1B,EAAAA,EAAAA,UAAS,CAAE2B,IAAK,KAAMC,UAAW,SAC9DC,GAAgBC,KAAqB9B,EAAAA,EAAAA,WAAS,IAE9C+B,GAAYC,KAAiBhC,EAAAA,EAAAA,UAAS,CAAC,GAExCiC,IAAOC,EAAAA,EAAAA,MAAiBD,KACxBE,GAAYC,KAAKC,MAAMC,aAAaC,QAAQ,UAelDC,EAAAA,EAAAA,YAAU,KAdcC,WACpB,IACI,MAAMC,QAAiBC,EAAAA,EAAAA,GAAU,CAC7BC,QAAQ,0CAADtE,OAAqD,OAAT6D,SAAS,IAATA,QAAS,EAATA,GAAWU,aAG9DH,EAASI,SACThC,GAAkB4B,EAASK,KAEnC,CAAE,MAAOC,GACLC,QAAQD,MAAM,0BAA2BA,EAC7C,GAIAE,EAAiB,GAClB,CAAU,OAATf,SAAS,IAATA,QAAS,EAATA,GAAWU,aAEfL,EAAAA,EAAAA,YAAU,MACNC,iBACI,IACI,MAAMU,QAAkBR,EAAAA,EAAAA,GAAU,CAC9BC,QAAQ,uCAADtE,OAAkD,OAAT6D,SAAS,IAATA,QAAS,EAATA,GAAWU,aAG/D,IAAKM,EAAUL,UAAYM,MAAMC,QAAQF,EAAUJ,MAE/C,YADAE,QAAQD,MAAM,4BAIlB,MAAMM,EAAgB,IAAIH,EAAUJ,MAAMQ,MACtC,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WAE7BlD,EAAkB8C,GAClB1C,GAA0B,IAAI0C,IAE9B,MAAMK,EAAiBL,EAClBM,QAAQC,GAAuB,IAAfA,EAAIC,SACpBP,MAAK,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WAC9BK,KAAKF,IAAG,CACLG,OAAQH,EAAII,YAAcJ,EAAIK,WAC9BC,SAAUN,EAAIK,WACdE,SAAUP,EAAIH,aAGtBxD,EAAWyD,GAEX,MAAMU,QAAgB1B,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,0BAE1C,GAAIyB,EAAQvB,SAAWM,MAAMC,QAAQgB,EAAQtB,MAAO,CAChD/B,GAAWqD,EAAQtB,MAEnB,MAAMuB,EAAcX,EAAeI,KAAKF,GAAQA,EAAIM,WAC9CI,EAAeF,EAAQtB,KAAKgB,KAAKS,IACnC,MAAMC,EAAc,CAAC,EAIrB,OAHAH,EAAYI,SAAS/C,IACjB8C,EAAY9C,GAAO6C,EAAI7C,IAAQ,EAAE,IAE9B8C,CAAW,IAGtB1E,EAAWwE,EACf,CACJ,CAAE,MAAOvB,GACLC,QAAQD,MAAM,sBAAuBA,EACzC,CACJ,CAEA2B,EAAW,GACZ,IAEH,MAoBMC,GAAmBC,IACrB,MAAMC,EAASvE,EAAewE,MAAMlB,GAAQA,EAAImB,KAAOH,IACvD,QAAOC,GAA2B,IAAlBA,EAAOhB,MAAoB,EAiMzCmB,GAAqBA,CAACC,EAAYC,KACpC/D,IAAiBgE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAI,IACP,CAACF,GAAaC,KACf,EAuBDZ,IAAee,EAAAA,EAAAA,UAAQ,KACzB,IAAIC,EAAiB,IAAIxE,IA+BzB,OA7BIQ,KACAgE,EAAiBA,EAAe3B,QAAQY,GACpCgB,OAAOC,OAAOjB,GAAKkB,MAAMC,GACrBC,OAAOD,GAAKE,cAAcC,SAASvE,GAAasE,oBAK5DN,EAAiBA,EAAe3B,QAAQY,GAC7BgB,OAAOO,KAAK1E,IAAgB2E,OAAOrE,IACjCN,GAAeM,IACbiE,OAAOpB,EAAI7C,IACbkE,cACAC,SAASF,OAAOvE,GAAeM,IAAMkE,mBAI9CpE,GAAWE,KACX4D,EAAehC,MAAK,CAACC,EAAGC,IAChBD,EAAE/B,GAAWE,KAAO8B,EAAEhC,GAAWE,KACD,QAAzBF,GAAWG,WAAuB,EAAI,EAE7C4B,EAAE/B,GAAWE,KAAO8B,EAAEhC,GAAWE,KACD,QAAzBF,GAAWG,UAAsB,GAAK,EAE1C,IAIR2D,CAAc,GACtB,CAACxE,GAASQ,GAAcF,GAAgBI,KA0E3C,OACIwE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,GAAI,CACAC,EAAG,EACH3H,gBAAiB,QACjB4H,aAAc,MACdC,UAAW,6BACbC,SAAA,EAEFN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,GAAI,CACA3G,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZ8G,GAAI,GACND,SAAA,EAEFE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,cACzBN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAE3G,QAAS,OAAQE,WAAY,UAAW6G,SAAA,EAC/CE,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACND,QAAQ,WACRE,KAAK,QACLC,YAAY,YACZ3B,MAAO5D,GACPwF,SAAWC,GAAMxF,GAAgBwF,EAAEC,OAAO9B,OAC1CgB,GAAI,CAAEe,MAAO,IAAKC,GAAI,GACtBC,WAAY,CACRC,gBACIZ,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAAClD,SAAS,QAAOmC,UAC5BE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,MAGnBC,aAAcjG,KACVkF,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAAClD,SAAS,MAAKmC,UAC1BE,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CAACZ,KAAK,QAAQa,QAASA,IAAMlG,GAAgB,IAAI+E,UACxDE,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAC7I,SAAS,kBAMxC2H,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,MAAM,kBAAiBtB,UAC5BE,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CAACC,QAASA,IAAMhH,IAAc,GAAM6F,UAC3CE,EAAAA,EAAAA,KAACqB,EAAAA,EAAY,SAGrBrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACHpB,QAAQ,YACRqB,WAAWvB,EAAAA,EAAAA,KAACc,EAAAA,EAAU,IACtBG,QAhLAO,KAChB3G,IAAiB+D,EAAAA,EAAAA,GAAC,CAAC,EAAIlE,KACvBf,EAAQ,EAAE,EA+KM8H,SAA+C,IAArC1C,OAAOO,KAAK5E,IAAcgH,OACpChC,GAAI,CAAEiC,GAAI,GAAI7B,SACjB,mBAGDE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACHpB,QAAQ,WACRqB,WAAWvB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,IACrBD,QApLAW,KAChBjH,GAAgB,CAAC,GACjBE,GAAkB,CAAC,GACnBE,GAAgB,IAChBpB,EAAQ,EAAE,EAiLM8H,SAAiD,IAAvC1C,OAAOO,KAAK1E,IAAgB8G,SAAiB5G,GACvD4E,GAAI,CAAEiC,GAAI,GAAI7B,SACjB,qBAMTN,EAAAA,EAAAA,MAACqC,EAAAA,EAAM,CACHC,KAAM9H,EACN+H,QAASA,IAAM9H,IAAc,GAC7B+H,SAAS,KACTC,WAAS,EAAAnC,SAAA,EAETE,EAAAA,EAAAA,KAACkC,EAAAA,EAAW,CAAApC,SAAC,qBACbE,EAAAA,EAAAA,KAACmC,EAAAA,EAAa,CAAArC,UACVE,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,MAAKtC,SACf1F,GACI0C,MAAK,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WAC9BK,KAAKe,IAAM,IAAAgE,EAAAC,EAAA,OACRtC,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,wBAAuBtC,UAClCE,EAAAA,EAAAA,KAACuC,EAAAA,EAAI,CAACH,UAAU,MAAKtC,UACjBN,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,8DAA6DtC,SAAA,EACxEE,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CACHC,QAAStE,GAAgBE,EAAOE,IAChC+B,SAAWC,GAxZ5BmC,EAACtE,EAAUuE,KAClC,MAAMtE,EAASjE,GAAekE,MAAMlB,GAAQA,EAAImB,KAAOH,IAEvD,IAAU,OAANC,QAAM,IAANA,OAAM,EAANA,EAAQpB,WAAY,EAEpB,YADA2F,EAAAA,GAAMrG,MAAM,sCAIhB,IAAIsG,EAEJ,GAAI/I,EAAemF,MAAM7B,GAAQA,EAAImB,KAAOH,IACxCyE,EAAkB/I,EAAewD,KAAKF,GAClCA,EAAImB,KAAOH,GAAQQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQxB,GAAG,IAAEC,OAAQsF,EAAY,EAAI,IAAMvF,QAE/D,CACH,MAAM0F,EAAY1I,GAAekE,MAAMlB,GAAQA,EAAImB,KAAOH,IAEtDyE,EADAC,EACkB,IACXhJ,GAAc8E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEVkE,GAAS,IACZzF,OAAQsF,EAAY,EAAI,KAId,IAAI7I,EAE9B,CAEA+I,EAAgB/F,MAAK,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WAC9ClD,EAAkB8I,EAAgB,EA2XUH,CAAmBrE,EAAOE,GAAIgC,EAAEC,OAAOiC,SAE3ChB,SAAUpD,EAAOpB,UAAY,EAC7BhF,MAAOoG,EAAOpB,UAAY,EAAI,UAAY,aAE9C+C,EAAAA,EAAAA,KAAA,OAAAF,SAAY,OAANzB,QAAM,IAANA,OAAM,EAANA,EAAQZ,cAEd+B,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,kCAAiCtC,SAAA,EAC5CE,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACN4C,KAAK,SACL3C,KAAK,QACLF,QAAQ,WACRxB,MAAsB,QAAjB2D,EAAEhE,EAAOpB,gBAAQ,IAAAoF,EAAAA,EAAI,EAC1B/B,SAAWC,GA/b9ByC,EAAC5E,EAAU6E,KACpC,MAAMC,EAAgBC,SAASF,GAE1BG,MAAMF,IACP7I,IAAkBsE,GACdA,EAAKrB,KAAIF,GACLA,EAAImB,KAAOH,GAAQQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQxB,GAAG,IAAEH,SAAUiG,IAAkB9F,KAGxE,EAsb6D4F,CAAqB3E,EAAOE,GAAIgC,EAAEC,OAAO9B,OAC1DgB,GAAI,CAAEe,MAAO,QACb4C,WAAY,CACRC,IAAK,EACLC,SAAUnK,EAAkBiG,SAAShB,EAAOZ,aAEhDgE,SAAUrI,EAAkBiG,SAAShB,EAAOZ,eAGhDuC,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACNC,KAAK,QACLF,QAAQ,WACRxB,MAAwB,QAAnB4D,EAAEjE,EAAOb,kBAAU,IAAA8E,EAAAA,EAAI,GAC5BhC,SAAWC,IACPiD,OAjczBpF,EAic2CC,EAAOE,GAjcxCkF,EAic4ClD,EAAEC,OAAO9B,WAhctFrE,IAAmBsE,GACfA,EAAKrB,KAAKF,GACNA,EAAImB,KAAOH,GAAQQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQxB,GAAG,IAAEI,WAAYiG,IAAarG,MAH3CoG,IAACpF,EAAUqF,CAkcY,EACDJ,WAAY,CACRC,IAAK,EACLC,SAAUnK,EAAkBiG,SAAShB,EAAOZ,aAEhDgE,SAAUrI,EAAkBiG,SAAShB,EAAOZ,uBAvCpBY,EAAOE,GA4C7C,SAItBiB,EAAAA,EAAAA,MAACkE,EAAAA,EAAa,CAAA5D,SAAA,EACVE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACL,QA9RA0C,KACpB5J,EAAkB,IAAIG,KACtBG,GAAkB,IAAIH,IAAwB,EA4RAgG,QAAQ,WAAUJ,SAAC,WAGrDE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACL,QAASA,IAAMhH,IAAc,GAAQhC,MAAM,QAAO6H,SAAC,WAG3DE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACHL,QA5XOjF,UACvBvB,IAAc,GACd,IAEI,MAAMoI,EAAkB/I,EAAewD,KAAKF,IACxC,MAAMwG,EAAcxJ,GAAekE,MAAMuF,GAAOA,EAAGtF,KAAOnB,EAAImB,KAC9D,OAAOqF,GAAWhF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXxB,GAAG,IACNH,SAAU2G,EAAY3G,SACtBO,WAAYoG,EAAYpG,aACxBJ,CAAG,IAIL0G,EAAc,CAAC,EACfC,EAAqB,IAAIC,IAS/B,GAPAnB,EAAgB5E,SAASb,IACjB0G,EAAY1G,EAAIH,WAChB8G,EAAmBE,IAAI7G,EAAIH,UAE/B6G,EAAY1G,EAAIH,WAAY,CAAI,IAGhC8G,EAAmB3D,KAAO,EAAG,CAC7B,MAAM8D,EAAgBvH,MAAMwH,KAAKJ,GAAoBK,KAAK,MAE1D,YADAxB,EAAAA,GAAMrG,MAAM,8BAAD1E,OAA+BqM,GAE9C,CAGAnK,EAAkB8I,GAClB1I,GAA0B0I,GAE1B,MAAMwB,QAAuBnI,EAAAA,EAAAA,GAAU,CACnCC,QAAS,iCACTmI,OAAQ,MACRC,SAAU,CACN/K,QAASqJ,EAAgBvF,KAAKF,IAAG,CAC7BoH,GAAIpH,EAAImB,GACRlB,OAAQD,EAAIC,OACZM,SAAUP,EAAIH,SACdwH,WAAYrH,EAAII,WAChBkH,YAAatH,EAAIK,eAErBkH,WAAqB,OAATjJ,SAAS,IAATA,QAAS,EAATA,GAAWU,aAI/B,IAAKiI,EAAehI,QAChB,MAAM,IAAIuI,MAAMP,EAAeQ,SAAW,oCAI9C,MAAM3H,EAAiB2F,EAClB1F,QAAQC,GAAuB,IAAfA,EAAIC,SACpBP,MAAK,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WAC9BK,KAAKF,IAAG,CACLG,OAAQH,EAAII,YAAcJ,EAAIK,WAC9BC,SAAUN,EAAIK,WACdE,SAAUP,EAAIH,aAKtB,GAFAxD,EAAWyD,GAEP5C,GAAQoH,OAAS,EAAG,CACpB,MAAM7D,EAAcX,EAAeI,KAAKF,GAAQA,EAAIM,WAC9CI,EAAexD,GAAQgD,KAAKS,IAC9B,MAAMC,EAAc,CAAC,EAIrB,OAHAH,EAAYI,SAAS/C,IACjB8C,EAAY9C,GAAO6C,EAAI7C,IAAQ,EAAE,IAE9B8C,CAAW,IAEtB1E,EAAWwE,EACf,CAEA7D,IAAc,GACd2I,EAAAA,GAAMvG,QAAQ,gBAClB,CAAE,MAAOE,GACLC,QAAQD,MAAM,kCAAmCA,GACjDqG,EAAAA,GAAMrG,MAAMA,EAAMsI,SAAW,8CACjC,CAAC,QACGpK,IAAc,EAClB,GAySgByF,QAAQ,YACRjI,MAAM,UACNwJ,SAAUjH,GAAWsF,SAEpBtF,GAAa,cAAgB,iBAK1CgF,EAAAA,EAAAA,MAACqC,EAAAA,EAAM,CACHC,KAAM1G,GACN2G,QAASA,IAAM1G,IAAkB,GACjC2G,SAAS,KACTC,WAAS,EAAAnC,SAAA,EAETE,EAAAA,EAAAA,KAACkC,EAAAA,EAAW,CAAApC,SAAC,cACbE,EAAAA,EAAAA,KAACmC,EAAAA,EAAa,CAAArC,UACVE,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,kBAAkB0C,MAAO,CAAEC,UAAW,OAAQC,SAAU,QAASlF,UAC5EE,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,UAAStC,SACnBtG,EAAQ8D,KAAKF,IACV4C,EAAAA,EAAAA,KAAA,OAAwBoC,UAAU,2BAA0BtC,UACxDN,EAAAA,EAAAA,MAAA,OAAK4C,UAAU,aAAYtC,SAAA,EACvBE,EAAAA,EAAAA,KAAA,SAAOoC,UAAU,aAAYtC,SAAE1C,EAAIG,UACnCyC,EAAAA,EAAAA,KAAA,SACI+C,KAAK,OACLX,UAAU,+BACV1D,MAAOpD,GAAW8B,EAAIM,WAAa,GACnC4C,SAAWC,GAAMhF,IAAaqD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACzBtD,IAAU,IACb,CAAC8B,EAAIM,UAAW6C,EAAEC,OAAO9B,SAE7B+C,SACqB,YAAjBrE,EAAIM,UACa,mBAAjBN,EAAIM,UACa,eAAjBN,EAAIM,SAERoH,MAAO,CACHxM,QAAS,YACTD,SAAU,cAlBhB+E,EAAIM,mBA2B9B8B,EAAAA,EAAAA,MAACkE,EAAAA,EAAa,CAAA5D,SAAA,EACVE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACHL,QAASA,IAAM5F,IAAkB,GACjC6E,QAAQ,WACRqB,WAAWvB,EAAAA,EAAAA,KAACiF,EAAAA,EAAU,IAAInF,SAC7B,YAGDE,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CACHL,QA7dMjF,UACtB,IACI,MAAMqI,QAAuBnI,EAAAA,EAAAA,GAAU,CACnCC,QAAS,2BACTmI,OAAQ,MACRC,SAAUjJ,GACV4J,QAAS,CACLC,GAAQ,OAAJ3J,SAAI,IAAJA,QAAI,EAAJA,GAAM4J,cAIlB,IAAKf,EAAehI,QAChB,MAAM,IAAIuI,MAAMP,EAAeQ,SAAW,wBAG9CtK,IAAW8K,GACPA,EAAS/H,KAAIS,GACTA,EAAIuH,UAAYhK,GAAWgK,QAAUhK,GAAayC,MAI1DzE,GAAW+L,GACPA,EAAS/H,KAAIS,GACTA,EAAIuH,UAAYhK,GAAWgK,QAAUhK,GAAayC,MAI1D1C,IAAkB,GAIlBuH,EAAAA,GAAMvG,QAAQ,2BAClB,CAAE,MAAOE,GAELqG,EAAAA,GAAMrG,MAAM,uBAChB,GA2bgB2D,QAAQ,YACRjI,MAAM,UACNsJ,WAAWvB,EAAAA,EAAAA,KAACuF,EAAAA,EAAQ,IAAIzF,SAC3B,uBAMRtG,EAAQkI,OAAS,GAAKpH,GAAQoH,OAAS,GACpClC,EAAAA,EAAAA,MAACgG,EAAAA,EAAK,CAACC,UAAW,EAAG/F,GAAI,CAAEgG,OAAQ,qBAAsB5F,SAAA,EACrDE,EAAAA,EAAAA,KAAC2F,EAAAA,EAAc,CAAA7F,UACXN,EAAAA,EAAAA,MAACoG,EAAAA,EAAK,CACFC,cAAY,EACZ,aAAW,eACXnG,GAAI,CAAEoG,SAAU,KAAMhG,SAAA,EAvR1CE,EAAAA,EAAAA,KAAC+F,EAAAA,EAAS,CAAAjG,UACNN,EAAAA,EAAAA,MAAChH,EAAAA,EAAQ,CAAAsH,SAAA,EACLE,EAAAA,EAAAA,KAACxI,EAAe,CAACwO,MAAM,SAAStG,GAAI,CAAEe,MAAO,QAASX,SAAC,UAGvDE,EAAAA,EAAAA,KAACxI,EAAe,CAACwO,MAAM,SAAStG,GAAI,CAAEe,MAAO,QAASX,SAAC,YAGtDtG,EAAQ8D,KAAKF,IACVoC,EAAAA,EAAAA,MAAChI,EAAe,CAAoBwO,MAAM,SAAQlG,SAAA,EAC9CN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,GAAI,CACA3G,QAAS,OACTE,WAAY,SACZD,eAAgB,UAClB8G,SAAA,CAED1C,EAAIG,QACLyC,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CACJC,MAAK,QAAAvJ,OAAUmD,GAAWE,MAAQkC,EAAIM,UACP,QAAzB1C,GAAWG,UACP,aAEJ,aACC2E,UAEPE,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CACPZ,KAAK,QACLa,QAASA,IAxEpB/F,KACjB,IAAIC,EAAY,MACZH,GAAWE,MAAQA,GAAgC,QAAzBF,GAAWG,YACrCA,EAAY,QAEhBF,GAAc,CAAEC,MAAKC,aAAY,EAmEU8K,CAAY7I,EAAIM,UAC/BzF,MACI+C,GAAWE,MAAQkC,EAAIM,SAAW,UAAY,UACjDoC,SAEA9E,GAAWE,MAAQkC,EAAIM,SACK,QAAzB1C,GAAWG,WACP6E,EAAAA,EAAAA,KAACkG,EAAAA,EAAO,KAERlG,EAAAA,EAAAA,KAACmG,EAAAA,EAAQ,KAGbnG,EAAAA,EAAAA,KAACoG,EAAAA,EAAU,YAK3BpG,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CACNC,KAAK,QACLF,QAAQ,WACRG,YAAY,YACZ3B,MAAOhE,GAAa0C,EAAIM,WAAa,GACrC4C,SAAWC,GAAM/B,GAAmBpB,EAAIM,SAAU6C,EAAEC,OAAO9B,OAC3DgB,GAAI,CAAEe,MAAO,OAAQ4F,GAAI,GACzB1F,WAAY,CACRI,aAAcrG,GAAa0C,EAAIM,YAC3BsC,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAAClD,SAAS,MAAKmC,UAC1BE,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CACPZ,KAAK,QACLa,QAASA,IAAMzC,GAAmBpB,EAAIM,SAAU,IAAIoC,UAEpDE,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAC7I,SAAS,mBAlDtB+E,EAAIM,kBAiRlBsC,EAAAA,EAAAA,KAACsG,EAAAA,EAAS,CAAAxG,SACLhC,GACIyI,MAAM7M,EAAOE,EAAaF,EAAOE,EAAcA,GAC/C0D,KAAI,CAACS,EAAKyI,KACPhH,EAAAA,EAAAA,MAACjH,EAAc,CAAAuH,SAAA,CAA+B,KAC1CE,EAAAA,EAAAA,KAACxI,EAAe,CAACwO,MAAM,SAAQlG,SAC1BpG,EAAOE,EAAc4M,EAAM,KAEhCxG,EAAAA,EAAAA,KAACxI,EAAe,CAACwO,MAAM,SAAQlG,UAC3BE,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,CAACC,MAAM,OAAMtB,UACjBE,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CACPC,QAASA,KAAMwF,OAjgB1CC,EAigB0D3I,EA/f/ExC,IAAaqD,EAAAA,EAAAA,GAAC,CAAC,EAAI8H,SACnBrL,IAAkB,GAHGqL,KAigB+D,EACpCzO,MAAM,UACNmI,KAAK,QACLV,GAAI,CACA,UAAW,CACP1H,gBAAiB,2BACjB2O,UAAW,cAEfC,WAAY,kBACd9G,UAEFE,EAAAA,EAAAA,KAAC6G,EAAAA,EAAQ,CAACxO,SAAS,gBAI9BmB,EAAQ8D,KAAKF,IACV4C,EAAAA,EAAAA,KAACxI,EAAe,CAEZwO,MAAM,SAAQlG,SAEb/B,EAAIX,EAAIM,WAAS,GAAA7F,OAHV2O,EAAG,KAAA3O,OAAIuF,EAAIM,eAKzB,GAAA7F,OA7BkBkG,EAAIuH,QAAO,KAAAzN,OAAI2O,cAoC3DhH,EAAAA,EAAAA,MAAC1G,EAAmB,CAAAgH,SAAA,EAChBE,EAAAA,EAAAA,KAAC8G,EAAAA,EAAe,CACZC,UAAU,MACVC,MAAOlJ,GAAa4D,OACpB9H,YAAaA,EACbF,KAAMA,EACNuN,aA1ZCC,CAACC,EAAOC,KAC7BzN,EAAQyN,EAAQ,EA0ZIC,mBAAoB,GACpB3H,GAAI,CACA,gCAAiC,CAC7BpH,QAAS,EACTgP,UAAW,QAEf,+BAAgC,CAC5BvO,QAAS,QAEb,gCAAiC,CAC7BwO,WAAY,YAIxB/H,EAAAA,EAAAA,MAACgI,EAAAA,EAAW,CAACtH,QAAQ,WAAWE,KAAK,QAAQV,GAAI,CAAEoG,SAAU,KAAMhG,SAAA,EAC/DE,EAAAA,EAAAA,KAACyH,EAAAA,EAAU,CAAA3H,SAAC,mBACZE,EAAAA,EAAAA,KAAC0H,EAAAA,EAAM,CACHhJ,MAAO9E,EACP0G,SAzaK6G,IAC7BtN,EAAesJ,SAASgE,EAAM3G,OAAO9B,MAAO,KAC5C/E,EAAQ,EAAE,EAwacgO,MAAM,gBAAe7H,SAratB8H,MACvB,MAAMC,EAAc,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,KACvCC,EAAYC,KAAKC,OAAOH,GAE9B,OAAIxO,EAAQqI,OAASoG,EACV,IAAID,GAERA,CAAW,EAgaOD,GAAqBtK,KAAK2K,IACvBjI,EAAAA,EAAAA,KAACkI,EAAAA,EAAQ,CAAcxJ,MAAOuJ,EAAOnI,SAChCmI,GADUA,iBASnCjI,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAH,SAAC,iBAI5B,C","sources":["Pages/Masters/loslist.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n    Table, TableBody, TableCell, tableCellClasses, TableContainer, TableHead, TableRow, Paper, TablePagination, Select,\r\n    MenuItem, FormControl, InputLabel, Box, Typography, IconButton, Tooltip, Switch, Dialog, DialogTitle, DialogContent, \r\n    DialogActions, TextField, Button, Card, InputAdornment,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport {\r\n    Settings as SettingsIcon,\r\n    Search as SearchIcon,\r\n    Clear as ClearIcon,\r\n    ArrowUpward as AscIcon,\r\n    ArrowDownward as DescIcon,\r\n    FilterList as FilterIcon,\r\n    Cancel as CancelIcon,\r\n    Save as SaveIcon,\r\n    Edit as EditIcon,\r\n} from \"@mui/icons-material\";\r\nimport { getSessionUser } from \"../../Components/functions\";\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: \"#b8b8b8\",\r\n        color: \"#000000\",\r\n        fontWeight: \"bold\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        padding: \"12px 16px\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    \"&:nth-of-type(even)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    \"&:hover\": {\r\n        backgroundColor: theme.palette.action.selected,\r\n    },\r\n}));\r\n\r\nconst PaginationContainer = styled(\"div\")({\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    gap: \"16px\",\r\n    padding: \"16px\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    borderTop: \"1px solid #e0e0e0\",\r\n});\r\n\r\nconst PROTECTED_COLUMNS = ['Auto_Id', 'Stock_Tally_Id', 'Stock_Item', 'Grade_Item_Group', 'Item_Name_Modified'];\r\nfunction Loslist() {\r\n    const [lolData, setLolData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [columnSettings, setColumnSettings] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [originalColumnSettings, setOriginalColumnSettings] = useState([]);\r\n    const [columnDropDown, setColumnDropDown] = useState([]);\r\n    const [allData, setAllData] = useState([]);\r\n    const [isApplying, setIsApplying] = useState(false);\r\n    const [searchValues, setSearchValues] = useState({});\r\n    const [appliedFilters, setAppliedFilters] = useState({});\r\n    const [globalSearch, setGlobalSearch] = useState(\"\");\r\n    const [sortConfig, setSortConfig] = useState({ key: null, direction: \"asc\" });\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    // const [currentRowData, setCurrentRowData] = useState(null);\r\n    const [editedData, setEditedData] = useState({});\r\n\r\n    const user = getSessionUser().user;\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const fetchColumnData = async () => {\r\n        try {\r\n            const dropData = await fetchLink({\r\n                address: `masters/columns/dropDownLos?company_id=${parseData?.companyId}`,\r\n            });\r\n\r\n            if (dropData.success) {\r\n                setColumnDropDown(dropData.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching columns:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchColumnData();\r\n    }, [parseData?.companyId]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const columnRes = await fetchLink({\r\n                    address: `masters/displayLosColumn?company_id=${parseData?.companyId}`,\r\n                });\r\n\r\n                if (!columnRes.success || !Array.isArray(columnRes.data)) {\r\n                    console.error(\"No display columns found\");\r\n                    return;\r\n                }\r\n\r\n                const sortedColumns = [...columnRes.data].sort(\r\n                    (a, b) => a.Position - b.Position\r\n                );\r\n                setColumnSettings(sortedColumns);\r\n                setOriginalColumnSettings([...sortedColumns]);\r\n\r\n                const visibleColumns = sortedColumns\r\n                    .filter((col) => col.status === 1)\r\n                    .sort((a, b) => a.Position - b.Position)\r\n                    .map((col) => ({\r\n                        header: col.Alias_Name || col.ColumnName,\r\n                        accessor: col.ColumnName,\r\n                        position: col.Position,\r\n                    }));\r\n\r\n                setColumns(visibleColumns);\r\n\r\n                const dataRes = await fetchLink({ address: `masters/getlosDetails` });\r\n\r\n                if (dataRes.success && Array.isArray(dataRes.data)) {\r\n                    setAllData(dataRes.data);\r\n\r\n                    const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                    const filteredData = dataRes.data.map((row) => {\r\n                        const filteredRow = {};\r\n                        allowedKeys.forEach((key) => {\r\n                            filteredRow[key] = row[key] || \"\";\r\n                        });\r\n                        return filteredRow;\r\n                    });\r\n\r\n                    setLolData(filteredData);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading data:\", error);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handlePositionChange = (columnId, newPosition) => {\r\n        const positionValue = parseInt(newPosition);\r\n\r\n        if (!isNaN(positionValue)) {\r\n            setColumnDropDown(prev =>\r\n                prev.map(col =>\r\n                    col.Id === columnId ? { ...col, Position: positionValue } : col\r\n                )\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleAliasChange = (columnId, newAlias) => {\r\n        setColumnDropDown((prev) =>\r\n            prev.map((col) =>\r\n                col.Id === columnId ? { ...col, Alias_Name: newAlias } : col\r\n            )\r\n        );\r\n    };\r\n\r\n    const getColumnStatus = (columnId) => {\r\n        const column = columnSettings.find((col) => col.Id === columnId);\r\n        return column ? column.status === 1 : false;\r\n    };\r\n\r\n    const handleColumnToggle = (columnId, isChecked) => {\r\n        const column = columnDropDown.find((col) => col.Id === columnId);\r\n\r\n        if (column?.Position <= 5) {\r\n            toast.error(\"First 5 columns cannot be disabled\");\r\n            return;\r\n        }\r\n\r\n        let updatedSettings;\r\n\r\n        if (columnSettings.some((col) => col.Id === columnId)) {\r\n            updatedSettings = columnSettings.map((col) =>\r\n                col.Id === columnId ? { ...col, status: isChecked ? 1 : 0 } : col\r\n            );\r\n        } else {\r\n            const newColumn = columnDropDown.find((col) => col.Id === columnId);\r\n            if (newColumn) {\r\n                updatedSettings = [\r\n                    ...columnSettings,\r\n                    {\r\n                        ...newColumn,\r\n                        status: isChecked ? 1 : 0,\r\n                    },\r\n                ];\r\n            } else {\r\n                updatedSettings = [...columnSettings];\r\n            }\r\n        }\r\n\r\n        updatedSettings.sort((a, b) => a.Position - b.Position);\r\n        setColumnSettings(updatedSettings);\r\n    };\r\n\r\n    const handleEditClick = (rowData) => {\r\n        // setCurrentRowData(rowData);\r\n        setEditedData({ ...rowData });\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateLosDetails\",\r\n                method: \"PUT\",\r\n                bodyData: editedData,\r\n                headers: {\r\n                    Db: user?.Company_id,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(updateResponse.message || \"Failed to update row\");\r\n            }\r\n\r\n            setAllData(prevData =>\r\n                prevData.map(row =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setLolData(prevData =>\r\n                prevData.map(row =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setEditDialogOpen(false);\r\n            // setIsUpdated(true)\r\n\r\n\r\n            toast.success(\"Row updated successfully\");\r\n        } catch (error) {\r\n\r\n            toast.error(\"Failed to update row\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const applyColumnChanges = async () => {\r\n        setIsApplying(true);\r\n        try {\r\n            // 1. Prepare updated settings\r\n            const updatedSettings = columnSettings.map((col) => {\r\n                const dropdownCol = columnDropDown.find((dc) => dc.Id === col.Id);\r\n                return dropdownCol ? {\r\n                    ...col,\r\n                    Position: dropdownCol.Position,\r\n                    Alias_Name: dropdownCol.Alias_Name,\r\n                } : col;\r\n            });\r\n\r\n            // 2. Validate positions BEFORE API call\r\n            const positionMap = {};\r\n            const duplicatePositions = new Set();\r\n\r\n            updatedSettings.forEach((col) => {\r\n                if (positionMap[col.Position]) {\r\n                    duplicatePositions.add(col.Position);\r\n                }\r\n                positionMap[col.Position] = true;\r\n            });\r\n\r\n            if (duplicatePositions.size > 0) {\r\n                const positionsList = Array.from(duplicatePositions).join(', ');\r\n                toast.error(`Duplicate positions found: ${positionsList}`);\r\n                return; // Exit before API call\r\n            }\r\n\r\n            // 3. Only proceed if validation passes\r\n            setColumnSettings(updatedSettings);\r\n            setOriginalColumnSettings(updatedSettings);\r\n\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateLosColumnChanges\",\r\n                method: \"PUT\",\r\n                bodyData: {\r\n                    columns: updatedSettings.map((col) => ({\r\n                        id: col.Id,\r\n                        status: col.status,\r\n                        position: col.Position,\r\n                        alias_name: col.Alias_Name,\r\n                        column_name: col.ColumnName,\r\n                    })),\r\n                    company_id: parseData?.companyId,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(updateResponse.message || \"Failed to update column statuses\");\r\n            }\r\n\r\n            // 4. Update visible columns\r\n            const visibleColumns = updatedSettings\r\n                .filter((col) => col.status === 1)\r\n                .sort((a, b) => a.Position - b.Position)\r\n                .map((col) => ({\r\n                    header: col.Alias_Name || col.ColumnName,\r\n                    accessor: col.ColumnName,\r\n                    position: col.Position,\r\n                }));\r\n\r\n            setColumns(visibleColumns);\r\n\r\n            if (allData.length > 0) {\r\n                const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                const filteredData = allData.map((row) => {\r\n                    const filteredRow = {};\r\n                    allowedKeys.forEach((key) => {\r\n                        filteredRow[key] = row[key] || \"\";\r\n                    });\r\n                    return filteredRow;\r\n                });\r\n                setLolData(filteredData);\r\n            }\r\n\r\n            setDialogOpen(false);\r\n            toast.success(\"Changes Saved\");\r\n        } catch (error) {\r\n            console.error(\"Error updating column statuses:\", error);\r\n            toast.error(error.message || \"Failed to update columns. Please try again.\");\r\n        } finally {\r\n            setIsApplying(false);\r\n        }\r\n    };\r\n\r\n    const resetToDefaults = () => {\r\n        setColumnSettings([...originalColumnSettings]);\r\n        setColumnDropDown([...originalColumnSettings]);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const getPageSizeOptions = () => {\r\n        const baseOptions = [5, 10, 15, 30, 60, 120, 240];\r\n        const maxOption = Math.max(...baseOptions);\r\n\r\n        if (lolData.length > maxOption) {\r\n            return [...baseOptions];\r\n        }\r\n        return baseOptions;\r\n    };\r\n\r\n    const handleSearchChange = (columnName, value) => {\r\n        setSearchValues((prev) => ({\r\n            ...prev,\r\n            [columnName]: value,\r\n        }));\r\n    };\r\n\r\n    const applySearch = () => {\r\n        setAppliedFilters({ ...searchValues });\r\n        setPage(0);\r\n    };\r\n\r\n    const clearSearch = () => {\r\n        setSearchValues({});\r\n        setAppliedFilters({});\r\n        setGlobalSearch(\"\");\r\n        setPage(0);\r\n    };\r\n\r\n    const requestSort = (key) => {\r\n        let direction = \"asc\";\r\n        if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n            direction = \"desc\";\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const filteredData = useMemo(() => {\r\n        let filterableData = [...allData];\r\n\r\n        if (globalSearch) {\r\n            filterableData = filterableData.filter((row) =>\r\n                Object.values(row).some((val) =>\r\n                    String(val).toLowerCase().includes(globalSearch.toLowerCase())\r\n                )\r\n            );\r\n        }\r\n\r\n        filterableData = filterableData.filter((row) => {\r\n            return Object.keys(appliedFilters).every((key) => {\r\n                if (!appliedFilters[key]) return true;\r\n                return String(row[key])\r\n                    .toLowerCase()\r\n                    .includes(String(appliedFilters[key]).toLowerCase());\r\n            });\r\n        });\r\n\r\n        if (sortConfig.key) {\r\n            filterableData.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return filterableData;\r\n    }, [allData, globalSearch, appliedFilters, sortConfig]);\r\n\r\n    const renderTableHeader = () => (\r\n        <TableHead>\r\n            <TableRow>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    S.No\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    Actions\r\n                </StyledTableCell>\r\n                {columns.map((col) => (\r\n                    <StyledTableCell key={col.accessor} align=\"center\">\r\n                        <Box\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            {col.header}\r\n                            <Tooltip\r\n                                title={`Sort ${sortConfig.key === col.accessor\r\n                                    ? sortConfig.direction === \"asc\"\r\n                                        ? \"Descending\"\r\n                                        : \"Ascending\"\r\n                                    : \"Ascending\"\r\n                                    }`}\r\n                            >\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => requestSort(col.accessor)}\r\n                                    color={\r\n                                        sortConfig.key === col.accessor ? \"primary\" : \"default\"\r\n                                    }\r\n                                >\r\n                                    {sortConfig.key === col.accessor ? (\r\n                                        sortConfig.direction === \"asc\" ? (\r\n                                            <AscIcon />\r\n                                        ) : (\r\n                                            <DescIcon />\r\n                                        )\r\n                                    ) : (\r\n                                        <FilterIcon />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Filter...\"\r\n                            value={searchValues[col.accessor] || \"\"}\r\n                            onChange={(e) => handleSearchChange(col.accessor, e.target.value)}\r\n                            sx={{ width: \"100%\", mt: 1 }}\r\n                            InputProps={{\r\n                                endAdornment: searchValues[col.accessor] && (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => handleSearchChange(col.accessor, \"\")}\r\n                                        >\r\n                                            <ClearIcon fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </StyledTableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 3,\r\n                backgroundColor: \"white\",\r\n                borderRadius: \"8px\",\r\n                boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    mb: 3,\r\n                }}\r\n            >\r\n                <Typography variant=\"h5\">LOS LIST</Typography>\r\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        placeholder=\"Search...\"\r\n                        value={globalSearch}\r\n                        onChange={(e) => setGlobalSearch(e.target.value)}\r\n                        sx={{ width: 300, mr: 2 }}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                            endAdornment: globalSearch && (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton size=\"small\" onClick={() => setGlobalSearch(\"\")}>\r\n                                        <ClearIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Tooltip title=\"Column Settings\">\r\n                        <IconButton onClick={() => setDialogOpen(true)}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon />}\r\n                        onClick={applySearch}\r\n                        disabled={Object.keys(searchValues).length === 0}\r\n                        sx={{ ml: 2 }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<ClearIcon />}\r\n                        onClick={clearSearch}\r\n                        disabled={Object.keys(appliedFilters).length === 0 && !globalSearch}\r\n                        sx={{ ml: 1 }}\r\n                    >\r\n                        Clear All\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Dialog\r\n                open={dialogOpen}\r\n                onClose={() => setDialogOpen(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columnDropDown\r\n                            .sort((a, b) => a.Position - b.Position)\r\n                            .map((column) => (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={column.Id}>\r\n                                    <Card className=\"p-2\">\r\n                                        <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                            <Switch\r\n                                                checked={getColumnStatus(column.Id)}\r\n                                                onChange={(e) =>\r\n                                                    handleColumnToggle(column.Id, e.target.checked)\r\n                                                }\r\n                                                disabled={column.Position <= 5}\r\n                                                color={column.Position <= 5 ? \"default\" : \"primary\"}\r\n                                            />\r\n                                            <div>{column?.ColumnName}</div>\r\n\r\n                                            <div className=\"d-flex align-items-center gap-2\">\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Position ?? 0}\r\n                                                    onChange={(e) => handlePositionChange(column.Id, e.target.value)}\r\n                                                    sx={{ width: \"70px\" }}\r\n                                                    inputProps={{\r\n                                                        min: 1,\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(column.ColumnName),\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Alias_Name ?? \"\"}\r\n                                                    onChange={(e) =>\r\n                                                        handleAliasChange(column.Id, e.target.value)\r\n                                                    }\r\n                                                    inputProps={{\r\n                                                        min: 1,\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(column.ColumnName),\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetToDefaults} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialogOpen(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        onClick={applyColumnChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isApplying}\r\n                    >\r\n                        {isApplying ? \"Applying...\" : \"Apply\"}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editDialogOpen}\r\n                onClose={() => setEditDialogOpen(false)}\r\n                maxWidth=\"md\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Edit Row</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"container-fluid\" style={{ maxHeight: '80vh', overflow: 'auto' }}>\r\n                        <div className=\"row g-3\">\r\n                            {columns.map((col) => (\r\n                                <div key={col.accessor} className=\"col-12 col-sm-6 col-md-4\">\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"form-label\">{col.header}</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            value={editedData[col.accessor] || \"\"}\r\n                                            onChange={(e) => setEditedData({\r\n                                                ...editedData,\r\n                                                [col.accessor]: e.target.value\r\n                                            })}\r\n                                            disabled={\r\n                                                col.accessor === \"Auto_Id\" ||\r\n                                                col.accessor === \"Stock_Tally_Id\" ||\r\n                                                col.accessor === \"Stock_Item\"\r\n                                            }\r\n                                            style={{\r\n                                                padding: '1rem 1rem',\r\n                                                fontSize: '1rem'\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setEditDialogOpen(false)}\r\n                        variant=\"outlined\"\r\n                        startIcon={<CancelIcon />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleSaveChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<SaveIcon />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {columns.length > 0 && allData.length > 0 ? (\r\n                <Paper elevation={0} sx={{ border: \"1px solid #e0e0e0\" }}>\r\n                    <TableContainer>\r\n                        <Table\r\n                            stickyHeader\r\n                            aria-label=\"ledger table\"\r\n                            sx={{ minWidth: 650 }}\r\n                        >\r\n                            {renderTableHeader()}\r\n                            <TableBody>\r\n                                {filteredData\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, idx) => (\r\n                                        <StyledTableRow key={`${row.Auto_Id}-${idx}`}> {/* Use unique identifier */}\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {page * rowsPerPage + idx + 1}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                <Tooltip title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        onClick={() => handleEditClick(row)}\r\n                                                        color=\"primary\"\r\n                                                        size=\"small\"\r\n                                                        sx={{\r\n                                                            \"&:hover\": {\r\n                                                                backgroundColor: \"rgba(25, 118, 210, 0.08)\",\r\n                                                                transform: \"scale(1.1)\",\r\n                                                            },\r\n                                                            transition: \"transform 0.2s\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </StyledTableCell>\r\n                                            {columns.map((col) => (\r\n                                                <StyledTableCell\r\n                                                    key={`${idx}-${col.accessor}`}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {row[col.accessor]}\r\n                                                </StyledTableCell>\r\n                                            ))}\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <PaginationContainer>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={filteredData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            rowsPerPageOptions={[]}\r\n                            sx={{\r\n                                \"& .MuiTablePagination-toolbar\": {\r\n                                    padding: 0,\r\n                                    minHeight: \"auto\",\r\n                                },\r\n                                \"& .MuiTablePagination-spacer\": {\r\n                                    display: \"none\",\r\n                                },\r\n                                \"& .MuiTablePagination-actions\": {\r\n                                    marginLeft: \"16px\",\r\n                                },\r\n                            }}\r\n                        />\r\n                        <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\r\n                            <InputLabel>Rows per page</InputLabel>\r\n                            <Select\r\n                                value={rowsPerPage}\r\n                                onChange={handleChangeRowsPerPage}\r\n                                label=\"Rows per page\"\r\n                            >\r\n                                {getPageSizeOptions().map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </PaginationContainer>\r\n                </Paper>\r\n            ) : (\r\n                <Typography>Loading...</Typography>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Loslist;\r\n"],"names":["StyledTableCell","styled","TableCell","_ref","theme","concat","tableCellClasses","head","backgroundColor","color","fontWeight","borderRight","body","fontSize","padding","StyledTableRow","TableRow","_ref2","palette","action","hover","selected","PaginationContainer","display","justifyContent","alignItems","gap","borderTop","PROTECTED_COLUMNS","lolData","setLolData","useState","columns","setColumns","page","setPage","rowsPerPage","setRowsPerPage","columnSettings","setColumnSettings","dialogOpen","setDialogOpen","originalColumnSettings","setOriginalColumnSettings","columnDropDown","setColumnDropDown","allData","setAllData","isApplying","setIsApplying","searchValues","setSearchValues","appliedFilters","setAppliedFilters","globalSearch","setGlobalSearch","sortConfig","setSortConfig","key","direction","editDialogOpen","setEditDialogOpen","editedData","setEditedData","user","getSessionUser","parseData","JSON","parse","localStorage","getItem","useEffect","async","dropData","fetchLink","address","companyId","success","data","error","console","fetchColumnData","columnRes","Array","isArray","sortedColumns","sort","a","b","Position","visibleColumns","filter","col","status","map","header","Alias_Name","ColumnName","accessor","position","dataRes","allowedKeys","filteredData","row","filteredRow","forEach","fetchData","getColumnStatus","columnId","column","find","Id","handleSearchChange","columnName","value","prev","_objectSpread","useMemo","filterableData","Object","values","some","val","String","toLowerCase","includes","keys","every","_jsxs","Box","sx","p","borderRadius","boxShadow","children","mb","_jsx","Typography","variant","TextField","size","placeholder","onChange","e","target","width","mr","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onClick","ClearIcon","Tooltip","title","SettingsIcon","Button","startIcon","applySearch","disabled","length","ml","clearSearch","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","className","_column$Position","_column$Alias_Name","Card","Switch","checked","handleColumnToggle","isChecked","toast","updatedSettings","newColumn","type","handlePositionChange","newPosition","positionValue","parseInt","isNaN","inputProps","min","readOnly","handleAliasChange","newAlias","DialogActions","resetToDefaults","dropdownCol","dc","positionMap","duplicatePositions","Set","add","positionsList","from","join","updateResponse","method","bodyData","id","alias_name","column_name","company_id","Error","message","style","maxHeight","overflow","CancelIcon","headers","Db","Company_id","prevData","Auto_Id","SaveIcon","Paper","elevation","border","TableContainer","Table","stickyHeader","minWidth","TableHead","align","requestSort","AscIcon","DescIcon","FilterIcon","mt","TableBody","slice","idx","handleEditClick","rowData","transform","transition","EditIcon","TablePagination","component","count","onPageChange","handleChangePage","event","newPage","rowsPerPageOptions","minHeight","marginLeft","FormControl","InputLabel","Select","label","getPageSizeOptions","baseOptions","maxOption","Math","max","option","MenuItem"],"sourceRoot":""}
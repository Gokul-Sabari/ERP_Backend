{"version":3,"file":"static/js/3528.bcaec69c.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/UserModule/customerCreation.jsx","Pages/UserModule/customerList.jsx","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber } from '../../Components/functions'\r\n\r\nfunction onlynum(e) {\r\n    e.target.value = e.target.value.replace(/[^0-9]/g, '');\r\n}\r\n\r\nconst CustomerAddScreen = ({ screen, setScreen, underArray, row, refresh }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"))\r\n    const initialValue = {\r\n        Branch_Id: 0,\r\n        Company_Id: 0,\r\n        Cust_Id: '',\r\n        Cust_No: '',\r\n        Customer_name: '',\r\n        Contact_Person: '',\r\n        Mobile_no: '',\r\n        Email_Id: '',\r\n        Address1: '',\r\n        Address2: '',\r\n        Address3: '',\r\n        Address4: '',\r\n        Pincode: '',\r\n        State: '',\r\n        Country: 'India',\r\n        Gstin: '',\r\n        Under_Id: '',\r\n        User_Mgt_Id: '',\r\n        User_Type_Id: '',\r\n        Entry_By: storage?.UserId,\r\n    }\r\n    const [value, setValue] = useState(initialValue);\r\n    const [branchData, setBranchData] = useState([]);\r\n    // console.log(row)\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/branch/dropDown?User_Id=${storage?.UserId}&Company_id=${storage?.Company_id}`\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setBranchData(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const {\r\n            Branch_Id, Company_Id, Cust_Id, Cust_No, Customer_name, Contact_Person,\r\n            Mobile_no, Email_Id, Address1, Address2, Address3, Address4, Pincode,\r\n            State, Country, Gstin, Under_Id, User_Mgt_Id, User_Type_Id\r\n        } = row;\r\n        setValue(pre => ({\r\n            ...pre,\r\n            Branch_Id, Company_Id, Cust_Id, Cust_No, Customer_name, Contact_Person, \r\n            Mobile_no, Email_Id, Address1, Address2, Address3, Address4, Pincode, \r\n            State, Country, Gstin, Under_Id, User_Mgt_Id, User_Type_Id\r\n        }))\r\n    }, [row])\r\n\r\n    const clearValue = () => {\r\n        setValue(initialValue)\r\n    }\r\n\r\n    const filteredOptions = underArray\r\n        .filter(obj => (isEqualNumber(obj.User_Type_Id, 5) && isEqualNumber(obj.Id, value?.Cust_Id)))\r\n        .map(obj => ({ value: obj.Cust_Id, label: obj.Customer_name }));\r\n\r\n    const input = [\r\n        {\r\n            label: 'Name',\r\n            elem: 'input',\r\n            placeholder: \"Mr / Ms\",\r\n            event: (e) => setValue({ ...value, Customer_name: e.target.value }),\r\n            required: true,\r\n            value: value.Customer_name,\r\n        },\r\n        {\r\n            label: 'Mobile',\r\n            elem: 'input',\r\n            oninput: (e) => onlynum(e),\r\n            placeholder: \"Enter Mobile Number\",\r\n            event: (e) => setValue({ ...value, Mobile_no: e.target.value }),\r\n            required: true,\r\n            value: value.Mobile_no,\r\n            max: 10\r\n        },\r\n        {\r\n            label: 'Branch',\r\n            elem: 'select',\r\n            options: [\r\n                { value: 0, label: ' - Select - ', disabled: true, selected: true },\r\n                ...branchData.map(obj => ({\r\n                    value: Number(obj.BranchId),\r\n                    label: obj.BranchName\r\n                }))\r\n            ],\r\n            class: 'selectpicker',\r\n            data: true,\r\n            event: (e) => setValue({ ...value, Branch_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.Branch_Id,\r\n        },\r\n        {\r\n            label: 'User Type',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                { value: 4, label: 'CUSTOMER' },\r\n                { value: 5, label: 'BROKER' },\r\n            ],\r\n            event: (e) => setValue({ ...value, User_Type_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.User_Type_Id,\r\n        },\r\n        {\r\n            label: 'Contact Person',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            event: (e) => setValue({ ...value, Contact_Person: e.target.value }),\r\n            required: true,\r\n            value: value.Contact_Person,\r\n        },\r\n        {\r\n            label: 'Email ID',\r\n            elem: 'input',\r\n            type: 'email',\r\n            placeholder: \"emailaddress@mail.com\",\r\n            event: (e) => setValue({ ...value, Email_Id: e.target.value }),\r\n            required: false,\r\n            value: value.Email_Id,\r\n        },\r\n        {\r\n            label: 'Gstin',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            // oninput: (e) => onlynum(e),\r\n            event: (e) => setValue({ ...value, Gstin: e.target.value }),\r\n            required: false,\r\n            value: value.Gstin,\r\n            max: 15,\r\n        },\r\n        {\r\n            label: 'Under',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                { value: 0, label: ' Primary ' },\r\n                ...filteredOptions\r\n            ],\r\n            class: 'selectpicker',\r\n            data: true,\r\n            event: (e) => setValue({ ...value, Under_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.Under_Id,\r\n        },\r\n        {\r\n            label: 'Pincode',\r\n            elem: 'input',\r\n            placeholder: \"654321\",\r\n            oninput: (e) => onlynum(e),\r\n            event: (e) => setValue({ ...value, Pincode: e.target.value }),\r\n            required: false,\r\n            value: value.Pincode,\r\n            max: 6\r\n        },\r\n        {\r\n            label: 'State',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            event: (e) => setValue({ ...value, State: e.target.value }),\r\n            required: false,\r\n            value: value.State,\r\n        },\r\n        {\r\n            label: 'Address Line 1',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address1: e.target.value }),\r\n            required: true,\r\n            value: value.Address1,\r\n        },\r\n        {\r\n            label: 'Address Line 2',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address2: e.target.value }),\r\n            value: value.Address2,\r\n        },\r\n        {\r\n            label: 'Address Line 3',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address3: e.target.value }),\r\n            value: value.Address3,\r\n        },\r\n        {\r\n            label: 'Address Line 4',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address4: e.target.value }),\r\n            value: value.Address4,\r\n        },\r\n    ];\r\n\r\n    const validateForm = () => {\r\n        for (const field of input) {\r\n            if (field.required && field.value === '') {\r\n                return `${field.label} is required.`;\r\n            }\r\n        }\r\n\r\n        const validemail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        const isEmailValid = validemail.test(value.Email_Id);\r\n        if ((!isEmailValid) && value.Email_Id !== '') {\r\n            return 'Invalid email address'\r\n        }\r\n\r\n        const validPhoneNumber = /^\\d{10}$/;\r\n        const isPhoneNumberValid = validPhoneNumber.test(value.Mobile_no);\r\n\r\n        if (!isPhoneNumberValid) {\r\n            return 'Invalid phone number'\r\n        }\r\n\r\n        const validGstin = /^\\d{15}$/;\r\n        const isGstinValid = validGstin.test(value.Gstin);\r\n        if ((!isGstinValid) && value.Gstin !== '') {\r\n            return 'Invalid gstin'\r\n        }\r\n\r\n        const validPIN = /^\\d{6}$/;\r\n        const isPinValid = validPIN.test(value.Pincode);\r\n        if ((!isPinValid) && value.Pincode !== '') {\r\n            return 'Invalid Pincode'\r\n        }\r\n\r\n        return \"Success\";\r\n    };\r\n\r\n    const CreateCustomer = () => {\r\n        const validate = validateForm();\r\n        if (validate === 'Success') {\r\n            fetchLink({\r\n                address: `userModule/customer`,\r\n                method: 'POST',\r\n                bodyData: { ...value }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    clearValue()\r\n                    toast.success(data.message)\r\n                    refresh()\r\n                    setScreen(!screen)\r\n                } else {\r\n                    toast.error(data.message)\r\n                }\r\n            }).catch(e => console.error(e))\r\n\r\n        } else {\r\n            toast.error(validate)\r\n        }\r\n    }\r\n\r\n    const UpdateCustomer = () => {\r\n        const validate = validateForm();\r\n        if (validate === 'Success') {\r\n            fetchLink({\r\n                address: `userModule/customer`,\r\n                method: 'PUT',\r\n                bodyData: { ...value }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    clearValue();\r\n                    toast.success(data.message)\r\n                    refresh()\r\n                    setScreen(!screen)\r\n                } else {\r\n                    toast.error(data.message)\r\n                }\r\n            }).catch(e => console.error(e))\r\n        } else {\r\n            toast.error(validate)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className='card-header py-2 d-flex align-items-center justify-content-between'>\r\n                    <h5 className=\"mb-0 \">Customer Details</h5>\r\n                    <button className=\"comadbtn mb-0\" onClick={() => { setScreen(!screen); clearValue(); }}>Back</button>\r\n                </div>\r\n                <div className=\"card-body row\">\r\n                    {input.map((field, index) => (\r\n                        <div key={index} className=\"col-lg-4 col-md-6 p-2 px-3\">\r\n                            <label>{field.label}{field.required && <p style={{ color: 'red', display: 'inline', fontWeight: 'bold', fontSize: '1em' }}> *</p>}</label>\r\n                            {field.elem === 'input' ? (\r\n                                <input\r\n                                    type={field.type || 'text'}\r\n                                    className='cus-inpt b-0'\r\n                                    onChange={field.event}\r\n                                    onInput={field.oninput}\r\n                                    disabled={field.disabled}\r\n                                    value={field.value} \r\n                                    maxLength={field.max}\r\n                                />\r\n                            ) : field.elem === 'select' ? (\r\n                                <select\r\n                                    className={'cus-inpt b-0'}\r\n                                    onChange={field.event}\r\n                                    value={field.value}>\r\n                                    {field.options.map((option, optionIndex) => (\r\n                                        <option\r\n                                            key={optionIndex}\r\n                                            value={option.value}\r\n                                            disabled={option.disabled}\r\n                                            defaultValue={option.selected} >\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            ) : field.elem === 'textarea' ? (\r\n                                <textarea\r\n                                    className='cus-inpt b-0'\r\n                                    onChange={field.event}\r\n                                    rows={4} value={field.value}>\r\n                                </textarea>\r\n                            ) : null}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"card-footer text-end\">\r\n                    <button className=\"cancelbtn\" onClick={() => setScreen(!screen)}>Cancel</button>\r\n                    <button\r\n                        className=\"comadbtn mb-0\"\r\n                        onClick={row.Cust_Id ? UpdateCustomer : CreateCustomer}>\r\n                        {row.Cust_Id ? 'Update' : 'Create'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerAddScreen;","import React, { useEffect, useState } from \"react\";\r\nimport { Edit, LocalMallOutlined } from '@mui/icons-material';\r\nimport { IconButton, Box, Tooltip, Button } from \"@mui/material\";\r\nimport CustomerAddScreen from \"./customerCreation\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from '../../Components/filterableTable2';\r\n\r\nconst CustomerList = ({ loadingOn, loadingOff, AddRights, EditRights }) => {\r\n    const [customers, setCustomers] = useState([])\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [rowValue, setRowValue] = useState({})\r\n    const [screen, setScreen] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `userModule/customer`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            setCustomers(data.data ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (screen === true) {\r\n            setRowValue({});\r\n        }\r\n    }, [screen])\r\n\r\n    const doRefresh = () => {\r\n        setRefresh(!refresh)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {screen ?\r\n                <FilterableTable\r\n                    title=\"Customers\"\r\n                    dataArray={customers}\r\n                    headerFontSizePx={13}\r\n                    bodyFontSizePx={12}\r\n                    columns={[\r\n                        createCol('Cust_No', 'string', 'CusID'),\r\n                        createCol('Customer_name', 'string', 'Name'),\r\n                        createCol('UserTypeGet', 'string', 'Type'),\r\n                        createCol('Mobile_no', 'string', 'Phone'),\r\n                        createCol('Contact_Person', 'string', 'Contact Person'),\r\n                        createCol('Email_Id', 'string', 'Email'),\r\n                        createCol('State', 'string', 'State'),\r\n                        createCol('Gstin', 'string', 'Gstin'),\r\n                        {\r\n                            isVisible: 1,\r\n                            ColumnHeader: 'Action',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <>\r\n                                    <Tooltip title=\"Edit\">\r\n                                        <span>\r\n                                            <IconButton size=\"small\" onClick={() => {\r\n                                                setRowValue(row);\r\n                                                setScreen(!screen);\r\n                                            }}>\r\n                                                <Edit className=\"fa-20\" />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                    {/* <Tooltip title=\"Outstanding\">\r\n                                        <span>\r\n                                            <IconButton \r\n                                                size=\"small\" \r\n                                                onClick={() => {}}\r\n                                            >\r\n                                                <LocalMallOutlined className=\"fa-20\" />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip> */}\r\n                                </>\r\n                            )\r\n                        },\r\n                    ]}\r\n                    ButtonArea={\r\n                        <>\r\n                            <Button variant='outlined' onClick={() => setScreen(!screen)} >Add</Button>\r\n                        </>\r\n                    }\r\n                />\r\n                : <CustomerAddScreen\r\n                    screen={screen}\r\n                    setScreen={setScreen}\r\n                    underArray={customers}\r\n                    row={rowValue}\r\n                    refresh={doRefresh}\r\n                />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","onlynum","screen","setScreen","underArray","refresh","storage","JSON","parse","localStorage","getItem","initialValue","Branch_Id","Company_Id","Cust_Id","Cust_No","Customer_name","Contact_Person","Mobile_no","Email_Id","Address1","Address2","Address3","Address4","Pincode","State","Country","Gstin","Under_Id","User_Mgt_Id","User_Type_Id","Entry_By","UserId","setValue","branchData","setBranchData","useEffect","fetchLink","address","Company_id","then","success","catch","clearValue","filteredOptions","obj","Id","label","input","elem","placeholder","required","oninput","max","options","selected","BranchId","BranchName","validateForm","field","test","style","display","fontWeight","onChange","onInput","maxLength","option","optionIndex","defaultValue","UpdateCustomer","validate","method","bodyData","toast","message","CreateCustomer","loadingOn","loadingOff","AddRights","EditRights","customers","setCustomers","setRefresh","rowValue","setRowValue","Edit","Button","variant","CustomerAddScreen","doRefresh","createSvgIcon","d"],"sourceRoot":""}
{"version":3,"file":"static/js/4252.568fae97.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/XlPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n\r\n    const items = brokerData?.Items || [];\r\n    let totalBrokerage = 0;\r\n    if (transactionType === 'salesNagal') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0)\r\n    } else {\r\n\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brokerage || 0), 0)\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!packQuantities) return null;\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    function formatSignedNumber(value) {\r\n        const n = Number(value) || 0;\r\n        return `${n >= 0 ? '+' : ''}${NumberFormat(n)}`;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n                <DialogTitle>\r\n                    {transactionType === 'salesNagal' ? 'Sales Nakal Report' : 'Delivery Nakal Report'} : {brokerData?.Broker_Name}\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        onClick={onClose}\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            right: 8,\r\n                            top: 8,\r\n                            color: (theme) => theme.palette.grey[500],\r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    {transactionType === 'salesNagal' ? (\r\n                        <>\r\n                            <div className=\"text-center mb-3\">\r\n                                <h4>Broker Report Page</h4>\r\n                                <p className=\"mb-0\">Date: {brokerData?.Items?.[0]?.Date}</p>\r\n                                <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                                {packSizeSummary && (\r\n                                    <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                                )}\r\n                            </div>\r\n\r\n                            <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>PARTY NAME</th>\r\n                                        <th>ALIAS NAME</th>\r\n                                        <th className=\"text-end\">BILL RATE</th>\r\n                                        <th className=\"text-end\">BROKER EXP</th>\r\n                                        <th className=\"text-end\">QTY</th>\r\n                                        <th className=\"text-end\">KGS</th>\r\n                                        <th className=\"text-end\">AMOUNT</th>\r\n                                        <th className=\"text-end\">VILAIVAASI</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {items.map((item, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                            <td>{item.Short_Name}</td>\r\n                                            <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Brok_Amt || 0)}</td>\r\n                                            <td className=\"text-end\">{item.QTY}</td>\r\n                                            <td className=\"text-end\">{item.KGS}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"text-end fw-bold\">{packSizeSummary}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row mt-3\">\r\n                                <div className=\"col-6 offset-6\">\r\n                                    <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">COOLIE</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(totalCoolie)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">BROKERAGE</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(totalBrokerage)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(vilaivasi)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                                <td className=\"text-end fw-bold\">{formatSignedNumber(roundOff)}</td>\r\n                                            </tr>\r\n                                            <tr className=\"bg-light\">\r\n                                                <td className=\"fw-bold\">NET TOTAL</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(netTotalRounded)}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div style={{ fontFamily: 'Arial' }}>\r\n                                <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n                                    <h3 style={{ marginBottom: '5px' }}>{brokerData?.Broker_Name}</h3>\r\n                                    <p style={{ margin: '5px 0' }}>\r\n                                        {brokerData?.Items?.length > 0 ? (\r\n                                            <>\r\n\r\n                                                {fromDate} {' TO '} {toDate}\r\n                                            </>\r\n                                        ) : 'No date range available'}\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ borderBottom: '1px solid #000' }}>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '40%' }}>NAME</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '10%' }}>DATE</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '20%' }}>ALIAS NAME</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BAGS</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>QTY</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BROKERAGE EXP</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {items.map((item, index) => (\r\n                                            <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\r\n                                                <td style={{ padding: '5px' }}>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Date?.split('T')[0] || ''}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Short_Name}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.QTY}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.KGS}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(item.Brokerage || 0)}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        <tr style={{ fontWeight: 'bold', borderTop: '2px solid #000' }}>\r\n                                            <td colSpan=\"3\" style={{ padding: '5px', textAlign: 'right' }}>TOTAL</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_Qty || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_KGS || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(totalBrokerage)}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                    <div className=\"text-center mt-3 small\">\r\n                        <p>This is a computer generated report</p>\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;","import { useEffect } from 'react';\r\nimport ExcelJS from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst XlPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const items = brokerData?.Items || [];\r\n\r\n    let totalBrokerage;\r\n    if (transactionType === 'salesNagal') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    }\r\n    else {\r\n        totalBrokerage = items.reduce((bro, item) => bro + parseInt(item.Brokerage || 0), 0);\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n    const formatSignedNumber = (num) => {\r\n        const n = Number(num) || 0;\r\n        return (n >= 0 ? \"+\" : \"\") + n.toLocaleString(\"en-IN\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    };\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            return acc;\r\n        }, {});\r\n        return Object.entries(packQuantities)\r\n            .sort(([a], [b]) => a - b)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`).join(' & ');\r\n    };\r\n\r\n    const handleExportExcel = async () => {\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Broker Report');\r\n\r\n        const thickBlackBorder = {\r\n            style: 'thick',\r\n            color: { argb: 'FF000000' }\r\n        };\r\n\r\n        const cellStyle = {\r\n            border: {\r\n                top: thickBlackBorder,\r\n                bottom: thickBlackBorder,\r\n                left: thickBlackBorder,\r\n                right: thickBlackBorder\r\n            }\r\n        };\r\n\r\n        const titleRow = worksheet.addRow([\r\n            `Broker Report: ${brokerData?.Broker_Name || ''} - Date: ${brokerData?.Items?.[0]?.Date}`\r\n        ]);\r\n        worksheet.mergeCells(`A${titleRow.number}:H${titleRow.number}`);\r\n        titleRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, size: 14 },\r\n                alignment: { horizontal: 'center' },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const headerRow = worksheet.addRow([\r\n            'PARTY NAME', 'ALIAS NAME', 'BILL RATE', 'BROKER EXP',\r\n            'QTY', 'KGS', 'AMOUNT', 'VILAIVAASI'\r\n        ]);\r\n\r\n        worksheet.columns = [\r\n            { width: 50 }, { width: 30 }, { width: 15 }, { width: 15 },\r\n            { width: 10 }, { width: 10 }, { width: 15 }, { width: 15 }\r\n        ];\r\n\r\n        headerRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 12 },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2F5496' } },\r\n                alignment: { horizontal: 'center', vertical: 'middle' }\r\n            };\r\n        });\r\n\r\n        items.forEach((item, index) => {\r\n            const row = worksheet.addRow([\r\n                item.Retailer_Name || item.Ledger_Name || '',\r\n                item.Short_Name || '',\r\n                item.Item_Rate || '',\r\n                item.Brok_Amt || '',\r\n                item.QTY || '',\r\n                item.KGS || '',\r\n                Number(item.Amount || 0),\r\n                Number(item.Vilaivasi_Rate || 0)\r\n            ]);\r\n\r\n            row.eachCell((cell) => {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { size: 11 },\r\n                    alignment: { vertical: 'middle' },\r\n                    fill: index % 2 === 1 ? { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF2F2F2' } } : undefined\r\n                };\r\n            });\r\n\r\n            row.getCell(7).numFmt = '#,##0.00';\r\n            row.getCell(8).numFmt = '#,##0.00';\r\n        });\r\n\r\n        const totalRow = worksheet.addRow([\r\n            '', '', '', 'TOTAL',\r\n            Number(brokerData?.Total_Qty || 0),\r\n            Number(brokerData?.Total_KGS || 0),\r\n            Number(brokerData?.Total_Amount || 0),\r\n            Number(brokerData?.VilaiVasi || 0)\r\n        ]);\r\n\r\n        totalRow.eachCell((cell, colNumber) => {\r\n            if (colNumber >= 4) {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                    fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF70AD47' } }\r\n                };\r\n                if (colNumber >= 5) {\r\n                    cell.numFmt = colNumber === 5 || colNumber === 6 ? '0.00' : '#,##0.00';\r\n                }\r\n            } else {\r\n                cell.style = cellStyle;\r\n            }\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const packSizesRow = worksheet.addRow([`Pack Sizes: ${getPackSizeSummary()}`]);\r\n        worksheet.mergeCells(`A${packSizesRow.number}:H${packSizesRow.number}`);\r\n        packSizesRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { italic: true },\r\n                alignment: { horizontal: 'left' }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const summaryRows = [\r\n            { label: 'COOLIE', value: Number(totalCoolie) },\r\n            { label: 'BROKERAGE', value: Number(-totalBrokerage) },\r\n            { label: 'VILAIVAASI', value: Number(-vilaivasi) },\r\n            { label: 'ROUNDOFF', value: formatSignedNumber(roundOff) },\r\n            { label: 'NET TOTAL', value: Number(netTotalRounded) }\r\n        ];\r\n\r\n        summaryRows.forEach((rowData) => {\r\n            const row = worksheet.addRow(['', '', '', '', '', rowData.label, rowData.value, '']);\r\n            row.getCell(6).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } },\r\n                alignment: { horizontal: 'right' }\r\n            };\r\n            row.getCell(7).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FF000000' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC000' } },\r\n                alignment: { horizontal: 'right' },\r\n                numFmt: '#,##0.00'\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n        worksheet.addRow([]);\r\n\r\n        const buffer = await workbook.xlsx.writeBuffer();\r\n        saveAs(new Blob([buffer]), `Broker_Report_${brokerData?.Broker_Name || 'Export'}_${brokerData?.Items?.[0]?.Date}.xlsx`);\r\n    };\r\n\r\n\r\n    const handleExportPurchase = async () => {\r\n        try {\r\n            const workbook = new ExcelJS.Workbook();\r\n            const worksheet = workbook.addWorksheet('Brokerage Report');\r\n\r\n            workbook.created = new Date();\r\n            workbook.modified = new Date();\r\n\r\n            const titleRow = worksheet.addRow([brokerData?.Broker_Name || '']);\r\n            titleRow.font = { bold: true, size: 14 };\r\n            titleRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A1:F1');\r\n\r\n            const dateRangeRow = worksheet.addRow([\r\n                brokerData?.Items?.length > 0 ? `${fromDate} TO ${toDate}` : 'No date range available'\r\n            ]);\r\n            dateRangeRow.font = { bold: true };\r\n            dateRangeRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A2:F2');\r\n\r\n\r\n            worksheet.addRow([]);\r\n\r\n\r\n            const headers = [\r\n                { header: 'NAME', width: 50 },\r\n                { header: 'DATE', width: 10 },\r\n                { header: 'ALIAS NAME', width: 40 },\r\n                { header: 'BAGS', width: 10 },\r\n                { header: 'QTY', width: 10 },\r\n                { header: 'BROKERAGE EXP', width: 15 }\r\n            ];\r\n\r\n\r\n            const headerRow = worksheet.addRow(headers.map(h => h.header));\r\n            headerRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            headers.forEach((header, index) => {\r\n                worksheet.getColumn(index + 1).width = header.width;\r\n            });\r\n\r\n            items.forEach((item) => {\r\n                const row = worksheet.addRow([\r\n                    item.Retailer_Name || item.Ledger_Name,\r\n                    item.Date?.split('T')[0] || '',\r\n                    item.Short_Name,\r\n                    item.QTY,\r\n                    item.KGS,\r\n                    Number(item.Brokerage || 0)\r\n                ]);\r\n\r\n\r\n                row.eachCell((cell) => {\r\n                    cell.font = { bold: true };\r\n                    cell.border = {\r\n                        top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                    };\r\n                });\r\n\r\n\r\n                row.getCell(4).alignment = { horizontal: 'right' };\r\n                row.getCell(5).alignment = { horizontal: 'right' };\r\n                row.getCell(6).alignment = { horizontal: 'right' };\r\n            });\r\n\r\n\r\n            const totalRow = worksheet.addRow([\r\n                '', '', 'TOTAL',\r\n                Number(brokerData?.Total_Qty) || 0,\r\n                Number(brokerData?.Total_KGS) || 0,\r\n                totalBrokerage\r\n            ]);\r\n\r\n\r\n            totalRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'medium', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            totalRow.getCell(4).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(5).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(6).alignment = { horizontal: 'right' };\r\n\r\n\r\n            const buffer = await workbook.xlsx.writeBuffer();\r\n            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = `${brokerData?.Broker_Name}_${fromDate}_to_${toDate}.xlsx`;\r\n            link.click();\r\n\r\n\r\n            setTimeout(() => {\r\n                URL.revokeObjectURL(url);\r\n            }, 100);\r\n\r\n        } catch (error) {\r\n            console.error('Error exporting to Excel:', error);\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            if (transactionType === 'salesNagal') {\r\n                handleExportExcel().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            } else if (transactionType === 'purchase') {\r\n                handleExportPurchase().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            }\r\n            else if (transactionType === 'sales') {\r\n                handleExportPurchase().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            }\r\n        }\r\n    }, [open, transactionType]);\r\n\r\n    return null;\r\n};\r\nexport default XlPreviewModal;","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    IconButton,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    DialogContentText,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Box,\r\n    Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n    Cancel,\r\n    Edit,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from \"@mui/icons-material/PictureAsPdf\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\nimport XlPreviewModal from \"./XlPreviewModal\";\r\nimport { Delete } from \"@mui/icons-material\";\r\n\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n    const [transactionType, setTransactionType] = useState(\"salesNagal\");\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [listingPagination, setListingPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n    const [salesData, setSalesData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerVilaiVasi: \"\",\r\n    });\r\n    const [salesNewData, setSalesNewData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerVilaiVasi: \"\",\r\n    });\r\n    const [purchaseData, setPurchaseData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerBrokerage: \"\",\r\n    });\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        VilaiVasiZero: { value: \"\", label: \"All\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({\r\n        ledgers: [],\r\n        items: [],\r\n    });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [xlPreviewOpen, setXlPreViewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n    const [xlPreviewData, setXlPreviewData] = useState(null);\r\n    const [editingItem, setEditingItem] = useState(null);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const [deleteItemDialogOpen, setDeleteItemDialogOpen] = useState(false);\r\n    const [itemToDelete, setItemToDelete] = useState(null);\r\n    const [brokerToDelete, setBrokerToDelete] = useState(null);\r\n    const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false);\r\n\r\n    const currentData =\r\n        transactionType === \"salesNagal\" ? salesData :\r\n            transactionType === \"sales\" ? salesNewData :\r\n                purchaseData;\r\n\r\n    const setCurrentData =\r\n        transactionType === \"salesNagal\" ? setSalesData :\r\n            transactionType === \"sales\" ? setSalesNewData :\r\n                setPurchaseData;\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const endpoint =\r\n                    transactionType === \"salesNagal\"\r\n                        ? \"brokerageNakalReport/sales\"\r\n                        : transactionType === \"sales\" ? \"brokerageNakalReport/salesEntry\" : \"brokerageNakalReport/purchase\";\r\n\r\n                const res = await fetchLink({\r\n                    address: `reports/${endpoint}?FromDate=${currentData.filters.FromDate}&ToDate=${currentData.filters.ToDate}&broker=${currentData.filters.Broker.value}`,\r\n                });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: data,\r\n                        brokerageValues: initialBrokerage,\r\n                    }));\r\n                } else {\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: [],\r\n                        brokerageValues: {},\r\n                    }));\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    deliveryReport: [],\r\n                    brokerageValues: {},\r\n                }));\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [transactionType, currentData.filters.refresh]);\r\n\r\n    const tableConfigs = {\r\n        salesNagal: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Do No\", key: \"Do_Inv_No\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Ledger_Name\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Qty\", key: \"displayQuantity\", align: \"right\" },\r\n                {\r\n                    label: \"Rate\",\r\n                    key: \"Rate\",\r\n                    align: \"right\",\r\n                    render: (row) => row.Rate || row.Item_Rate,\r\n                },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Amount\", align: \"right\" },\r\n                {\r\n                    label: \"Brok.Rate\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Brokerage}\r\n                            onChange={(e) => handleChange(idx, \"Brokerage\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Brokerage * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"Coolie.Rate\",\r\n                    key: \"Coolie\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Coolie}\r\n                            onChange={(e) => handleChange(idx, \"Coolie\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Coolie.Amt\",\r\n                    key: \"CoolieAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Coolie * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"VilaiVasi\",\r\n                    key: \"VilaiVasi\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                { label: \"Narration\", key: \"Narration\", align: \"right\" },\r\n                {\r\n                    label: \"Vilai Amt\",\r\n                    key: \"VilaiAmt\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, vilaivasiValue, __, calcVilaiAmt) =>\r\n                        (+calcVilaiAmt(vilaivasiValue, row.Act_Qty)).toFixed(2),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Broker\", key: \"Broker_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_VilaiVasi\", key: \"VilaiVasi\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n        sales: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Do No\", key: \"Do_Inv_No\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Ledger_Name\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Qty\", key: \"displayQuantity\", align: \"right\" },\r\n                {\r\n                    label: \"Rate\",\r\n                    key: \"Rate\",\r\n                    align: \"right\",\r\n                    render: (row) => row.Rate || row.Item_Rate,\r\n                },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Amount\", align: \"right\" },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange, brokerageValue, handleBrokerageChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={brokerageValue}\r\n                            onChange={handleBrokerageChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage Amt\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, brokerageValue) =>\r\n                        ((parseFloat(brokerageValue) || 0) * (parseFloat(row.Act_Qty) || 0) / 100).toFixed(2),\r\n                }\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Broker\", key: \"Broker_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ]\r\n        },\r\n        purchase: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Po_Entry_Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Invoice No\", key: \"Po_Inv_No\" },\r\n                { label: \"Retailer\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\", align: \"right\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                {\r\n                    label: \"Qty\",\r\n                    key: \"displayQuantity\",\r\n                    align: \"right\",\r\n                    render: (row) => Number(row.displayQuantity).toFixed(2),\r\n                },\r\n                { label: \"Rate\", key: \"Item_Rate\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Total_Invoice_value\", align: \"right\" },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id, row.PIN_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage Amt\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, brokerageValue) =>\r\n                        ((parseFloat(brokerageValue) || 0) * (parseFloat(row.Act_Qty) || 0) / 100).toFixed(2),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Supplier\", key: \"Supplier_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n\r\n                let baseUrl = \"\";\r\n                if (transactionType === \"salesNagal\") {\r\n                    baseUrl = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                } else if (transactionType === \"purchase\") {\r\n                    baseUrl = `reports/brokerageNagalDelivery/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                }\r\n                else if (transactionType === \"sales\") {\r\n                    baseUrl = `reports//brokerageNagalSales/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                }\r\n\r\n                if (filtersListing.Broker.value)\r\n                    baseUrl += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value)\r\n                    baseUrl += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value)\r\n                    baseUrl += `&item=${filtersListing.Item.value}`;\r\n                if (filtersListing.VilaiVasiZero.value)\r\n                    baseUrl += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n\r\n                const res = await fetchLink({ address: baseUrl });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n\r\n                    const uniqueLedgers = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Ledger_Tally_Id,\r\n                                { value: item.Ledger_Tally_Id, label: item.Ledger_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    const uniqueItems = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Product_Id,\r\n                                { value: item.Product_Id, label: item.Product_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    setDropdownOptionsListing({\r\n                        ledgers: uniqueLedgers,\r\n                        items: uniqueItems,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh, transactionType]);\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            loadingOn();\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"DELETE\",\r\n                bodyData: {\r\n                    TransactionType: transactionType,\r\n                    Broker: brokerToDelete.Broker_Id || brokerToDelete.Supplier_Id,\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"Deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setDeleteDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleDeleteItem = async () => {\r\n        try {\r\n            loadingOn();\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"DELETE\",\r\n                bodyData: {\r\n                    Id: itemToDelete.Id,\r\n                    Do_Id: itemToDelete.Do_Id,\r\n                    Product_Id: itemToDelete.Product_Id,\r\n                    PIN_Id: itemToDelete.PIN_Id,\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate,\r\n                    TransactionType: transactionType\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"Item deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n\r\n            toast.error(\"Item delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setDeleteItemDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleBulkDelete = async () => {\r\n        try {\r\n            loadingOn();\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: 'DELETE',\r\n                bodyData: {\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate,\r\n                    Broker: filtersListing.Broker.value,\r\n                    Ledger: filtersListing.Ledger.value,\r\n                    Item: filtersListing.Item.value,\r\n                    TransactionType: transactionType\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"All records deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Bulk delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setBulkDeleteDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        const commonFields = {\r\n            ...item,\r\n            Created_By: storage?.UserId,\r\n            Updated_By: storage?.UserId\r\n        };\r\n\r\n        if (transactionType === \"salesNagal\") {\r\n            setEditingItem({\r\n                ...item,\r\n                Brok_Rate: item.Brok_Rate ?? item.Brokerage_Rate ?? item.Brokerage ?? \"\",\r\n                Brok_Amt: item.Brok_Amt ?? ((item.Brok_Rate ?? 0) * (item.QTY ?? 0)).toFixed(2),\r\n                Coolie_Rate: item.Coolie_Rate ?? item.Coolie ?? \"\",\r\n                Coolie_Amt: item.Coolie_Amt ?? ((item.Coolie_Rate ?? 0) * (item.QTY ?? 0)).toFixed(2),\r\n                Vilai_Vasi: item.Vilai_Vasi ?? \"\",\r\n                Vilaivasi_Rate: item.Vilaivasi_Rate ?? ((item.Vilai_Vasi ?? 0) * (item.Act_Qty ?? 0) / 100).toFixed(2),\r\n                Id: item.Id\r\n            });\r\n        } else if (transactionType === \"sales\" || transactionType === \"purchase\") {\r\n            setEditingItem(item);\r\n\r\n        }\r\n    };\r\n\r\n    const handleSaveEdit = async () => {\r\n        try {\r\n            loadingOn();\r\n            const payload = {\r\n                ...editingItem,\r\n                TransactionType: transactionType,\r\n                Updated_By: storage?.UserId\r\n            };\r\n            console.log(\"w\", editingItem)\r\n\r\n            if (transactionType === \"salesNagal\") {\r\n                payload.Brok_Amt = (parseFloat(editingItem.Brok_Rate) || 0) * (parseFloat(editingItem.QTY) || 0);\r\n                payload.Coolie_Amt = (parseFloat(editingItem.Coolie_Rate) || 0) * (parseFloat(editingItem.QTY) || 0);\r\n                payload.Vilai_Vasi = parseFloat(editingItem.Vilai_Vasi) || 0;\r\n                payload.Vilaivasi_Rate = ((parseFloat(editingItem.Vilai_Vasi) || 0) * (parseFloat(editingItem.QTY) || 0) / 100);\r\n\r\n            }\r\n            else if (transactionType === \"sales\" || transactionType === \"purchase\") {\r\n                payload.Brokerage_Amt = ((parseFloat(editingItem.Brokerage) || 0) * (parseFloat(editingItem.Act_Qty) || 0) / 100);\r\n                payload.Brokerage = ((parseFloat(editingItem?.Act_Qty) / 100) * editingItem.Brokerage_Amt)\r\n\r\n            }\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"PUT\",\r\n                bodyData: payload,\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(\"Item updated successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n                setEditingItem(null);\r\n            } else {\r\n                toast.error(response.message || \"Update failed\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Update failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) =>\r\n        setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) =>\r\n        setDataEntryPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n    const handleListingPageChange = (event, newPage) =>\r\n        setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) =>\r\n        setListingPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n\r\n    const handleBrokerageChange = (doId, productId, pinId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n            ? `${doId}-${productId}`\r\n            : `${pinId}-${productId}`;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            brokerageValues: { ...prev.brokerageValues, [key]: value },\r\n        }));\r\n    };\r\n\r\n    const handleExpandBroker = (brokerName) =>\r\n        setExpandedBrokers((prev) => ({\r\n            ...prev,\r\n            [brokerName]: !prev[brokerName],\r\n        }));\r\n\r\n    const closeDialogDataEntry = () =>\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            filters: { ...prev.filters, filterDialog: false },\r\n        }));\r\n\r\n    const closeDialogListing = () =>\r\n        setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n\r\n            const recordsToSave = currentData.deliveryReport.map((item) => {\r\n                const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : `${item.PIN_Id}-${item.Product_Id}`;\r\n\r\n                const brokerageValue = currentData.brokerageValues[key] || item.Brokerage || 0;\r\n\r\n                if (transactionType === \"salesNagal\") {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: parseFloat(brokerageValue) || 0,\r\n                        Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                        Vilaivasi_Rate: ((parseFloat(brokerageValue) || 0) / 100) * (parseFloat(item.Act_Qty) || 0),\r\n                        Brok_Rate: item?.Brokerage || 0,\r\n                        Brok_Amt: (item?.Brokerage || 0) * (item?.displayQuantity || 0),\r\n                        Coolie_Rate: item?.Coolie || 0,\r\n                        Coolie_Amt: (item?.Coolie || 0) * (item?.displayQuantity || 0),\r\n                        Amount: item?.Amount || 0,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                } else if (transactionType === \"sales\") {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: (parseFloat(brokerageValue) || 0) *\r\n                            (parseFloat(item.Act_Qty) || 0) / 100,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                } else {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: (parseFloat(brokerageValue) || 0) *\r\n                            (parseFloat(item.Act_Qty) || 0) / 100,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                }\r\n            });\r\n\r\n            let apiAddress;\r\n            if (transactionType === \"salesNagal\") {\r\n                apiAddress = \"reports/brokerageNagal/create\";\r\n            } else if (transactionType === \"sales\") {\r\n                apiAddress = \"reports/brokerageNagal/createSales\";\r\n            } else {\r\n                apiAddress = \"reports/brokerageNakal/deliveryCreate\";\r\n            }\r\n\r\n            const response = await fetchLink({\r\n                address: apiAddress,\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n\r\n            if (response.success) {\r\n                let successMessage;\r\n                if (transactionType === \"salesNagal\") {\r\n                    successMessage = \"Sales Nagal created successfully!\";\r\n                } else if (transactionType === \"sales\") {\r\n                    successMessage = \"Sales brokerage created successfully!\";\r\n                } else {\r\n                    successMessage = \"Purchase nakal created successfully!\";\r\n                }\r\n                toast.success(successMessage);\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    filters: { ...prev.filters, refresh: !prev.filters.refresh },\r\n                }));\r\n            } else {\r\n                toast.error(response.message || \"Save operation failed\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Save error:\", error);\r\n            toast.error(\"Save failed due to an error\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const handleFieldChange = (idx, fieldName, value) => {\r\n        const updatedDeliveryReport = [...currentData.deliveryReport];\r\n        updatedDeliveryReport[idx][fieldName] = parseFloat(value) || 0;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            deliveryReport: updatedDeliveryReport,\r\n        }));\r\n    };\r\n\r\n    const handleTransactionTypeChange = (type) => {\r\n        setTransactionType(type);\r\n        setDataEntryPagination({ page: 0, rowsPerPage: 10 });\r\n    };\r\n\r\n    const handleHeaderVilaiVasiChange = (e) => {\r\n        const value = e.target.value;\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : `${item.PIN_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = value;\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: value,\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    const handleClearAllVilaiVasi = () => {\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = transactionType === \"salesNagal\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : transactionType === \"sales\" ? `${item.Do_Id}-${item.Product_Id}` : `${item.PIN_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = \"\";\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: \"\",\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    const totalBagsDataEntry = useMemo(\r\n        () =>\r\n            currentData.deliveryReport.reduce(\r\n                (acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0),\r\n                0\r\n            ),\r\n        [currentData.deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(\r\n        () => dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) =>\r\n        ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || item.Supplier_Name || \"Unknown\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n\r\n    const brokerNames = useMemo(\r\n        () => Object.keys(groupedByBroker),\r\n        [groupedByBroker]\r\n    );\r\n\r\n    const isEditingRow = (editingItem, item) => {\r\n        if (!editingItem) return false;\r\n        return (\r\n            editingItem.Product_Id === item.Product_Id &&\r\n            editingItem.Do_Inv_No === item.Do_Inv_No &&\r\n            (editingItem.Ledger_Tally_Id\r\n                ? editingItem.Ledger_Tally_Id === item.Ledger_Tally_Id\r\n                : editingItem.Ledger_Name === item.Ledger_Name)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Brokerage Nagal Report\r\n                    </Typography>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                        <Box display=\"flex\" gap={1}>\r\n                            <Button\r\n                                variant={transactionType === \"salesNagal\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"salesNagal\")}\r\n                            >\r\n                                SalesNagal\r\n                            </Button>\r\n                            <Button\r\n                                variant={transactionType === \"purchase\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"purchase\")}\r\n                            >\r\n                                Purchase\r\n                            </Button>\r\n                            <Button\r\n                                variant={transactionType === \"sales\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"sales\")}\r\n                            >\r\n                                Sales\r\n                            </Button>\r\n                        </Box>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={<FilterAlt />}\r\n                            onClick={() => {\r\n                                if (activeTab === 0) {\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, filterDialog: true },\r\n                                    }));\r\n                                } else {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        filterDialog: true,\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Filters\r\n                        </Button>\r\n                        <Typography component=\"span\" variant=\"body1\">\r\n                            Total Bags:{\" \"}\r\n                            <strong>\r\n                                {activeTab === 0 ? totalBagsDataEntry : totalBagsListing}\r\n                            </strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n\r\n                {activeTab === 0 && (\r\n                    <>\r\n                        <Box\r\n                            mb={1}\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                                alignItems: \"center\",\r\n                                gap: 2,\r\n                            }}\r\n                        >\r\n                            <Typography sx={{ fontWeight: \"bold\" }}>\r\n                                {transactionType === \"salesNagal\"\r\n                                    ? \"VilaiVasi (All):\"\r\n                                    : \"Brokerage (All):\"}\r\n                            </Typography>\r\n                            <TextField\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                value={currentData.headerVilaiVasi}\r\n                                inputProps={{ step: \"1\" }}\r\n                                onChange={handleHeaderVilaiVasiChange}\r\n                                placeholder={`Set ${transactionType === \"salesNagal\" ? \"VilaiVasi\" : \"Brokerage\"\r\n                                    } for all`}\r\n                                sx={{\r\n                                    \"& .MuiInputBase-input\": {\r\n                                        height: 40,\r\n                                        boxSizing: \"border-box\",\r\n                                    },\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={handleClearAllVilaiVasi}\r\n                            >\r\n                                Clear All\r\n                            </Button>\r\n                        </Box>\r\n\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {currentData.deliveryReport.length > 0 ? (\r\n                                        currentData.deliveryReport\r\n                                            .slice(\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage,\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage +\r\n                                                dataEntryPagination.rowsPerPage\r\n                                            )\r\n                                            .map((row, idx) => {\r\n                                                const vilaivasiValue =\r\n                                                    currentData.brokerageValues[\r\n                                                    transactionType === \"salesNagal\"\r\n                                                        ? `${row.Do_Id}-${row.Product_Id}`\r\n                                                        :\r\n                                                        transactionType === \"sales\" ? `${row.Do_Id}-${row.Product_Id}` :\r\n                                                            `${row.PIN_Id}-${row.Product_Id}`\r\n                                                    ] || \"\";\r\n                                                return (\r\n                                                    <TableRow key={idx} hover>\r\n                                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                                            (column) => (\r\n                                                                <TableCell\r\n                                                                    key={column.key}\r\n                                                                    align={column.align || \"left\"}\r\n                                                                >\r\n                                                                    {column.render\r\n                                                                        ? column.render(\r\n                                                                            row,\r\n                                                                            idx,\r\n                                                                            handleFieldChange,\r\n                                                                            vilaivasiValue,\r\n                                                                            handleBrokerageChange,\r\n                                                                            calculateVilaivasiAmt\r\n                                                                        )\r\n                                                                        : row[column.key]}\r\n                                                                </TableCell>\r\n                                                            )\r\n                                                        )}\r\n                                                    </TableRow>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].dataEntryColumns.length\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={currentData.deliveryReport.length}\r\n                                rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                page={dataEntryPagination.page}\r\n                                onPageChange={handleDataEntryPageChange}\r\n                                onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n\r\n                        <Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={handleSave}\r\n                                disabled={saving}\r\n                                size=\"large\"\r\n                            >\r\n                                {saving\r\n                                    ? \"Saving...\"\r\n                                    : `Save ${transactionType === \"salesNagal\" ? transactionType === \"sales\" ? \"Sales\" : \"Purchase\" : \"Sales Nagal\"\r\n                                    } Brokerage`}\r\n                            </Button>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n\r\n                {activeTab === 1 && (\r\n                    <>\r\n                        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"error\"\r\n                                startIcon={<Delete />}\r\n                                onClick={() => setBulkDeleteDialogOpen(true)}\r\n                                disabled={dataset.length === 0}\r\n                            >\r\n                                Delete All\r\n                            </Button>\r\n                        </Box>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].listingColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {brokerNames.length > 0 ? (\r\n                                        brokerNames\r\n                                            .slice(\r\n                                                listingPagination.page * listingPagination.rowsPerPage,\r\n                                                listingPagination.page * listingPagination.rowsPerPage +\r\n                                                listingPagination.rowsPerPage\r\n                                            )\r\n                                            .map((brokerName, idx) => {\r\n                                                const brokerData = groupedByBroker[brokerName][0];\r\n                                                return (\r\n                                                    <React.Fragment key={idx}>\r\n                                                        <TableRow hover>\r\n                                                            <TableCell>\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    onClick={() => handleExpandBroker(brokerName)}\r\n                                                                >\r\n                                                                    {expandedBrokers[brokerName] ? (\r\n                                                                        <KeyboardArrowUp />\r\n                                                                    ) : (\r\n                                                                        <KeyboardArrowDown />\r\n                                                                    )}\r\n                                                                </IconButton>\r\n                                                                {brokerName}\r\n                                                            </TableCell>\r\n                                                            {tableConfigs[transactionType].listingColumns\r\n                                                                .slice(1)\r\n                                                                .map((column) => (\r\n                                                                    <TableCell\r\n                                                                        key={column.key}\r\n                                                                        align={column.align || \"left\"}\r\n                                                                    >\r\n                                                                        {brokerData[column.key] || \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            <TableCell align=\"right\">\r\n                                                                <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                    <Tooltip title=\"Preview PDF\">\r\n                                                                        <IconButton\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={() => {\r\n                                                                                setPdfPreviewData(brokerData);\r\n                                                                                setPdfPreviewOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <PictureAsPdfIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n\r\n                                                                    <Tooltip title=\"Preview Excel\">\r\n                                                                        <IconButton\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={() => {\r\n                                                                                setXlPreviewData(brokerData);\r\n                                                                                setXlPreViewOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <FileDownloadIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n\r\n                                                                    <Tooltip title=\"Delete\">\r\n                                                                        <IconButton\r\n                                                                            color=\"error\"\r\n                                                                            onClick={(e) => {\r\n                                                                                e.stopPropagation();\r\n                                                                                setBrokerToDelete(brokerData);\r\n                                                                                setDeleteDialogOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Delete />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n                                                                </Box>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell\r\n                                                                style={{ padding: 0 }}\r\n                                                                colSpan={\r\n                                                                    tableConfigs[transactionType].listingColumns\r\n                                                                        .length + 1\r\n                                                                }\r\n                                                            >\r\n                                                                <Collapse\r\n                                                                    in={expandedBrokers[brokerName]}\r\n                                                                    timeout=\"auto\"\r\n                                                                    unmountOnExit\r\n                                                                >\r\n                                                                    <Box margin={1}>\r\n                                                                        <Typography\r\n                                                                            variant=\"h6\"\r\n                                                                            gutterBottom\r\n                                                                            component=\"div\"\r\n                                                                        >\r\n                                                                            Details for {brokerName}\r\n                                                                        </Typography>\r\n                                                                        <Table size=\"small\">\r\n                                                                            <TableHead>\r\n                                                                                <TableRow>\r\n                                                                                    <TableCell>Date</TableCell>\r\n                                                                                    <TableCell>Do/Inv No</TableCell>\r\n                                                                                    <TableCell>\r\n                                                                                        {transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                                                                                            ? \"Retailer\"\r\n                                                                                            : \"Supplier\"}\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell>Product</TableCell>\r\n                                                                                    <TableCell>Short Name</TableCell>\r\n                                                                                    <TableCell align=\"right\">QTY</TableCell>\r\n                                                                                    <TableCell align=\"right\">KGS</TableCell>\r\n                                                                                    <TableCell align=\"right\">Amount</TableCell>\r\n                                                                                    <TableCell align=\"right\">Act Qty</TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        {transactionType === \"salesNagal\" ? \"Broker Amt\" : \"Brok.Amt\"}\r\n                                                                                    </TableCell>\r\n                                                                                    {transactionType === \"salesNagal\" && (\r\n                                                                                        <>\r\n                                                                                            <TableCell align=\"right\">Brok.Rate</TableCell>\r\n                                                                                            <TableCell align=\"right\">Coolie.Amt</TableCell>\r\n                                                                                            <TableCell align=\"right\">Coolie.Rate</TableCell>\r\n                                                                                            <TableCell align=\"right\">Vilai_Vasi</TableCell>\r\n                                                                                            <TableCell align=\"right\">Vilaiva.Rat</TableCell>\r\n                                                                                        </>\r\n                                                                                    )}\r\n\r\n                                                                                    {\r\n                                                                                        editingItem && (transactionType === \"sales\" || transactionType === \"purchase\") && (\r\n                                                                                            <TableCell align=\"right\">Brokerage</TableCell>\r\n                                                                                        )\r\n                                                                                    }\r\n\r\n                                                                                    <TableCell align=\"right\">Actions</TableCell>\r\n                                                                                </TableRow>\r\n                                                                            </TableHead>\r\n                                                                            <TableBody>\r\n                                                                                {groupedByBroker[brokerName].flatMap((broker) =>\r\n                                                                                    broker.Items?.map((item, itemIdx) => (\r\n                                                                                        <TableRow key={itemIdx}>\r\n                                                                                            {/* Common fields for all transaction types */}\r\n                                                                                            <TableCell>{item.Date}</TableCell>\r\n                                                                                            <TableCell>{item.Do_Inv_No || item.Po_Inv_No}</TableCell>\r\n                                                                                            <TableCell>{item.Retailer_Name || item.Supplier_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Product_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Short_Name}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.QTY}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.KGS}</TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                                                                                                    ? item.Amount\r\n                                                                                                    : item.Total_Invoice_value}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {transactionType === \"salesNagal\"\r\n                                                                                                    ? item.QTY\r\n                                                                                                    : item.Act_Qty}\r\n                                                                                            </TableCell>\r\n\r\n                                                                                            {isEditingRow(editingItem, item) ? (\r\n                                                                                                <>\r\n                                                                                                    {transactionType === \"salesNagal\" ? (\r\n\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Brok_Rate || 0) * (editingItem.QTY || 0)).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brok_Rate || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const rate = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brok_Rate: rate,\r\n                                                                                                                            Brok_Amt: (rate * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"0.01\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Coolie_Rate || 0) * (editingItem.QTY || 0)).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Coolie_Rate || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const rate = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Coolie_Rate: rate,\r\n                                                                                                                            Coolie_Amt: (rate * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"0.01\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Vilai_Vasi || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const vv = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Vilai_Vasi: vv,\r\n                                                                                                                            Vilaivasi_Rate: ((vv / 100) * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"1\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Vilai_Vasi || 0) * (editingItem.QTY || 0) / 100).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n                                                                                                        </>\r\n                                                                                                    ) : transactionType === \"sales\" ? (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {editingItem.Brokerage_Amt && editingItem.Act_Qty\r\n                                                                                                                    ? (((editingItem.Brokerage_Amt) * editingItem.Act_Qty) / 100).toFixed(2)\r\n                                                                                                                    : '0.00'\r\n                                                                                                                }\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brokerage_Amt || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const amount = parseFloat(e.target.value) || 0;\r\n                                                                                                                        const rate = editingItem.Act_Qty\r\n                                                                                                                            ? (amount * 100) / editingItem.Act_Qty\r\n                                                                                                                            : 0;\r\n\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brokerage_Amt: amount,\r\n                                                                                                                            Brokerage: rate.toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{\r\n                                                                                                                        step: \"0.01\",\r\n                                                                                                                        style: { textAlign: 'right' }\r\n                                                                                                                    }}\r\n\r\n                                                                                                                />\r\n\r\n                                                                                                            </TableCell>\r\n\r\n\r\n                                                                                                        </>\r\n                                                                                                    ) : (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {editingItem.Brokerage_Amt && editingItem.Act_Qty\r\n                                                                                                                    ? (((editingItem.Brokerage_Amt) * editingItem.Act_Qty) / 100).toFixed(2)\r\n                                                                                                                    : '0.00'\r\n                                                                                                                }\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brokerage_Amt || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const amount = parseFloat(e.target.value) || 0;\r\n                                                                                                                        const rate = editingItem.Act_Qty\r\n                                                                                                                            ? (amount * 100) / editingItem.Act_Qty\r\n                                                                                                                            : 0;\r\n\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brokerage_Amt: amount,\r\n                                                                                                                            Brokerage: rate.toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{\r\n                                                                                                                        step: \"0.01\",\r\n                                                                                                                        style: { textAlign: 'right' }\r\n                                                                                                                    }}\r\n\r\n                                                                                                                />\r\n\r\n                                                                                                            </TableCell>\r\n\r\n\r\n                                                                                                        </>\r\n                                                                                                    )}\r\n\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                                                            <Tooltip title=\"Save changes\">\r\n                                                                                                                <IconButton color=\"primary\" size=\"small\" onClick={handleSaveEdit}>\r\n                                                                                                                    <Save fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                            <Tooltip title=\"Cancel editing\">\r\n                                                                                                                <IconButton color=\"secondary\" size=\"small\" onClick={() => setEditingItem(null)}>\r\n                                                                                                                    <Cancel fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                        </Box>\r\n                                                                                                    </TableCell>\r\n                                                                                                </>\r\n                                                                                            ) : (\r\n                                                                                                <>\r\n                                                                                                    {transactionType === \"salesNagal\" ? (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">{item.Brok_Amt || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Brok_Rate || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Coolie_Amt || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Coolie_Rate || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Vilai_Vasi || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Vilaivasi_Rate || '0.00'}</TableCell>\r\n                                                                                                        </>\r\n                                                                                                    ) : (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">{item.Brokerage || '0.00'}</TableCell>\r\n                                                                                                            {/* <TableCell align=\"right\">\r\n                {((parseFloat(item.Act_Qty) / 100 ) / (parseFloat(item.Brokerage)) * 100 || 0).toFixed(2)}\r\n              </TableCell> */}\r\n\r\n                                                                                                        </>\r\n                                                                                                    )}\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                                                            <Tooltip title=\"Delete this item\">\r\n                                                                                                                <IconButton\r\n                                                                                                                    color=\"error\"\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    onClick={(e) => {\r\n                                                                                                                        e.stopPropagation();\r\n                                                                                                                        setItemToDelete(item);\r\n                                                                                                                        setDeleteItemDialogOpen(true);\r\n                                                                                                                    }}\r\n                                                                                                                >\r\n                                                                                                                    <Delete fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                            <Tooltip title=\"Edit this item\">\r\n                                                                                                                <IconButton\r\n                                                                                                                    color=\"primary\"\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    onClick={() => handleEditItem(item)}\r\n                                                                                                                >\r\n                                                                                                                    <Edit fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                        </Box>\r\n                                                                                                    </TableCell>\r\n                                                                                                </>\r\n                                                                                            )}\r\n                                                                                        </TableRow>\r\n                                                                                    ))\r\n                                                                                )}\r\n                                                                            </TableBody>\r\n                                                                        </Table>\r\n                                                                    </Box>\r\n                                                                </Collapse>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].listingColumns.length + 1\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={brokerNames.length}\r\n                                rowsPerPage={listingPagination.rowsPerPage}\r\n                                page={listingPagination.page}\r\n                                onPageChange={handleListingPageChange}\r\n                                onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n                    </>\r\n                )}\r\n\r\n                <PdfPreviewModal\r\n                    open={pdfPreviewOpen}\r\n                    onClose={() => setPdfPreviewOpen(false)}\r\n                    brokerData={pdfPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n                <XlPreviewModal\r\n                    open={xlPreviewOpen}\r\n                    onClose={() => setXlPreViewOpen(false)}\r\n                    brokerData={xlPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n            </Paper>\r\n\r\n            {/* Filter dialogs and other components remain the same */}\r\n            <Dialog\r\n                open={currentData.filters.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">\r\n                            {transactionType === \"sales\" ? \"Sales\" : transactionType === \"salesNagal\" ? \"SalesNagal\" : \"Purchase\"} Data Entry\r\n                            Filters\r\n                        </Typography>\r\n                        <IconButton onClick={closeDialogDataEntry}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={currentData.filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, FromDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={currentData.filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, ToDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={currentData.filters.Broker}\r\n                                onChange={(selected) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, Broker: selected },\r\n                                    }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogDataEntry}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setCurrentData((prev) => ({\r\n                                ...prev,\r\n                                headerVilaiVasi: \"\",\r\n                                brokerageValues: {},\r\n                                filters: {\r\n                                    ...prev.filters,\r\n                                    refresh: !prev.filters.refresh,\r\n                                    filterDialog: false,\r\n                                },\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">Listing Filters</Typography>\r\n                        <IconButton onClick={closeDialogListing}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        FromDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        ToDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        refresh: !prev.refresh,\r\n                                    }));\r\n                                }}\r\n                                style={{ height: \"30px\", width: \"100%\" }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        {\r\n                            transactionType === 'salesNagal' ? (\r\n                                <>\r\n                                    <Grid item xs={12}>\r\n                                        <Select\r\n                                            fullWidth\r\n                                            value={filtersListing.VilaiVasiZero}\r\n                                            onChange={(selected) =>\r\n                                                setFiltersListing((prev) => ({\r\n                                                    ...prev,\r\n                                                    VilaiVasiZero: selected,\r\n                                                }))\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"All\" },\r\n                                                { value: \"zero\", label: \"VilaiVasi Zero\" },\r\n                                                { value: \"nonzero\", label: \"VilaiVasi Non-Zero\" },\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            menuPortalTarget={document.body}\r\n                                            placeholder=\"VilaiVasi Zero/Non-Zero\"\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n\r\n                                </>\r\n                            )}\r\n\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Broker: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Ledger: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Ledger\" },\r\n                                    ...dropdownOptionsListing.ledgers,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Item: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Item\" },\r\n                                    ...dropdownOptionsListing.items,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogListing}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setFiltersListing((prev) => ({\r\n                                ...prev,\r\n                                refresh: !prev.refresh,\r\n                                filterDialog: false,\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContent id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete {brokerToDelete?.Broker_Name || brokerToDelete?.Supplier_Name}'s records?\r\n                    </DialogContent>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleDelete} color=\"error\" autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={deleteItemDialogOpen}\r\n                onClose={() => setDeleteItemDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Item Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete this {itemToDelete?.Product_Name} item?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteItemDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleDeleteItem} color=\"error\" autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={bulkDeleteDialogOpen}\r\n                onClose={() => setBulkDeleteDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Bulk Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete ALL filtered records? This action cannot be undone.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setBulkDeleteDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleBulkDelete} color=\"error\" autoFocus>\r\n                        Delete All\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","_brokerData$Items","_brokerData$Items$","_brokerData$Items2","open","onClose","brokerData","transactionType","fromDate","toDate","printRef","useRef","handlePrint","useReactToPrint","content","current","items","Items","totalBrokerage","reduce","sum","item","parseFloat","Brok_Amt","Brokerage","totalCoolie","Coolie_Amt","totalAmount","Total_Amount","vilaivasi","VilaiVasi","netTotalRaw","netTotalRounded","Math","round","roundOff","packSizeSummary","getPackSizeSummary","packQuantities","acc","packSize","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","join","_jsx","_Fragment","children","_jsxs","Dialog","fullWidth","maxWidth","DialogTitle","Broker_Name","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","index","Retailer_Name","Ledger_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","value","n","Number","formatSignedNumber","fontFamily","textAlign","marginBottom","margin","length","borderCollapse","_item$Date","split","borderTop","DialogActions","Button","startIcon","Download","bro","parseInt","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","a","b","handleExportPurchase","async","_brokerData$Items3","workbook","ExcelJS","worksheet","addWorksheet","created","modified","titleRow","addRow","font","bold","alignment","horizontal","mergeCells","dateRangeRow","headers","header","h","eachCell","cell","border","argb","left","bottom","forEach","getColumn","row","getCell","totalRow","buffer","xlsx","writeBuffer","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","setTimeout","revokeObjectURL","error","console","useEffect","_brokerData$Items2$","thickBlackBorder","cellStyle","number","fill","pattern","fgColor","headerRow","columns","vertical","undefined","numFmt","colNumber","packSizesRow","italic","label","rowData","saveAs","handleExportExcel","then","loadingOn","loadingOff","setTransactionType","useState","dataEntryPagination","setDataEntryPagination","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","salesData","setSalesData","deliveryReport","brokerageValues","filters","FromDate","toISOString","ToDate","Broker","refresh","filterDialog","headerVilaiVasi","salesNewData","setSalesNewData","purchaseData","setPurchaseData","headerBrokerage","filtersListing","setFiltersListing","Ledger","Item","VilaiVasiZero","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","xlPreviewOpen","setXlPreViewOpen","pdfPreviewData","setPdfPreviewData","xlPreviewData","setXlPreviewData","editingItem","setEditingItem","deleteDialogOpen","setDeleteDialogOpen","deleteItemDialogOpen","setDeleteItemDialogOpen","itemToDelete","setItemToDelete","brokerToDelete","setBrokerToDelete","bulkDeleteDialogOpen","setBulkDeleteDialogOpen","currentData","setCurrentData","fetchLink","data","success","prev","toArray","catch","endpoint","res","initialBrokerage","key","Do_Id","Product_Id","brokerage","err","fetchData","tableConfigs","salesNagal","dataEntryColumns","render","_row$Date","Rate","idx","handleChange","TextField","onChange","e","target","inputProps","step","displayQuantity","toFixed","Coolie","vilaivasiValue","handleVilaiChange","_","__","calcVilaiAmt","Act_Qty","listingColumns","sales","_row$Date2","brokerageValue","handleBrokerageChange","purchase","_row$Po_Entry_Date","Po_Entry_Date","PIN_Id","baseUrl","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","Product_Name","fetchDatasetAndDropdowns","handleSaveEdit","payload","TransactionType","Updated_By","UserId","log","Brok_Rate","Coolie_Rate","Vilai_Vasi","Brokerage_Amt","response","method","bodyData","toast","message","doId","productId","pinId","closeDialogDataEntry","closeDialogListing","handleFieldChange","fieldName","updatedDeliveryReport","handleTransactionTypeChange","totalBagsDataEntry","useMemo","Addition","Qty","totalBagsListing","Total_Bags","calculateVilaivasiAmt","billQty","groupedByBroker","Supplier_Name","push","brokerNames","keys","isEditingRow","Do_Inv_No","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","display","gap","FilterAlt","Tabs","handleTabChange","event","newValue","Tab","updatedBrokerageValues","placeholder","height","boxSizing","handleClearAllVilaiVasi","TableContainer","Table","TableHead","TableRow","column","TableCell","TableBody","slice","hover","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","mt","Save","recordsToSave","Created_By","apiAddress","successMessage","disabled","Delete","brokerName","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Tooltip","title","PictureAsPdfIcon","FileDownloadIcon","stopPropagation","Collapse","in","timeout","unmountOnExit","gutterBottom","_broker$Items","itemIdx","Po_Inv_No","Total_Invoice_value","minWidth","rate","vv","amount","Cancel","_item$Brok_Rate","_item$Brok_Amt","_item$Brok_Rate2","_item$QTY","_item$Coolie_Rate","_item$Coolie_Amt","_item$Coolie_Rate2","_item$QTY2","_item$Vilai_Vasi","_item$Vilaivasi_Rate","_item$Vilai_Vasi2","_item$Act_Qty","Brokerage_Rate","Id","handleEditItem","Edit","handleListingPageChange","PdfPreviewModal","XlPreviewModal","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","body","isSearchable","Broker_Id","Supplier_Id","autoFocus","DialogContentText"],"sourceRoot":""}
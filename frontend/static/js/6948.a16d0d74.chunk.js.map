{"version":3,"file":"static/js/6948.a16d0d74.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const items = brokerData?.Items || [];\r\n    const totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!packQuantities) return null;\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    function formatSignedNumber(value) {\r\n        const n = Number(value) || 0;\r\n        return `${n >= 0 ? '+' : ''}${NumberFormat(n)}`;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n            <DialogTitle>\r\n                Broker Report: {brokerData?.Broker_Name}\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n\r\n            <DialogContent ref={printRef}>\r\n                <div className=\"text-center mb-3\">\r\n                    <h4>Broker Report Page</h4>\r\n                    <p className=\"mb-0\">Date: {new Date().toLocaleDateString('en-IN')}</p>\r\n                    <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                    {packSizeSummary && (\r\n                        <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                    )}\r\n                </div>\r\n\r\n                <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>PARTY NAME</th>\r\n                            <th>ALIAS NAME</th>\r\n                            <th className=\"text-end\">BILL RATE</th>\r\n                            <th className=\"text-end\">BROKER EXP</th>\r\n                            <th className=\"text-end\">QTY</th>\r\n                            <th className=\"text-end\">KGS</th>\r\n                            <th className=\"text-end\">AMOUNT</th>\r\n                            <th className=\"text-end\">VILAIVAASI</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                <td>{item.Short_Name}</td>\r\n                                <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Brok_Amt || 0)}</td>\r\n                                <td className=\"text-end\">{item.QTY}</td>\r\n                                <td className=\"text-end\">{item.KGS}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"text-end fw-bold\">{packSizeSummary}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-6 offset-6\">\r\n                        <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">COOLIE</td>\r\n                                    <td className=\"text-end fw-bold\">{NumberFormat(totalCoolie)}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">BROKERAGE</td>\r\n                                    <td className=\"text-end fw-bold\">- {NumberFormat(totalBrokerage)}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                    <td className=\"text-end fw-bold\">- {NumberFormat(vilaivasi)}</td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                    <td className=\"text-end fw-bold\">{formatSignedNumber(roundOff)}</td>\r\n                                </tr>\r\n\r\n                                <tr className=\"bg-light\">\r\n                                    <td className=\"fw-bold\">NET TOTAL</td>\r\n                                    <td className=\"text-end fw-bold\">{NumberFormat(netTotalRounded)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"text-center mt-3 small\">\r\n                    <p>This is a computer generated report</p>\r\n                </div>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button\r\n                    startIcon={<Download />}\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={handlePrint}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField, Button, Dialog, DialogActions, DialogContent, IconButton, Paper, Table, TableBody,\r\n    TableCell, TableContainer, TableHead, TableRow, Typography, Box, Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\r\n\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\n\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({ page: 0, rowsPerPage: 10 });\r\n    const [listingPagination, setListingPagination] = useState({ page: 0, rowsPerPage: 10 });\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState(0);\r\n\r\n\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n\r\n\r\n    const [filtersDataEntry, setFiltersDataEntry] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [deliveryReport, setDeliveryReport] = useState([]);\r\n    const [brokerageValues, setBrokerageValues] = useState({});\r\n\r\n\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        VilaiVasiZero: { value: \"\", label: \"All\" }, // <-- ADD THIS\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({ ledgers: [], items: [] });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n    const [headerVilaiVasi, setHeaderVilaiVasi] = useState(\"\"); // global VilaiVasi value\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const res = await fetchLink({\r\n                    address: `reports/brokerageNakalReport/sales?FromDate=${filtersDataEntry.FromDate}&ToDate=${filtersDataEntry.ToDate}&broker=${filtersDataEntry.Broker.value}`,\r\n                });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDeliveryReport(data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n                    setBrokerageValues(initialBrokerage);\r\n                } else {\r\n                    setDeliveryReport([]);\r\n                    setBrokerageValues({});\r\n                }\r\n            } catch (err) {\r\n                setDeliveryReport([]);\r\n                setBrokerageValues({});\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [filtersDataEntry.refresh]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n                let url = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                if (filtersListing.Broker.value) url += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value) url += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value) url += `&item=${filtersListing.Item.value}`;\r\n                if (filtersListing.VilaiVasiZero.value) url += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n                const res = await fetchLink({ address: url });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n                    const uniqueLedgers = Array.from(new Map(\r\n                        allItems.map((item) => [item.Ledger_Tally_Id, { value: item.Ledger_Tally_Id, label: item.Ledger_Name }])\r\n                    ).values());\r\n                    const uniqueItems = Array.from(new Map(\r\n                        allItems.map((item) => [item.Product_Id, { value: item.Product_Id, label: item.Product_Name }])\r\n                    ).values());\r\n                    setDropdownOptionsListing({ ledgers: uniqueLedgers, items: uniqueItems });\r\n                }\r\n            } catch (e) { }\r\n            finally { loadingOff(); }\r\n        };\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh]);\r\n\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) => setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) => setDataEntryPagination({ page: 0, rowsPerPage: parseInt(event.target.value, 10) });\r\n    const handleListingPageChange = (event, newPage) => setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) => setListingPagination({ page: 0, rowsPerPage: parseInt(event.target.value, 10) });\r\n    const handleBrokerageChange = (doId, productId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = `${doId}-${productId}`;\r\n        setBrokerageValues((prev) => ({ ...prev, [key]: value }));\r\n    };\r\n    const handleExpandBroker = (brokerName) => setExpandedBrokers((prev) => ({ ...prev, [brokerName]: !prev[brokerName] }));\r\n    const closeDialogDataEntry = () => setFiltersDataEntry((prev) => ({ ...prev, filterDialog: false }));\r\n    const closeDialogListing = () => setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n            const recordsToSave = deliveryReport.map((item) => {\r\n                const brokerageValue = brokerageValues[`${item.Do_Id}-${item.Product_Id}`];\r\n                return {\r\n                    ...item,\r\n                    brokerage: parseFloat(brokerageValue) || 0,\r\n                    Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                    Vilaivasi_Rate: ((parseFloat(brokerageValue) || 0) / 100) * (parseFloat(item.Bill_Qty) || 0),\r\n                    Brok_Rate: item?.Brokerage,\r\n                    Brok_Amt: item?.Brokerage * item?.displayQuantity,\r\n                    Coolie_Rate: item?.Coolie,\r\n                    Coolie_Amt: item?.Coolie * item?.displayQuantity,\r\n                    Amount: item?.Amount,\r\n                    Created_By: storage?.UserId,\r\n                };\r\n            });\r\n            const response = await fetchLink({\r\n                address: \"reports/brokerageNagal/create\",\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n            if (response.success) {\r\n                toast.success(\"Nakal Created successfully!\");\r\n                setFiltersDataEntry((prev) => ({ ...prev, refresh: !prev.refresh }));\r\n\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Save failed\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const totalBagsDataEntry = useMemo(() =>\r\n        deliveryReport.reduce((acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0), 0),\r\n        [deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(() =>\r\n        dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) => ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n    const handleFieldChange = (idx, fieldName, value) => {\r\n        const updatedDeliveryReport = [...deliveryReport];\r\n        updatedDeliveryReport[idx][fieldName] = parseFloat(value) || 0;\r\n        setDeliveryReport(updatedDeliveryReport);\r\n    };\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || \"Unknown Broker\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n    const brokerNames = useMemo(() => Object.keys(groupedByBroker), [groupedByBroker]);\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h5\" component=\"h2\">Brokerage Nagal Report</Typography>\r\n                    <Box>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={<FilterAlt />}\r\n                            onClick={() =>\r\n                                activeTab === 0\r\n                                    ? setFiltersDataEntry((prev) => ({ ...prev, filterDialog: true }))\r\n                                    : setFiltersListing((prev) => ({ ...prev, filterDialog: true }))\r\n                            }\r\n                            sx={{ mr: 2 }}\r\n                        >Filters</Button>\r\n                        <Typography component=\"span\" variant=\"body1\">\r\n                            Total Bags: <strong>{activeTab === 0 ? totalBagsDataEntry : totalBagsListing}</strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n                {activeTab === 0 && (\r\n                    <Box mb={1} sx={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\",\r\n                        alignItems: \"center\",\r\n                        gap: 2\r\n                    }}>\r\n                        <Typography sx={{ fontWeight: \"bold\" }}>VilaiVasi (All):</Typography>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            value={headerVilaiVasi}\r\n                            inputProps={{ step: \"1\" }}\r\n                            onChange={e => {\r\n                                setHeaderVilaiVasi(e.target.value);\r\n                                setBrokerageValues(prev => {\r\n                                    const updated = { ...prev };\r\n                                    deliveryReport.forEach(item => {\r\n                                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                        updated[key] = e.target.value;\r\n                                    });\r\n                                    return updated;\r\n                                });\r\n                            }}\r\n                            placeholder=\"Set VilaiVasi for all\"\r\n                            sx={{\r\n\r\n                                '& .MuiInputBase-input': {\r\n                                    height: 40,\r\n                                    boxSizing: 'border-box'\r\n                                }\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setHeaderVilaiVasi(\"\");\r\n                                setBrokerageValues(prev => {\r\n                                    const updated = { ...prev };\r\n                                    deliveryReport.forEach(item => {\r\n                                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                        updated[key] = \"\";\r\n                                    });\r\n                                    return updated;\r\n                                });\r\n                            }}\r\n                        >\r\n                            Clear All\r\n                        </Button>\r\n\r\n                    </Box>\r\n                )}\r\n\r\n\r\n                {activeTab === 0 ? (\r\n                    <>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Date</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>Do No</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>Product</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>Ledger_Name</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>Broker</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Bill_Qty</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Qty</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Rate</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Pack</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Amount</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Brok.Rate</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Brokerage</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Coolie.Rate</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Coolie.Amt</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Vilaivasi</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Narration</TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Vilaivasi Amt</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {deliveryReport\r\n                                        .slice(dataEntryPagination.page * dataEntryPagination.rowsPerPage, dataEntryPagination.page * dataEntryPagination.rowsPerPage + dataEntryPagination.rowsPerPage)\r\n                                        .map((row, idx) => {\r\n                                            const vilaivasiValue = brokerageValues[`${row.Do_Id}-${row.Product_Id}`] || \"\";\r\n                                            const vilaivasiAmt = calculateVilaivasiAmt(vilaivasiValue, row.Bill_Qty);\r\n                                            return (\r\n                                                <TableRow key={idx} hover>\r\n                                                    <TableCell align=\"left\">{row.Date.split(\"T\")[0]}</TableCell>\r\n                                                    <TableCell>{row.Do_No || row.Do_Inv_No}</TableCell>\r\n                                                    <TableCell>{row.Product_Name}</TableCell>\r\n                                                    <TableCell>{row.Retailer_Name}</TableCell>\r\n                                                    <TableCell>{row.CostCenterGet}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Bill_Qty}</TableCell>\r\n                                                    <TableCell align=\"right\">{row?.displayQuantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Rate || row.Item_Rate}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Pack}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Amount}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={row.Brokerage}\r\n                                                            onChange={(e) => handleFieldChange(idx, 'Brokerage', e.target.value)}\r\n                                                            sx={{ width: \"80px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">{row.Brokerage * row.displayQuantity}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={row.Coolie}\r\n                                                            onChange={(e) => handleFieldChange(idx, 'Coolie', e.target.value)}\r\n                                                            sx={{ width: \"80px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">{row.Coolie * row.displayQuantity}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={vilaivasiValue}\r\n                                                            onChange={handleBrokerageChange(row.Do_Id, row.Product_Id)}\r\n                                                            sx={{ width: \"120px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">{row.Narration}</TableCell>\r\n                                                    <TableCell align=\"right\">{vilaivasiAmt.toFixed(2)}</TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={deliveryReport.length}\r\n                                rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                page={dataEntryPagination.page}\r\n                                onPageChange={handleDataEntryPageChange}\r\n                                onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n\r\n                        <Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={handleSave}\r\n                                disabled={saving}\r\n                                size=\"large\"\r\n                            >{saving ? \"Saving...\" : \"Save Brokerage\"}</Button>\r\n                        </Box>\r\n                    </>)\r\n                    : (\r\n                        <>\r\n                            <TableContainer component={Paper}>\r\n                                <Table size=\"small\">\r\n                                    <TableHead>\r\n                                        <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>Broker</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total KGS</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total Bill Qty</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total_Amount</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total_Broker_Exp</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total_VilaiVasi</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Total_Bags</TableCell>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\">Actions</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {brokerNames.length > 0 ? (\r\n                                            brokerNames\r\n                                                .slice(\r\n                                                    listingPagination.page * listingPagination.rowsPerPage,\r\n                                                    listingPagination.page * listingPagination.rowsPerPage + listingPagination.rowsPerPage\r\n                                                )\r\n                                                .map((brokerName, idx) => {\r\n                                                    const brokerData = dataset.find(item => item.Broker_Name === brokerName);\r\n                                                    return (\r\n                                                        <React.Fragment key={idx}>\r\n                                                            <TableRow hover>\r\n                                                                <TableCell>\r\n                                                                    <IconButton size=\"small\" onClick={() => handleExpandBroker(brokerName)}>\r\n                                                                        {expandedBrokers[brokerName] ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n                                                                    </IconButton>\r\n                                                                    {brokerName}\r\n                                                                </TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.Total_Qty || \"0.00\"}</TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.Total_KGS || \"0.00\"}</TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.Total_Amount || \"0.00\"}</TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.Broker_Exp || \"0.00\"}</TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.VilaiVasi || \"0.00\"}</TableCell>\r\n                                                                <TableCell align=\"right\">{brokerData?.Total_Bags || 0}</TableCell>\r\n                                                                <TableCell align=\"right\">\r\n                                                                    <Tooltip title=\"Preview PDF\">\r\n                                                                        <IconButton\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={() => {\r\n                                                                                setPdfPreviewData(brokerData);\r\n                                                                                setPdfPreviewOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <PictureAsPdfIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n                                                                </TableCell>\r\n                                                                <PdfPreviewModal\r\n                                                                    open={pdfPreviewOpen}\r\n                                                                    onClose={() => setPdfPreviewOpen(false)}\r\n                                                                    brokerData={pdfPreviewData}\r\n                                                                />\r\n\r\n                                                            </TableRow>\r\n                                                            <TableRow>\r\n                                                                <TableCell style={{ padding: 0 }} colSpan={7}>\r\n                                                                    <Collapse in={expandedBrokers[brokerName]} timeout=\"auto\" unmountOnExit>\r\n                                                                        <Box margin={1}>\r\n                                                                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                                                Details for {brokerName}\r\n                                                                            </Typography>\r\n                                                                            <Table size=\"small\">\r\n                                                                                <TableHead>\r\n                                                                                    <TableRow>\r\n                                                                                        <TableCell>Date</TableCell>\r\n                                                                                        <TableCell>Invoice No</TableCell>\r\n                                                                                        <TableCell>Retailer</TableCell>\r\n                                                                                        <TableCell>Alias</TableCell>\r\n                                                                                        <TableCell>Product</TableCell>\r\n                                                                                        <TableCell>Short Name</TableCell>\r\n                                                                                        <TableCell align=\"right\">QTY</TableCell>\r\n                                                                                        <TableCell align=\"right\">KGS</TableCell>\r\n                                                                                        <TableCell align=\"right\">Amount</TableCell>\r\n                                                                                        <TableCell align=\"right\">Vilai Vasi</TableCell>\r\n                                                                                        <TableCell align=\"right\">Vilai Amt</TableCell>\r\n                                                                                    </TableRow>\r\n                                                                                </TableHead>\r\n                                                                                <TableBody>\r\n                                                                                    {brokerData?.Items?.map((item, itemIdx) => (\r\n                                                                                        <TableRow key={itemIdx}>\r\n                                                                                            <TableCell>{item.Date}</TableCell>\r\n                                                                                            <TableCell>{item.Do_Inv_No}</TableCell>\r\n                                                                                            <TableCell>{item.Retailer_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Ledger_Alias}</TableCell>\r\n                                                                                            <TableCell>{item.Product_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Short_Name}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.QTY}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.KGS}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.Amount?.toFixed(2)}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.Vilai_Vasi}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.Vilai_Vasi}</TableCell>\r\n                                                                                        </TableRow>\r\n                                                                                    ))}\r\n                                                                                </TableBody>\r\n                                                                            </Table>\r\n                                                                        </Box>\r\n                                                                    </Collapse>\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                        </React.Fragment>\r\n                                                    );\r\n                                                })\r\n                                        ) : (\r\n                                            <TableRow>\r\n                                                <TableCell colSpan={7} align=\"center\">No data found</TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                                <TablePagination\r\n                                    rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                    component=\"div\"\r\n                                    count={brokerNames.length}\r\n                                    rowsPerPage={listingPagination.rowsPerPage}\r\n                                    page={listingPagination.page}\r\n                                    onPageChange={handleListingPageChange}\r\n                                    onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                                />\r\n                            </TableContainer>\r\n                        </>)\r\n                }\r\n            </Paper>\r\n\r\n            <Dialog\r\n                open={filtersDataEntry.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                        <Typography variant=\"h6\">Data Entry Filters</Typography>\r\n                        <IconButton onClick={closeDialogDataEntry}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth type=\"date\" label=\"From Date\" value={filtersDataEntry.FromDate}\r\n                                onChange={e => setFiltersDataEntry(prev => ({ ...prev, FromDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth type=\"date\" label=\"To Date\" value={filtersDataEntry.ToDate}\r\n                                onChange={e => setFiltersDataEntry(prev => ({ ...prev, ToDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }} />\r\n                        </Grid>\r\n                        <Grid item xs={2} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth label=\"Brokers\" value={filtersDataEntry.Broker}\r\n                                onChange={selected => setFiltersDataEntry(prev => ({ ...prev, Broker: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Brokers\" }, ...dropDown.broker]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogDataEntry}>Cancel</Button>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        setHeaderVilaiVasi(\"\");\r\n\r\n                        setBrokerageValues(prev => {\r\n                            const updated = { ...prev };\r\n                            deliveryReport.forEach(item => {\r\n                                const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                updated[key] = \"\";\r\n                            });\r\n                            return updated;\r\n                        });\r\n                        setFiltersDataEntry(prev => ({ ...prev, refresh: !prev.refresh, filterDialog: false }));\r\n                    }}>Apply Filters</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n                        <Typography variant=\"h6\">Listing Filters</Typography>\r\n                        <IconButton onClick={closeDialogListing}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={e => setFiltersListing(prev => ({ ...prev, FromDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={e => setFiltersListing(prev => ({ ...prev, ToDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={2} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n\r\n                                    setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n                                }}\r\n                                style={{ height: '30px', width: '100%' }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                value={filtersListing.VilaiVasiZero}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, VilaiVasiZero: selected }))}\r\n                                options={[\r\n                                    { value: \"\", label: \"All\" },\r\n                                    { value: \"zero\", label: \"VilaiVasi Zero\" },\r\n                                    { value: \"nonzero\", label: \"VilaiVasi Non-Zero\" }\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                placeholder=\"VilaiVasi Zero/Non-Zero\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Broker: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Brokers\" }, ...dropDown.broker]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Ledger: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Ledger\" }, ...dropdownOptionsListing.ledgers]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Item: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Item\" }, ...dropdownOptionsListing.items]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogListing}>Cancel</Button>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh, filterDialog: false }));\r\n                    }}>Apply Filters</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;\r\n"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","open","onClose","brokerData","printRef","useRef","handlePrint","useReactToPrint","content","current","items","Items","totalBrokerage","reduce","sum","item","parseFloat","Brok_Amt","totalCoolie","Coolie_Amt","totalAmount","Total_Amount","vilaivasi","VilaiVasi","netTotalRaw","netTotalRounded","Math","round","roundOff","packSizeSummary","getPackSizeSummary","packQuantities","acc","packSize","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","join","_jsxs","Dialog","fullWidth","maxWidth","children","DialogTitle","Broker_Name","_jsx","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","toLocaleDateString","index","Retailer_Name","Ledger_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","value","n","Number","formatSignedNumber","DialogActions","Button","startIcon","Download","loadingOn","loadingOff","dataEntryPagination","setDataEntryPagination","useState","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","filtersDataEntry","setFiltersDataEntry","FromDate","toISOString","split","ToDate","Broker","label","Ledger","Item","refresh","filterDialog","deliveryReport","setDeliveryReport","brokerageValues","setBrokerageValues","filtersListing","setFiltersListing","VilaiVasiZero","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","pdfPreviewData","setPdfPreviewData","headerVilaiVasi","setHeaderVilaiVasi","useEffect","fetchLink","then","data","success","prev","toArray","catch","console","error","async","res","initialBrokerage","forEach","key","Do_Id","Product_Id","brokerage","err","fetchData","url","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","Product_Name","e","fetchDatasetAndDropdowns","closeDialogDataEntry","closeDialogListing","totalBagsDataEntry","useMemo","Addition","displayQuantity","Qty","totalBagsListing","Total_Bags","handleFieldChange","idx","fieldName","updatedDeliveryReport","groupedByBroker","length","push","brokerNames","keys","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","FilterAlt","mr","Tabs","onChange","handleTabChange","event","newValue","Tab","display","gap","TextField","type","inputProps","step","target","updated","placeholder","height","boxSizing","_Fragment","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","row","vilaivasiValue","vilaivasiAmt","billQty","Bill_Qty","calculateVilaivasiAmt","doId","productId","hover","Do_No","Do_Inv_No","CostCenterGet","Rate","Pack","Brokerage","Coolie","Narration","toFixed","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","parseInt","mt","Save","recordsToSave","brokerageValue","Vilai_Vasi","Brok_Rate","Coolie_Rate","Created_By","UserId","response","method","bodyData","headers","toast","message","disabled","brokerName","_brokerData$Items","find","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Broker_Exp","Tooltip","title","PictureAsPdfIcon","PdfPreviewModal","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","itemIdx","_item$Amount","Ledger_Alias","handleListingPageChange","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","document","body","isSearchable"],"sourceRoot":""}
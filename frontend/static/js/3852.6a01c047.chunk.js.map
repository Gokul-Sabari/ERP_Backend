{"version":3,"file":"static/js/3852.6a01c047.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Sales/TripMaster/DeliveryTripSheet.jsx","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport FilterableTable, { ButtonActions, createCol } from \"../../../Components/filterableTable2\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { ISOString, isValidDate, LocalDate, LocalTime, NumberFormat, numberToWords, Subraction, timeDuration } from \"../../../Components/functions\";\r\nimport { Download, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst TripSheets = ({ loadingOn, loadingOff }) => {\r\n\r\n    const nav = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const [tripData, setTripData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        filterDialog: false,\r\n        refresh: false,\r\n        printPreviewDialog: false,\r\n        shortPreviewDialog: false,\r\n        FromGodown: [],\r\n        ToGodown: [],\r\n        Staffs: [],\r\n        Items: []\r\n    });\r\n    const [selectedRow, setSelectedRow] = useState([]);\r\n    const printRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `delivery/deliveryTripSheet?Fromdate=${filters?.fetchFrom}&Todate=${filters?.fetchTo}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n\r\n                setTripData(data.data);\r\n            }\r\n        }).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        }).catch(e => console.error(e))\r\n    }, [filters?.fetchFrom, filters?.fetchTo]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, fetchFrom: queryFilters.Fromdate, fetchTo: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        nav(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters({\r\n            ...filters,\r\n            filterDialog: false,\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // const Total_Invoice_value = tripData.reduce((acc, orders) => {\r\n    //     const invoiceValue = orders?.Product_Array?.reduce((sum, product) => {\r\n    //         return sum + (product?.Total_Invoice_value || 0);\r\n    //     }, 0);\r\n\r\n    //     return acc + (invoiceValue || 0);\r\n    // }, 0);\r\n\r\n\r\n    const allProducts = (selectedRow?.Product_Array || []).flatMap(product => product.Products_List || []);\r\n\r\n\r\n    const TaxData = allProducts.reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode === item.HSN_Code);\r\n\r\n        const {\r\n            HSN_Code,\r\n            Taxable_Amount = 0,\r\n            Igst_Amo = 0,\r\n            Cgst_Amo = 0,\r\n            Sgst_Amo = 0\r\n        } = item;\r\n\r\n        const Total_Tax = Igst_Amo + Cgst_Amo + Sgst_Amo;\r\n\r\n        if (HSNindex !== -1) {\r\n\r\n            data[HSNindex] = {\r\n                ...data[HSNindex],\r\n                taxableValue: data[HSNindex].taxableValue + Taxable_Amount,\r\n                igst: data[HSNindex].igst + Igst_Amo,\r\n                cgst: data[HSNindex].cgst + Cgst_Amo,\r\n                sgst: data[HSNindex].sgst + Sgst_Amo,\r\n                totalBeforeTax: data[HSNindex].totalBeforeTax + Taxable_Amount,\r\n                totalTax: data[HSNindex].totalTax + Total_Tax\r\n            };\r\n        } else {\r\n            data.push({\r\n                hsnCode: HSN_Code,\r\n                taxableValue: Taxable_Amount,\r\n                igst: Igst_Amo,\r\n                cgst: Cgst_Amo,\r\n                sgst: Sgst_Amo,\r\n                totalBeforeTax: Taxable_Amount,\r\n                totalTax: Total_Tax\r\n            });\r\n        }\r\n\r\n        return data;\r\n    }, []);\r\n\r\n\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n\r\n\r\n\r\n    const uniqueStaffs = useMemo(() => {\r\n        const allStaffs = tripData.flatMap((trip) =>\r\n            trip.Employees_Involved.map((staff) => staff.Emp_Name)\r\n        );\r\n        return [...new Set(allStaffs)].map((name) => ({\r\n            value: name,\r\n            label: name,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const filteredData = useMemo(() => {\r\n        return tripData.filter(trip => {\r\n            const hasFromGodownMatch = filters.FromGodown.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.FromGodown.some(selected => selected.value === product.FromLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasToGodownMatch = filters.ToGodown.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.ToGodown.some(selected => selected.value === product.ToLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasItemMatch = filters.Items.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.Items.some(selected => selected.value === product.Product_Name)\r\n                )\r\n                : false;\r\n\r\n            const hasEmployeeMatch = filters.Staffs.length > 0\r\n                ? trip.Employees_Involved.some(staff =>\r\n                    filters.Staffs.some(selected => selected.value === staff.Emp_Name)\r\n                )\r\n                : false;\r\n\r\n            return hasFromGodownMatch || hasToGodownMatch || hasItemMatch || hasEmployeeMatch;\r\n        });\r\n    }, [tripData, filters]);\r\n\r\n\r\n\r\n\r\n\r\n    const flattenProductsList = (productArray) => {\r\n        if (!Array.isArray(productArray)) return [];\r\n\r\n        return productArray.flatMap((product) =>\r\n            Array.isArray(product.Products_List)\r\n                ? product.Products_List\r\n                    .map((item) => ({\r\n                        ...item,\r\n                        Reason: product.Reason || \"Delivery\",\r\n                    }))\r\n                    .filter(item => Object.keys(item).length > 1)\r\n                : []\r\n        ).filter(row => row && Object.keys(row).length > 1);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                dataArray={(\r\n                    filters.FromGodown.length > 0 ||\r\n                    filters.ToGodown.length > 0 ||\r\n                    filters.Staffs.length > 0\r\n                ) ? filteredData : tripData}\r\n                title=\"Trip Sheets\"\r\n                maxHeightOption\r\n                ExcelPrintOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => nav('/erp/sales/Tripsheet/Tripsheetcreation')}\r\n                        >Add</Button>\r\n                        <Tooltip title='Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                            ><FilterAlt /></IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                initialPageCount={10}\r\n                columns={[\r\n                    createCol('Trip_Date', 'date', 'Date'),\r\n                    createCol('Trip_No', 'string'),\r\n                    createCol('Challan_No', 'string', 'Challan'),\r\n                    createCol('Vehicle_No', 'string', 'Vehicle'),\r\n                    createCol('StartTime', 'time', 'Start Time'),\r\n                    createCol('EndTime', 'time', 'End Time'),\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Time Taken',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const startTime = row?.StartTime ? new Date(row.StartTime) : '';\r\n                            const endTime = row.EndTime ? new Date(row.EndTime) : '';\r\n                            const timeTaken = (startTime && endTime) ? timeDuration(startTime, endTime) : '00:00';\r\n                            return (\r\n                                <span className=\"cus-badge bg-light\">{timeTaken}</span>\r\n                            )\r\n                        }\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Distance',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => NumberFormat(Subraction(row?.Trip_EN_KM, row?.Trip_ST_KM))\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Qty',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n\r\n                            const totalQty = row?.Product_Array?.reduce((sum, product) => {\r\n\r\n                                const productQty = product?.Products_List?.reduce((productSum, item) => {\r\n                                    return productSum + (item.Bill_Qty || 0);\r\n                                }, 0);\r\n                                return sum + productQty;\r\n                            }, 0);\r\n\r\n\r\n                            return <span>{totalQty}</span>;\r\n                        },\r\n                    },\r\n\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Item',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n\r\n                            const totalQty = row?.Product_Array?.reduce((sum, product) => {\r\n\r\n                                const productQty = product?.Products_List?.reduce((productSum, item) => {\r\n                                    return productSum + 1;\r\n                                }, 0);\r\n                                return sum + productQty;\r\n                            }, 0);\r\n\r\n\r\n                            return <span>{totalQty}</span>;\r\n                        },\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Action',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <ButtonActions\r\n                                buttonsData={[\r\n                                    {\r\n                                        name: 'Edit',\r\n                                        icon: <Edit className=\"fa-14\" />,\r\n                                        onclick: () => nav('/erp/sales/Tripsheet/Tripsheetcreation', {\r\n                                            state: {\r\n                                                ...row,\r\n                                                isEditable: false,\r\n                                            },\r\n                                        }),\r\n                                    },\r\n                                    {\r\n                                        name: 'Short Preview',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            setFilters(pre => ({ ...pre, shortPreviewDialog: true }));\r\n\r\n                                            setSelectedRow(row);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        name: 'Preview',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            setFilters(pre => ({ ...pre, printPreviewDialog: true }));\r\n                                            setSelectedRow(row);\r\n                                        }\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        )\r\n                    }\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <>\r\n                        {row?.Employees_Involved?.length > 0 && (\r\n                            <table className=\"fa-14\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\" colSpan={3}>Involved Employees</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\">SNo</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Name</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Role</th>\r\n                                    </tr>\r\n                                    {row.Employees_Involved.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"py-1 px-2 border\">{i + 1}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Emp_Name}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Cost_Category}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n\r\n\r\n                        <FilterableTable\r\n                            title=\"Items\"\r\n                            EnableSerialNumber\r\n                            dataArray={\r\n                                Array.isArray(row?.Product_Array)\r\n                                    ? flattenProductsList(row?.Product_Array).filter(row => Object.keys(row).length > 1)\r\n                                    : []\r\n                            }\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Reason',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Reason ?? 'Delivery',\r\n                                },\r\n                                createCol('Product_Name', 'string', 'Product_Name'),\r\n                                createCol('HSN_Code', 'string'),\r\n                                createCol('Taxable_Rate', 'number', 'Taxable_Rate'),\r\n                                createCol('Taxable_Amount', 'number', 'Tax_Before_Amount'),\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Tax',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const cgstP = Number(row.Cgst_Amo) || 0;\r\n                                        const sgstP = Number(row.Sgst_Amo) || 0;\r\n                                        const taxValue = cgstP + sgstP;\r\n                                        return taxValue.toFixed(2);\r\n                                    },\r\n                                },\r\n                                createCol('Final_Amo', 'number', 'Final_Amo'),\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Round off',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const total = Number(row.Total_Value) || 0;\r\n                                        const integerPart = Math.floor(total);\r\n                                        const decimalPart = total - integerPart;\r\n\r\n                                        let roundedTotal = integerPart;\r\n                                        let roundOffDiff = 0;\r\n\r\n                                        if (decimalPart >= 0.56 && decimalPart <= 0.99) {\r\n                                            roundedTotal = integerPart + 1;\r\n                                        } else if (decimalPart >= 0.05 && decimalPart <= 0.55) {\r\n                                            roundedTotal = integerPart;\r\n                                        } else if (decimalPart >= 0.00 && decimalPart <= 0.04) {\r\n                                            roundedTotal = integerPart;\r\n                                        }\r\n\r\n                                        roundOffDiff = (roundedTotal - total).toFixed(2);\r\n                                        return roundOffDiff > 0 ? `+${roundOffDiff}` : roundOffDiff;\r\n                                    },\r\n                                },\r\n                                createCol('Branch', 'string', 'From'),\r\n                                createCol('Retailer_Name', 'string', 'To'),\r\n                            ]}\r\n                            disablePagination\r\n                            ExcelPrintOption\r\n                        />\r\n\r\n\r\n                    </>\r\n                )}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Staffs</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Staffs}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Staffs: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueStaffs}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Staff\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Items</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Items}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Items: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueItems}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Items\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr> */}\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate\r\n                            };\r\n                            updateQueryString(updatedFilters);\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.shortPreviewDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, shortPreviewDialog: false }))}\r\n                maxWidth=\"xl\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Print Preview</DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    {selectedRow?.Product_Array && (\r\n                        <React.Fragment>\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-12 bg-light\">Retailer Name</th>\r\n\r\n                                        <th className=\"fa-12 bg-light\">Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {selectedRow.Product_Array.length > 0 ? (\r\n                                        selectedRow.Product_Array.map((group, idx) => {\r\n\r\n                                            const totalAmount = group.Products_List.reduce((sum, product) => sum + product.Final_Amo, 0);\r\n\r\n                                            return (\r\n                                                <React.Fragment key={idx}>\r\n                                                    <tr>\r\n                                                        <td className=\"fw-bold\">{group.Retailer_Name}</td>\r\n\r\n                                                        <td className=\"fw-bold text-end\">\r\n                                                            {NumberFormat(totalAmount)}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </React.Fragment>\r\n                                            );\r\n                                        })\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colSpan=\"3\" className=\"text-center\">\r\n                                                No data available\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </React.Fragment>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, shortPreviewDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n            <Dialog\r\n                open={filters.printPreviewDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                maxWidth=\"xl\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Print Preview</DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    {selectedRow?.Product_Array && (\r\n                        <React.Fragment>\r\n                            <table className=\"table table-bordered fa-13 m-0\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td colSpan={3}>DELIVERY CHALLAN</td>\r\n                                        <td colSpan={3}>GSTIN :33AAOCP0807F1ZN</td>\r\n                                        <td colSpan={2}>ORIGINAL / DUPLICATE</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={3} rowSpan={2}>\r\n                                            <span className=\"fa-14 fw-bold\">PUKAL FOODS PRIVATE LIMITED</span> <br />\r\n                                            6A, First Floor, North, Viswanadha puram, Main road,<br />\r\n                                            Reserve Line, Viswanathapuram, Madurai, Tamil Nadu 625014\r\n                                        </td>\r\n                                        <td colSpan={3}>FSSAI No :</td>\r\n                                        <td>Challan No</td>\r\n                                        <td>{selectedRow?.Challan_No}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={3}>Phone No: 9842131353, 9786131353</td>\r\n                                        <td>Date</td>\r\n                                        <td>{selectedRow.Trip_Date ? LocalDate(selectedRow.Trip_Date) : ''}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={8} className=\"text-center\">Reason for Transfer - Branch Transfer / Line Sales / Purchase Return / Job Work</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Vehicle No</td>\r\n                                        <td>{selectedRow?.Vehicle_No}</td>\r\n                                        <td>Delivery Person </td>\r\n                                        <td>\r\n                                            {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                                staff?.Cost_Category === 'Delivery Man'\r\n                                            ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                        </td>\r\n                                        <td>Start Time</td>\r\n                                        <td>{selectedRow?.StartTime ? LocalTime(new Date(selectedRow.StartTime)) : ''}</td>\r\n                                        <td>Start KM</td>\r\n                                        <td>{selectedRow?.Trip_ST_KM}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Trip No</td>\r\n                                        <td>{selectedRow?.Trip_No}</td>\r\n                                        <td>LoadMan</td>\r\n                                        <td>\r\n                                            {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                                staff?.Cost_Category === 'Load Man'\r\n                                            ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                        </td>\r\n                                        <td>End Time</td>\r\n                                        <td>{selectedRow?.EndTime ? LocalTime(new Date(selectedRow.EndTime)) : ''}</td>\r\n                                        <td>End KM</td>\r\n                                        <td>{selectedRow?.Trip_EN_KM}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            {/* items */}\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-12 bg-light\">#</th>\r\n                                        <th className=\"fa-12 bg-light\">Reason</th>\r\n                                        <th className=\"fa-12 bg-light\">Party</th>\r\n                                        <th className=\"fa-12 bg-light\">Address</th>\r\n                                        <th className=\"fa-12 bg-light\">Item</th>\r\n                                        <th className=\"fa-12 bg-light\">HSN</th>\r\n                                        <th className=\"fa-12 bg-light\">Qty</th>\r\n                                        <th className=\"fa-12 bg-light\">KGS</th>\r\n                                        <th className=\"fa-12 bg-light\">Rate</th>\r\n                                        <th className=\"fa-12 bg-light\">Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n\r\n                                    {selectedRow?.Product_Array?.map((product, productIndex) => (\r\n                                        (product?.Products_List || []).map((item, index) => (\r\n                                            <tr key={`${productIndex}-${index}`}>\r\n                                                <td className=\"fa-10\">{index + 1}</td>\r\n                                                <td className=\"fa-10\">{item.Reason || \"Delivery\"}</td>\r\n                                                <td className=\"fa-10\">{item?.Retailer_Name}</td>\r\n                                                <td className=\"fa-10\">{item?.Retailer_Address}</td>\r\n                                                <td className=\"fa-10\">{item?.Product_Name}</td>\r\n                                                <td className=\"fa-10\">{item?.HSN_Code}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Bill_Qty)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.KGS || 0)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Taxable_Rate)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Taxable_Rate * item?.Bill_Qty)}</td>\r\n                                            </tr>\r\n                                        ))\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n\r\n\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className=\"bg-light fa-12 text-center\">HSN / SAC</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">Taxable Value</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">IGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">CGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">SGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">Total Tax</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {/* Map through aggregated data */}\r\n\r\n                                    {TaxData.map((item, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"fa-10 text-end\">{item.hsnCode}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.totalBeforeTax)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.igst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.cgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.sgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.totalTax)}</td>\r\n                                        </tr>\r\n                                    ))}\r\n\r\n                                    {/* Total Row */}\r\n                                    <tr>\r\n                                        <td className=\"border fa-10 text-end\">Total</td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.totalBeforeTax, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.igst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.cgst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.sgst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.totalTax, 0))}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                                <td colSpan={6} className=' fa-13 fw-bold'>\r\n\r\n                                    Tax Amount (in words) : INR &nbsp;\r\n                                    {numberToWords(\r\n                                        parseInt(Object.values(selectedRow?.Product_Array).reduce(\r\n                                            (sum, item) => sum + Number(item.Total_Tax || 0), 0\r\n                                        ))\r\n                                    )} only.\r\n                                </td>\r\n\r\n                            </table>\r\n\r\n                            <table className=\"table table-bordered fa-10\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>Prepared By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                        <td>Executed By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                        <td>Verified By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Other Expenses</td>\r\n                                        <td>0</td>\r\n                                        <td>Round Off</td>\r\n                                        <td>0</td>\r\n                                        <td>Grand Total</td>\r\n                                        <td className=\"fa-15 fw-bold\">\r\n                                            {/* Calculate Total Value (Taxable Value + Total Tax) */}\r\n                                            {NumberFormat(\r\n                                                Object.values(TaxData).reduce(\r\n                                                    (acc, item) => acc + (item.taxableValue ?? 0) + (item.igst ?? 0) + (item.cgst ?? 0) + (item.sgst ?? 0), 0\r\n                                                )\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n\r\n                            </table>\r\n\r\n                            <td colSpan={6} className='col-12 fa-15 fw-bold'>\r\n                                {numberToWords(\r\n                                    parseInt(Object.values(TaxData).reduce(\r\n                                        (acc, item) => acc + (item.taxableValue ?? 0) + (item.igst ?? 0) + (item.cgst ?? 0) + (item.sgst ?? 0), 0\r\n                                    ))\r\n                                )} only.\r\n                            </td>\r\n                            <div className=\"col-12 text-center\">\r\n                                <p>This is a Computer Generated Invoice</p>\r\n                            </div>\r\n\r\n                        </React.Fragment>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant=\"outlined\"\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* <h6 className=\"m-0 text-end text-muted px-3\">Total Invoice Amount ({tripData?.length}) : {Total_Invoice_value}</h6> */}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TripSheets;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","defaultFilters","Fromdate","ISOString","Todate","_selectedRow$Employee","_selectedRow$Employee2","_selectedRow$Employee3","_selectedRow$Employee4","_selectedRow$Product_","loadingOn","loadingOff","nav","useNavigate","location","useLocation","query","URLSearchParams","search","tripData","setTripData","filters","setFilters","fetchFrom","fetchTo","filterDialog","refresh","printPreviewDialog","shortPreviewDialog","FromGodown","ToGodown","Staffs","Items","selectedRow","setSelectedRow","printRef","useRef","useEffect","fetchLink","then","success","finally","catch","queryFilters","get","isValidDate","closeDialog","TaxData","Product_Array","flatMap","product","Products_List","reduce","item","HSNindex","findIndex","obj","hsnCode","HSN_Code","Taxable_Amount","Igst_Amo","Cgst_Amo","Sgst_Amo","Total_Tax","taxableValue","igst","cgst","sgst","totalBeforeTax","totalTax","push","handlePrint","useReactToPrint","content","current","uniqueStaffs","useMemo","allStaffs","trip","Employees_Involved","staff","Emp_Name","label","filteredData","hasFromGodownMatch","some","selected","FromLocation","hasToGodownMatch","ToLocation","hasItemMatch","Product_Name","hasEmployeeMatch","Button","FilterAlt","startTime","StartTime","Date","endTime","EndTime","timeTaken","timeDuration","Subraction","Trip_EN_KM","Trip_ST_KM","_row$Product_Array","totalQty","sum","_product$Products_Lis","productSum","Bill_Qty","_ref5","_row$Product_Array2","_product$Products_Lis2","_ref6","Edit","isEditable","Visibility","_ref7","_row$Employees_Involv","Cost_Category","isArray","productArray","Reason","keys","_ref8","_row$Reason","_ref9","toFixed","_ref10","total","Total_Value","integerPart","Math","floor","decimalPart","roundedTotal","roundOffDiff","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","onChange","Select","selectedOptions","prev","menuPortalTarget","document","options","isMulti","styles","isSearchable","placeholder","maxMenuHeight","DialogActions","newFilters","params","toString","updateQueryString","startIcon","Search","ref","React","group","idx","totalAmount","Final_Amo","Retailer_Name","rowSpan","Challan_No","Trip_Date","Vehicle_No","join","Trip_No","productIndex","Retailer_Address","KGS","Taxable_Rate","numberToWords","values","minWidth","acc","_item$taxableValue","_item$igst","_item$cgst","_item$sgst","_item$taxableValue2","_item$igst2","_item$cgst2","_item$sgst2","createSvgIcon","d"],"sourceRoot":""}
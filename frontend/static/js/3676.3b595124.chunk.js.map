{"version":3,"file":"static/js/3676.3b595124.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/DataSetDisplay.jsx","Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/SalesReportComponent/LedgerBasedTable.jsx","Pages/Sales/salesReports.jsx"],"sourcesContent":["import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ \r\n    dataArray = [], \r\n    columns = [], \r\n    ExpandableComp, \r\n    enableFilters = false,\r\n    ExportAllData = false,\r\n\r\n}) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                            ExcelPrintOption\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;","import { Fragment, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\n\r\nconst ProductBasedSalesReport = ({ dataArray }) => {\r\n    const productColumns = ['Stock_Group', 'Item_Name_Modified', 'Y1', 'M6', 'M2', 'LM', 'Total_Qty'];\r\n    const [daysCol, setDaysCol] = useState([])\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => {\r\n            const transaction = Array.isArray(o?.StockTransaction) ? o?.StockTransaction : [];\r\n            const stkObj = transaction[0] || {}; \r\n            const DaySum = Object.fromEntries(\r\n                Object.entries(stkObj).filter(([key]) => \r\n                    !productColumns.includes(key) && !isNaN(Number(key)) \r\n                ).map(([key]) => {\r\n                    setDaysCol(pre => pre.includes(key) ? pre : [...pre, key])\r\n                    const total = transaction.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);\r\n                    return [key, total];\r\n                })\r\n            );\r\n\r\n            return {\r\n                ...o,\r\n                ...DaySum\r\n            };\r\n        });\r\n    }, [dataArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    createCol('Stock_Group', 'string'),\r\n                    createCol('Y1', 'number'),\r\n                    createCol('M6', 'number'),\r\n                    createCol('M2', 'number'),\r\n                    createCol('LM', 'number'),\r\n                    createCol('Total_Qty', 'number'),\r\n                    ...daysCol.map(day => createCol(day, 'number', `Day ${day}`))\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    const transaction = Array.isArray(row?.StockTransaction) ? row?.StockTransaction : [];\r\n                    const preDefinedCol = [\r\n                        createCol('Item_Name_Modified', 'string', 'Item'),\r\n                        createCol('Y1', 'number'),\r\n                        createCol('M6', 'number'),\r\n                        createCol('M2', 'number'),\r\n                        createCol('LM', 'number'),\r\n                        createCol('Total_Qty', 'number')\r\n                    ];\r\n                    \r\n                    const columns = Object.keys(transaction[0] || {}).filter(\r\n                        key => !productColumns.includes(key) && key !== 'Stock_Group'\r\n                    ).map(key => createCol(key, 'number'));\r\n\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={transaction}\r\n                            columns={[...preDefinedCol, ...columns]}\r\n                        />\r\n                    );\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProductBasedSalesReport;\r\n","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\r\n\r\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => ({\r\n            ...o,\r\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                Grade_Item_Group: st.Item_Name_Modified,\r\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            }))\r\n        })).map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Grade_Item_Group',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductDayBasedSalesReport;","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { isEqualNumber, checkIsNumber, filterableText, groupData, Addition, toNumber, Division } from '../../../Components/functions'\r\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBoxOutlineBlank, CheckBox, FilterAltOff, Settings, FilterAlt } from '@mui/icons-material'\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport DisplayArrayData from \"./DataSetDisplay\";\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\r\n\r\n    return (\r\n        loading\r\n            ? <h5 className=\"text-center text-primary \">Loading...</h5>\r\n            : <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\nconst LedgerBasedSalesReport = ({ dataArray, colTypes, DB, Fromdate, Todate }) => {\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const propsColumns = colTypes.map((col, colInd) => ({\r\n        isVisible: colInd < 10 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1\r\n    }));\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    const sortedCoulumns = useMemo(() => {\r\n        return [...columns].sort(\r\n            (a, b) => (\r\n                a?.OrderBy && b?.OrderBy\r\n            ) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy\r\n        )\r\n    }, [columns])\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedCoulumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [sortedCoulumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : dataArray;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        Division(\r\n                            grp?.groupedData?.reduce(\r\n                                (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                0\r\n                            ),\r\n                            grp.groupedData.length\r\n                        )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, dataArray, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of sortedCoulumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <div className=\"row\">\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    \r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '58vh', overflow: 'auto' }}>\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"LOL - Sales Reports\"\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Column Visiblity'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setDialog(true)}\r\n                            >\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto m-1\"\r\n                            value={groupBy}\r\n                            onChange={e => setGroupBy(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Group By</option>\r\n                            {DisplayColumn.filter(fil => (\r\n                                filterableText(fil.Fied_Data) === \"string\"\r\n                                && fil?.Field_Name !== 'Ledger_Name'\r\n                            )).map((col, colInd) => (\r\n                                <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    groupBy ? (\r\n                        <FilterableTable\r\n                            title={row[groupBy] + ' - Ledgers'}\r\n                            dataArray={Array.isArray(row?.groupedData) ? row?.groupedData : []}\r\n                            columns={DisplayColumn}\r\n                            ExcelPrintOption\r\n                            isExpendable={true}\r\n                            expandableComp={({ row }) => (\r\n                                <LedgerDetails\r\n                                    row={row}\r\n                                    DB={DB}\r\n                                    Fromdate={Fromdate}\r\n                                    Todate={Todate}\r\n                                />\r\n                            )}\r\n                        />\r\n                    ) : (\r\n                        <LedgerDetails\r\n                            row={row}\r\n                            DB={DB}\r\n                            Fromdate={Fromdate}\r\n                            Todate={Todate}\r\n                        />\r\n                    )\r\n                )}\r\n                maxHeightOption\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\r\n                                            disabled={Boolean(o?.isDefault)}\r\n                                            onChange={e =>\r\n                                                setColumns(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )}\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setColumns(prevColumns =>\r\n                                                prevColumns.map(oo =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setColumns(propsColumns)} variant=\"outlined\">Reset</Button>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default LedgerBasedSalesReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const ledgerAndTransactionExport = (excludeDetails, transactions) => {\r\n//     const wb = XLSX.utils.book_new();\r\n\r\n//     const excludeDetailsSheet = XLSX.utils.json_to_sheet(excludeDetails);\r\n//     XLSX.utils.book_append_sheet(wb, excludeDetailsSheet, 'Sheet1');\r\n\r\n//     const transactionsSheet = XLSX.utils.json_to_sheet(transactions);\r\n//     XLSX.utils.book_append_sheet(wb, transactionsSheet, 'Sheet2');\r\n\r\n//     XLSX.writeFile(wb, 'exported_data.xlsx');\r\n// };\r\n\r\n\r\n// {\r\n//     Field_Name: \"Excel_Export\",\r\n//     Fied_Data: \"string\",\r\n//     isVisible: 1,\r\n//     OrderBy: 1,\r\n//     isCustomCell: true,\r\n//     Cell: ({ row }) => {\r\n//         const excludeDetails = Object.fromEntries(\r\n//             Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\r\n//         );\r\n//         return (\r\n//             <>\r\n//                 <IconButton\r\n//                     size=\"small\"\r\n//                     onClick={() => {\r\n//                         ledgerAndTransactionExport([excludeDetails], row.LedgerSales);\r\n//                     }}\r\n//                 >\r\n//                     <Download />\r\n//                 </IconButton>\r\n//             </>\r\n//         )\r\n//     }\r\n// },\r\n\r\n\r\n\r\n\r\n\r\n// const columnsInitialValue = [\r\n//     { Field_Name: \"Ledger_Name\", Fied_Data: \"string\", isVisible: 1, isDefault: 1, OrderBy: 4 },\r\n//     { Field_Name: \"Total_Qty\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 5 },\r\n//     { Field_Name: \"ALL_Avg_M2\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 3, ColumnHeader: 'M2' },\r\n//     { Field_Name: \"ALL_Avg_M3\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 6, ColumnHeader: 'M3' },\r\n//     { Field_Name: \"ALL_Avg_M6\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 2, ColumnHeader: 'M6' },\r\n//     { Field_Name: \"ALL_Avg_M9\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 7, ColumnHeader: 'M9' },\r\n//     { Field_Name: \"ALL_Avg_One_Year\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 1, ColumnHeader: 'Y1' },\r\n//     { Field_Name: \"Q_Pay_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Freq_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Alias\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Actual_Party_Name_with_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Name\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Location\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Nature\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Owners\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_1\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_District\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"File_No\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Payment_Mode\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A3\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A4\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M2_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M3_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M6_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M9_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Y_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Q_Pay_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Tally_Id\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null }\r\n// ].sort((a, b) => a.OrderBy - b.OrderBy);","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { DaysBetween, firstDayOfMonth, getPreviousDate, ISOString } from \"../../Components/functions\";\r\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\r\nimport ProductDayBasedSalesReport from \"./SalesReportComponent/ProductDayBasedTable\";\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport LedgerBasedSalesReport from \"./SalesReportComponent/LedgerBasedTable\";\r\n\r\nconst SalesReport = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState({\r\n        salesInfo: [],\r\n        salesItemInfo: [],\r\n    })\r\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        ReportType: 'LedgerBased',\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n            .catch(console.error);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const { dataTypeInfo } = data?.others;\r\n\r\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\r\n                    ...los,\r\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\r\n                })) : [];\r\n\r\n                setDataTypes(pre => ({ ...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n                setSalesDataOfProduct(combinedData);\r\n            } else {\r\n                setSalesDataOfProduct([])\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setSalesDataOfProduct(null);\r\n        setDataTypes({\r\n            salesInfo: [],\r\n            salesItemInfo: [],\r\n        })\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({ ...pre, filterDialog: false }))\r\n    }\r\n\r\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        {storage?.Company_Name}\r\n                    </span>\r\n                    <span>\r\n                        <select\r\n                            value={filters.ReportType}\r\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\r\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\r\n                        >\r\n                            <option value={'LedgerBased'}>Ledger Based</option>\r\n                            <option value={'ProductBased'}>Product Based</option>\r\n                            {/* <option value={'ProductDayAverage'}>Product/Day Based</option> */}\r\n                        </select>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <form onSubmit={e => { \r\n                            e.preventDefault();\r\n                            setFilters(pre => ({ ...pre, reload: !pre.reload }))\r\n                        }}>\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                                min={firstDayOfMonth()}\r\n                                value={filters.Fromdate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            />\r\n\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5'\r\n                                value={filters.Todate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            />\r\n\r\n                            <Tooltip title='Reload Data'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"ms-2\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <Refresh />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </form>\r\n\r\n                        {/* <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip> */}\r\n                    </div>\r\n\r\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\r\n                    )}\r\n\r\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\r\n                        <LedgerBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesData}\r\n                            colTypes={dataTypes.salesInfo}\r\n                            DB={storage?.Company_id}\r\n                            Fromdate={filters?.Fromdate}\r\n                            Todate={filters?.Todate}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesDataOFProduct}\r\n                            fromDate={filters.Fromdate}\r\n                            toDate={filters.Todate}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SalesReport;"],"names":["mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","dataArray","columns","ExpandableComp","enableFilters","ExportAllData","dispColmn","setDispColmn","useState","filters","setFilters","filteredData","setFilteredData","showData","Object","keys","length","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","map","index","Field_Name","Column_Name","Fied_Data","Data_Type","isVisible","align","OrderBy","sortedColumns","useMemo","sort","a","b","applyFilters","handleFilterChange","column","value","prevFilters","_objectSpread","filtered","type","min","max","filter","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","concat","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","_Fragment","Box","sx","display","gap","padding","flexWrap","Button","onClick","pre","startIcon","FilterAlt","FilterableTable","isExpendable","expandableComp","tableMaxHeight","ExcelPrintOption","Tooltip","title","IconButton","size","Settings","FilterAltOff","maxHeight","overflow","ke","_column$Field_Name","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Field_Name2","DialogActions","o","i","displayedColumn","find","oo","Card","component","Paper","Switch","Boolean","prevColumns","checkIsNumber","width","color","productColumns","daysCol","setDaysCol","transaction","StockTransaction","stkObj","DaySum","fromEntries","entries","key","isNaN","Number","_ref3","total","reduce","sum","Fragment","createCol","day","_ref4","row","preDefinedCol","initialPageCount","days","_Division","_Division2","_Division3","_Division4","_Division5","M2_Avg","Division","ALL_Avg_M2","getDaysInPreviousMonths","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","Billed_Avg","st","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","loading","setLoading","fetchLink","address","Ledger_Tally_Id","headers","then","success","data","others","dataTypeInfo","salesInfo","catch","console","error","finally","DisplayArrayData","colTypes","groupBy","setGroupBy","dialog","setDialog","filterDialog","setFilterDialog","propsColumns","col","colInd","setColumns","sortedCoulumns","DisplayColumn","isEqualNumber","Defult_Display","grouping","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_grp$groupedData","groupedData","acc","colmn","Addition","toNumber","_item$column$Field_Na","closeDialog","headerFontSizePx","bodyFontSizePx","ButtonArea","_col$Field_Name","ColumnHeader","_ref5","_ref6","maxHeightOption","isDefault","disabled","variant","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","getPreviousDate","ISOString","ReportType","reload","Company_id","_data$others","combinedData","LOSAbstract","los","losDetails","Stock_Group","daysDifferent","DaysBetween","backgroundColor","Company_Name","CardContent","onSubmit","preventDefault","firstDayOfMonth","Refresh","LedgerBasedSalesReport","ProductBasedSalesReport","fromDate","toDate","ProductDayBasedSalesReport"],"sourceRoot":""}
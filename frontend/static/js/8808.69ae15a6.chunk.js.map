{"version":3,"file":"static/js/8808.69ae15a6.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Inventry/liveStockReport.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center', tdClass = '') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        tdClass,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass\r\n                                ? String(' ' + column?.tdClass({ row, Field_Name, index: tdIndex }) + ' ')\r\n                                : ''\r\n                        );\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`\r\n                                        border-end`\r\n                                        + horizondalalignClass\r\n                                        + verticalAlignClass\r\n                                        + tdClass(row, column.Field_Name, index)\r\n                                    }\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`\r\n                                    border-end`\r\n                                    + horizondalalignClass\r\n                                    + verticalAlignClass\r\n                                    + tdClass(row, column.Field_Name, index)\r\n                                }\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { getPreviousDate, groupData, calcTotal, ISOString } from \"../../Components/functions\";\r\nimport FilterableTable from '../../Components/filterableTable2'\r\nimport { Card, CardContent, Autocomplete, TextField, Checkbox, Tooltip, IconButton, Button, Dialog, DialogContent, DialogActions, Tab, Box } from \"@mui/material\";\r\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff } from \"@mui/icons-material\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\n\r\nconst LiveStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [groupedData, setGroupedData] = useState([]);\r\n    const [apiFilters, setAPIFilters] = useState({\r\n        Fromdata: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        view: 'Grouped'\r\n    });\r\n    const [filters, setFilters] = useState({});\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filteredData, setFilteredData] = useState(reportData);\r\n\r\n    const columns = [\r\n        { Field_Name: \"Stock_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Grade_Item_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Group_Name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"stock_item_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"godown_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        ...(apiFilters.view === 'List' ? [\r\n            { Field_Name: \"Act_Bags\", Fied_Data: \"number\", ColumnHeader: 'Bags', isVisible: 1 },\r\n            { Field_Name: \"Bal_Act_Qty\", Fied_Data: \"number\", ColumnHeader: 'Balance Quantity', isVisible: 1 }\r\n        ] : [])\r\n    ];\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    useEffect(() => setFilters({}), [apiFilters.view])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of columns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(reportData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: `reports/liveStockReport?Fromdata=${apiFilters.Fromdata}&Todate=${apiFilters.Todate}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(data.data);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }, [apiFilters.Fromdata, apiFilters.Todate])\r\n\r\n    useEffect(() => {\r\n        const runLoading = async () => {\r\n            try {\r\n                const dataToUse = (Object.keys(filters).length > 0) ? filteredData : reportData;\r\n\r\n                if (loadingOn) {\r\n                    await loadingOn();\r\n                }\r\n\r\n                const grouped_Stock_Group = groupData(dataToUse, 'Stock_Group');\r\n                const aggregatedStockGroup = grouped_Stock_Group?.sort((a, b) => String(a.Stock_Group).localeCompare(b.Stock_Group ?? '')).map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    BagsTotal: calcTotal(stockGroup.groupedData, 'Act_Bags'),\r\n                    BalQtyTotal: calcTotal(stockGroup.groupedData, 'Bal_Act_Qty'),\r\n                }));\r\n\r\n                const Grade_Item_Group = aggregatedStockGroup?.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: groupData(stockGroup?.groupedData, 'Grade_Item_Group')\r\n                }));\r\n                const aggregatedGradeItemGroup = Grade_Item_Group.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        BagsTotal: calcTotal(gradeItemGroup.groupedData, 'Act_Bags'),\r\n                        BalQtyTotal: calcTotal(gradeItemGroup.groupedData, 'Bal_Act_Qty'),\r\n                    }))\r\n                }));\r\n\r\n                const GroupName = aggregatedGradeItemGroup.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: groupData(gradeItemGroup?.groupedData, 'Group_Name')\r\n                    }))\r\n                }));\r\n                const aggregatedGroupName = GroupName.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: gradeItemGroup?.groupedData?.map(grouopName => ({\r\n                            ...grouopName,\r\n                            BagsTotal: calcTotal(grouopName.groupedData, 'Act_Bags'),\r\n                            BalQtyTotal: calcTotal(grouopName.groupedData, 'Bal_Act_Qty'),\r\n                        }))\r\n                    }))\r\n                }));\r\n\r\n                // setGroupedData(aggregatedGroupName);\r\n                setTimeout(() => setGroupedData(aggregatedGroupName), 500);\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                if (loadingOff) {\r\n                    setTimeout(() => loadingOff(), 500);\r\n                }\r\n            }\r\n        }\r\n\r\n        runLoading();\r\n    }, [reportData, filters, filteredData])\r\n\r\n    const columnCells = (mainKey) => [\r\n        {\r\n            Field_Name: mainKey,\r\n            isVisible: 1,\r\n            Fied_Data: 'string',\r\n        },\r\n        {\r\n            Field_Name: 'BagsTotal',\r\n            ColumnHeader: 'Bags',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n        {\r\n            Field_Name: 'BalQtyTotal',\r\n            ColumnHeader: 'Balance Quantity',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"p-1 d-flex justify-content-between align-items-center flex-wrap border-bottom\">\r\n                    <h5 className=\"ps-2 pt-2\">Live Stock Report</h5>\r\n                    <span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Fromdata}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Fromdata: e.target.value }))}\r\n                        /> - TO -\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Todate}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                        />\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setDialog(true)}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n\r\n                            <TabContext value={apiFilters.view}>\r\n                                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <TabList\r\n                                        indicatorColor='transparant'\r\n                                        onChange={(e, n) => setAPIFilters(pre => ({ ...pre, view: n }))}\r\n                                        variant=\"scrollable\"\r\n                                        scrollButtons=\"auto\"\r\n                                        allowScrollButtonsMobile\r\n                                    >\r\n                                        <Tab sx={apiFilters.view === 'Grouped' ? { backgroundColor: '#c6d7eb' } : {}} label=\"Grouped\" value='Grouped' />\r\n                                        <Tab sx={apiFilters.view === 'List' ? { backgroundColor: '#c6d7eb' } : {}} label=\"List\" value='List' />\r\n                                    </TabList>\r\n                                </Box>\r\n\r\n                                <TabPanel value={'Grouped'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={groupedData}\r\n                                        title=\"Stock Group\"\r\n                                        columns={columnCells('Stock_Group')}\r\n                                        isExpendable={true}\r\n                                        EnableSerialNumber\r\n                                        expandableComp={({ row }) => (\r\n                                            <FilterableTable\r\n                                                dataArray={row.groupedData}\r\n                                                title=\"Grade Item Group\"\r\n                                                columns={columnCells('Grade_Item_Group')}\r\n                                                isExpendable={true}\r\n                                                EnableSerialNumber\r\n                                                expandableComp={({ row }) => (\r\n                                                    <FilterableTable\r\n                                                        dataArray={row.groupedData}\r\n                                                        title=\"Group Name\"\r\n                                                        columns={columnCells('Group_Name')}\r\n                                                        isExpendable={true}\r\n                                                        EnableSerialNumber\r\n                                                        expandableComp={({ row }) => (\r\n                                                            <FilterableTable\r\n                                                                dataArray={row.groupedData}\r\n                                                                title=\"Stock Item Name\"\r\n                                                                columns={[\r\n                                                                    {\r\n                                                                        Field_Name: 'stock_item_name',\r\n                                                                        ColumnHeader: 'Stock Item Name',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bags',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bal_Act_Qty',\r\n                                                                        ColumnHeader: 'Balance Quantity',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'godown_name',\r\n                                                                        ColumnHeader: 'Godown',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                ]}\r\n                                                                EnableSerialNumber\r\n                                                                tableMaxHeight={2000}\r\n                                                                disablePagination={true}\r\n                                                            />\r\n                                                        )}\r\n                                                        tableMaxHeight={3000}\r\n                                                        disablePagination={true}\r\n\r\n                                                    />\r\n                                                )}\r\n                                                tableMaxHeight={4000}\r\n                                                disablePagination={true}\r\n                                            />\r\n                                        )}\r\n                                        tableMaxHeight={5000}\r\n                                        disablePagination={true}\r\n                                    />\r\n                                </TabPanel>\r\n\r\n                                <TabPanel value={'List'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={(Object.keys(filters).length > 0) ? filteredData : reportData}\r\n                                        columns={columns}\r\n                                    />\r\n                                </TabPanel>\r\n                            </TabContext>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                            <h5 className=\"d-flex justify-content-between px-2\">\r\n                                <span>Filters</span>\r\n                                <span>\r\n                                    <Tooltip title='Clear Filters'>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => setFilters({})}\r\n                                        >\r\n                                            <FilterAltOff />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </span>\r\n                            </h5>\r\n                            <div className=\"border rounded-3 \">\r\n                                {columns.map((column, ke) => (\r\n                                    <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                        <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                        {renderFilter(column)}\r\n                                    </div>\r\n                                ))}\r\n                                <br />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </CardContent>\r\n\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {columns.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveStockReport;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","tdClass","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdIndex","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","CheckBoxOutlineBlank","checkedIcon","CheckBox","loadingOn","loadingOff","reportData","setReportData","groupedData","setGroupedData","apiFilters","setAPIFilters","Fromdata","getPreviousDate","Todate","ISOString","view","filters","setFilters","dialog","setDialog","filteredData","setFilteredData","useEffect","applyFilters","handleFilterChange","prevFilters","filtered","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","_item$column$Field_Na","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","fetchLink","address","then","success","catch","finally","async","dataToUse","keys","grouped_Stock_Group","groupData","aggregatedStockGroup","_b$Stock_Group","Stock_Group","localeCompare","stockGroup","BagsTotal","calcTotal","BalQtyTotal","aggregatedGradeItemGroup","_stockGroup$groupedDa","gradeItemGroup","aggregatedGroupName","_stockGroup$groupedDa2","_stockGroup$groupedDa3","_gradeItemGroup$group","grouopName","setTimeout","runLoading","columnCells","mainKey","FilterAlt","CardContent","TabContext","Box","borderBottom","borderColor","TabList","indicatorColor","n","variant","scrollButtons","allowScrollButtonsMobile","Tab","TabPanel","px","py","_ref5","FilterAltOff","Dialog","maxWidth","fullWidth","DialogContent","DialogActions","Button"],"sourceRoot":""}
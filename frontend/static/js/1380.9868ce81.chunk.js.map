{"version":3,"file":"static/js/1380.9868ce81.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ArrowLeft.js","Pages/Sales/SaleOrder/column.js","Pages/Sales/SaleOrder/importFromPos.jsx","Pages/Sales/SaleOrder/saleOrderCreation.jsx","../node_modules/@mui/icons-material/esm/Clear.js","../node_modules/@mui/icons-material/esm/Save.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m14 7-5 5 5 5z\"\n}), 'ArrowLeft');","import { getSessionUser, ISOString } from \"../../../Components/functions\"\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nexport const saleOrderGeneralInfo = {\r\n    So_Id: '',\r\n    So_Inv_No: '',\r\n    So_Year: '',\r\n    So_Branch_Inv_Id: '',\r\n\r\n    So_Date: ISOString(),\r\n    Retailer_Id: '',\r\n    Sales_Person_Id: '',\r\n    Branch_Id: '',\r\n    VoucherType: '',\r\n    GST_Inclusive: 2,\r\n    IS_IGST: 0,\r\n    Narration: '',\r\n    isConverted: '',\r\n    Cancel_status: '',\r\n    \r\n    CSGT_Total: 0,\r\n    SGST_Total: 0,\r\n    IGST_Total: 0,\r\n    Round_off: 0,\r\n    Total_Before_Tax: 0,\r\n    Total_Tax: 0,\r\n    Total_Invoice_value: 0,\r\n\r\n    Created_by: storage?.UserId,\r\n    Altered_by: storage?.UserId,\r\n    Approved_By: '',\r\n    Approve_Status: '',\r\n\r\n    Created_on: '',\r\n    Alterd_on: '',\r\n    Trans_Type: '',\r\n    Alter_Id: '',\r\n}\r\n\r\nexport const saleOrderStockInfo = {\r\n    // front-end purpose\r\n    BrandID: '',\r\n    Brand: '',\r\n    GroupID: '',\r\n    Group: '',\r\n\r\n    // backend generated\r\n    SO_St_Id: '',\r\n    So_Date: '',\r\n    Sales_Order_Id: '',\r\n    S_No: '',\r\n\r\n    // from entry\r\n    Pre_Id: '',\r\n    Item_Id: '',\r\n    Item_Rate: 0,\r\n    Bill_Qty: 0,\r\n    Amount: 0,\r\n    HSN_Code: '',\r\n    Unit_Id: '',\r\n    Unit_Name: '',\r\n\r\n    // others\r\n    Free_Qty: 0,\r\n    Total_Qty: 0,\r\n\r\n    // from product master  \r\n    Taxble: 0, // 0 means tax not applicable\r\n    Taxable_Rate: 0,\r\n    Taxable_Amount: 0,\r\n    Tax_Rate: 0,\r\n    Cgst: 0,\r\n    Cgst_Amo: 0,\r\n    Sgst: 0,\r\n    Sgst_Amo: 0,\r\n    Igst: 0,\r\n    Igst_Amo: 0,\r\n    Final_Amo: 0,\r\n\r\n    // generated from server\r\n    Created_on: '',\r\n}","import { useEffect, useState } from \"react\";\r\nimport { checkIsNumber, Division, isEqualNumber, ISOString, LocalDate, Multiplication, toNumber } from \"../../../Components/functions\";\r\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Done } from \"@mui/icons-material\";\r\nimport { saleOrderStockInfo } from \"./column\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\n\r\n\r\nconst ImportFromPOS = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    open,\r\n    onClose,\r\n    retailer,\r\n    children,\r\n    selectedItems,\r\n    setSelectedItems,\r\n    products = [],\r\n    GST_Inclusive,\r\n    IS_IGST\r\n}) => {\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(retailer) && open) {\r\n            const { Fromdate, Todate } = filters;\r\n            if (loadingOn) loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder/importPosOrders?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${retailer}`\r\n            }).then(data => {\r\n                if (data.success) setSaleOrders(data.data);\r\n                else setSaleOrders([]);\r\n            }).catch(e => console.error(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }, [filters.search])\r\n\r\n    const changeSelectedItems = (itemDetail, deleteRow = false) => {\r\n        setSelectedItems(prev => {\r\n            const preItems = prev.filter(o => !isEqualNumber(o?.Pre_Id, itemDetail.Pre_Id));\r\n\r\n            let tempArray;\r\n            if (deleteRow) {\r\n                tempArray = preItems;\r\n            } else {\r\n                const currentOrder = saleOrders.filter(sale => isEqualNumber(sale.Pre_Id, itemDetail.Pre_Id))\r\n                const reStruc = currentOrder.map(cur => (\r\n                    Object.fromEntries(\r\n                        Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n\r\n                            const productMaster = findProductDetails(cur.Item_Id);\r\n                            const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                            const isTaxable = gstPercentage > 0;\r\n\r\n                            const { Item_Rate, Bill_Qty, Tonnage, PackValue } = cur;\r\n                            const Amount = Multiplication(Item_Rate, Multiplication(Bill_Qty, PackValue))\r\n\r\n                            const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                            const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                            const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                            const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                            const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                            const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                            const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                            switch (key) {\r\n                                case 'Pre_Id': return [key, cur['Pre_Id'] ?? value];\r\n                                case 'Item_Id': return [key, cur['Item_Id'] ?? value];\r\n                                case 'Item_Rate': return [key, toNumber(Item_Rate)];\r\n                                case 'Bill_Qty': return [key, toNumber(Tonnage)];\r\n                                case 'Amount': return [key, Amount];\r\n                                case 'Unit_Id': return [key, cur['Unit_Id'] ?? value];\r\n                                case 'Unit_Name': return [key, cur['Units'] ?? value];\r\n                                case 'HSN_Code': return [key, productMaster.HSN_Code ?? value];\r\n\r\n                                case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                                case 'Total_Qty': return [key, toNumber(Tonnage)]\r\n                                case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                                case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                                case 'Tax_Rate': return [key, gstPercentage]\r\n                                case 'Cgst':\r\n                                case 'Sgst': return [key, cgstPer ?? 0]\r\n                                case 'Cgst_Amo':\r\n                                case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                                case 'Igst': return [key, igstPer ?? 0]\r\n                                case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                                case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                                default: return [key, value]\r\n                            }\r\n                        })\r\n                    )\r\n                ))\r\n                tempArray = [...preItems, ...reStruc];\r\n            }\r\n            return tempArray;\r\n        });\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        if (onClose) onClose();\r\n        setSaleOrders([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle>\r\n                    <div className=\"d-flex flex-wrap align-items-center \">\r\n                        <span className=\"flex-grow-1\">Import from POS</span>\r\n                        <IconButton\r\n                            onClick={closeDialog}\r\n                            color='success'\r\n                        >\r\n                            <Done className=\"fa-20\" />\r\n                        </IconButton>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        setFilters(pre => ({ ...pre, search: !pre.search }))\r\n                    }}>\r\n                        <div className=\"d-flex flex-wrap align-items-end\">\r\n                            <div>\r\n                                <label className='d-block ms-2'>From Date</label>\r\n                                <input\r\n                                    className=\"cus-inpt p-2 w-auto\"\r\n                                    type=\"date\"\r\n                                    value={filters?.Fromdate}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label className='d-block ms-2'>To Date</label>\r\n                                <input\r\n                                    className=\"cus-inpt p-2 w-auto ms-2\"\r\n                                    type=\"date\"\r\n                                    min={filters.Fromdate}\r\n                                    value={filters?.Todate}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                className=\"ms-2\"\r\n                                type=\"submit\"\r\n                            >search</Button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div className=\"table-responsive mt-3\">\r\n                        <table className=\"table table-bordered fa-13\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {['Sno', '#', 'Item', 'Qty', 'Pack', 'Rate', 'Amount', 'Order ID', 'Date', 'Invoice Value'].map((col, ind) => (\r\n                                        <th key={ind} >{col}</th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {saleOrders.filter(\r\n                                    sale => isEqualNumber(sale.Custome_Id, retailer)\r\n                                ).map((sale, saleInd) => (\r\n                                    <tr key={saleInd}>\r\n                                        <td>{saleInd + 1}</td>\r\n                                        <td>\r\n                                            {(() => {\r\n                                                const isChecked = selectedItems.findIndex(o =>\r\n                                                    isEqualNumber(o?.Pre_Id, sale.Pre_Id)\r\n                                                ) !== -1;\r\n\r\n                                                return (\r\n                                                    <div>\r\n                                                        <input\r\n                                                            className=\"form-check-input shadow-none pointer\"\r\n                                                            style={{ padding: '0.7em' }}\r\n                                                            type=\"checkbox\"\r\n                                                            checked={isChecked}\r\n                                                            onChange={() => {\r\n                                                                if (isChecked) changeSelectedItems(sale, true)\r\n                                                                else changeSelectedItems(sale)\r\n                                                            }}\r\n                                                        />\r\n                                                    </div>\r\n                                                )\r\n                                            })()}\r\n                                        </td>\r\n                                        <td>{sale?.Product_Name}</td>\r\n                                        <td>{sale?.Bill_Qty}</td>\r\n                                        <td>{sale?.Tonnage}</td>\r\n                                        <td>{sale?.Item_Rate}</td>\r\n                                        <td>{sale?.Amount}</td>\r\n                                        <td>{sale?.Pre_Id}</td>\r\n                                        <td>{LocalDate(sale?.Pre_Date)}</td>\r\n                                        <td>{sale?.Total_Invoice_value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImportFromPOS;","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, IconButton, CardContent, Card } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    NumberFormat, numberToWords,\r\n    RoundNumber, Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber\r\n} from \"../../../Components/functions\";\r\nimport { Add, ArrowLeft, Clear, Delete, Download, Edit, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { saleOrderGeneralInfo, saleOrderStockInfo } from \"./column\";\r\nimport ImportFromPOS from \"./importFromPos\";\r\nimport AddItemToSaleOrderCart from \"./addItemToCart\";\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SaleOrderCreation = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const editValues = location.state;\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        salesPerson: [],\r\n        brand: [],\r\n    });\r\n\r\n    const [orderDetails, setOrderDetails] = useState(saleOrderGeneralInfo)\r\n    const [orderProducts, setOrderProducts] = useState([]);\r\n\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n    const [addProductDialog, setAddProductDialog] = useState(false);\r\n    const [importPosDialog, setImportPosDialog] = useState(false);\r\n\r\n    const isInclusive = isEqualNumber(orderDetails.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(orderDetails.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(orderDetails.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(editValues) &&\r\n            Array.isArray(editValues?.Products_List)\r\n        ) {\r\n            const { Products_List } = editValues;\r\n            setOrderDetails(\r\n                Object.fromEntries(\r\n                    Object.entries(saleOrderGeneralInfo).map(([key, value]) => {\r\n                        if (key === 'So_Date') return [key, editValues[key] ? ISOString(editValues[key]) : value]\r\n                        return [key, editValues[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setOrderProducts(\r\n                Products_List.map(item => Object.fromEntries(\r\n                    Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [editValues])\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    salesPersonResponse,\r\n                    companyResponse,\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `masters/users/salesPerson/dropDown` }),\r\n                    fetchLink({ address: `masters/company?Company_id=${storage?.Company_id}` }),\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const salesPersonData = (salesPersonResponse.success ? salesPersonResponse.data : []).sort(\r\n                    (a, b) => String(a?.Name).localeCompare(b?.Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    salesPerson: salesPersonData,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name'])\r\n                }));\r\n                setCompanyInfo((companyResponse.success && companyResponse?.data[0]) ? companyResponse?.data[0] : {})\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const clearValues = () => {\r\n        setOrderDetails(saleOrderGeneralInfo);\r\n        setOrderProducts([]);\r\n    }\r\n\r\n    const postSaleOrder = () => {\r\n        if (orderProducts?.length > 0 && orderDetails?.Retailer_Id) {\r\n            loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder`,\r\n                method: checkIsNumber(orderDetails?.So_Id) ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...orderDetails,\r\n                    Product_Array: orderProducts.filter(o => isGraterNumber(o?.Bill_Qty, 0))\r\n                }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    toast.success(data?.message);\r\n                    setOrderDetails(saleOrderGeneralInfo);\r\n                    setOrderProducts([])\r\n                } else {\r\n                    toast.error(data?.message)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => loadingOff())\r\n\r\n        } else {\r\n            if (orderProducts.length <= 0) {\r\n                return toast.error('Enter any one product quantity')\r\n            }\r\n            if (!orderDetails?.Retailer_Id) {\r\n                return toast.error('Select Retailer')\r\n            }\r\n        }\r\n    }\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0)\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    const totalValueBeforeTax = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return {\r\n                TotalValue: Addition(acc.TotalValue, Amount),\r\n                TotalTax: 0\r\n            }\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n            const TotalValue = Addition(acc.TotalValue, taxInfo.without_tax);\r\n            const TotalTax = Addition(acc.TotalTax, taxInfo.tax_amount);\r\n\r\n            return {\r\n                TotalValue, TotalTax\r\n            };\r\n        }, {\r\n            TotalValue: 0,\r\n            TotalTax: 0\r\n        });\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    useEffect(() => {\r\n        setOrderProducts(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        saleOrderStockInfo,\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ])\r\n\r\n    return (\r\n        <>\r\n            <AddItemToSaleOrderCart\r\n                orderProducts={orderProducts}\r\n                setOrderProducts={setOrderProducts}\r\n                open={addProductDialog}\r\n                onClose={() => {\r\n                    setAddProductDialog(false);\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                GST_Inclusive={orderDetails.GST_Inclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={saleOrderStockInfo}\r\n            />\r\n\r\n            <Card>\r\n\r\n                <div className=\"d-flex align-items-center flex-wrap p-2\">\r\n                    <h5 className=\"flex-grow-1 ps-2\">Create Order</h5>\r\n                    <Button\r\n                        variant='outlined' sx={{ ml: 1 }}\r\n                        startIcon={<ArrowLeft />}\r\n                        onClick={() => navigate('/erp/sales/saleOrder')}\r\n                    >\r\n                        {'Back'}\r\n                    </Button>\r\n                    <Button\r\n                        variant='outlined' sx={{ ml: 1 }}\r\n                        startIcon={<Clear />}\r\n                        onClick={clearValues}\r\n                    >\r\n                        {'Clear'}\r\n                    </Button>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <div className=\"pt-0\">\r\n                        {/* CompnayInfo  */}\r\n                        <div className=\"p-3 rounded-3 mb-3 shadow-sm\">\r\n                            <h5 className=\"border-bottom\">From:</h5>\r\n\r\n                            <div className=\"row\">\r\n\r\n                                <div className=\"col-lg-4 col-md-6\">\r\n                                    <table className=\"table table-borderless m-0 fa-13\">\r\n                                        <tbody>\r\n                                            <tr><td>\r\n                                                <span className=\"me-2\">Company: </span>\r\n                                                <span>{companyInfo?.Company_Name}</span>\r\n                                            </td></tr>\r\n                                            <tr><td>\r\n                                                <span className=\"me-2\">Address: </span>\r\n                                                <span>{companyInfo?.Company_Address}</span>\r\n                                            </td></tr>\r\n                                            <tr><td>\r\n                                                <span className=\"me-2\">Phone: </span>\r\n                                                <span>{companyInfo?.Telephone_Number}</span>\r\n                                            </td></tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                                <div className=\"col-lg-4 col-md-6\">\r\n                                    <table className=\"table table-borderless fa-13 m-0\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Date:</td>\r\n                                                <td>\r\n                                                    <input\r\n                                                        type=\"date\"\r\n                                                        value={orderDetails?.So_Date ? ISOString(orderDetails?.So_Date) : ''}\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, So_Date: e.target.value })}\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Invoice Type:</td>\r\n                                                <td>\r\n                                                    <select\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, GST_Inclusive: Number(e.target.value) })}\r\n                                                        value={orderDetails.GST_Inclusive}\r\n                                                    >\r\n                                                        <option value={1}>Inclusive Tax</option>\r\n                                                        <option value={0}>Exclusive Tax</option>\r\n                                                        <option value={2}>Not Taxable</option>\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Tax Type:</td>\r\n                                                <td>\r\n                                                    <select\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, IS_IGST: Number(e.target.value) })}\r\n                                                        value={orderDetails.IS_IGST}\r\n                                                    >\r\n                                                        <option value='0'>GST</option>\r\n                                                        <option value='1'>IGST</option>\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                                <div className=\"col-lg-4 col-md-6\">\r\n                                    <table className=\"table table-borderless fa-13 m-0\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Sales Person:</td>\r\n                                                <td>\r\n                                                    <select\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, Sales_Person_Id: Number(e.target.value) })}\r\n                                                        value={orderDetails.Sales_Person_Id}\r\n                                                    >\r\n                                                        <option value='' disabled>select sales person</option>\r\n                                                        <option value={storage?.UserId}>{storage?.Name}</option>\r\n                                                        {baseData.salesPerson?.map((vou, ind) => (\r\n                                                            <option value={vou.UserId} key={ind}>{vou.Name}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Voucher Type:</td>\r\n                                                <td>\r\n                                                    <select\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, VoucherType: Number(e.target.value) })}\r\n                                                        value={orderDetails.VoucherType}\r\n                                                    >\r\n                                                        <option value='' disabled>select voucher</option>\r\n                                                        {baseData.voucherType?.filter(vou => vou.Type === 'SALES').map((vou, ind) => (\r\n                                                            <option value={vou.Vocher_Type_Id} key={ind}>{vou.Voucher_Type}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Branch</td>\r\n                                                <td>\r\n                                                    <select\r\n                                                        className=\"cus-inpt p-1\"\r\n                                                        onChange={e => setOrderDetails({ ...orderDetails, Branch_Id: Number(e.target.value) })}\r\n                                                        value={orderDetails.Branch_Id}\r\n                                                    >\r\n                                                        <option value='' disabled>select Branch</option>\r\n                                                        {baseData.branch.map((branch, ind) => (\r\n                                                            <option value={branch.BranchId} key={ind}>{branch.BranchName}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Customer Info */}\r\n\r\n                        <div className=\"p-3 rounded-3 mb-3 shadow-sm\">\r\n                            <h5 className=\"border-bottom\">To:</h5>\r\n\r\n                            <div className=\"row \">\r\n\r\n                                <div className=\"col-md-6\">\r\n                                    <table className=\"table table-borderless\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Retailer Name:</td>\r\n                                                <td>\r\n                                                    <Select\r\n                                                        value={{ value: orderDetails?.Retailer_Id, label: orderDetails?.Retailer_Name }}\r\n                                                        onChange={(e) => {\r\n                                                            setOrderDetails({ ...orderDetails, Retailer_Id: e.value, Retailer_Name: e.label });\r\n                                                            setOrderProducts([]);\r\n                                                        }}\r\n                                                        options={[\r\n                                                            { value: '', label: 'select', isDisabled: true },\r\n                                                            ...baseData.retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                                        ]}\r\n                                                        styles={customSelectStyles}\r\n                                                        isSearchable={true}\r\n                                                        placeholder={\"Retailer Name\"}\r\n                                                        maxMenuHeight={200}\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Address:</td>\r\n                                                <td>{storage.Name}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Phone:</td>\r\n                                                <td>{ }</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                                <div className=\"col-md-6\">\r\n                                    <table className=\"table table-borderless\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Q-Pay:</td>\r\n                                                <td>{10}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Frequency Days:</td>\r\n                                                <td>{20}</td>\r\n                                            </tr>\r\n\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <FilterableTable\r\n                            title=\"Products\"\r\n                            ButtonArea={\r\n                                <>\r\n                                    {/* <AddItemToSaleOrderCart\r\n                                        orderProducts={orderProducts}\r\n                                        setOrderProducts={setOrderProducts}\r\n                                        open={addProductDialog}\r\n                                        onClose={() => setAddProductDialog(false)}\r\n                                        products={baseData.products}\r\n                                        brands={baseData.brand}\r\n                                        uom={baseData.uom}\r\n                                        GST_Inclusive={orderDetails.GST_Inclusive}\r\n                                        IS_IGST={IS_IGST}\r\n                                    >\r\n                                        <Button\r\n                                            onClick={() => setAddProductDialog(true)}\r\n                                            sx={{ ml: 1 }}\r\n                                            variant='outlined'\r\n                                            startIcon={<Add />}\r\n                                            disabled={\r\n                                                !checkIsNumber(orderDetails.Retailer_Id)\r\n                                                || (orderProducts.length > 0\r\n                                                    && orderProducts.some(pro => checkIsNumber(pro.Pre_Id)))\r\n                                            }\r\n                                        >Add Product</Button>\r\n                                    </AddItemToSaleOrderCart> */}\r\n\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            setSelectedProductToEdit(null); \r\n                                            setAddProductDialog(true);\r\n                                        }}\r\n                                        sx={{ ml: 1 }}\r\n                                        variant='outlined'\r\n                                        startIcon={<Add />}\r\n                                        disabled={\r\n                                            !checkIsNumber(orderDetails.Retailer_Id)\r\n                                            || (orderProducts.length > 0\r\n                                                && orderProducts.some(pro => checkIsNumber(pro.Pre_Id)))\r\n                                        }\r\n                                    >Add Product</Button>\r\n\r\n                                    <ImportFromPOS\r\n                                        loadingOn={loadingOn} loadingOff={loadingOff}\r\n                                        open={importPosDialog} onClose={() => setImportPosDialog(false)}\r\n                                        retailer={orderDetails?.Retailer_Id}\r\n                                        selectedItems={orderProducts} setSelectedItems={setOrderProducts}\r\n                                        products={baseData.products}\r\n                                        GST_Inclusive={orderDetails.GST_Inclusive}\r\n                                        IS_IGST={IS_IGST}\r\n                                    >\r\n                                        <Button\r\n                                            onClick={() => setImportPosDialog(true)}\r\n                                            disabled={\r\n                                                !checkIsNumber(orderDetails.Retailer_Id)\r\n                                                || (orderProducts.length > 0\r\n                                                    && orderProducts.some(pro => !checkIsNumber(pro.Pre_Id)))\r\n                                            }\r\n                                            sx={{ ml: 1 }}\r\n                                            variant='outlined'\r\n                                            startIcon={<Download />}\r\n                                        >Import pos</Button>\r\n                                    </ImportFromPOS>\r\n\r\n                                </>\r\n                            }\r\n                            dataArray={orderProducts}\r\n                            columns={[\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => findProductDetails(baseData.products, row?.Item_Id).Product_Name,\r\n                                    ColumnHeader: 'Product',\r\n                                    isVisible: 1,\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => findProductDetails(baseData.products, row?.Item_Id).Product_Name?.HSN_Code,\r\n                                    ColumnHeader: 'HSN Code',\r\n                                    isVisible: 1,\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row?.Bill_Qty + ' ' + (row?.Units ?? ''),\r\n                                    ColumnHeader: 'Quantity',\r\n                                    isVisible: 1,\r\n                                    align: 'center'\r\n                                },\r\n                                createCol('Item_Rate', 'number', 'Rate', 'right'),\r\n                                createCol('Taxable_Amount', 'number', 'Taxable Amount', 'right'),\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const percentage = findProductDetails(baseData.products, row?.Item_Id)?.Gst_P\r\n                                        const amount = toNumber(row?.Amount);\r\n                                        const taxDetails = calculateGSTDetails(amount, percentage, taxType);\r\n                                        // console.log({ percentage, amount, taxDetails, taxType })\r\n                                        return NumberFormat(taxDetails.tax_amount) + ' (' + taxDetails.tax_per + '%)'\r\n                                    },\r\n                                    ColumnHeader: 'Tax',\r\n                                    isVisible: 1,\r\n                                    align: 'right'\r\n                                },\r\n                                // createCol('Amount', 'number', 'Amount', 'right'),\r\n                                {\r\n                                    ColumnHeader: 'Amount',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const percentage = findProductDetails(baseData.products, row?.Item_Id)?.Gst_P\r\n                                        const amount = row.Amount ?? 0;\r\n                                        const tax = calculateGSTDetails(amount, percentage, taxType).tax_amount;\r\n                                        return NumberFormat(\r\n                                            isEqualNumber(orderDetails.GST_Inclusive, 1) ? amount : Addition(amount, tax)\r\n                                        )\r\n                                    },\r\n                                    isVisible: 1,\r\n                                    align: 'right'\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        return (\r\n                                            <>\r\n                                                <IconButton\r\n                                                    onClick={() => {\r\n                                                        setSelectedProductToEdit(row);\r\n                                                        setAddProductDialog(true);\r\n                                                    }}\r\n                                                    size=\"small\"\r\n                                                >\r\n                                                    <Edit />\r\n                                                </IconButton>\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        if (checkIsNumber(row?.Pre_Id)) {\r\n                                                            setOrderProducts(pre => pre.filter(o => !isEqualNumber(o?.Pre_Id, row?.Pre_Id)))\r\n                                                        } else {\r\n                                                            setOrderProducts(pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id)))\r\n                                                        }\r\n                                                    }}\r\n                                                    color='error'\r\n                                                >\r\n                                                    <Delete />\r\n                                                </IconButton>\r\n                                            </>\r\n                                        )\r\n                                    },\r\n                                    ColumnHeader: 'Action',\r\n                                    isVisible: 1,\r\n                                },\r\n                            ]}\r\n                            EnableSerialNumber\r\n                            CellSize=\"small\"\r\n                            disablePagination={true}\r\n                        />\r\n\r\n                        {/* invoice Gst and total  */}\r\n                        {orderProducts.length > 0 && (\r\n                            <div className=\"d-flex justify-content-end py-2\">\r\n                                <table className=\"table\">\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\" rowSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                                Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                            </td>\r\n                                            <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        {!isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                            <>\r\n                                                <tr>\r\n                                                    <td className=\"border p-2\">CGST</td>\r\n                                                    <td className=\"border p-2\">\r\n                                                        {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className=\"border p-2\">SGST</td>\r\n                                                    <td className=\"border p-2\">\r\n                                                        {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </>\r\n                                        ) : (\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">IGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        )}\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">Round Off</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {RoundNumber(Math.round(Total_Invoice_value) - Total_Invoice_value)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">Total</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(Math.round(Total_Invoice_value))}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        )}\r\n\r\n                        <p className=\"fa-15 mt-3 m-0\">Narration</p>\r\n                        <textarea\r\n                            className=\"cus-inpt \"\r\n                            value={orderDetails.Narration}\r\n                            onChange={e => setOrderDetails(pre => ({ ...pre, Narration: e.target.value }))}\r\n                        />\r\n\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <Button\r\n                                onClick={postSaleOrder}\r\n                                sx={{ ml: 1 }}\r\n                                variant='outlined'\r\n                                color='success'\r\n                                startIcon={<Save />}\r\n                                disabled={orderProducts?.length === 0 || !orderDetails?.Retailer_Id}\r\n                            >Save</Button>\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SaleOrderCreation;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');"],"names":["createSvgIcon","_jsx","d","storage","getSessionUser","user","saleOrderGeneralInfo","So_Id","So_Inv_No","So_Year","So_Branch_Inv_Id","So_Date","ISOString","Retailer_Id","Sales_Person_Id","Branch_Id","VoucherType","GST_Inclusive","IS_IGST","Narration","isConverted","Cancel_status","CSGT_Total","SGST_Total","IGST_Total","Round_off","Total_Before_Tax","Total_Tax","Total_Invoice_value","Created_by","UserId","Altered_by","Approved_By","Approve_Status","Created_on","Alterd_on","Trans_Type","Alter_Id","saleOrderStockInfo","BrandID","Brand","GroupID","Group","SO_St_Id","Sales_Order_Id","S_No","Pre_Id","Item_Id","Item_Rate","Bill_Qty","Amount","HSN_Code","Unit_Id","Unit_Name","Free_Qty","Total_Qty","Taxble","Taxable_Rate","Taxable_Amount","Tax_Rate","Cgst","Cgst_Amo","Sgst","Sgst_Amo","Igst","Igst_Amo","Final_Amo","_ref","loadingOn","loadingOff","open","onClose","retailer","children","selectedItems","setSelectedItems","products","isInclusive","isEqualNumber","isNotTaxableBill","saleOrders","setSaleOrders","useState","filters","setFilters","Fromdate","Todate","search","useEffect","checkIsNumber","fetchLink","address","concat","then","data","success","catch","e","console","error","finally","changeSelectedItems","itemDetail","deleteRow","arguments","length","undefined","prev","preItems","filter","o","tempArray","reStruc","sale","map","cur","Object","fromEntries","entries","_ref2","_cur$Pre_Id","_cur$Item_Id","_cur$Unit_Id","_cur$Units","_productMaster$HSN_Co","key","value","productMaster","productid","_products$find","find","obj","Product_Id","findProductDetails","gstPercentage","Igst_P","Gst_P","isTaxable","Tonnage","PackValue","Multiplication","taxType","itemRateGst","calculateGSTDetails","gstInfo","cgstPer","cgst_per","igstPer","igst_per","cgst_amount","igst_amount","toNumber","base_amount","with_tax","closeDialog","_jsxs","_Fragment","Dialog","fullScreen","DialogTitle","className","IconButton","onClick","color","Done","DialogContent","onSubmit","preventDefault","pre","_objectSpread","type","onChange","target","required","min","Button","variant","col","ind","Custome_Id","saleInd","isChecked","findIndex","style","padding","checked","Product_Name","LocalDate","Pre_Date","_arr$find","_baseData$salesPerson","_baseData$voucherType","navigate","useNavigate","editValues","useLocation","state","baseData","setBaseData","branch","retailers","voucherType","uom","staff","staffType","salesPerson","brand","orderDetails","setOrderDetails","orderProducts","setOrderProducts","companyInfo","setCompanyInfo","selectedProductToEdit","setSelectedProductToEdit","addProductDialog","setAddProductDialog","importPosDialog","setImportPosDialog","isValidObject","Array","isArray","Products_List","_editValues$key","item","_ref3","_item$key","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","salesPersonResponse","companyResponse","Promise","all","Company_id","branchData","sort","a","b","String","BranchName","localeCompare","productsData","retailersData","Retailer_Name","Voucher_Type","uomData","Units","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","salesPersonData","Name","getUniqueData","fetchData","useMemo","reduce","acc","RoundNumber","Addition","product","totalValueBeforeTax","TotalValue","TotalTax","taxInfo","without_tax","tax_amount","_ref4","AddItemToSaleOrderCart","brands","initialValue","Card","sx","ml","startIcon","ArrowLeft","Clear","clearValues","CardContent","Company_Name","Company_Address","Telephone_Number","Number","disabled","vou","Type","Vocher_Type_Id","BranchId","Select","label","options","isDisabled","styles","customSelectStyles","isSearchable","placeholder","maxMenuHeight","FilterableTable","title","ButtonArea","Add","some","pro","ImportFromPOS","Download","dataArray","columns","isCustomCell","Cell","_ref5","row","ColumnHeader","isVisible","_ref6","_findProductDetails$P","_ref7","_row$Units","align","createCol","_ref8","_findProductDetails","percentage","amount","taxDetails","NumberFormat","tax_per","_ref9","_findProductDetails2","_row$Amount","tax","_ref10","size","Edit","Delete","EnableSerialNumber","CellSize","disablePagination","rowSpan","numberToWords","parseInt","Math","round","postSaleOrder","method","bodyData","Product_Array","isGraterNumber","toast","message","Save"],"sourceRoot":""}
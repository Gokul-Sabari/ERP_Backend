{"version":3,"file":"static/js/6616.7b7a6032.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Sales/TripMaster/tableColumns.js","Pages/Sales/TripMaster/DeliveryTripSheetAdd.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { ISOString } from \"../../../Components/functions\"\r\n\r\nexport const tripMasterDetails = {\r\n    Trip_Id: '',\r\n    Challan_No: '',\r\n    Branch_Id: '',\r\n    Trip_Date: ISOString(),\r\n    Vehicle_No: '',\r\n    StartTime: '',\r\n    EndTime: '',\r\n    Trip_No: '',\r\n    Trip_ST_KM: '',\r\n    Trip_EN_KM: '',\r\n    Trip_Tot_Kms: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n}\r\n\r\nexport const tripDetailsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    STJ_Id: '',\r\n    Batch_No: '',\r\n    Journal_no: '',\r\n    From_Location: '',\r\n    To_Location: '',\r\n    S_No: '',\r\n    Reason: '',\r\n    Product_Id: '',\r\n    HSN_Code: '',\r\n    QTY: '',\r\n    KGS: '',\r\n    GST_Inclusive: '',\r\n    IS_IGST: '',\r\n    Gst_Rate: '',\r\n    Gst_P: '',\r\n    Cgst_P: '',\r\n    Sgst_P: '',\r\n    Igst_P: '',\r\n    Taxable_Value: '',\r\n    Round_off: '',\r\n    Total_Value: '',\r\n    Trip_From: '',\r\n    Party_And_Branch_Id: '',\r\n    Transporter_Id: '',\r\n    Dispatch_Date: '',\r\n    Delivery_Date: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n}\r\n\r\nexport const tripStaffsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    Involved_Emp_Id: '',\r\n    Cost_Center_Type_Id: '',\r\n    Emp_Name: '',\r\n}","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Addition, checkIsNumber, combineDateTime, extractHHMM, isEqualNumber, ISOString, isValidDate, isValidObject, Subraction } from \"../../../Components/functions\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Close, Delete, Search } from \"@mui/icons-material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { tripMasterDetails, tripStaffsColumns } from './tableColumns'\r\nimport { toast } from 'react-toastify'\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TripSheetGodownSearch = ({ loadingOn, loadingOff }) => {\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n\r\n    const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const [filters, setFilters] = useState({\r\n        FromGodown: '',\r\n        FromGodownName: 'Select From Location',\r\n        ToGodown: '',\r\n        ToGodownName: 'Select To Location',\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false,\r\n        addItemDialog: false,\r\n    });\r\n\r\n    const [transactionData, setTransactionData] = useState([]);\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [costCenter, setCostCenter] = useState([]);\r\n    const [costCenterCategory, setCostCenterCategory] = useState([])\r\n    const [branch, setBranch] = useState([]);\r\n    const [tripSheetInfo, setTripSheetInfo] = useState(tripMasterDetails);\r\n    const [staffInvolvedList, setStaffInvolvedList] = useState([]);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    staffResponse,\r\n                    staffCategory\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` })\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n\r\n                setBranch(branchData)\r\n                setProducts(productsData);\r\n\r\n                setCostCenter(staffData);\r\n                setCostCenterCategory(staffCategoryData)\r\n\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setDeliveryPersonList(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    }, [])\r\n\r\n\r\n    const handleDeliveryPersonChange = (selectedOption) => {\r\n\r\n        setDeliveryPerson(selectedOption ? { UserId: selectedOption.value, Name: selectedOption.label } : null);\r\n    };\r\n    useEffect(() => {\r\n\r\n        const productsArray = stateDetails?.Product_Array;\r\n        const employeesArray = stateDetails?.Employees_Involved;\r\n        if (\r\n            isValidObject(stateDetails)\r\n            && Array.isArray(productsArray)\r\n            && Array.isArray(employeesArray)\r\n        ) {\r\n            setTripSheetInfo(\r\n                Object.fromEntries(\r\n                    Object.entries(tripMasterDetails).map(([key, value]) => {\r\n                        if (key === 'Trip_Date') return [key, stateDetails[key] ? ISOString(stateDetails[key]) : value]\r\n                        if (\r\n                            key === 'StartTime' || key === 'EndTime'\r\n                        ) return [key, stateDetails[key] ? extractHHMM(stateDetails[key]) : value]\r\n                        return [key, stateDetails[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            // setSelectedItems(\r\n            //     productsArray.map(productsData => Object.fromEntries(\r\n            //         Object.entries(tripDetailsColumns).map(([key, value]) => {\r\n            //             if (\r\n            //                 key === 'Dispatch_Date' || key === 'Delivery_Date'\r\n            //             ) return [key, productsData[key] ? ISOString(productsData[key]) : value]\r\n            //             return [key, productsData[key] ?? value]\r\n            //         })\r\n            //     ))\r\n            // )\r\n            setSelectedItems(productsArray)\r\n            setStaffInvolvedList(\r\n                employeesArray.map(staffData => Object.fromEntries(\r\n                    Object.entries(tripStaffsColumns).map(([key, value]) => {\r\n                        return [key, staffData[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [stateDetails])\r\n\r\n    const searchTransaction = (e) => {\r\n        e.preventDefault();\r\n        const { Fromdate, Todate } = filters;\r\n\r\n        if (Fromdate && Todate) {\r\n            if (loadingOn) loadingOn();\r\n            setTransactionData([]);\r\n            fetchLink({\r\n                address: `sales/saleDelivery?Fromdate=${Fromdate}&Todate=${Todate}`\r\n            }).then(data => {\r\n                if (data.success) setTransactionData(data.data);\r\n            }).catch(e => console.log(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeItems = (itemDetail, deleteOption) => {\r\n        if (deleteOption) {\r\n            // Delete logic: Remove the item with the matching SO_St_Id\r\n            setSelectedItems(prev => {\r\n                return prev.map(item => ({\r\n                    ...item,\r\n                    Products_List: item.Products_List.filter(product => product.Do_Id !== itemDetail.Delivery_Order_Id)\r\n                })).filter(item => item.Products_List.length > 0); // Remove items with empty Products_List\r\n            });\r\n        } else {\r\n            // Add logic: Add the item back to selectedItems\r\n            setSelectedItems(prev => {\r\n                const preItems = prev.filter(item =>\r\n                    !isEqualNumber(item.Do_Id, itemDetail.Delivery_Order_Id)\r\n                );\r\n\r\n                const currentOrders = transactionData.filter(item =>\r\n                    isEqualNumber(item.So_Id, itemDetail.So_Id)\r\n                );\r\n\r\n                return preItems.concat(currentOrders);\r\n            });\r\n        }\r\n    };\r\n    const resetForm = () => {\r\n        setSelectedItems([]);\r\n        setStaffInvolvedList([]);\r\n        setTripSheetInfo(tripMasterDetails);\r\n        setTransactionData([]);\r\n    }\r\n\r\n    const saveTripSheet = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderTrip`,\r\n            method: checkIsNumber(tripSheetInfo?.Trip_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                ...tripSheetInfo,\r\n                StartTime: (\r\n                    tripSheetInfo.StartTime && tripSheetInfo.Trip_Date\r\n                ) ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.StartTime) : '',\r\n                EndTime: (\r\n                    tripSheetInfo.EndTime && tripSheetInfo.Trip_Date\r\n                ) ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.EndTime) : '',\r\n                Product_Array: selectedItems,\r\n                Delivery_Person_Id: deliveryPerson?.UserId,\r\n                EmployeesInvolved: staffInvolvedList.filter(staff => checkIsNumber(staff.Involved_Emp_Id) && checkIsNumber(staff.Cost_Center_Type_Id))\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                resetForm();\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(\r\n            e => console.log(e)\r\n        ).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card>\r\n\r\n                <div className=\"d-flex flex-wrap align-items-center border-bottom p-2\">\r\n                    <h5 className='flex-grow-1 m-0 ps-2'>Trip Sheet Creation</h5>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={selectedItems.length === 0 || !isValidDate(tripSheetInfo.Trip_Date)}\r\n                    >Save</Button>\r\n                </div>\r\n\r\n                <CardContent style={{ minHeight: 500 }}>\r\n\r\n                    <div className=\"row \">\r\n                        {/* Staff involved Info */}\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                                    <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        type=\"button\"\r\n                                        onClick={() => setStaffInvolvedList([...staffInvolvedList, { ...tripStaffsColumns }])}\r\n                                    >Add</Button>\r\n                                </div>\r\n                                <table className=\"table table-bordered\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"fa-13\">Sno</th>\r\n                                            <th className=\"fa-13\">Staff Name</th>\r\n                                            <th className=\"fa-13\">Category</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {staffInvolvedList.map((row, index) => (\r\n                                            <tr key={index}>\r\n                                                <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                                                <td className='fa-13 w-100 p-0'>\r\n                                                    <Select\r\n                                                        value={{\r\n                                                            value: row?.Involved_Emp_Id,\r\n                                                            label: row?.Emp_Name\r\n                                                        }}\r\n                                                        onChange={e => setStaffInvolvedList((prev) => {\r\n                                                            return prev.map((item, ind) => {\r\n                                                                if (isEqualNumber(ind, index)) {\r\n                                                                    const staff = costCenter.find(c => isEqualNumber(c.Cost_Center_Id, e.value))\r\n                                                                    return {\r\n                                                                        ...item,\r\n                                                                        Cost_Center_Type_Id:\r\n                                                                            checkIsNumber(item.Cost_Center_Type_Id)\r\n                                                                                ? item.Cost_Center_Type_Id\r\n                                                                                : checkIsNumber(staff.User_Type)\r\n                                                                                    ? staff.User_Type\r\n                                                                                    : 0,\r\n                                                                        Involved_Emp_Id: e.value,\r\n                                                                        Emp_Name: staff.Cost_Center_Name ?? ''\r\n                                                                    }\r\n                                                                }\r\n                                                                return item;\r\n                                                            });\r\n                                                        })}\r\n                                                        options={\r\n                                                            [...costCenter.filter(fil => (\r\n                                                                staffInvolvedList.findIndex(st => (\r\n                                                                    isEqualNumber(st.Cost_Center_Type_Id, fil.Cost_Center_Id)\r\n                                                                )) === -1 ? true : false\r\n                                                            ))].map(st => ({\r\n                                                                value: st.Cost_Center_Id,\r\n                                                                label: st.Cost_Center_Name\r\n                                                            }))\r\n                                                        }\r\n                                                        styles={customSelectStyles}\r\n                                                        isSearchable={true}\r\n                                                        placeholder={\"Select Staff\"}\r\n                                                    />\r\n                                                </td>\r\n                                                <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '110px' }}>\r\n                                                    <select\r\n                                                        value={row?.Cost_Center_Type_Id}\r\n                                                        onChange={e => setStaffInvolvedList((prev) => {\r\n                                                            return prev.map((item, ind) => {\r\n                                                                if (isEqualNumber(ind, index)) {\r\n                                                                    return {\r\n                                                                        ...item,\r\n                                                                        Cost_Center_Type_Id: e.target.value\r\n                                                                    }\r\n                                                                }\r\n                                                                return item;\r\n                                                            });\r\n                                                        })}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    >\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {costCenterCategory.map((st, sti) =>\r\n                                                            <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Stock Journal Details */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <div className=\"row\">\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Branch</label>\r\n                                        <select\r\n                                            value={tripSheetInfo.Branch_Id}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Branch_Id: e.target.value })}\r\n                                            placeholder={\"Select Branch\"}\r\n                                            className=\"cus-inpt mb-2 p-2\"\r\n                                        >\r\n                                            <option value=\"\" disabled>Select Branch</option>\r\n                                            {branch.map((br, bi) => (\r\n                                                <option key={bi} value={br.BranchId}>{br.BranchName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Date</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_Date}\r\n                                            type=\"date\"\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Trip_Date: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Vehicle No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Vehicle_No}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Vehicle_No: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-6 col-sm-12 p-2\">\r\n                                        <label>Delivery Person</label>\r\n                                        <Select\r\n                                            id=\"delivery-person\"\r\n                                            name=\"deliveryPerson\"\r\n                                            value={\r\n                                                deliveryPerson\r\n                                                    ? { value: deliveryPerson.UserId, label: deliveryPerson.Name }\r\n                                                    : null\r\n                                            }\r\n                                            onChange={handleDeliveryPersonChange}\r\n                                            options={[\r\n                                                { value: '', label: 'Select', isDisabled: true },\r\n                                                ...(deliveryPersonList || []).map((obj) => ({\r\n                                                    value: obj.UserId,\r\n                                                    label: obj.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable\r\n                                        // placeholder=\"Delivery Person Name\"\r\n                                        />\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_No}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Trip_No: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">Time</th>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">Distance</th>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <th className=\"fa-13 text-center\">Start</th>\r\n                                                <th className=\"fa-13 text-center\">End</th>\r\n                                                <th className=\"fa-13 text-center\">Start (Km)</th>\r\n                                                <th className=\"fa-13 text-center\">End (Km)</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type='time'\r\n                                                        onChange={e => setTripSheetInfo(pre => ({ ...pre, StartTime: e.target.value }))}\r\n                                                        value={tripSheetInfo?.StartTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type='time'\r\n                                                        onChange={e => setTripSheetInfo(pre => ({ ...pre, EndTime: e.target.value }))}\r\n                                                        value={tripSheetInfo?.EndTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={e => setTripSheetInfo(pre => ({\r\n                                                            ...pre,\r\n                                                            Trip_ST_KM: e.target.value,\r\n                                                            Trip_Tot_Kms: Subraction(pre.Trip_EN_KM ?? 0, e.target.value ?? 0)\r\n                                                        }))}\r\n                                                        value={tripSheetInfo?.Trip_ST_KM}\r\n                                                        min={0}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={e => setTripSheetInfo(pre => ({\r\n                                                            ...pre,\r\n                                                            Trip_EN_KM: e.target.value,\r\n                                                            Trip_Tot_Kms: Subraction(e.target.value ?? 0, pre.Trip_ST_KM ?? 0)\r\n                                                        }))}\r\n                                                        value={tripSheetInfo?.Trip_EN_KM}\r\n                                                        min={Addition(tripSheetInfo?.Trip_ST_KM, 1)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <FilterableTable\r\n                        dataArray={selectedItems?.map(item => item?.Products_List).flat()}\r\n                        expandableComp={ExpendableComponent}\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button onClick={() => setFilters(prev => ({ ...prev, addItemDialog: true }))}>Add</Button>\r\n                                <Button onClick={() => setSelectedItems([])} className=\"me-2\">Clear</Button>\r\n                            </>\r\n                        }\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        // title={`Selected Items: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.length, 0) ?? 0} QTY: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.reduce((sum, product) => sum + (product.Total_Qty ?? 0), 0), 0) ?? 0}`}\r\n                        maxHeightOption\r\n                        columns={[\r\n\r\n                            createCol('Product_Name', 'string', 'Product_Name'),\r\n                            // createCol('Sales_Order_Id', 'string', 'So_Id'),\r\n                            // createCol('So_Date', 'date', 'So_Date'),\r\n                            createCol('Taxable_Rate', 'number', 'Rate'),\r\n                            createCol('Bill_Qty', 'number', 'Bill_Qty'),\r\n                            createCol('Taxable_Amount', 'string', 'Before_Tax_Amount'),\r\n                            createCol('Amount', 'number', 'Total_Invoice_value'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: '#',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <IconButton\r\n                                        variant=\"contained\"\r\n                                        color=\"error\"\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            const filteredItems = selectedItems?.map(item => {\r\n                                                return {\r\n                                                    ...item,\r\n                                                    Products_List: item.Products_List.filter(o => o[(row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\")] !== row[(row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\")])\r\n                                                };\r\n                                            }).filter(item => item.Products_List.length > 0);\r\n\r\n                                            setSelectedItems(filteredItems);\r\n                                        }}\r\n\r\n                                    >\r\n                                        <Delete className=\"fa-20\" />\r\n                                    </IconButton>\r\n                                ),\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n\r\n                </CardContent>\r\n                <div className=\"border-top p-2 text-end\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={selectedItems.length === 0 || !isValidDate(tripSheetInfo.Trip_Date)}\r\n                    >Save</Button>\r\n                </div>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={filters.addItemDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}\r\n                maxWidth='lg' fullWidth fullScreen\r\n            >\r\n                <form onSubmit={searchTransaction}>\r\n                    <DialogTitle\r\n                        className=\"d-flex align-items-center\"\r\n                    >\r\n                        <span className=\"flex-grow-1\">Add Data</span>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            type=\"submit\" className=\"me-2\"\r\n\r\n                            startIcon={<Search />}\r\n                        >Search</Button>\r\n                        <IconButton\r\n                            size=\"small\" color=\"error\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}\r\n                        ><Close /></IconButton>\r\n                    </DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-bordered\">\r\n                                <tbody>\r\n                                    <tr>\r\n\r\n                                        <td className=\"text-center fa-13 fw-bold\" colSpan={2}>Date</td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"fa-13 text-center \">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Fromdate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                required\r\n                                                max={filters.Todate}\r\n                                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                            />\r\n                                        </td>\r\n\r\n                                        <td className=\"fa-13 text-center \">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Todate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                min={filters.Fromdate}\r\n                                                required\r\n                                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <FilterableTable\r\n                            dataArray={transactionData}\r\n                            disablePagination\r\n                            maxHeightOption\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: '#',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        // Check if this row is selected\r\n                                        const isChecked = selectedItems.some(o =>\r\n                                            isEqualNumber(o.So_Id, row.So_Id)\r\n                                        );\r\n\r\n                                        return (\r\n                                            <div>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none pointer\"\r\n                                                    style={{ padding: '0.7em' }}\r\n                                                    type=\"checkbox\"\r\n                                                    checked={isChecked}\r\n                                                    onChange={() => {\r\n\r\n                                                        if (isChecked) {\r\n                                                            changeItems(row, true);\r\n                                                        } else {\r\n                                                            changeItems(row);\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                },\r\n                                createCol('Retailer_Name', 'string', 'Retailer_Name'),\r\n                                createCol('Branch_Name', 'string', 'Branch_Name'),\r\n                                createCol('AreaName', 'string', 'AreaName'),\r\n                                createCol('So_Date', 'date', 'So_Date'),\r\n                                createCol('Total_Before_Tax', 'string', 'Total_Before_Tax'),\r\n                                createCol('Total_Tax', 'number', 'Total_Tax'),\r\n                                createCol('Total_Invoice_value', 'number', 'Total_Invoice_value'),\r\n                            ]}\r\n                        />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button type=\"button\" onClick={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}>close</Button>\r\n                    </DialogActions>\r\n\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TripSheetGodownSearch;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","tripMasterDetails","Trip_Id","Challan_No","Branch_Id","Trip_Date","ISOString","Vehicle_No","StartTime","EndTime","Trip_No","Trip_ST_KM","Trip_EN_KM","Trip_Tot_Kms","Created_By","Updated_By","tripStaffsColumns","Id","Involved_Emp_Id","Cost_Center_Type_Id","Emp_Name","loadingOn","loadingOff","stateDetails","useLocation","deliveryPerson","setDeliveryPerson","deliveryPersonList","setDeliveryPersonList","storage","JSON","parse","localStorage","getItem","filters","setFilters","FromGodown","FromGodownName","ToGodown","ToGodownName","Fromdate","Todate","search","addItemDialog","transactionData","setTransactionData","products","setProducts","costCenter","setCostCenter","costCenterCategory","setCostCenterCategory","branch","setBranch","tripSheetInfo","setTripSheetInfo","staffInvolvedList","setStaffInvolvedList","selectedItems","setSelectedItems","useEffect","async","branchResponse","productsResponse","staffResponse","staffCategory","Promise","all","fetchLink","branchData","success","BranchName","localeCompare","productsData","Product_Name","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","fetchData","Company_id","then","catch","productsArray","Product_Array","employeesArray","Employees_Involved","isValidObject","isArray","fromEntries","_stateDetails$key","extractHHMM","_staffData$key","changeItems","itemDetail","deleteOption","prev","item","Products_List","product","Do_Id","Delivery_Order_Id","preItems","currentOrders","So_Id","saveTripSheet","method","checkIsNumber","bodyData","combineDateTime","Delivery_Person_Id","UserId","EmployeesInvolved","staff","toast","message","finally","Button","isValidDate","CardContent","minHeight","Select","label","onChange","ind","_staff$Cost_Center_Na","c","Cost_Center_Id","User_Type","options","fil","findIndex","st","styles","isSearchable","placeholder","maxWidth","minWidth","sti","Cost_Category_Id","br","bi","BranchId","Name","selectedOption","isDisabled","obj","_pre$Trip_EN_KM","_e$target$value","Subraction","min","_e$target$value2","_pre$Trip_ST_KM","Addition","flat","Branch_Name","Sales_Person_Name","Round_off","GST_Inclusive","IS_IGST","Narration","_ref5","filteredItems","DO_St_Id","Delete","Dialog","fullWidth","fullScreen","onSubmit","preventDefault","DialogTitle","startIcon","Search","Close","DialogContent","required","max","_ref6","isChecked","some","padding","checked","DialogActions","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
{"version":3,"file":"static/js/5992.f6add8a6.chunk.js","mappings":"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","sources":["Pages/Payments/PaymentReport/itemExpences.jsx","../node_modules/@mui/icons-material/esm/ClearAll.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, groupData, ISOString, isValidDate, Subraction, toArray } from \"../../../Components/functions\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { ClearAll, FilterAlt, Search } from \"@mui/icons-material\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst ItemPaymentExpences = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n    const query = useQuery();\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, Fromdate: queryFilters.Fromdate, Todate: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        const Fromdate = (stateDetails?.Fromdate && isValidDate(stateDetails?.Fromdate)) ? ISOString(stateDetails?.Fromdate) : null;\r\n        const Todate = (stateDetails?.Todate && isValidDate(stateDetails?.Todate)) ? ISOString(stateDetails?.Todate) : null;\r\n        if (Fromdate && Todate) {\r\n            updateQueryString({ Fromdate, Todate });\r\n            setFilters(pre => ({\r\n                ...pre,\r\n                Fromdate: ISOString(stateDetails.Fromdate),\r\n                Todate: stateDetails.Todate\r\n            }));\r\n        }\r\n    }, [stateDetails])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `payment/reports/itemExpences?Fromdate=${filters.Fromdate}&Todate=${filters.Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(data.data);\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }, [filters.refresh])\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            filterDialog: false,\r\n        }));\r\n    }\r\n\r\n    const refreshData = () => {\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            refresh: !pre.refresh,\r\n        }));\r\n    }\r\n\r\n    const groupedReportData = useMemo(() => {\r\n        const Stock_Group = groupData(reportData, 'Stock_Group');\r\n\r\n        const aggregatedStockGroup = Stock_Group.sort(\r\n            (a, b) => String(a?.Stock_Group).localeCompare(String(b?.Stock_Group))\r\n        ).map(sg => ({\r\n            ...sg,\r\n            total_expense_value: toArray(sg?.groupedData).reduce((acc, item) => Addition(acc, item?.total_expense_value), 0),\r\n            payment_count: toArray(sg?.groupedData).reduce((acc, item) => Addition(acc, item?.payment_count), 0)\r\n        }));\r\n\r\n        console.log({ aggregatedStockGroup })\r\n\r\n        const Grade_Item_Group = aggregatedStockGroup.map(sg => ({\r\n            ...sg,\r\n            groupedData: groupData(sg.groupedData, 'Grade_Item_Group')\r\n        }));\r\n\r\n        console.log({ Grade_Item_Group });\r\n\r\n        const aggregatedGradeItemGroup = Grade_Item_Group.map(sg => ({\r\n            ...sg,\r\n            groupedData: toArray(sg.groupedData).sort(\r\n                (a, b) => String(a?.Grade_Item_Group).localeCompare(String(b?.Grade_Item_Group))\r\n            ).map(gig => ({\r\n                ...gig,\r\n                total_expense_value: toArray(gig?.groupedData).reduce((acc, item) => Addition(acc, item?.total_expense_value), 0),\r\n                payment_count: toArray(gig?.groupedData).reduce((acc, item) => Addition(acc, item?.payment_count), 0)\r\n            }))\r\n        }));\r\n\r\n        return aggregatedGradeItemGroup\r\n\r\n    }, [reportData]);\r\n\r\n    console.log(groupedReportData)\r\n\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Expences\"\r\n                headerFontSizePx={13}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedReportData}\r\n                EnableSerialNumber\r\n                disablePagination\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol('Stock_Group', 'string',),\r\n                    createCol('payment_count', 'number', 'payments'),\r\n                    createCol('total_expense_value', 'number', 'Total Enpence')\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={13}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Grade_Item_Group', 'string'),\r\n                            createCol('payment_count', 'number', 'payments'),\r\n                            createCol('total_expense_value', 'number', 'Total Enpence')\r\n                        ]}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (\r\n                            <FilterableTable\r\n                                headerFontSizePx={13}\r\n                                bodyFontSizePx={12}\r\n                                EnableSerialNumber\r\n                                dataArray={toArray(row?.groupedData)}\r\n                                columns={[\r\n                                    createCol('Product_Name', 'string', 'Item'),\r\n                                    createCol('payment_count', 'number', 'payments'),\r\n                                    createCol('total_expense_value', 'number', 'Total Enpence')\r\n                                ]}\r\n                                disablePagination\r\n                            />\r\n                        )}\r\n                        disablePagination\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                {/* from date */}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* to date */}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex align-items-center justify-content-between\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                            setFilters(pre => ({\r\n                                ...pre,\r\n                                ...defaultFilters\r\n                            }))\r\n                        }}\r\n                        startIcon={<ClearAll />}\r\n                    >clear</Button>\r\n                    <span>\r\n                        <Button onClick={closeDialog}>close</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                closeDialog();\r\n                                const updatedFilters = {\r\n                                    Fromdate: filters?.Fromdate,\r\n                                    Todate: filters?.Todate\r\n                                };\r\n                                updateQueryString(updatedFilters);\r\n                                refreshData();\r\n                            }}\r\n                            startIcon={<Search />}\r\n                            variant=\"contained\"\r\n                        >Search</Button>\r\n                    </span>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemPaymentExpences;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 13h14v-2H5zm-2 4h14v-2H3zM7 7v2h14V7z\"\n}), 'ClearAll');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["defaultFilters","Fromdate","ISOString","Todate","_ref","loadingOn","loadingOff","reportData","setReportData","useState","filters","setFilters","refresh","filterDialog","navigate","useNavigate","location","useLocation","stateDetails","state","query","URLSearchParams","search","useEffect","queryFilters","get","isValidDate","pre","_objectSpread","updateQueryString","fetchLink","address","concat","then","data","success","catch","e","console","log","newFilters","params","toString","replace","closeDialog","groupedReportData","useMemo","aggregatedStockGroup","groupData","sort","a","b","String","Stock_Group","localeCompare","map","sg","total_expense_value","toArray","groupedData","reduce","acc","item","Addition","payment_count","Grade_Item_Group","gig","_jsxs","_Fragment","children","_jsx","FilterableTable","title","headerFontSizePx","bodyFontSizePx","dataArray","EnableSerialNumber","disablePagination","ButtonArea","IconButton","onClick","FilterAlt","columns","createCol","isExpendable","expandableComp","_ref2","row","_ref3","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","className","style","verticalAlign","type","value","onChange","target","DialogActions","Button","variant","startIcon","ClearAll","updatedFilters","Search","createSvgIcon","d"],"sourceRoot":""}
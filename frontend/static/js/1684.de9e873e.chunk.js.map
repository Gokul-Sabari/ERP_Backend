{"version":3,"file":"static/js/1684.de9e873e.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Attendance/fingerPrintAttendance.jsx","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n            ? '#E2ECF9'\r\n            : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    IconButton,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport {\r\n    ISOString,\r\n    isValidDate\r\n} from \"../../Components/functions\";\r\n// import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Search, Refresh } from \"@mui/icons-material\";\r\n// import { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    Chip,\r\n    Autocomplete,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as XLSX from 'xlsx';\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst AttendanceNewScreen = ({\r\n    loadingOn,\r\n    loadingOff\r\n}) => {\r\n\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const getCurrentMonthYear = () => {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n        return `${year}-${month}`;\r\n    };\r\n\r\n    const initialValue = {\r\n        From: getCurrentMonthYear(),\r\n        To: getCurrentMonthYear(),\r\n        EmpId: \"0\",\r\n        Name: \"ALL\",\r\n    };\r\n    const query = useQuery();\r\n\r\n    const defaultFilters = {\r\n        From: getCurrentMonthYear(),\r\n        To: getCurrentMonthYear()\r\n    }\r\n\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [viewMode, setViewMode] = useState('default');\r\n    const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const [attendanceData, setAttendanceData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n    const [employees, setEmployees] = useState([]);\r\n    const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n    const userTypeId = storage?.UserTypeId;\r\n    const parseData = storage;\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n    const [filter, setFilter] = useState(initialValue);\r\n    const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setDebouncedFilter(filter);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        const { From, EmpId } = debouncedFilter;\r\n        if (From && (EmpId || EmpId === 0)) {\r\n            fetchAttendanceData(From, EmpId);\r\n            fetchDropdownEmployees();\r\n        }\r\n\r\n    }, [debouncedFilter]);\r\n\r\n    const getDaysInMonth = (monthYear) => {\r\n        if (!monthYear) return 0;\r\n\r\n        const [year, month] = monthYear.split('-');\r\n\r\n        return new Date(year, month, 0).getDate();\r\n    };\r\n\r\n    const [filters, setFilters] = useState({\r\n        FromDate: new Date().toISOString().split('T')[0],\r\n        ToDate: new Date().toISOString().split('T')[0],\r\n        Cancel_status: 0,\r\n    });\r\n\r\n    const toggleExpand = (department) => {\r\n        if (expandedDepartment === department) {\r\n            setExpandedDepartment(null);\r\n        } else {\r\n            setExpandedDepartment(department);\r\n        }\r\n    };\r\n    const [departments, setDepartments] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const Add_Rights = contextObj?.Add_Rights;\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const fromDate = filters.FromDate || today;\r\n        const toDate = filters.ToDate || today;\r\n\r\n        fetchLink({\r\n            address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSaleOrders(data?.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    }, [reload]);\r\n\r\n    const handleFromChange = (e) => {\r\n        const getDaysInMonth = (monthYear) => {\r\n            if (!monthYear) return 0;\r\n\r\n            const [year, month] = monthYear.split('-');\r\n\r\n            return new Date(year, month, 0).getDate();\r\n        };\r\n        const selectedMonth = e.target.value;\r\n        const [year, month] = selectedMonth.split(\"-\");\r\n        const startDate = `${year}-${month}-01`;\r\n        const dayCount = getDaysInMonth(`${year}-${month}`);\r\n        const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n        setFilter({\r\n            From: startDate,\r\n            To: endDate,\r\n            EmpId: filter.EmpId || 0,\r\n            Name: filter?.Name,\r\n        });\r\n    };\r\n\r\n    const handleSummaryDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n\r\n            if (response.success) {\r\n                const overallData = response.data;\r\n                const getWorkingDays = (fromDate, endDate) => {\r\n                    const allDays = [];\r\n                    const currentDate = new Date(fromDate);\r\n                    const endDateObj = new Date(endDate);\r\n                    let sundayCount = 0;\r\n\r\n                    while (currentDate <= endDateObj) {\r\n                        const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n                        allDays.push(dateStr);\r\n\r\n                        if (currentDate.getDay() === 0) {\r\n                            sundayCount++;\r\n                        }\r\n\r\n                        currentDate.setDate(currentDate.getDate() + 1);\r\n                    }\r\n\r\n                    if (allDays.length === 0) {\r\n                        allDays.push(\"No days in this range\");\r\n                    }\r\n\r\n                    return {\r\n                        days: allDays,\r\n                        sundayCount,\r\n                        totalDays: allDays.length,\r\n                    };\r\n                };\r\n\r\n                const { days: dateRange, sundayCount, totalDays } = getWorkingDays(startDate, endDate);\r\n\r\n                let totalWorkingDaysSummary = 0;\r\n                let totalLeaveDaysSummary = 0;\r\n\r\n                const summaryData = overallData.map(row => {\r\n                    const punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n                    let totalWorkingDays = 0;\r\n                    let totalLeaveDays = 0;\r\n\r\n                    dateRange.forEach((date) => {\r\n                        if (Array.isArray(punchDetails)) {\r\n                            const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n                            const isSunday = new Date(date).getDay() === 0;\r\n\r\n\r\n                            if (isSunday) {\r\n                                return;\r\n                            }\r\n\r\n                            if (detail) {\r\n                                if (detail.AttendanceStatus === 'P') {\r\n                                    totalWorkingDays++;\r\n                                } else if (detail.AttendanceStatus === 'A') {\r\n                                    totalLeaveDays++;\r\n                                }\r\n                            } else {\r\n                                totalLeaveDays++;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    totalWorkingDaysSummary += totalWorkingDays;\r\n                    totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n                    return {\r\n                        EmployeeName: row.Name,\r\n                        EmployeeID: row.EmployeeID,\r\n                        Month: `${month}-${year}`,\r\n                        Branch: row.Branch,\r\n                        NumberOfSundays: sundayCount,\r\n                        NumberOfDaysInMonth: totalDays,\r\n                        TotalWorkingDays: totalWorkingDays,\r\n                        TotalLeaveDays: totalLeaveDays,\r\n                    };\r\n                });\r\n\r\n                const exportData = summaryData.map(item => ({\r\n                    EmployeeName: item.EmployeeName,\r\n                    EmployeeID: item.EmployeeID,\r\n                    Month: item.Month,\r\n                    Branch: item.Branch,\r\n                    NumberOfSundays: item.NumberOfSundays,\r\n                    NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n                    TotalWorkingDays: item.TotalWorkingDays,\r\n                    TotalLeaveDays: item.TotalLeaveDays,\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n                const headers = [\r\n                    \"EmployeeName\",\r\n                    \"EmployeeID\",\r\n                    \"Month\",\r\n                    \"Branch\",\r\n                    \"NumberOfSundays\",\r\n                    \"NumberOfDaysInMonth\",\r\n                    \"TotalWorkingDays\",\r\n                    \"TotalLeaveDays\",\r\n                ];\r\n\r\n                XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n                XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading overall report:\", error);\r\n        }\r\n    };\r\n\r\n    const handleDownload = () => {\r\n        const maxPunches = 6;\r\n\r\n        const exportData = attendanceData.map(row => {\r\n\r\n            const punchDetails = row.AttendanceDetails ? row.AttendanceDetails.split(',').map(detail => detail.trim()) : [];\r\n            const punchColumns = {};\r\n\r\n            let allPunchesEmpty = true;\r\n\r\n            for (let i = 0; i < maxPunches; i++) {\r\n                const punch = punchDetails[i] || '--';\r\n                punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n                if (punch !== '--') {\r\n                    allPunchesEmpty = false;\r\n                }\r\n            }\r\n\r\n            const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n            return {\r\n                Employee: row.username,\r\n                \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                \"Attendance Status\": attendanceStatus,\r\n                ...punchColumns,\r\n            };\r\n        });\r\n\r\n        const columnsOrder = [\r\n            \"Employee\",\r\n            \"Log Date\",\r\n            \"Attendance Status\",\r\n            ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`)\r\n        ];\r\n\r\n        const reorderedData = exportData.map(row =>\r\n            columnsOrder.reduce((acc, col) => {\r\n                acc[col] = row[col] || '--';\r\n                return acc;\r\n            }, {})\r\n        );\r\n        const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n        XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n    };\r\n\r\n    const MAX_PUNCHES = 6;\r\n\r\n    const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n        isCustomCell: true,\r\n        ColumnHeader: `Punch ${index + 1}`,\r\n        isVisible: 1,\r\n        width: '13%',\r\n        CellProps: {\r\n            sx: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                padding: '10px',\r\n            },\r\n        },\r\n        Cell: ({ row }) => {\r\n            const punches = row.AttendanceDetails\r\n                ? row.AttendanceDetails.split(',').map((p) => p.trim()).filter((p) => p !== '')\r\n                : [];\r\n\r\n            const punch = punches[index] || '--';\r\n            const time = punch.split(' (')[0];\r\n\r\n            return (\r\n                time !== '--' ? (\r\n                    <Chip\r\n                        label={time}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        sx={{ color: 'green', margin: '2px' }}\r\n                    />\r\n                ) : (\r\n                    <div style={{ color: 'gray' }}>--</div>\r\n                )\r\n            );\r\n        },\r\n    }));\r\n\r\n    const formatAttendanceDate = (logDateTime) => {\r\n        if (!logDateTime) return '--';\r\n        const [date] = logDateTime.split('T');\r\n        return `${date} `;\r\n    };\r\n\r\n    const handleOverallDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n\r\n            if (response.success) {\r\n                const overallData = response.data;\r\n                const getWorkingDays = (fromDate, endDate) => {\r\n                    const allDays = [];\r\n                    const currentDate = new Date(fromDate);\r\n                    const endDateObj = new Date(endDate);\r\n\r\n                    while (currentDate <= endDateObj) {\r\n                        allDays.push(new Date(currentDate).toISOString().split(\"T\")[0]);\r\n                        currentDate.setDate(currentDate.getDate() + 1);\r\n                    }\r\n                    return {\r\n                        days: allDays,\r\n                        count: allDays.length,\r\n                    };\r\n                };\r\n\r\n                const { days: dateRange } = getWorkingDays(startDate, endDate);\r\n\r\n                const exportData = overallData.map(row => {\r\n                    let punchDetails = [];\r\n                    try {\r\n\r\n                        punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n                    } catch (error) {\r\n                        console.error(\"Error parsing AttendanceDetails for employee:\", row.username, error);\r\n                        punchDetails = [];\r\n                    }\r\n\r\n                    const dailyAttendance = {};\r\n\r\n                    let totalPresent = 0;\r\n\r\n                    dateRange.forEach((date, index) => {\r\n                        const isSunday = new Date(date).getDay() === 0;\r\n\r\n                        if (isSunday) {\r\n                            dailyAttendance[`Day ${index + 1}`] = 'H';\r\n                        } else {\r\n                            if (Array.isArray(punchDetails)) {\r\n                                const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n                                dailyAttendance[`Day ${index + 1}`] = detail ? detail.AttendanceStatus : 'A';\r\n\r\n                                if (detail && detail.AttendanceStatus === 'P') {\r\n                                    totalPresent++;\r\n                                }\r\n                            } else {\r\n                                dailyAttendance[`Day ${index + 1}`] = 'A';\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    return {\r\n                        EmployeeName: row.username || row.Name,\r\n                        TotalPresent: totalPresent,\r\n                        ...dailyAttendance,\r\n                    };\r\n                });\r\n\r\n                const headers = [\r\n                    \"EmployeeName\",\r\n                    \"TotalPresent\",\r\n                    ...dateRange.map((_, id) => `Day ${id + 1}`),\r\n                ];\r\n\r\n                const ws = XLSX.utils.json_to_sheet(exportData);\r\n                XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, \"Overall Attendance Report\");\r\n\r\n                XLSX.writeFile(wb, \"Overall_Attendance_Report.xlsx\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading overall report:\", error);\r\n        }\r\n    };\r\n\r\n    const handleOverallWithPunch = () => {\r\n        const maxPunches = 6;\r\n\r\n        const filteredAttendanceData = attendanceData.filter((row) => {\r\n\r\n            const isUserSelected = selectedEmployees.some(\r\n                (user) => Number(user.UserId) === Number(row.User_Mgt_Id) || user.UserId === 'ALL'\r\n            );\r\n            return isUserSelected;\r\n        });\r\n\r\n        const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n            const username = row.username;\r\n            if (!acc[username]) {\r\n                acc[username] = [];\r\n            }\r\n            acc[username].push(row);\r\n            return acc;\r\n        }, {});\r\n\r\n        if (Object.keys(groupedData).length === 0) {\r\n            toast.error(\"No attendance data found\")\r\n            return;\r\n        }\r\n\r\n        const wb = XLSX.utils.book_new();\r\n\r\n        const firstLogDate = filteredAttendanceData[0]?.LogDate;\r\n        if (!firstLogDate) {\r\n            console.error(\"No log date found in the filtered attendance data.\");\r\n            return;\r\n        }\r\n\r\n        const date = new Date(firstLogDate);\r\n        const year = date.getFullYear();\r\n        const month = date.toLocaleString(\"default\", { month: \"long\" });\r\n\r\n        Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n            const exportData = userAttendance.map((row) => {\r\n\r\n                const punchDetails = row.AttendanceDetails\r\n                    ? row.AttendanceDetails.split(',').map((detail) => detail.trim())\r\n                    : [];\r\n\r\n                const punchColumns = {};\r\n                let allPunchesEmpty = true;\r\n\r\n                for (let i = 0; i < maxPunches; i++) {\r\n                    const punch = punchDetails[i] || '--';\r\n                    punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n                    if (punch !== '--') {\r\n                        allPunchesEmpty = false;\r\n                    }\r\n                }\r\n\r\n                const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n                return {\r\n                    Employee: row.username,\r\n                    \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                    \"Attendance Status\": attendanceStatus,\r\n                    ...punchColumns,\r\n                };\r\n            });\r\n\r\n            const columnsOrder = [\r\n                \"Employee\",\r\n                \"Log Date\",\r\n                \"Attendance Status\",\r\n                ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n            ];\r\n\r\n            const reorderedData = exportData.map((row) =>\r\n                columnsOrder.reduce((acc, col) => {\r\n                    acc[col] = row[col] || '--';\r\n                    return acc;\r\n                }, {})\r\n            );\r\n\r\n            const sheetName = username.slice(0, 31);\r\n            const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n            XLSX.utils.book_append_sheet(wb, ws, sheetName);\r\n        });\r\n\r\n        const fileName = `Attendance_Report_${month}_${year}.xlsx`;\r\n        XLSX.writeFile(wb, fileName);\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                let filteredEmployees = [];\r\n\r\n                if (Number(userTypeId) === 1 || Number(userTypeId) === 0 || Number(Add_Rights) === 1) {\r\n                    filteredEmployees = data.data;\r\n                    setFilter(prev => ({ ...prev, EmpId: 0, Name: 'ALL' }));\r\n                    setIsDropdownDisabled(false);\r\n                    setDropdownPlaceholder(\"ALL\");\r\n                } else {\r\n                    filteredEmployees = data.data.filter(employee => employee.UserId === userId);\r\n                    setFilter(prev => ({ ...prev, EmpId: userId, Name: storage?.Name }));\r\n                    setIsDropdownDisabled(true);\r\n                    setDropdownPlaceholder(storage?.Name);\r\n                }\r\n\r\n                setEmployees(filteredEmployees);\r\n            }\r\n        }).catch(e => console.error(\"Error fetching employees:\", e));\r\n    }, [storage?.UserTypeId, storage?.UserId, storage?.Company_id, storage?.Name, reload]);\r\n\r\n    const fetchAttendanceData = async (From, EmpId) => {\r\n        try {\r\n            const userTypeId = storage?.UserTypeId;\r\n            const [year, month] = From.split(\"-\");\r\n\r\n            const startDate = `${year}-${month}-01`;\r\n\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                setAttendanceData(response.data);\r\n            }\r\n        } catch (e) {\r\n\r\n            console.error(\"Error fetching attendance data:\", e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            FromDate:\r\n                query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n                    ? query.get(\"FromDate\")\r\n                    : defaultFilters.Fromdate,\r\n            ToDate:\r\n                query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n                    ? query.get(\"ToDate\")\r\n                    : defaultFilters.Todate,\r\n        };\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            FromDate: queryFilters.FromDate,\r\n            ToDate: queryFilters.ToDate,\r\n        }));\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        const FromDate =\r\n            stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n                ? ISOString(stateDetails?.FromDate)\r\n                : null;\r\n        const ToDate =\r\n            stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n                ? ISOString(stateDetails?.ToDate)\r\n                : null;\r\n        if (FromDate && ToDate) {\r\n            updateQueryString({ FromDate, ToDate });\r\n            setFilters((pre) => ({\r\n                ...pre,\r\n                FromDate: ISOString(stateDetails.FromDate),\r\n                ToDate: stateDetails.ToDate,\r\n            }));\r\n            setReload((pre) => !pre);\r\n        }\r\n    }, [stateDetails]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n    };\r\n\r\n    const data = () => setViewMode('employee');\r\n    const dataDepartment = () => setViewMode('department');\r\n    // const dashboard=()=>setViewMode('default')\r\n\r\n    const dashboard = () => {\r\n        setFilters((prev) => ({\r\n            ...prev,\r\n            FromDate: prev.FromDate || new Date().toISOString().split('T')[0],\r\n            ToDate: prev.ToDate || new Date().toISOString().split('T')[0],\r\n        }));\r\n        setViewMode('default');\r\n    };\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        const departments =\r\n            typeof row.DepartmentWiseCounts === \"string\"\r\n                ? JSON.parse(row.DepartmentWiseCounts)\r\n                : row.DepartmentWiseCounts;\r\n\r\n        return (\r\n            <table\r\n                style={{\r\n                    width: \"100%\",\r\n                    borderCollapse: \"collapse\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <thead>\r\n                    <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            Department Name\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            TotalMaleEmployees\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            TotalFemaleEmployees\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            Total Employees\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            TotalMalePresentToday\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            TotalFemalePresentToday\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            TotalPresentToday\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {departments && departments.length > 0 ? (\r\n                        departments.map((data, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <tr\r\n                                    onClick={() => toggleExpand(data.Department)}\r\n\r\n                                >\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.Department || \"-\"}\r\n\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalMaleEmployees || \"-\"}\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalFemaleEmployees || \"-\"}\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalEmployees || \"-\"}\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalMalePresentToday || \"-\"}\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalFemalePresentToday || \"-\"}\r\n                                    </td>\r\n                                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                        {data?.TotalPresentToday || \"-\"}\r\n                                    </td>\r\n                                </tr>\r\n                            </React.Fragment>\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"7\" style={{ padding: \"8px\" }}>\r\n                                No Departments Available\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const handleRefresh = () => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n            }\r\n        })\r\n            .then(data => {\r\n                if (data.success) {\r\n                    let filteredEmployees = [];\r\n\r\n                    if (Number(userTypeId) === 1 || Number(userTypeId) === 0 || Number(Add_Rights) === 1) {\r\n                        filteredEmployees = data.data;\r\n                        setFilter(prev => ({ ...prev, EmpId: 0, Name: 'ALL' }));\r\n                        setIsDropdownDisabled(false);\r\n                        setDropdownPlaceholder(\"ALL\");\r\n                    } else {\r\n                        filteredEmployees = data.data.filter(employee => employee.UserId === userId);\r\n                        setFilter(prev => ({ ...prev, EmpId: userId, Name: storage?.Name }));\r\n                        setIsDropdownDisabled(true);\r\n                        setDropdownPlaceholder(storage?.Name);\r\n                    }\r\n\r\n                    setEmployees(filteredEmployees);\r\n                }\r\n            })\r\n            .catch(e => console.error(\"Error fetching employees:\", e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n                setReload(prev => !prev);\r\n            });\r\n    };\r\n\r\n    const handleRefreshData = () => {\r\n        window.location.reload()\r\n    }\r\n\r\n    const ExpendableComponent1 = ({ row }) => {\r\n        let departments = [];\r\n        let monthlyAttendance = [];\r\n\r\n        try {\r\n            departments =\r\n                typeof row.Employees === \"string\"\r\n                    ? JSON.parse(row.Employees)\r\n                    : row.Employees || [];\r\n\r\n            monthlyAttendance =\r\n                typeof row.MonthlyAverageAttendance === \"string\"\r\n                    ? JSON.parse(row.MonthlyAverageAttendance)\r\n                    : row.MonthlyAverageAttendance || [];\r\n        } catch (err) {\r\n            departments = [];\r\n            monthlyAttendance = [];\r\n        }\r\n\r\n        const currentYear = new Date().getFullYear();\r\n\r\n        const monthList = [\r\n            { name: \"January\", number: 1 },\r\n            { name: \"February\", number: 2 },\r\n            { name: \"March\", number: 3 },\r\n            { name: \"April\", number: 4 },\r\n            { name: \"May\", number: 5 },\r\n            { name: \"June\", number: 6 },\r\n            { name: \"July\", number: 7 },\r\n            { name: \"August\", number: 8 },\r\n            { name: \"September\", number: 9 },\r\n            { name: \"October\", number: 10 },\r\n            { name: \"November\", number: 11 },\r\n            { name: \"December\", number: 12 },\r\n        ];\r\n\r\n        const attendanceMap = new Map();\r\n        monthlyAttendance.forEach((item) => {\r\n\r\n            const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n            attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n        });\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n                <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n\r\n                    <table\r\n                        style={{\r\n                            width: \"60%\",\r\n                            borderCollapse: \"collapse\",\r\n                            border: \"1px solid #ccc\",\r\n                        }}\r\n                    >\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                                <th\r\n                                    style={{\r\n                                        border: \"1px solid #ccc\",\r\n                                        padding: \"5px\",\r\n                                        textAlign: \"left\",\r\n                                    }}\r\n                                >\r\n                                    Emp_Name\r\n                                </th>\r\n                                <th\r\n                                    style={{\r\n                                        border: \"1px solid #ccc\",\r\n                                        padding: \"8px\",\r\n                                        textAlign: \"left\",\r\n                                    }}\r\n                                >\r\n                                    Sex\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {departments && departments.length > 0 ? (\r\n                                departments.map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                            {data?.Emp_Name || \"-\"}\r\n                                        </td>\r\n                                        <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                            {data?.Sex || \"-\"}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n                                        No Employees Available\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div\r\n                        style={{\r\n                            flex: \"1\",\r\n                            border: \"1px solid #ddd\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"10px\",\r\n                            overflowX: \"auto\",\r\n                            whiteSpace: \"nowrap\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                gap: \"10px\",\r\n                            }}\r\n                        >\r\n                            {monthList.map((month) => {\r\n                                const key = `${month.number}-${currentYear}`;\r\n                                const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n                                return (\r\n                                    <div\r\n                                        key={month.number}\r\n                                        style={{\r\n                                            minWidth: \"100px\",\r\n                                            padding: \"8px\",\r\n                                            backgroundColor: \"#f0f0f0\",\r\n                                            color: \"black\",\r\n                                            borderRadius: \"4px\",\r\n                                            textAlign: \"center\",\r\n                                            userSelect: \"none\",\r\n                                        }}\r\n                                    >\r\n                                        <div style={{ fontWeight: \"bold\" }}>\r\n                                            {month.name} {currentYear}\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                marginTop: \"6px\",\r\n                                                fontSize: \"14px\",\r\n                                                color: \"#555\",\r\n                                            }}\r\n                                        >\r\n                                            {uniqueEmployeeDays}\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                let filteredEmployees = [];\r\n\r\n                if (Number(userTypeId) === 1 || Number(userTypeId) === 0 || Number(Add_Rights) === 1) {\r\n                    filteredEmployees = data.data;\r\n                    setFilter(prev => ({ ...prev, EmpId: 0, Name: 'ALL' }));\r\n                    setIsDropdownDisabled(false);\r\n                    setDropdownPlaceholder(\"ALL\");\r\n                } else {\r\n                    filteredEmployees = data.data.filter(employee => employee.UserId === userId);\r\n                    setFilter(prev => ({ ...prev, EmpId: userId, Name: storage?.Name }));\r\n                    setIsDropdownDisabled(true);\r\n                    setDropdownPlaceholder(storage?.Name);\r\n                }\r\n\r\n                setEmployees(filteredEmployees);\r\n            }\r\n        }).catch(e => console.error(\"Error fetching employees:\", e));\r\n    }, [storage?.UserTypeId, storage?.UserId, storage?.Company_id, storage?.Name]);\r\n\r\n    useEffect(() => {\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `empAttendance/department?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    if (data.others && data.others.department) {\r\n                        const deptOptions = data.others.department.map((dept) => ({\r\n                            value: dept.value,\r\n                            label: dept.label,\r\n                        }));\r\n                        setDepartments(deptOptions);\r\n                    }\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching departments:\", e));\r\n    }, [storage?.Company_id, reload]);\r\n\r\n    const handleDepartmentChange = (selected) => {\r\n        setSelectedDepartment(selected);\r\n\r\n        setEmployees([]);\r\n        setSelectedEmployee(null);\r\n\r\n        if (selected) {\r\n            fetchLink({\r\n                address: `empAttendance/employeesByDepartment`,\r\n                method: \"POST\",\r\n                bodyData: { department: selected.value },\r\n            })\r\n                .then((data) => {\r\n                    if (data.success && data.others?.employees) {\r\n                        const employeeOptions = data.others.employees.map((emp) => ({\r\n                            value: emp.id || emp.value || emp.Emp_Id,\r\n                            label: emp.name || emp.label || emp.Emp_Name,\r\n                        }));\r\n\r\n                        setEmployees(employeeOptions);\r\n                    } else {\r\n                        setEmployees([]);\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    console.error(\"Error fetching employees:\", e);\r\n                    setEmployees([]);\r\n                });\r\n        } else {\r\n            setEmployees([]);\r\n        }\r\n    };\r\n\r\n    const departmentWiseCounts = React.useMemo(() => {\r\n        if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n        try {\r\n            const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n            return Array.isArray(parsed) ? parsed : [];\r\n        } catch (err) {\r\n            console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n            return [];\r\n        }\r\n    }, [saleOrders]);\r\n\r\n    const filteredData = React.useMemo(() => {\r\n        if (!departmentWiseCounts.length) return [];\r\n\r\n        const filteredDepartments = departmentWiseCounts.filter(item => {\r\n            return selectedDepartment ? item.Department === selectedDepartment.label : true;\r\n        });\r\n\r\n        return filteredDepartments.map(dept => {\r\n            const filteredEmployees = selectedEmployee\r\n                ? dept.Employees.filter(emp => {\r\n                    if (!emp.Emp_Name) return false;\r\n                    return emp.Emp_Name.trim().toLowerCase() === selectedEmployee.label.trim().toLowerCase();\r\n                })\r\n                : dept.Employees;\r\n\r\n            return {\r\n                ...dept,\r\n                Employees: filteredEmployees\r\n            };\r\n        });\r\n    }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n    return (\r\n        <>\r\n            {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n\r\n                <>\r\n                    {viewMode === 'default' && (\r\n                        <FilterableTable\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        disabled\r\n                                        onClick={() => dashboard()}\r\n                                    >\r\n                                        Dashboard\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => data()}\r\n                                    >\r\n                                        Employee\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => dataDepartment()}\r\n                                    >\r\n                                        Department\r\n                                    </Button>\r\n\r\n                                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                        <label>From Date</label>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={e => setFilters({ ...filters, FromDate: e.target.value })}\r\n                                            value={filters?.FromDate}\r\n                                            className=\"cus-inpt w-auto p-1\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                        <label>To Date</label>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={e => setFilters({ ...filters, ToDate: e.target.value })}\r\n                                            value={filters?.ToDate}\r\n                                            className=\"cus-inpt w-auto p-1\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"p-1\">\r\n                                        <IconButton\r\n                                            onClick={() => setReload(!reload)}\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Search />\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            dataArray={saleOrders}\r\n                            EnableSerialNumber\r\n                            columns={[\r\n                                createCol(\"TotalDepartments\", \"string\", \"Department\"),\r\n                                createCol(\"TotalMaleEmployees\", \"number\", \"Total Male Employees\"),\r\n                                createCol(\"TotalFemaleEmployees\", \"number\", \"Total Female Employees\"),\r\n                                createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n                                createCol(\"TotalMalePresentToday\", \"number\", \"Total Male Present Today\"),\r\n                                createCol(\"TotalFemalePresentToday\", \"number\", \"Total Female Present Today\"),\r\n                                createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    )}\r\n\r\n                    {viewMode === 'employee' && (\r\n                        <>\r\n                            <Dialog\r\n                                open={addEmployeeDialogOpen}\r\n                                maxWidth=\"md\"\r\n                                PaperProps={{\r\n                                    style: { width: '500px', height: '500px' },\r\n                                }}\r\n                            >\r\n                                <DialogTitle>Add Employee</DialogTitle>\r\n                                <DialogContent>\r\n                                    <Autocomplete\r\n                                        multiple\r\n                                        options={[{ UserId: 'all', Name: 'ALL' }, ...dropdownEmployees]}\r\n                                        getOptionLabel={(option) => option.Name}\r\n                                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                                        onChange={(event, value) => {\r\n                                            if (value.some((selected) => selected.UserId === 'all')) {\r\n                                                setSelectedEmployees(dropdownEmployees);\r\n                                            } else {\r\n                                                const uniqueValues = value.filter((val, index, self) =>\r\n                                                    index === self.findIndex((t) => t.UserId === val.UserId)\r\n                                                );\r\n                                                setSelectedEmployees(uniqueValues);\r\n                                            }\r\n                                        }}\r\n                                        value={selectedEmployees.some((user) => user.UserId === 'all')\r\n                                            ? [{ UserId: 'all', Name: 'ALL' }]\r\n                                            : selectedEmployees}\r\n                                        renderInput={(params) => (\r\n                                            <TextField {...params} placeholder=\"Employees\" />\r\n                                        )}\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => setSelectedEmployees([])}\r\n                                    >\r\n                                        Clear\r\n                                    </Button>\r\n                                    <span>\r\n                                        <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                                        <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                                    </span>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                            <Card>\r\n                                <CardContent sx={{ minHeight: '50vh' }}>\r\n                                    <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                                        <h6 className=\"fa-18\">\r\n                                            <Button size=\"small mx-2\" variant=\"outlined\" onClick={() => dashboard()}>\r\n                                                Dashboard\r\n                                            </Button>\r\n                                            <Button size=\"small mx-2\" variant=\"outlined\" disabled onClick={() => data()}>\r\n                                                EMPLOYEE\r\n                                            </Button>\r\n                                            <Button size=\"small mx-2\" variant=\"outlined\" onClick={() => dataDepartment()}>\r\n                                                Department\r\n                                            </Button>\r\n                                        </h6>\r\n\r\n                                        <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                            <Button\r\n                                                onClick={handleDownload}\r\n                                                variant=\"contained\"\r\n                                                disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                                            >\r\n                                                Individual Report\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    handleOverallDownload(filter?.From, filter?.To);\r\n                                                }}\r\n                                            >\r\n                                                Monthly Report\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    setAddEmployeeDialogOpen(true)\r\n                                                }}\r\n                                            >\r\n                                                Cummulative Monthly Report\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={handleSummaryDownload}\r\n                                            >\r\n                                                Summary\r\n                                            </Button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"px-2 row mb-4\">\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>Employee</label>\r\n                                            <Select\r\n                                                value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                                onChange={(e) => setFilter({ ...filter, EmpId: e.value, Name: e.label })}\r\n                                                options={[{ value: 0, label: `ALL` }, ...employees.map(obj => ({ value: obj?.UserId, label: obj?.Name }))]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={dropdownPlaceholder}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>From</label>\r\n                                            <input\r\n                                                type=\"month\"\r\n                                                className=\"cus-inpt\"\r\n                                                value={filter?.From?.slice(0, 7)}\r\n                                                onChange={handleFromChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                                            <button\r\n                                                className=\"btn btn-link ms-2 p-0 mt-3\"\r\n                                                onClick={handleRefresh}\r\n                                                title=\"Refresh Departments & Employees\"\r\n                                            >\r\n                                                <Refresh fontSize=\"medium\" />\r\n                                            </button>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <FilterableTable\r\n                                        dataArray={attendanceData}\r\n                                        columns={[\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) => row.username,\r\n                                                ColumnHeader: 'Employee',\r\n                                                isVisible: 1,\r\n                                                width: '20%',\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: '10px',\r\n                                                        textAlign: 'left',\r\n                                                        fontWeight: 'bold',\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) => formatAttendanceDate(row.LogDate || '--'),\r\n                                                ColumnHeader: 'Log Date',\r\n                                                isVisible: 1,\r\n                                                width: '20%',\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: '10px',\r\n                                                        textAlign: 'center',\r\n                                                        color: 'gray',\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            ...punchColumns\r\n                                        ]}\r\n                                        EnableSerialNumber\r\n                                        CellSize=\"small\"\r\n                                        disablePagination={false}\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </>\r\n                    )}\r\n\r\n                    {viewMode === 'department' && (\r\n                        <>\r\n                            {(() => {\r\n                                let departmentWiseCounts = [];\r\n                                const countsStr = saleOrders?.[0]?.DepartmentWiseCounts;\r\n\r\n                                if (countsStr) {\r\n                                    try {\r\n                                        const parsed = JSON.parse(countsStr);\r\n                                        departmentWiseCounts = Array.isArray(parsed) ? parsed : [];\r\n                                    } catch (err) {\r\n                                        console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n                                    }\r\n                                }\r\n\r\n                                return (\r\n                                    <>\r\n                                        <FilterableTable\r\n                                            title={\r\n                                                <div className=\"d-flex flex-column\">\r\n                                                    <div className=\"d-flex align-items-center mb-3\">\r\n                                                        <Button\r\n                                                            size=\"small mx-2\"\r\n                                                            variant=\"outlined\"\r\n                                                            onClick={() => dashboard()}\r\n                                                        >\r\n                                                            Dashboard\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            size=\"small mx-2\"\r\n                                                            variant=\"outlined\"\r\n                                                            onClick={() => data()}\r\n                                                        >\r\n                                                            Employee\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            size=\"small mx-2\"\r\n                                                            variant=\"outlined\"\r\n                                                            disabled\r\n                                                            onClick={() => dataDepartment()}\r\n                                                        >\r\n                                                            Department\r\n                                                        </Button>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"row align-items-end\">\r\n                                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                                            <label>Department</label>\r\n                                                            <Select\r\n                                                                options={departments}\r\n                                                                isSearchable\r\n                                                                placeholder=\"ALL\"\r\n                                                                value={selectedDepartment}\r\n                                                                styles={customSelectStyles}\r\n                                                                onChange={handleDepartmentChange}\r\n                                                            />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                                            <label>Employee</label>\r\n                                                            <Select\r\n                                                                options={employees}\r\n                                                                isSearchable\r\n                                                                placeholder=\"ALL\"\r\n                                                                value={selectedEmployee}\r\n                                                                styles={customSelectStyles}\r\n                                                                onChange={setSelectedEmployee}\r\n                                                                isDisabled={!selectedDepartment}\r\n                                                            />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                                                            <button\r\n                                                                className=\"btn btn-link ms-2 p-0 mb-2\"\r\n                                                                onClick={handleRefreshData}\r\n                                                                style={{ minWidth: '24px' }}\r\n                                                                title=\"Refresh Departments & Employees\"\r\n                                                            >\r\n                                                                <Refresh fontSize=\"small\" />\r\n                                                            </button>\r\n\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            }\r\n                                            dataArray={filteredData}\r\n                                            EnableSerialNumber\r\n                                            columns={[\r\n                                                createCol(\"Department\", \"string\", \"Department\"),\r\n                                                createCol(\"TotalMaleEmployees\", \"number\", \"Total Male Employees\"),\r\n                                                createCol(\"TotalFemaleEmployees\", \"number\", \"Total Female Employees\"),\r\n                                                createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n                                                createCol(\"TotalMalePresentToday\", \"number\", \"Total Male Present Today\"),\r\n                                                createCol(\"TotalFemalePresentToday\", \"number\", \"Total Female Present Today\"),\r\n                                                createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n                                            ]}\r\n                                            isExpendable={true}\r\n                                            tableMaxHeight={550}\r\n                                            expandableComp={ExpendableComponent1}\r\n                                        />\r\n                                    </>\r\n                                );\r\n                            })()}\r\n                        </>\r\n                    )}\r\n                </>\r\n            ) :\r\n                (\r\n\r\n                    (\r\n                        <>\r\n                            <Dialog\r\n                                open={addEmployeeDialogOpen}\r\n                                maxWidth=\"md\"\r\n                                PaperProps={{\r\n                                    style: { width: '500px', height: '500px' },\r\n                                }}\r\n                            >\r\n                                <DialogTitle>Add Employee</DialogTitle>\r\n                                <DialogContent>\r\n                                    <Autocomplete\r\n                                        multiple\r\n                                        options={[{ UserId: 'all', Name: 'ALL' }, ...dropdownEmployees]}\r\n                                        getOptionLabel={(option) => option.Name}\r\n                                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                                        value={\r\n                                            selectedEmployees.some((user) => user.UserId === 'all')\r\n                                                ? [{ UserId: 'all', Name: 'ALL' }]\r\n                                                : selectedEmployees\r\n                                        }\r\n                                        onChange={(event, value) => {\r\n                                            if (value.some((selected) => selected.UserId === 'all')) {\r\n                                                setSelectedEmployees(dropdownEmployees);\r\n                                            } else {\r\n                                                const uniqueValues = value.filter(\r\n                                                    (val, index, self) => index === self.findIndex((t) => t.UserId === val.UserId)\r\n                                                );\r\n                                                setSelectedEmployees(uniqueValues);\r\n                                            }\r\n                                        }}\r\n                                        renderInput={(params) => (\r\n                                            <TextField {...params} placeholder=\"Employees\" />\r\n                                        )}\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                                    <Button variant=\"outlined\" onClick={() => setSelectedEmployees([])}>\r\n                                        Clear\r\n                                    </Button>\r\n                                    <span>\r\n                                        <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                                        <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                                    </span>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n\r\n                            <Card>\r\n                                <CardContent sx={{ minHeight: '50vh' }}>\r\n                                    <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                                        <h6 className=\"fa-18\">\r\n\r\n                                            <Button size=\"small\" variant=\"outlined\" className=\"mx-2\" >\r\n                                                EMPLOYEE\r\n                                            </Button>\r\n\r\n                                        </h6>\r\n\r\n                                        {(userTypeId === 1 || userTypeId === 0) && (\r\n                                            <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                                <Button\r\n                                                    onClick={handleDownload}\r\n                                                    variant=\"contained\"\r\n                                                    disabled={filter?.EmpId === 0 || filter?.Name === 'ALL'}\r\n                                                >\r\n                                                    Individual Report\r\n                                                </Button>\r\n                                                <Button onClick={() => handleOverallDownload(filter?.From, filter?.To)}>\r\n                                                    Monthly Report\r\n                                                </Button>\r\n                                                <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n                                                    Cumulative Monthly Report\r\n                                                </Button>\r\n                                                <Button onClick={handleSummaryDownload}>\r\n                                                    Summary\r\n                                                </Button>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    <div className=\"px-2 row mb-4\">\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>Employee</label>\r\n                                            <Select\r\n                                                value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                                onChange={(e) => setFilter({ ...filter, EmpId: e.value, Name: e.label })}\r\n                                                options={[\r\n                                                    { value: 0, label: 'ALL' },\r\n                                                    ...employees.map((obj) => ({ value: obj.UserId, label: obj.Name })),\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable\r\n                                                placeholder={dropdownPlaceholder}\r\n                                                isDisabled={isDropdownDisabled}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>From</label>\r\n                                            <input\r\n                                                type=\"month\"\r\n                                                className=\"cus-inpt\"\r\n                                                value={filter?.From?.slice(0, 7)}\r\n                                                onChange={handleFromChange}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <FilterableTable\r\n                                        dataArray={attendanceData}\r\n                                        columns={[\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) => row.username,\r\n                                                ColumnHeader: 'Employee',\r\n                                                isVisible: 1,\r\n                                                width: '20%',\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: '10px',\r\n                                                        textAlign: 'left',\r\n                                                        fontWeight: 'bold',\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) => formatAttendanceDate(row.LogDate || '--'),\r\n                                                ColumnHeader: 'Log Date',\r\n                                                isVisible: 1,\r\n                                                width: '20%',\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: '10px',\r\n                                                        textAlign: 'center',\r\n                                                        color: 'gray',\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            ...punchColumns,\r\n                                        ]}\r\n                                        EnableSerialNumber\r\n                                        CellSize=\"small\"\r\n                                        disablePagination={false}\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </>\r\n                    )\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default AttendanceNewScreen;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//     Card, CardContent, Button, Chip, Dialog,\r\n//     DialogTitle,\r\n//     DialogContent,\r\n//     DialogActions,\r\n//     Autocomplete,\r\n//     TextField,\r\n// } from \"@mui/material\";\r\n// import Select from \"react-select\";\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { fetchLink } from '../../Components/fetchComponent';\r\n// import FilterableTable from \"../../Components/filterableTable2\";\r\n// import * as XLSX from 'xlsx';\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import { useContext } from \"react\";\r\n// import { toast } from \"react-toastify\";\r\n\r\n// const FingerPrintAttendanceReport = (loadingOn, loadingOff) => {\r\n\r\n//     const [loading, setLoading] = useState(true);\r\n//     const storage = JSON.parse(localStorage.getItem('user'));\r\n\r\n//     const userTypeId = storage?.UserTypeId;\r\n//     const parseData = storage;\r\n//     const [attendanceData, setAttendanceData] = useState([]);\r\n//     const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n//     const { contextObj } = useContext(MyContext);\r\n//     const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n//     const Add_Rights = contextObj?.Add_Rights;\r\n\r\n\r\n//     const getCurrentMonthYear = () => {\r\n//         const date = new Date();\r\n//         const year = date.getFullYear();\r\n//         const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n//         return `${year}-${month}`;\r\n//     };\r\n\r\n//     const handleAddEmployeeClose = () => {\r\n//         setAddEmployeeDialogOpen(false);\r\n\r\n//     };\r\n\r\n//     const initialValue = {\r\n//         From: getCurrentMonthYear(),\r\n//         To: getCurrentMonthYear(),\r\n//         EmpId: 0,\r\n//         Name: '',\r\n//     };\r\n\r\n//     const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n//     const [filter, setFilter] = useState(initialValue);\r\n//     const [employees, setEmployees] = useState([]);\r\n//     const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n//     const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n//     const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n//     useEffect(() => {\r\n//         const timer = setTimeout(() => {\r\n//             setDebouncedFilter(filter);\r\n//         }, 500);\r\n\r\n//         return () => clearTimeout(timer);\r\n//     }, [filter]);\r\n\r\n//     useEffect(() => {\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n//             }\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 let filteredEmployees = [];\r\n\r\n//                 if (Number(userTypeId) === 1 || Number(userTypeId) === 0 || Number(Add_Rights) === 1) {\r\n//                     filteredEmployees = data.data;\r\n//                     setFilter(prev => ({ ...prev, EmpId: 0, Name: 'ALL' }));\r\n//                     setIsDropdownDisabled(false);\r\n//                     setDropdownPlaceholder(\"ALL\");\r\n//                 } else {\r\n//                     filteredEmployees = data.data.filter(employee => employee.UserId === userId);\r\n//                     setFilter(prev => ({ ...prev, EmpId: userId, Name: storage?.Name }));\r\n//                     setIsDropdownDisabled(true);\r\n//                     setDropdownPlaceholder(storage?.Name);\r\n//                 }\r\n\r\n//                 setEmployees(filteredEmployees);\r\n//             }\r\n//         }).catch(e => console.error(\"Error fetching employees:\", e));\r\n//     }, [storage?.UserTypeId, storage?.UserId, storage?.Company_id, storage?.Name]);\r\n\r\n//     const fetchAttendanceData = async (From, EmpId) => {\r\n//         try {\r\n//             const userTypeId = storage?.UserTypeId;\r\n//             const [year, month] = From.split(\"-\");\r\n\r\n//             const startDate = `${year}-${month}-01`;\r\n\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${localStorage.getItem('Autheticate_Id')}`,\r\n//                 },\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 setAttendanceData(response.data);\r\n//             }\r\n//         } catch (e) {\r\n\r\n//             console.error(\"Error fetching attendance data:\", e);\r\n//         }\r\n//     };\r\n\r\n//     const handleOverallDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 const overallData = response.data;\r\n//                 console.log(\"overalldata\", overallData);\r\n\r\n//                 const getWorkingDays = (fromDate, endDate) => {\r\n//                     const allDays = [];\r\n//                     const currentDate = new Date(fromDate);\r\n//                     const endDateObj = new Date(endDate);\r\n\r\n//                     while (currentDate <= endDateObj) {\r\n//                         allDays.push(new Date(currentDate).toISOString().split(\"T\")[0]);\r\n//                         currentDate.setDate(currentDate.getDate() + 1);\r\n//                     }\r\n//                     return {\r\n//                         days: allDays,\r\n//                         count: allDays.length,\r\n//                     };\r\n//                 };\r\n\r\n//                 const { days: dateRange } = getWorkingDays(startDate, endDate);\r\n\r\n//                 const exportData = overallData.map(row => {\r\n//                     let punchDetails = [];\r\n//                     try {\r\n\r\n//                         punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n//                     } catch (error) {\r\n//                         console.error(\"Error parsing AttendanceDetails for employee:\", row.username, error);\r\n//                         punchDetails = []; \r\n//                     }\r\n\r\n//                     const dailyAttendance = {};\r\n\r\n//                     let totalPresent = 0;\r\n\r\n//                     dateRange.forEach((date, index) => {\r\n//                         const isSunday = new Date(date).getDay() === 0;\r\n\r\n//                         if (isSunday) {\r\n//                             dailyAttendance[`Day ${index + 1}`] = 'H';\r\n//                         } else {\r\n//                             if (Array.isArray(punchDetails)) {\r\n//                                 const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n\r\n//                                 dailyAttendance[`Day ${index + 1}`] = detail ? detail.AttendanceStatus : 'A';\r\n\r\n\r\n//                                 if (detail && detail.AttendanceStatus === 'P') {\r\n//                                     totalPresent++;\r\n//                                 }\r\n//                             } else {\r\n\r\n//                                 dailyAttendance[`Day ${index + 1}`] = 'A';\r\n//                             }\r\n//                         }\r\n//                     });\r\n\r\n//                     return {\r\n//                         EmployeeName: row.username || row.Name,\r\n//                         TotalPresent: totalPresent, \r\n//                         ...dailyAttendance,\r\n//                     };\r\n//                 });\r\n\r\n\r\n//                 const headers = [\r\n//                     \"EmployeeName\",\r\n//                     \"TotalPresent\",\r\n//                     ...dateRange.map((_, id) => `Day ${id + 1}`),\r\n//                 ];\r\n\r\n\r\n//                 const ws = XLSX.utils.json_to_sheet(exportData);\r\n//                 XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n\r\n//                 const wb = XLSX.utils.book_new();\r\n//                 XLSX.utils.book_append_sheet(wb, ws, \"Overall Attendance Report\");\r\n\r\n\r\n//                 XLSX.writeFile(wb, \"Overall_Attendance_Report.xlsx\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error downloading overall report:\", error);\r\n//         }\r\n//     };\r\n//     const getDaysInMonth = (monthYear) => {\r\n//         if (!monthYear) return 0;\r\n\r\n//         const [year, month] = monthYear.split('-');\r\n\r\n//         return new Date(year, month, 0).getDate();\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const { From, EmpId } = debouncedFilter;\r\n//         if (From && (EmpId || EmpId === 0)) {\r\n//             fetchAttendanceData(From, EmpId);\r\n//             fetchDropdownEmployees();\r\n//         }\r\n\r\n//     }, [debouncedFilter]);\r\n\r\n//     const fetchDropdownEmployees = async () => {\r\n//         setLoading(true);\r\n//         try {\r\n//             const data = await fetchLink({\r\n//                 address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n//             });\r\n//             if (data.success) {\r\n//                 setDropdownEmployees(data.data);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             toast.error(\"Failed to fetch employees for dropdown\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleFromChange = (e) => {\r\n//         const getDaysInMonth = (monthYear) => {\r\n//             if (!monthYear) return 0;\r\n\r\n//             const [year, month] = monthYear.split('-');\r\n\r\n//             return new Date(year, month, 0).getDate();\r\n//         };\r\n//         const selectedMonth = e.target.value;\r\n//         const [year, month] = selectedMonth.split(\"-\");\r\n//         const startDate = `${year}-${month}-01`;\r\n//         const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//         const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//         setFilter({\r\n//             From: startDate,\r\n//             To: endDate,\r\n//             EmpId: filter.EmpId || 0,\r\n//             Name: filter?.Name,\r\n//         });\r\n//     };\r\n\r\n//     const handleDownload = () => {\r\n//         const maxPunches = 6;\r\n\r\n//         const exportData = attendanceData.map(row => {\r\n\r\n//             const punchDetails = row.AttendanceDetails ? row.AttendanceDetails.split(',').map(detail => detail.trim()) : [];\r\n//             const punchColumns = {};\r\n\r\n\r\n//             let allPunchesEmpty = true;\r\n\r\n//             for (let i = 0; i < maxPunches; i++) {\r\n//                 const punch = punchDetails[i] || '--';\r\n//                 punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n//                 if (punch !== '--') {\r\n//                     allPunchesEmpty = false;\r\n//                 }\r\n//             }\r\n\r\n//             const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n\r\n//             return {\r\n//                 Employee: row.username,\r\n//                 \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//                 \"Attendance Status\": attendanceStatus,\r\n//                 ...punchColumns,\r\n//             };\r\n//         });\r\n\r\n\r\n//         const columnsOrder = [\r\n//             \"Employee\",\r\n//             \"Log Date\",\r\n//             \"Attendance Status\",\r\n//             ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`)\r\n//         ];\r\n\r\n//         const reorderedData = exportData.map(row =>\r\n//             columnsOrder.reduce((acc, col) => {\r\n//                 acc[col] = row[col] || '--';\r\n//                 return acc;\r\n//             }, {})\r\n//         );\r\n//         const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n//         const wb = XLSX.utils.book_new();\r\n//         XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n//         XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n//     };\r\n\r\n//     const formatAttendanceDate = (logDateTime) => {\r\n//         if (!logDateTime) return '--';\r\n//         const [date] = logDateTime.split('T');\r\n//         return `${date} `;\r\n//     };\r\n\r\n//     const handleOverallWithPunch = () => {\r\n//         const maxPunches = 6;\r\n\r\n//         const filteredAttendanceData = attendanceData.filter((row) => {\r\n\r\n//           const isUserSelected = selectedEmployees.some(\r\n//             (user) => Number(user.UserId) === Number(row.User_Mgt_Id) || user.UserId === 'ALL'\r\n//           );\r\n//           return isUserSelected;\r\n//         });\r\n\r\n//         const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n//           const username = row.username;\r\n//           if (!acc[username]) {\r\n//             acc[username] = [];\r\n//           }\r\n//           acc[username].push(row);\r\n//           return acc;\r\n//         }, {});\r\n\r\n//         if (Object.keys(groupedData).length === 0) {\r\n//             toast.error(\"No attendance data found\")\r\n//           return;\r\n//         }\r\n\r\n//         const wb = XLSX.utils.book_new();\r\n\r\n//         const firstLogDate = filteredAttendanceData[0]?.LogDate;\r\n//         if (!firstLogDate) {\r\n//           console.error(\"No log date found in the filtered attendance data.\");\r\n//           return;\r\n//         }\r\n\r\n//         const date = new Date(firstLogDate);\r\n//         const year = date.getFullYear();\r\n//         const month = date.toLocaleString(\"default\", { month: \"long\" });\r\n\r\n//         Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n//           const exportData = userAttendance.map((row) => {\r\n\r\n//             const punchDetails = row.AttendanceDetails\r\n//               ? row.AttendanceDetails.split(',').map((detail) => detail.trim())\r\n//               : [];\r\n\r\n//             const punchColumns = {};\r\n//             let allPunchesEmpty = true;\r\n\r\n//             for (let i = 0; i < maxPunches; i++) {\r\n//               const punch = punchDetails[i] || '--';\r\n//               punchColumns[`Punch ${i + 1}`] = punch;\r\n\r\n//               if (punch !== '--') {\r\n//                 allPunchesEmpty = false;\r\n//               }\r\n//             }\r\n\r\n\r\n//             const attendanceStatus = allPunchesEmpty ? 'A' : 'P';\r\n\r\n//             return {\r\n//               Employee: row.username,\r\n//               \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//               \"Attendance Status\": attendanceStatus,\r\n//               ...punchColumns,\r\n//             };\r\n//           });\r\n\r\n\r\n//           const columnsOrder = [\r\n//             \"Employee\",\r\n//             \"Log Date\",\r\n//             \"Attendance Status\",\r\n//             ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n//           ];\r\n\r\n//           const reorderedData = exportData.map((row) =>\r\n//             columnsOrder.reduce((acc, col) => {\r\n//               acc[col] = row[col] || '--';\r\n//               return acc;\r\n//             }, {})\r\n//           );\r\n\r\n//           const sheetName = username.slice(0, 31); \r\n//           const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n//           XLSX.utils.book_append_sheet(wb, ws, sheetName);\r\n//         });\r\n\r\n\r\n//         const fileName = `Attendance_Report_${month}_${year}.xlsx`;\r\n//         XLSX.writeFile(wb, fileName);\r\n//       };\r\n\r\n//     const handleSummaryDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 const overallData = response.data;\r\n//                 const getWorkingDays = (fromDate, endDate) => {\r\n//                     const allDays = [];\r\n//                     const currentDate = new Date(fromDate);\r\n//                     const endDateObj = new Date(endDate);\r\n//                     let sundayCount = 0;\r\n\r\n//                     while (currentDate <= endDateObj) {\r\n//                         const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n//                         allDays.push(dateStr);\r\n\r\n//                         if (currentDate.getDay() === 0) {\r\n//                             sundayCount++;\r\n//                         }\r\n\r\n//                         currentDate.setDate(currentDate.getDate() + 1);\r\n//                     }\r\n\r\n//                     if (allDays.length === 0) {\r\n//                         allDays.push(\"No days in this range\");\r\n//                     }\r\n\r\n//                     return {\r\n//                         days: allDays,\r\n//                         sundayCount,\r\n//                         totalDays: allDays.length,\r\n//                     };\r\n//                 };\r\n\r\n//                 const { days: dateRange, sundayCount, totalDays } = getWorkingDays(startDate, endDate);\r\n\r\n//                 let totalWorkingDaysSummary = 0;\r\n//                 let totalLeaveDaysSummary = 0;\r\n\r\n//                 const summaryData = overallData.map(row => {\r\n//                     const punchDetails = row.AttendanceDetails ? JSON.parse(row.AttendanceDetails) : [];\r\n//                     let totalWorkingDays = 0;\r\n//                     let totalLeaveDays = 0;\r\n\r\n//                     dateRange.forEach((date) => {\r\n//                         if (Array.isArray(punchDetails)) {\r\n//                             const detail = punchDetails.find(detail => detail.Date === date);\r\n\r\n//                             const isSunday = new Date(date).getDay() === 0;\r\n\r\n\r\n//                             if (isSunday) {\r\n//                                 return; \r\n//                             }\r\n\r\n//                             if (detail) {\r\n//                                 if (detail.AttendanceStatus === 'P') {\r\n//                                     totalWorkingDays++;\r\n//                                 } else if (detail.AttendanceStatus === 'A') {\r\n//                                     totalLeaveDays++;\r\n//                                 }\r\n//                             } else {\r\n//                                 totalLeaveDays++;\r\n//                             }\r\n//                         }\r\n//                     });\r\n\r\n//                     totalWorkingDaysSummary += totalWorkingDays;\r\n//                     totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n//                     return {\r\n//                         EmployeeName: row.Name,\r\n//                         EmployeeID: row.EmployeeID,\r\n//                         Month: `${month}-${year}`,\r\n//                         Branch: row.Branch,\r\n//                         NumberOfSundays: sundayCount,\r\n//                         NumberOfDaysInMonth: totalDays,\r\n//                         TotalWorkingDays: totalWorkingDays,\r\n//                         TotalLeaveDays: totalLeaveDays,\r\n//                     };\r\n//                 });\r\n\r\n//                 const exportData = summaryData.map(item => ({\r\n//                     EmployeeName: item.EmployeeName,\r\n//                     EmployeeID: item.EmployeeID,\r\n//                     Month: item.Month,\r\n//                     Branch: item.Branch,\r\n//                     NumberOfSundays: item.NumberOfSundays,\r\n//                     NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n//                     TotalWorkingDays: item.TotalWorkingDays,\r\n//                     TotalLeaveDays: item.TotalLeaveDays,\r\n//                 }));\r\n\r\n//                 const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n//                 const headers = [\r\n//                     \"EmployeeName\",\r\n//                     \"EmployeeID\",\r\n//                     \"Month\",\r\n//                     \"Branch\",\r\n//                     \"NumberOfSundays\",\r\n//                     \"NumberOfDaysInMonth\",\r\n//                     \"TotalWorkingDays\",\r\n//                     \"TotalLeaveDays\",\r\n//                 ];\r\n\r\n//                 XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n//                 const wb = XLSX.utils.book_new();\r\n//                 XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n\r\n//                 XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error downloading overall report:\", error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             <Dialog\r\n//                 open={addEmployeeDialogOpen}\r\n//                 // onClose={handleAddEmployeeClose}\r\n//                 maxWidth=\"md\"\r\n//                 PaperProps={{\r\n//                     style: { width: '500px', height: '500px' },\r\n//                 }}\r\n//             >\r\n//                 <DialogTitle>Add Employee</DialogTitle>\r\n//                 <DialogContent>\r\n//                     <Autocomplete\r\n//                         multiple\r\n//                         options={[{ UserId: 'all', Name: 'ALL' }, ...dropdownEmployees]}\r\n//                         getOptionLabel={(option) => option.Name}\r\n//                         isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n//                         onChange={(event, value) => {\r\n//                             if (value.some((selected) => selected.UserId === 'all')) {\r\n//                                 setSelectedEmployees(dropdownEmployees);\r\n//                             } else {\r\n//                                 const uniqueValues = value.filter((val, index, self) =>\r\n//                                     index === self.findIndex((t) => t.UserId === val.UserId)\r\n//                                 );\r\n//                                 setSelectedEmployees(uniqueValues);\r\n//                             }\r\n//                         }}\r\n//                         value={selectedEmployees.some((user) => user.UserId === 'all')\r\n//                             ? [{ UserId: 'all', Name: 'ALL' }]\r\n//                             : selectedEmployees}\r\n//                         renderInput={(params) => (\r\n//                             <TextField {...params} placeholder=\"Employees\" />\r\n//                         )}\r\n//                     />\r\n//                 </DialogContent>\r\n//                 <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n//                     <Button\r\n//                         type=\"button\"\r\n//                         variant=\"outlined\"\r\n//                         onClick={() => setSelectedEmployees([])}\r\n//                     >\r\n//                         Clear\r\n//                     </Button>\r\n//                     <span>\r\n//                         <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n//                         <Button onClick={handleOverallWithPunch}>Download</Button>\r\n\r\n//                     </span>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//             <Card>\r\n//                 <CardContent sx={{ minHeight: '50vh' }}>\r\n//                     <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n//                         <h6 className=\"fa-18\">Employee Attendance</h6>\r\n\r\n//                         {Number(userTypeId === 1) || Number(userTypeId) === 0 ? (\r\n//                             <>\r\n//                                 <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                     <Button\r\n\r\n//                                         onClick={handleDownload}\r\n//                                         variant=\"contained\"\r\n\r\n//                                         disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n//                                     >\r\n\r\n//                                         Individual Report\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         onClick={() => {\r\n//                                             handleOverallDownload(filter?.From, filter?.To);\r\n\r\n//                                         }}\r\n//                                     >\r\n//                                         Monthly Report\r\n//                                     </Button>\r\n\r\n//                                     <Button\r\n//                                         onClick={() => {\r\n//                                             setAddEmployeeDialogOpen(true)\r\n//                                             // handleOverallWithPunch(filter?.From, filter?.To);\r\n\r\n//                                         }}\r\n//                                     >\r\n//                                         Cummulative Monthly Report\r\n//                                     </Button>\r\n\r\n\r\n//                                     <Button\r\n//                                         onClick={\r\n//                                             handleSummaryDownload\r\n//                                         }\r\n//                                     >\r\n//                                         Summary\r\n//                                     </Button>\r\n//                                 </div>\r\n//                             </>\r\n//                         ) : (\r\n//                             <div> </div>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div className=\"px-2 row mb-4\">\r\n//                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label>Employee</label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.EmpId, label: filter?.Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, EmpId: e.value, Name: e.label })}\r\n//                                 options={[{ value: 0, label: `ALL` }, ...employees.map(obj => ({ value: obj?.UserId, label: obj?.Name }))]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={dropdownPlaceholder}\r\n//                                 isDisabled={isDropdownDisabled}\r\n//                             />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label>From</label>\r\n//                             <input\r\n//                                 type=\"month\"\r\n//                                 className=\"cus-inpt\"\r\n//                                 value={filter?.From?.slice(0, 7)}\r\n//                                 onChange={handleFromChange}\r\n//                             />\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                     <FilterableTable\r\n//                         dataArray={attendanceData}\r\n//                         columns={[\r\n//                             {\r\n//                                 isCustomCell: true,\r\n//                                 Cell: ({ row }) => row.username,\r\n//                                 ColumnHeader: 'Employee',\r\n//                                 isVisible: 1,\r\n//                                 width: '20%',\r\n//                                 CellProps: {\r\n//                                     sx: {\r\n//                                         padding: '10px',\r\n//                                         textAlign: 'left',\r\n//                                         fontWeight: 'bold',\r\n//                                     },\r\n//                                 },\r\n//                             },\r\n//                             {\r\n//                                 isCustomCell: true,\r\n//                                 Cell: ({ row }) => formatAttendanceDate(row.LogDate || '--'),\r\n//                                 ColumnHeader: 'Log Date',\r\n//                                 isVisible: 1,\r\n//                                 width: '20%',\r\n//                                 CellProps: {\r\n//                                     sx: {\r\n//                                         padding: '10px',\r\n//                                         textAlign: 'center',\r\n//                                         color: 'gray',\r\n//                                     },\r\n//                                 },\r\n//                             },\r\n//                             {\r\n//                                 isCustomCell: true,\r\n//                                 ColumnHeader: 'Punch Details',\r\n//                                 isVisible: 1,\r\n//                                 width: '40%',\r\n//                                 CellProps: {\r\n//                                     sx: {\r\n//                                         display: 'flex',\r\n//                                         flexWrap: 'wrap',\r\n//                                         justifyContent: 'center',\r\n//                                     },\r\n//                                 },\r\n//                                 Cell: ({ row }) => (\r\n//                                     <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\r\n//                                         {row.AttendanceDetails ? (\r\n//                                             row.AttendanceDetails.split(',')\r\n//                                                 .map((detail) => detail.trim())\r\n//                                                 .filter((detail) => detail !== '')\r\n//                                                 .map((detail, index) => {\r\n\r\n//                                                     const parts = detail.split(' (');\r\n//                                                     const time = parts[0];\r\n\r\n//                                                     return (\r\n//                                                         <Chip\r\n//                                                             key={index}\r\n//                                                             label={time}\r\n//                                                             variant=\"outlined\"\r\n//                                                             size=\"small\"\r\n//                                                             sx={{ margin: '2px', color: 'green' }}\r\n//                                                         />\r\n//                                                     );\r\n//                                                 })\r\n//                                         ) : (\r\n//                                             <div>No Punch Details</div>\r\n//                                         )}\r\n//                                     </div>\r\n//                                 ),\r\n//                             }\r\n//                         ]}\r\n//                         EnableSerialNumber\r\n//                         CellSize=\"small\"\r\n//                         disablePagination={false}\r\n//                     />\r\n//                 </CardContent>\r\n//             </Card>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FingerPrintAttendanceReport;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","_filter$From","_filter$From2","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","navigate","useNavigate","location","useLocation","stateDetails","addEmployeeDialogOpen","setAddEmployeeDialogOpen","useState","getCurrentMonthYear","date","Date","year","getFullYear","month","getMonth","toString","padStart","concat","initialValue","From","To","EmpId","Name","query","URLSearchParams","search","defaultFilters","saleOrders","setSaleOrders","viewMode","setViewMode","expandedDepartment","setExpandedDepartment","dropdownEmployees","setDropdownEmployees","reload","setReload","attendanceData","setAttendanceData","loading","setLoading","isDropdownDisabled","setIsDropdownDisabled","employees","setEmployees","selectedEmployee","setSelectedEmployee","userTypeId","UserTypeId","parseData","contextObj","useContext","MyContext","dropdownPlaceholder","setDropdownPlaceholder","filter","setFilter","debouncedFilter","setDebouncedFilter","useEffect","timer","setTimeout","clearTimeout","fetchAttendanceData","fetchDropdownEmployees","getDaysInMonth","monthYear","split","getDate","filters","setFilters","FromDate","toISOString","ToDate","Cancel_status","departments","setDepartments","selectedDepartment","setSelectedDepartment","selectedEmployees","setSelectedEmployees","Add_Rights","today","fromDate","toDate","fetchLink","then","data","success","catch","e","console","error","finally","handleFromChange","selectedMonth","target","value","startDate","dayCount","endDate","handleSummaryDownload","async","response","overallData","getWorkingDays","allDays","currentDate","endDateObj","sundayCount","dateStr","push","getDay","setDate","length","days","totalDays","dateRange","totalWorkingDaysSummary","totalLeaveDaysSummary","exportData","map","row","punchDetails","AttendanceDetails","totalWorkingDays","totalLeaveDays","forEach","Array","isArray","detail","find","AttendanceStatus","EmployeeName","EmployeeID","Month","Branch","NumberOfSundays","NumberOfDaysInMonth","TotalWorkingDays","TotalLeaveDays","item","ws","XLSX","json_to_sheet","headers","sheet_add_aoa","origin","wb","book_new","book_append_sheet","handleDownload","trim","punchColumns","allPunchesEmpty","i","punch","attendanceStatus","Employee","username","formatAttendanceDate","LogDate","columnsOrder","from","_","reorderedData","reduce","acc","col","index","isCustomCell","ColumnHeader","isVisible","CellProps","sx","display","justifyContent","alignItems","Cell","_ref2","time","p","_jsx","Chip","label","size","margin","children","logDateTime","handleOverallDownload","count","dailyAttendance","totalPresent","TotalPresent","handleOverallWithPunch","_filteredAttendanceDa","filteredAttendanceData","some","user","Number","UserId","User_Mgt_Id","groupedData","Object","keys","toast","firstLogDate","toLocaleString","entries","_ref3","userAttendance","sheetName","slice","fileName","Company_id","userId","companyId","Authorization","filteredEmployees","prev","employee","queryFilters","get","isValidDate","Fromdate","Todate","pre","ISOString","updateQueryString","newFilters","params","replace","handleAddEmployeeClose","dataDepartment","dashboard","handleRefreshData","window","ExpendableComponent1","_ref5","monthlyAttendance","Employees","MonthlyAverageAttendance","err","currentYear","attendanceMap","Map","_item$UniqueEmployeeD","key","MonthNumber","YearNumber","set","UniqueEmployeeDays","flexDirection","gap","_jsxs","borderCollapse","border","textAlign","Emp_Name","Sex","colSpan","flex","borderRadius","overflowX","whiteSpace","number","_attendanceMap$get","uniqueEmployeeDays","minWidth","userSelect","marginTop","others","department","deptOptions","dept","handleDepartmentChange","selected","method","bodyData","_data$others","employeeOptions","emp","Emp_Id","departmentWiseCounts","React","_saleOrders$","DepartmentWiseCounts","parsed","filteredData","Department","toLowerCase","_Fragment","FilterableTable","title","className","Button","disabled","onClick","type","onChange","IconButton","Search","dataArray","EnableSerialNumber","columns","createCol","isExpendable","tableMaxHeight","expandableComp","_ref4","toggleExpand","TotalMaleEmployees","TotalFemaleEmployees","TotalEmployees","TotalMalePresentToday","TotalFemalePresentToday","TotalPresentToday","Dialog","open","maxWidth","PaperProps","height","DialogTitle","DialogContent","Autocomplete","multiple","options","getOptionLabel","isOptionEqualToValue","event","uniqueValues","val","self","findIndex","t","renderInput","TextField","placeholder","DialogActions","Card","CardContent","minHeight","Select","obj","styles","isSearchable","handleRefresh","Refresh","_ref6","_ref7","CellSize","disablePagination","_saleOrders$2","countsStr","isDisabled","_ref8","_ref9","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
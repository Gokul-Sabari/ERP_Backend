{"version":3,"file":"static/js/4252.6b4f4ac2.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/XlPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n\r\n    const items = brokerData?.Items || [];\r\n    let totalBrokerage = 0;\r\n    if (transactionType === 'sales') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0)\r\n    } else {\r\n\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brokerage || 0), 0)\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!packQuantities) return null;\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    function formatSignedNumber(value) {\r\n        const n = Number(value) || 0;\r\n        return `${n >= 0 ? '+' : ''}${NumberFormat(n)}`;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n                <DialogTitle>\r\n                    {transactionType === 'sales' ? 'Sales Nakal Report' : 'Delivery Nakal Report'} : {brokerData?.Broker_Name}\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        onClick={onClose}\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            right: 8,\r\n                            top: 8,\r\n                            color: (theme) => theme.palette.grey[500],\r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    {transactionType === 'sales' ? (\r\n                        <>\r\n                            <div className=\"text-center mb-3\">\r\n                                <h4>Broker Report Page</h4>\r\n                                <p className=\"mb-0\">Date: {brokerData?.Items?.[0]?.Date}</p>\r\n                                <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                                {packSizeSummary && (\r\n                                    <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                                )}\r\n                            </div>\r\n\r\n                            <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>PARTY NAME</th>\r\n                                        <th>ALIAS NAME</th>\r\n                                        <th className=\"text-end\">BILL RATE</th>\r\n                                        <th className=\"text-end\">BROKER EXP</th>\r\n                                        <th className=\"text-end\">QTY</th>\r\n                                        <th className=\"text-end\">KGS</th>\r\n                                        <th className=\"text-end\">AMOUNT</th>\r\n                                        <th className=\"text-end\">VILAIVAASI</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {items.map((item, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                            <td>{item.Short_Name}</td>\r\n                                            <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Brok_Amt || 0)}</td>\r\n                                            <td className=\"text-end\">{item.QTY}</td>\r\n                                            <td className=\"text-end\">{item.KGS}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"text-end fw-bold\">{packSizeSummary}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row mt-3\">\r\n                                <div className=\"col-6 offset-6\">\r\n                                    <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">COOLIE</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(totalCoolie)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">BROKERAGE</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(totalBrokerage)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(vilaivasi)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                                <td className=\"text-end fw-bold\">{formatSignedNumber(roundOff)}</td>\r\n                                            </tr>\r\n                                            <tr className=\"bg-light\">\r\n                                                <td className=\"fw-bold\">NET TOTAL</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(netTotalRounded)}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div style={{ fontFamily: 'Arial' }}>\r\n                                <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n                                    <h3 style={{ marginBottom: '5px' }}>{brokerData?.Broker_Name}</h3>\r\n                                    <p style={{ margin: '5px 0' }}>\r\n                                        {brokerData?.Items?.length > 0 ? (\r\n                                            <>\r\n\r\n                                                {fromDate} {' TO '} {toDate}\r\n                                            </>\r\n                                        ) : 'No date range available'}\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ borderBottom: '1px solid #000' }}>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '40%' }}>NAME</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '10%' }}>DATE</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '20%' }}>ALIAS NAME</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BAGS</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>QTY</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BROKERAGE EXP</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {items.map((item, index) => (\r\n                                            <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\r\n                                                <td style={{ padding: '5px' }}>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Date?.split('T')[0] || ''}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Short_Name}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.QTY}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.KGS}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(item.Brokerage || 0)}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        <tr style={{ fontWeight: 'bold', borderTop: '2px solid #000' }}>\r\n                                            <td colSpan=\"3\" style={{ padding: '5px', textAlign: 'right' }}>TOTAL</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_Qty || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_KGS || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(totalBrokerage)}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                    <div className=\"text-center mt-3 small\">\r\n                        <p>This is a computer generated report</p>\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;","import { useEffect } from 'react';\r\nimport ExcelJS from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst XlPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const items = brokerData?.Items || [];\r\n\r\n    let totalBrokerage;\r\n    if (transactionType === 'sales') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    }\r\n    else {\r\n        totalBrokerage = items.reduce((bro, item) => bro + parseInt(item.Brokerage || 0), 0);\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n    const formatSignedNumber = (num) => {\r\n        const n = Number(num) || 0;\r\n        return (n >= 0 ? \"+\" : \"\") + n.toLocaleString(\"en-IN\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    };\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            return acc;\r\n        }, {});\r\n        return Object.entries(packQuantities)\r\n            .sort(([a], [b]) => a - b)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`).join(' & ');\r\n    };\r\n\r\n    const handleExportExcel = async () => {\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Broker Report');\r\n\r\n        const thickBlackBorder = {\r\n            style: 'thick',\r\n            color: { argb: 'FF000000' }\r\n        };\r\n\r\n        const cellStyle = {\r\n            border: {\r\n                top: thickBlackBorder,\r\n                bottom: thickBlackBorder,\r\n                left: thickBlackBorder,\r\n                right: thickBlackBorder\r\n            }\r\n        };\r\n\r\n        const titleRow = worksheet.addRow([\r\n            `Broker Report: ${brokerData?.Broker_Name || ''} - Date: ${brokerData?.Items?.[0]?.Date}`\r\n        ]);\r\n        worksheet.mergeCells(`A${titleRow.number}:H${titleRow.number}`);\r\n        titleRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, size: 14 },\r\n                alignment: { horizontal: 'center' },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const headerRow = worksheet.addRow([\r\n            'PARTY NAME', 'ALIAS NAME', 'BILL RATE', 'BROKER EXP',\r\n            'QTY', 'KGS', 'AMOUNT', 'VILAIVAASI'\r\n        ]);\r\n\r\n        worksheet.columns = [\r\n            { width: 50 }, { width: 30 }, { width: 15 }, { width: 15 },\r\n            { width: 10 }, { width: 10 }, { width: 15 }, { width: 15 }\r\n        ];\r\n\r\n        headerRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 12 },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2F5496' } },\r\n                alignment: { horizontal: 'center', vertical: 'middle' }\r\n            };\r\n        });\r\n\r\n        items.forEach((item, index) => {\r\n            const row = worksheet.addRow([\r\n                item.Retailer_Name || item.Ledger_Name || '',\r\n                item.Short_Name || '',\r\n                item.Item_Rate || '',\r\n                item.Brok_Amt || '',\r\n                item.QTY || '',\r\n                item.KGS || '',\r\n                Number(item.Amount || 0),\r\n                Number(item.Vilaivasi_Rate || 0)\r\n            ]);\r\n\r\n            row.eachCell((cell) => {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { size: 11 },\r\n                    alignment: { vertical: 'middle' },\r\n                    fill: index % 2 === 1 ? { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF2F2F2' } } : undefined\r\n                };\r\n            });\r\n\r\n            row.getCell(7).numFmt = '#,##0.00';\r\n            row.getCell(8).numFmt = '#,##0.00';\r\n        });\r\n\r\n        const totalRow = worksheet.addRow([\r\n            '', '', '', 'TOTAL',\r\n            Number(brokerData?.Total_Qty || 0),\r\n            Number(brokerData?.Total_KGS || 0),\r\n            Number(brokerData?.Total_Amount || 0),\r\n            Number(brokerData?.VilaiVasi || 0)\r\n        ]);\r\n\r\n        totalRow.eachCell((cell, colNumber) => {\r\n            if (colNumber >= 4) {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                    fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF70AD47' } }\r\n                };\r\n                if (colNumber >= 5) {\r\n                    cell.numFmt = colNumber === 5 || colNumber === 6 ? '0.00' : '#,##0.00';\r\n                }\r\n            } else {\r\n                cell.style = cellStyle;\r\n            }\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const packSizesRow = worksheet.addRow([`Pack Sizes: ${getPackSizeSummary()}`]);\r\n        worksheet.mergeCells(`A${packSizesRow.number}:H${packSizesRow.number}`);\r\n        packSizesRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { italic: true },\r\n                alignment: { horizontal: 'left' }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const summaryRows = [\r\n            { label: 'COOLIE', value: Number(totalCoolie) },\r\n            { label: 'BROKERAGE', value: Number(-totalBrokerage) },\r\n            { label: 'VILAIVAASI', value: Number(-vilaivasi) },\r\n            { label: 'ROUNDOFF', value: formatSignedNumber(roundOff) },\r\n            { label: 'NET TOTAL', value: Number(netTotalRounded) }\r\n        ];\r\n\r\n        summaryRows.forEach((rowData) => {\r\n            const row = worksheet.addRow(['', '', '', '', '', rowData.label, rowData.value, '']);\r\n            row.getCell(6).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } },\r\n                alignment: { horizontal: 'right' }\r\n            };\r\n            row.getCell(7).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FF000000' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC000' } },\r\n                alignment: { horizontal: 'right' },\r\n                numFmt: '#,##0.00'\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n        worksheet.addRow([]);\r\n\r\n        const buffer = await workbook.xlsx.writeBuffer();\r\n        saveAs(new Blob([buffer]), `Broker_Report_${brokerData?.Broker_Name || 'Export'}_${brokerData?.Items?.[0]?.Date}.xlsx`);\r\n    };\r\n\r\n\r\n    const handleExportPurchase = async () => {\r\n        try {\r\n            const workbook = new ExcelJS.Workbook();\r\n            const worksheet = workbook.addWorksheet('Brokerage Report');\r\n\r\n            workbook.created = new Date();\r\n            workbook.modified = new Date();\r\n\r\n            const titleRow = worksheet.addRow([brokerData?.Broker_Name || '']);\r\n            titleRow.font = { bold: true, size: 14 };\r\n            titleRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A1:F1');\r\n\r\n            const dateRangeRow = worksheet.addRow([\r\n                brokerData?.Items?.length > 0 ? `${fromDate} TO ${toDate}` : 'No date range available'\r\n            ]);\r\n            dateRangeRow.font = { bold: true };\r\n            dateRangeRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A2:F2');\r\n\r\n\r\n            worksheet.addRow([]);\r\n\r\n\r\n            const headers = [\r\n                { header: 'NAME', width: 50 },\r\n                { header: 'DATE', width: 10 },\r\n                { header: 'ALIAS NAME', width: 40 },\r\n                { header: 'BAGS', width: 10 },\r\n                { header: 'QTY', width: 10 },\r\n                { header: 'BROKERAGE EXP', width: 15 }\r\n            ];\r\n\r\n\r\n            const headerRow = worksheet.addRow(headers.map(h => h.header));\r\n            headerRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            headers.forEach((header, index) => {\r\n                worksheet.getColumn(index + 1).width = header.width;\r\n            });\r\n\r\n            items.forEach((item) => {\r\n                const row = worksheet.addRow([\r\n                    item.Retailer_Name || item.Ledger_Name,\r\n                    item.Date?.split('T')[0] || '',\r\n                    item.Short_Name,\r\n                    item.QTY,\r\n                    item.KGS,\r\n                    Number(item.Brokerage || 0)\r\n                ]);\r\n\r\n\r\n                row.eachCell((cell) => {\r\n                    cell.font = { bold: true };\r\n                    cell.border = {\r\n                        top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                    };\r\n                });\r\n\r\n\r\n                row.getCell(4).alignment = { horizontal: 'right' };\r\n                row.getCell(5).alignment = { horizontal: 'right' };\r\n                row.getCell(6).alignment = { horizontal: 'right' };\r\n            });\r\n\r\n\r\n            const totalRow = worksheet.addRow([\r\n                '', '', 'TOTAL',\r\n                Number(brokerData?.Total_Qty) || 0,\r\n                Number(brokerData?.Total_KGS) || 0,\r\n                totalBrokerage\r\n            ]);\r\n\r\n\r\n            totalRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'medium', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            totalRow.getCell(4).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(5).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(6).alignment = { horizontal: 'right' };\r\n\r\n\r\n            const buffer = await workbook.xlsx.writeBuffer();\r\n            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = `${brokerData?.Broker_Name}_${fromDate}_to_${toDate}.xlsx`;\r\n            link.click();\r\n\r\n\r\n            setTimeout(() => {\r\n                URL.revokeObjectURL(url);\r\n            }, 100);\r\n\r\n        } catch (error) {\r\n            console.error('Error exporting to Excel:', error);\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            if (transactionType === 'sales') {\r\n                handleExportExcel().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            } else if (transactionType === 'purchase') {\r\n                handleExportPurchase().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            }\r\n        }\r\n    }, [open, transactionType]);\r\n\r\n    return null;\r\n};\r\nexport default XlPreviewModal;","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    Box,\r\n    Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from \"@mui/icons-material/PictureAsPdf\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\nimport XlPreviewModal from \"./XlPreviewModal\";\r\n\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n    const [transactionType, setTransactionType] = useState(\"sales\");\r\n\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [listingPagination, setListingPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n\r\n    const [salesData, setSalesData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerVilaiVasi: \"\",\r\n    });\r\n\r\n    const [purchaseData, setPurchaseData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerBrokerage: \"\",\r\n    });\r\n\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        VilaiVasiZero: { value: \"\", label: \"All\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({\r\n        ledgers: [],\r\n        items: [],\r\n    });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [xlPreviewOpen, setXlPreViewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n    const [xlPreviewData, setXlPreviewData] = useState(null);\r\n\r\n    const currentData = transactionType === \"sales\" ? salesData : purchaseData;\r\n    const setCurrentData =\r\n        transactionType === \"sales\" ? setSalesData : setPurchaseData;\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const endpoint =\r\n                    transactionType === \"sales\"\r\n                        ? \"brokerageNakalReport/sales\"\r\n                        : \"brokerageNakalReport/purchase\";\r\n\r\n                const res = await fetchLink({\r\n                    address: `reports/${endpoint}?FromDate=${currentData.filters.FromDate}&ToDate=${currentData.filters.ToDate}&broker=${currentData.filters.Broker.value}`,\r\n                });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: data,\r\n                        brokerageValues: initialBrokerage,\r\n                    }));\r\n                } else {\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: [],\r\n                        brokerageValues: {},\r\n                    }));\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    deliveryReport: [],\r\n                    brokerageValues: {},\r\n                }));\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [transactionType, currentData.filters.refresh]);\r\n\r\n    const tableConfigs = {\r\n        sales: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Do No\", key: \"Do_No\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Ledger_Name\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\" },\r\n                { label: \"Bill_Qty\", key: \"Bill_Qty\", align: \"right\" },\r\n                { label: \"Qty\", key: \"displayQuantity\", align: \"right\" },\r\n                {\r\n                    label: \"Rate\",\r\n                    key: \"Rate\",\r\n                    align: \"right\",\r\n                    render: (row) => row.Rate || row.Item_Rate,\r\n                },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Amount\", align: \"right\" },\r\n                {\r\n                    label: \"Brok.Rate\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Brokerage}\r\n                            onChange={(e) => handleChange(idx, \"Brokerage\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Brokerage * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"Coolie.Rate\",\r\n                    key: \"Coolie\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Coolie}\r\n                            onChange={(e) => handleChange(idx, \"Coolie\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Coolie.Amt\",\r\n                    key: \"CoolieAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Coolie * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"VilaiVasi\",\r\n                    key: \"VilaiVasi\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                { label: \"Narration\", key: \"Narration\", align: \"right\" },\r\n                {\r\n                    label: \"Vilai Amt\",\r\n                    key: \"VilaiAmt\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, vilaivasiValue, __, calcVilaiAmt) =>\r\n                        (+calcVilaiAmt(vilaivasiValue, row.Bill_Qty)).toFixed(2),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Broker\", key: \"Broker_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_VilaiVasi\", key: \"VilaiVasi\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n        purchase: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Po_Entry_Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Invoice No\", key: \"Invoice\" },\r\n                { label: \"Retailer\", key: \"Retailer_Name\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Bill_Qty\", key: \"Bill_Qty\", align: \"right\" },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                {\r\n                    label: \"Qty\",\r\n                    key: \"displayQuantity\",\r\n                    align: \"right\",\r\n                    render: (row) => Number(row.displayQuantity).toFixed(2),\r\n                },\r\n                { label: \"Rate\", key: \"Item_Rate\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Total_Invoice_value\", align: \"right\" },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Supplier\", key: \"Supplier_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     const fetchDatasetAndDropdowns = async () => {\r\n    //         try {\r\n    //             loadingOn();\r\n    //             let url = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n    //             if (filtersListing.Broker.value)\r\n    //                 url += `&broker=${filtersListing.Broker.value}`;\r\n    //             if (filtersListing.Ledger.value)\r\n    //                 url += `&ledger=${filtersListing.Ledger.value}`;\r\n    //             if (filtersListing.Item.value)\r\n    //                 url += `&item=${filtersListing.Item.value}`;\r\n    //             if (filtersListing.VilaiVasiZero.value)\r\n    //                 url += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n\r\n    //             const res = await fetchLink({ address: url });\r\n    //             if (res.success) {\r\n    //                 const data = toArray(res.data);\r\n    //                 setDataset(data);\r\n    //                 const allItems = data.flatMap((item) => item.Items || []);\r\n    //                 const uniqueLedgers = Array.from(\r\n    //                     new Map(\r\n    //                         allItems.map((item) => [\r\n    //                             item.Ledger_Tally_Id,\r\n    //                             { value: item.Ledger_Tally_Id, label: item.Ledger_Name },\r\n    //                         ])\r\n    //                     ).values()\r\n    //                 );\r\n    //                 const uniqueItems = Array.from(\r\n    //                     new Map(\r\n    //                         allItems.map((item) => [\r\n    //                             item.Product_Id,\r\n    //                             { value: item.Product_Id, label: item.Product_Name },\r\n    //                         ])\r\n    //                     ).values()\r\n    //                 );\r\n    //                 setDropdownOptionsListing({\r\n    //                     ledgers: uniqueLedgers,\r\n    //                     items: uniqueItems,\r\n    //                 });\r\n    //             }\r\n    //         } catch (e) {\r\n    //             console.error(e);\r\n    //         } finally {\r\n    //             loadingOff();\r\n    //         }\r\n    //     };\r\n    //     fetchDatasetAndDropdowns();\r\n    // }, [filtersListing.refresh]);\r\n\r\n    // Event handlers\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n\r\n                let baseUrl = \"\";\r\n                if (transactionType === \"sales\") {\r\n                    baseUrl = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                } else if (transactionType === \"purchase\") {\r\n                    baseUrl = `reports/brokerageNagalDelivery/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                }\r\n\r\n                if (filtersListing.Broker.value)\r\n                    baseUrl += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value)\r\n                    baseUrl += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value)\r\n                    baseUrl += `&item=${filtersListing.Item.value}`;\r\n                if (filtersListing.VilaiVasiZero.value)\r\n                    baseUrl += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n\r\n                const res = await fetchLink({ address: baseUrl });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n\r\n                    const uniqueLedgers = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Ledger_Tally_Id,\r\n                                { value: item.Ledger_Tally_Id, label: item.Ledger_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    const uniqueItems = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Product_Id,\r\n                                { value: item.Product_Id, label: item.Product_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    setDropdownOptionsListing({\r\n                        ledgers: uniqueLedgers,\r\n                        items: uniqueItems,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh, transactionType]);\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) =>\r\n        setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) =>\r\n        setDataEntryPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n    const handleListingPageChange = (event, newPage) =>\r\n        setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) =>\r\n        setListingPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n\r\n    const handleBrokerageChange = (doId, productId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = `${doId}-${productId}`;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            brokerageValues: { ...prev.brokerageValues, [key]: value },\r\n        }));\r\n    };\r\n\r\n    const handleExpandBroker = (brokerName) =>\r\n        setExpandedBrokers((prev) => ({\r\n            ...prev,\r\n            [brokerName]: !prev[brokerName],\r\n        }));\r\n\r\n    const closeDialogDataEntry = () =>\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            filters: { ...prev.filters, filterDialog: false },\r\n        }));\r\n\r\n    const closeDialogListing = () =>\r\n        setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n\r\n            const recordsToSave = currentData.deliveryReport.map((item) => {\r\n                const brokerageValue =\r\n                    currentData.brokerageValues[`${item.Do_Id}-${item.Product_Id}`] || 0;\r\n                return {\r\n                    ...item,\r\n                    brokerage: parseFloat(brokerageValue) || 0,\r\n                    Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                    Vilaivasi_Rate:\r\n                        ((parseFloat(brokerageValue) || 0) / 100) *\r\n                        (parseFloat(item.Bill_Qty) || 0),\r\n                    Brok_Rate: item?.Brokerage || 0,\r\n                    Brok_Amt: (item?.Brokerage || 0) * (item?.displayQuantity || 0),\r\n                    Coolie_Rate: item?.Coolie || 0,\r\n                    Coolie_Amt: (item?.Coolie || 0) * (item?.displayQuantity || 0),\r\n                    Amount: item?.Amount || 0,\r\n                    Created_By: storage?.UserId,\r\n                    Transaction_Type: transactionType.toUpperCase(),\r\n                };\r\n            });\r\n\r\n            const apiAddress =\r\n                transactionType === \"sales\"\r\n                    ? \"reports/brokerageNagal/create\"\r\n                    : \"reports/brokerageNakal/deliveryCreate\";\r\n\r\n            const response = await fetchLink({\r\n                address: apiAddress,\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(\r\n                    `${transactionType === \"sales\" ? \"Sales\" : \"Purchase\"\r\n                    } Nakal Created successfully!`\r\n                );\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    filters: { ...prev.filters, refresh: !prev.filters.refresh },\r\n                }));\r\n            } else {\r\n                toast.error(response.message || \"Save operation failed\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Save error:\", error);\r\n            toast.error(\"Save failed due to an error\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const handleFieldChange = (idx, fieldName, value) => {\r\n        const updatedDeliveryReport = [...currentData.deliveryReport];\r\n        updatedDeliveryReport[idx][fieldName] = parseFloat(value) || 0;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            deliveryReport: updatedDeliveryReport,\r\n        }));\r\n    };\r\n\r\n    const handleTransactionTypeChange = (type) => {\r\n        setTransactionType(type);\r\n        setDataEntryPagination({ page: 0, rowsPerPage: 10 });\r\n    };\r\n\r\n    const handleHeaderVilaiVasiChange = (e) => {\r\n        const value = e.target.value;\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = value;\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: value,\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    const handleClearAllVilaiVasi = () => {\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = \"\";\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: \"\",\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    // const handleBrokergeChangePurchase = (e) => {\r\n    //     const value = e.target.value;\r\n    //     setCurrentData(prev => {\r\n    //         const updatedBrokerageValue = { ...prev.brokerageValues };\r\n    //         prev.deliveryReport.forEach((item) => {\r\n    //             const key = `${item.Do_Id}-${item.Product_Id}`;\r\n    //             updatedBrokerageValue[key] = value;\r\n    //         });\r\n    //         return {\r\n    //             ...prev,\r\n    //             headerBrokerage: value,\r\n    //             brokerageValues: updatedBrokerageValue\r\n    //         };\r\n    //     });\r\n    // };\r\n\r\n    //     const hanldeClearAllBrokerage = () => {\r\n    //     setCurrentData(prev => {\r\n    //         const updatedBrokerageValues = { ...prev.brokerageValues };\r\n    //         prev.deliveryReport.forEach((item) => {\r\n    //             const key = `${item.PIN_Id}-${item.Product_Id}`;\r\n    //             updatedBrokerageValues[key] = \"\";\r\n    //         });\r\n    //         return {\r\n    //             ...prev,\r\n    //             headerBrokerage: \"\",\r\n    //             brokerageValues: updatedBrokerageValues\r\n    //         };\r\n    //     });\r\n    // };\r\n\r\n    const totalBagsDataEntry = useMemo(\r\n        () =>\r\n            currentData.deliveryReport.reduce(\r\n                (acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0),\r\n                0\r\n            ),\r\n        [currentData.deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(\r\n        () => dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) =>\r\n        ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || item.Supplier_Name || \"Unknown\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n\r\n    const brokerNames = useMemo(\r\n        () => Object.keys(groupedByBroker),\r\n        [groupedByBroker]\r\n    );\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Grid\r\n                    container\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                    mb={3}\r\n                >\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Brokerage Nagal Report\r\n                    </Typography>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                        <Box display=\"flex\" gap={1}>\r\n                            <Button\r\n                                variant={transactionType === \"sales\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"sales\")}\r\n                            >\r\n                                Sales\r\n                            </Button>\r\n                            <Button\r\n                                variant={\r\n                                    transactionType === \"purchase\" ? \"contained\" : \"outlined\"\r\n                                }\r\n                                onClick={() => handleTransactionTypeChange(\"purchase\")}\r\n                            >\r\n                                Purchase\r\n                            </Button>\r\n                        </Box>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={<FilterAlt />}\r\n                            onClick={() => {\r\n                                if (activeTab === 0) {\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, filterDialog: true },\r\n                                    }));\r\n                                } else {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        filterDialog: true,\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Filters\r\n                        </Button>\r\n                        <Typography component=\"span\" variant=\"body1\">\r\n                            Total Bags:{\" \"}\r\n                            <strong>\r\n                                {activeTab === 0 ? totalBagsDataEntry : totalBagsListing}\r\n                            </strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n\r\n                {activeTab === 0 && (\r\n                    <>\r\n                        <Box\r\n                            mb={1}\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                                alignItems: \"center\",\r\n                                gap: 2,\r\n                            }}\r\n                        >\r\n                            <Typography sx={{ fontWeight: \"bold\" }}>\r\n                                {transactionType === \"sales\"\r\n                                    ? \"VilaiVasi (All):\"\r\n                                    : \"Brokerage (All):\"}\r\n                            </Typography>\r\n                            <TextField\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                value={currentData.headerVilaiVasi}\r\n                                inputProps={{ step: \"1\" }}\r\n                                onChange={handleHeaderVilaiVasiChange}\r\n                                placeholder={`Set ${transactionType === \"sales\" ? \"VilaiVasi\" : \"Brokerage\"\r\n                                    } for all`}\r\n                                sx={{\r\n                                    \"& .MuiInputBase-input\": {\r\n                                        height: 40,\r\n                                        boxSizing: \"border-box\",\r\n                                    },\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={handleClearAllVilaiVasi}\r\n                            >\r\n                                Clear All\r\n                            </Button>\r\n                        </Box>\r\n\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {currentData.deliveryReport.length > 0 ? (\r\n                                        currentData.deliveryReport\r\n                                            .slice(\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage,\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage +\r\n                                                dataEntryPagination.rowsPerPage\r\n                                            )\r\n                                            .map((row, idx) => {\r\n                                                const vilaivasiValue =\r\n                                                    currentData.brokerageValues[\r\n                                                    `${row.Do_Id}-${row.Product_Id}`\r\n                                                    ] || \"\";\r\n                                                // const vilaivasiAmt = calculateVilaivasiAmt(\r\n                                                //   vilaivasiValue,\r\n                                                //   row.Bill_Qty\r\n                                                // );\r\n                                                return (\r\n                                                    <TableRow key={idx} hover>\r\n                                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                                            (column) => (\r\n                                                                <TableCell\r\n                                                                    key={column.key}\r\n                                                                    align={column.align || \"left\"}\r\n                                                                >\r\n                                                                    {column.render\r\n                                                                        ? column.render(\r\n                                                                            row,\r\n                                                                            idx,\r\n                                                                            handleFieldChange,\r\n                                                                            vilaivasiValue,\r\n                                                                            handleBrokerageChange,\r\n                                                                            calculateVilaivasiAmt\r\n                                                                        )\r\n                                                                        : row[column.key]}\r\n                                                                </TableCell>\r\n                                                            )\r\n                                                        )}\r\n                                                    </TableRow>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].dataEntryColumns.length\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={currentData.deliveryReport.length}\r\n                                rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                page={dataEntryPagination.page}\r\n                                onPageChange={handleDataEntryPageChange}\r\n                                onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n\r\n                        <Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={handleSave}\r\n                                disabled={saving}\r\n                                size=\"large\"\r\n                            >\r\n                                {saving\r\n                                    ? \"Saving...\"\r\n                                    : `Save ${transactionType === \"sales\" ? \"Sales\" : \"Purchase\"\r\n                                    } Brokerage`}\r\n                            </Button>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n\r\n                {activeTab === 1 && (\r\n                    <>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].listingColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {brokerNames.length > 0 ? (\r\n                                        brokerNames\r\n                                            .slice(\r\n                                                listingPagination.page * listingPagination.rowsPerPage,\r\n                                                listingPagination.page * listingPagination.rowsPerPage +\r\n                                                listingPagination.rowsPerPage\r\n                                            )\r\n                                            .map((brokerName, idx) => {\r\n                                                const brokerData = groupedByBroker[brokerName][0];\r\n                                                return (\r\n                                                    <React.Fragment key={idx}>\r\n                                                        <TableRow hover>\r\n                                                            <TableCell>\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    onClick={() => handleExpandBroker(brokerName)}\r\n                                                                >\r\n                                                                    {expandedBrokers[brokerName] ? (\r\n                                                                        <KeyboardArrowUp />\r\n                                                                    ) : (\r\n                                                                        <KeyboardArrowDown />\r\n                                                                    )}\r\n                                                                </IconButton>\r\n                                                                {brokerName}\r\n                                                            </TableCell>\r\n                                                            {tableConfigs[transactionType].listingColumns\r\n                                                                .slice(1)\r\n                                                                .map((column) => (\r\n                                                                    <TableCell\r\n                                                                        key={column.key}\r\n                                                                        align={column.align || \"left\"}\r\n                                                                    >\r\n                                                                        {brokerData[column.key] || \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            <TableCell align=\"right\">\r\n                                                                <Tooltip title=\"Preview PDF\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={() => {\r\n                                                                            setPdfPreviewData(brokerData);\r\n                                                                            setPdfPreviewOpen(true);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <PictureAsPdfIcon />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n\r\n                                                                <Tooltip title=\"Preview Excel\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={() => {\r\n                                                                            setXlPreviewData(brokerData);\r\n                                                                            setXlPreViewOpen(true);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <FileDownloadIcon />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell\r\n                                                                style={{ padding: 0 }}\r\n                                                                colSpan={\r\n                                                                    tableConfigs[transactionType].listingColumns\r\n                                                                        .length + 1\r\n                                                                }\r\n                                                            >\r\n                                                                <Collapse\r\n                                                                    in={expandedBrokers[brokerName]}\r\n                                                                    timeout=\"auto\"\r\n                                                                    unmountOnExit\r\n                                                                >\r\n                                                                    <Box margin={1}>\r\n                                                                        <Typography\r\n                                                                            variant=\"h6\"\r\n                                                                            gutterBottom\r\n                                                                            component=\"div\"\r\n                                                                        >\r\n                                                                            Details for {brokerName}\r\n                                                                        </Typography>\r\n                                                                        <Table size=\"small\">\r\n                                                                            <TableHead>\r\n                                                                                <TableRow>\r\n                                                                                    <TableCell>Date</TableCell>\r\n                                                                                    <TableCell>Do_Inv_No </TableCell>\r\n                                                                                    <TableCell>\r\n                                                                                        {transactionType === \"sales\"\r\n                                                                                            ? \"Retailer\"\r\n                                                                                            : \"Supplier\"}\r\n                                                                                    </TableCell>\r\n\r\n                                                                                    <TableCell>Product</TableCell>\r\n                                                                                    <TableCell>Short Name</TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        QTY\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        KGS\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Amount\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Bill_Qty\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Brokerage\r\n                                                                                    </TableCell>\r\n                                                                                </TableRow>\r\n                                                                            </TableHead>\r\n                                                                            <TableBody>\r\n                                                                                {groupedByBroker[brokerName].flatMap(\r\n                                                                                    (broker) =>\r\n                                                                                        broker.Items?.map(\r\n                                                                                            (item, itemIdx) => (\r\n                                                                                                <TableRow key={itemIdx}>\r\n                                                                                                    <TableCell>\r\n                                                                                                        {item.Date}\r\n                                                                                                    </TableCell>\r\n                                                                                                    {transactionType ===\r\n                                                                                                        \"sales\" ? (\r\n                                                                                                        <td>{item.Do_Inv_No}</td>\r\n                                                                                                    ) : (\r\n                                                                                                        <td>{item.Do_Inv_No}</td>\r\n                                                                                                    )}\r\n\r\n                                                                                                    <TableCell>\r\n                                                                                                        {item.Retailer_Name ||\r\n                                                                                                            item.Supplier_Name}\r\n                                                                                                    </TableCell>\r\n                                                                                                    <TableCell>\r\n                                                                                                        {item.Product_Name}\r\n                                                                                                    </TableCell>\r\n                                                                                                    <TableCell>\r\n                                                                                                        {item.Short_Name}\r\n                                                                                                    </TableCell>\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        {item.QTY}\r\n                                                                                                    </TableCell>\r\n\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        {item.KGS}\r\n                                                                                                    </TableCell>\r\n                                                                                                    {transactionType ===\r\n                                                                                                        \"sales\" ? (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.Amount}\r\n                                                                                                        </TableCell>\r\n                                                                                                    ) : (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.Total_Invoice_value}\r\n                                                                                                        </TableCell>\r\n                                                                                                    )}\r\n                                                                                                    {transactionType ===\r\n                                                                                                        \"sales\" ? (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.QTY}\r\n                                                                                                        </TableCell>\r\n                                                                                                    ) : (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.Bill_Qty}\r\n                                                                                                        </TableCell>\r\n                                                                                                    )}\r\n\r\n                                                                                                    {transactionType ===\r\n                                                                                                        \"sales\" ? (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.Brok_Amt}\r\n                                                                                                        </TableCell>\r\n                                                                                                    ) : (\r\n                                                                                                        <TableCell align=\"right\">\r\n                                                                                                            {item.Brokerage}\r\n                                                                                                        </TableCell>\r\n                                                                                                    )}\r\n                                                                                                </TableRow>\r\n                                                                                            )\r\n                                                                                        ) || []\r\n                                                                                )}\r\n                                                                            </TableBody>\r\n                                                                        </Table>\r\n                                                                    </Box>\r\n                                                                </Collapse>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].listingColumns.length +\r\n                                                    1\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={brokerNames.length}\r\n                                rowsPerPage={listingPagination.rowsPerPage}\r\n                                page={listingPagination.page}\r\n                                onPageChange={handleListingPageChange}\r\n                                onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n                    </>\r\n                )}\r\n\r\n                <PdfPreviewModal\r\n                    open={pdfPreviewOpen}\r\n                    onClose={() => setPdfPreviewOpen(false)}\r\n                    brokerData={pdfPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n                <XlPreviewModal\r\n                    open={xlPreviewOpen}\r\n                    onClose={() => setXlPreViewOpen(false)}\r\n                    brokerData={xlPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n            </Paper>\r\n\r\n            <Dialog\r\n                open={currentData.filters.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">\r\n                            {transactionType === \"sales\" ? \"Sales\" : \"Purchase\"} Data Entry\r\n                            Filters\r\n                        </Typography>\r\n                        <IconButton onClick={closeDialogDataEntry}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={currentData.filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, FromDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={currentData.filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, ToDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={currentData.filters.Broker}\r\n                                onChange={(selected) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, Broker: selected },\r\n                                    }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogDataEntry}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setCurrentData((prev) => ({\r\n                                ...prev,\r\n                                headerVilaiVasi: \"\",\r\n                                brokerageValues: {},\r\n                                filters: {\r\n                                    ...prev.filters,\r\n                                    refresh: !prev.filters.refresh,\r\n                                    filterDialog: false,\r\n                                },\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Listing Filter Dialog */}\r\n            <Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">Listing Filters</Typography>\r\n                        <IconButton onClick={closeDialogListing}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        FromDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        ToDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        refresh: !prev.refresh,\r\n                                    }));\r\n                                }}\r\n                                style={{ height: \"30px\", width: \"100%\" }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        {\r\n                            transactionType === 'sales' ? (\r\n                                <>\r\n                                    <Grid item xs={12}>\r\n                                        <Select\r\n                                            fullWidth\r\n                                            value={filtersListing.VilaiVasiZero}\r\n                                            onChange={(selected) =>\r\n                                                setFiltersListing((prev) => ({\r\n                                                    ...prev,\r\n                                                    VilaiVasiZero: selected,\r\n                                                }))\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"All\" },\r\n                                                { value: \"zero\", label: \"VilaiVasi Zero\" },\r\n                                                { value: \"nonzero\", label: \"VilaiVasi Non-Zero\" },\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            menuPortalTarget={document.body}\r\n                                            placeholder=\"VilaiVasi Zero/Non-Zero\"\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n\r\n                                </>\r\n                            )}\r\n\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Broker: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Ledger: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Ledger\" },\r\n                                    ...dropdownOptionsListing.ledgers,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Item: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Item\" },\r\n                                    ...dropdownOptionsListing.items,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogListing}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setFiltersListing((prev) => ({\r\n                                ...prev,\r\n                                refresh: !prev.refresh,\r\n                                filterDialog: false,\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","_brokerData$Items","_brokerData$Items$","_brokerData$Items2","open","onClose","brokerData","transactionType","fromDate","toDate","printRef","useRef","handlePrint","useReactToPrint","content","current","items","Items","totalBrokerage","reduce","sum","item","parseFloat","Brok_Amt","Brokerage","totalCoolie","Coolie_Amt","totalAmount","Total_Amount","vilaivasi","VilaiVasi","netTotalRaw","netTotalRounded","Math","round","roundOff","packSizeSummary","getPackSizeSummary","packQuantities","acc","packSize","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","join","_jsx","_Fragment","children","_jsxs","Dialog","fullWidth","maxWidth","DialogTitle","Broker_Name","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","index","Retailer_Name","Ledger_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","value","n","Number","formatSignedNumber","fontFamily","textAlign","marginBottom","margin","length","borderCollapse","_item$Date","split","borderTop","DialogActions","Button","startIcon","Download","bro","parseInt","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","a","b","useEffect","async","_brokerData$Items2$","workbook","ExcelJS","worksheet","addWorksheet","thickBlackBorder","argb","cellStyle","border","bottom","left","titleRow","addRow","mergeCells","number","eachCell","cell","font","bold","alignment","horizontal","fill","type","pattern","fgColor","headerRow","columns","vertical","forEach","row","undefined","getCell","numFmt","colNumber","packSizesRow","italic","label","rowData","buffer","xlsx","writeBuffer","saveAs","Blob","handleExportExcel","then","_brokerData$Items3","created","modified","dateRangeRow","headers","header","h","getColumn","totalRow","blob","url","URL","createObjectURL","link","document","createElement","href","download","click","setTimeout","revokeObjectURL","error","console","handleExportPurchase","loadingOn","loadingOff","setTransactionType","useState","dataEntryPagination","setDataEntryPagination","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","salesData","setSalesData","deliveryReport","brokerageValues","filters","FromDate","toISOString","ToDate","Broker","refresh","filterDialog","headerVilaiVasi","purchaseData","setPurchaseData","headerBrokerage","filtersListing","setFiltersListing","Ledger","Item","VilaiVasiZero","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","xlPreviewOpen","setXlPreViewOpen","pdfPreviewData","setPdfPreviewData","xlPreviewData","setXlPreviewData","currentData","setCurrentData","fetchLink","data","success","prev","toArray","catch","endpoint","res","initialBrokerage","key","Do_Id","Product_Id","brokerage","err","fetchData","tableConfigs","sales","dataEntryColumns","render","_row$Date","Rate","idx","handleChange","TextField","onChange","e","target","inputProps","step","displayQuantity","toFixed","Coolie","vilaivasiValue","handleVilaiChange","_","__","calcVilaiAmt","Bill_Qty","listingColumns","purchase","_row$Po_Entry_Date","Po_Entry_Date","baseUrl","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","Product_Name","fetchDatasetAndDropdowns","handleBrokerageChange","doId","productId","closeDialogDataEntry","closeDialogListing","handleFieldChange","fieldName","updatedDeliveryReport","handleTransactionTypeChange","totalBagsDataEntry","useMemo","Addition","Qty","totalBagsListing","Total_Bags","calculateVilaivasiAmt","billQty","groupedByBroker","Supplier_Name","push","brokerNames","keys","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","display","gap","FilterAlt","Tabs","handleTabChange","event","newValue","Tab","updatedBrokerageValues","placeholder","height","boxSizing","handleClearAllVilaiVasi","TableContainer","Table","TableHead","TableRow","column","TableCell","TableBody","slice","hover","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","mt","Save","recordsToSave","brokerageValue","Vilai_Vasi","Brok_Rate","Coolie_Rate","Created_By","UserId","Transaction_Type","toUpperCase","apiAddress","response","method","bodyData","toast","message","disabled","brokerName","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Tooltip","title","PictureAsPdfIcon","FileDownloadIcon","Collapse","in","timeout","unmountOnExit","gutterBottom","_broker$Items","itemIdx","Do_Inv_No","Total_Invoice_value","handleListingPageChange","PdfPreviewModal","XlPreviewModal","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","body","isSearchable"],"sourceRoot":""}
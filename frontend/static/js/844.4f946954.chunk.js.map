{"version":3,"file":"static/js/844.4f946954.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Inventry/TripMaster/TripSheets.jsx","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center', tdClass = '') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        tdClass,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass\r\n                                ? String(' ' + column?.tdClass({ row, Field_Name, index: tdIndex }) + ' ')\r\n                                : ''\r\n                        );\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`\r\n                                        border-end`\r\n                                        + horizondalalignClass\r\n                                        + verticalAlignClass\r\n                                        + tdClass(row, column.Field_Name, index)\r\n                                    }\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`\r\n                                    border-end`\r\n                                    + horizondalalignClass\r\n                                    + verticalAlignClass\r\n                                    + tdClass(row, column.Field_Name, index)\r\n                                }\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport FilterableTable, { ButtonActions, createCol } from \"../../../Components/filterableTable2\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { Addition, checkIsNumber, ISOString, isValidDate, isValidObject, LocalDate, LocalTime, NumberFormat, numberToWords, Subraction, timeDuration } from \"../../../Components/functions\";\r\nimport { Download, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst TripSheets = ({ loadingOn, loadingOff }) => {\r\n\r\n    const nav = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const [tripData, setTripData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        filterDialog: false,\r\n        refresh: false,\r\n        printPreviewDialog: false,\r\n        FromGodown: [],\r\n        ToGodown: [],\r\n        Staffs: [],\r\n        Items: []\r\n    });\r\n    const [selectedRow, setSelectedRow] = useState({});\r\n    const printRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `inventory/tripSheet?Fromdate=${filters?.fetchFrom}&Todate=${filters?.fetchTo}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTripData(data.data);\r\n            }\r\n        }).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        }).catch(e => console.error(e))\r\n    }, [filters?.fetchFrom, filters?.fetchTo]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, fetchFrom: queryFilters.Fromdate, fetchTo: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        nav(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters({\r\n            ...filters,\r\n            filterDialog: false,\r\n        });\r\n    }\r\n\r\n    const TaxData = (Array.isArray(selectedRow?.Products_List) ? selectedRow.Products_List : []).reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode == item.HSN_Code);\r\n\r\n        const {\r\n            Taxable_Value = 0, Cgst_P = 0, Sgst_P = 0, Igst_P = 0, HSN_Code\r\n        } = item;\r\n\r\n        if (HSNindex !== -1) {\r\n            const prev = data[HSNindex];\r\n            const newValue = {\r\n                ...prev,\r\n                taxableValue: Addition(prev.taxableValue, Taxable_Value),\r\n                cgst: Addition(prev.cgst, Cgst_P),\r\n                sgst: Addition(prev.sgst, Sgst_P),\r\n                igst: Addition(prev.igst, Igst_P),\r\n                totalTax: Addition(prev.totalTax, Addition(Addition(Cgst_P, Sgst_P), Igst_P)),\r\n            };\r\n\r\n            data[HSNindex] = newValue;\r\n            return data;\r\n        }\r\n\r\n        const newEntry = {\r\n            hsnCode: HSN_Code,\r\n            taxableValue: Number(Taxable_Value) ?? 0,\r\n            cgst: Number(Cgst_P) ?? 0,\r\n            sgst: Number(Sgst_P) ?? 0,\r\n            igst: Number(Igst_P) ?? 0,\r\n            totalTax: Addition(Addition(Cgst_P, Sgst_P), Igst_P),\r\n        };\r\n\r\n        return [...data, newEntry];\r\n    }, []);\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const uniqueFromLocations = useMemo(() => {\r\n        const allLocations = tripData.flatMap((trip) =>\r\n            trip.Products_List.map((product) => product.FromLocation)\r\n        );\r\n        return [...new Set(allLocations)].map((location) => ({\r\n            value: location,\r\n            label: location,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const uniqueToLocations = useMemo(() => {\r\n        const allLocations = tripData.flatMap((trip) =>\r\n            trip.Products_List.map((product) => product.ToLocation)\r\n        );\r\n        return [...new Set(allLocations)].map((location) => ({\r\n            value: location,\r\n            label: location,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const uniqueItems = useMemo(() => {\r\n        const allItems = tripData.flatMap((trip) =>\r\n            trip.Products_List.map((product) => product.Product_Name)\r\n        );\r\n        return [...new Set(allItems)].map(items => ({\r\n            value: items,\r\n            label: items,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const uniqueStaffs = useMemo(() => {\r\n        const allStaffs = tripData.flatMap((trip) =>\r\n            trip.Employees_Involved.map((staff) => staff.Emp_Name)\r\n        );\r\n        return [...new Set(allStaffs)].map((name) => ({\r\n            value: name,\r\n            label: name,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const filteredData = useMemo(() => {\r\n        return tripData.filter(trip => {\r\n            const hasFromGodownMatch = filters.FromGodown.length > 0\r\n                ? trip.Products_List.some(product =>\r\n                    filters.FromGodown.some(selected => selected.value === product.FromLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasToGodownMatch = filters.ToGodown.length > 0\r\n                ? trip.Products_List.some(product =>\r\n                    filters.ToGodown.some(selected => selected.value === product.ToLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasItemMatch = filters.Items.length > 0\r\n                ? trip.Products_List.some(product =>\r\n                    filters.Items.some(selected => selected.value === product.Product_Name)\r\n                )\r\n                : false;\r\n\r\n            const hasEmployeeMatch = filters.Staffs.length > 0\r\n                ? trip.Employees_Involved.some(staff =>\r\n                    filters.Staffs.some(selected => selected.value === staff.Emp_Name)\r\n                )\r\n                : false;\r\n\r\n            return hasFromGodownMatch || hasToGodownMatch || hasItemMatch || hasEmployeeMatch;\r\n        });\r\n    }, [tripData, filters]);\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                dataArray={(\r\n                    filters.FromGodown.length > 0 ||\r\n                    filters.ToGodown.length > 0 ||\r\n                    filters.Staffs.length > 0 ||\r\n                    filters.Items.length > 0\r\n                ) ? filteredData : tripData}\r\n                title=\"Trip Sheets\"\r\n                maxHeightOption\r\n                ExcelPrintOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => nav('/erp/inventory/tripSheet/searchGodown')}\r\n                        >Add</Button>\r\n                        <Tooltip title='Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                            ><FilterAlt /></IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                initialPageCount={10}\r\n                columns={[\r\n                    createCol('Trip_Date', 'date', 'Date'),\r\n                    createCol('Trip_No', 'string'),\r\n                    createCol('Challan_No', 'string', 'Challan'),\r\n                    createCol('Vehicle_No', 'string', 'Vehicle'),\r\n                    createCol('Branch_Name', 'string', 'Branch'),\r\n                    createCol('StartTime', 'time', 'Start Time'),\r\n                    createCol('EndTime', 'time', 'End Time'),\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Time Taken',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const startTime = row?.StartTime ? new Date(row.StartTime) : '';\r\n                            const endTime = row.EndTime ? new Date(row.EndTime) : '';\r\n                            const timeTaken = (startTime && endTime) ? timeDuration(startTime, endTime) : '00:00';\r\n                            return (\r\n                                <span className=\"cus-badge bg-light\">{timeTaken}</span>\r\n                            )\r\n                        }\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Distance',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => NumberFormat(Subraction(row?.Trip_EN_KM, row?.Trip_ST_KM))\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Qty',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => row?.Products_List?.reduce((acc, product) => Addition(product.QTY ?? 0, acc), 0)\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Item',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => NumberFormat(row.Products_List.length ?? 0)\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Action',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <ButtonActions\r\n                                buttonsData={[\r\n                                    {\r\n                                        name: 'Edit',\r\n                                        icon: <Edit className=\"fa-14\" />,\r\n                                        onclick: () => nav('/erp/inventory/tripSheet/searchGodown', {\r\n                                            state: {\r\n                                                ...row,\r\n                                                isEditable: false,\r\n                                            },\r\n                                        }),\r\n                                        disabled: checkIsNumber(row?.convertedPurchaseOrderId) ? true : false\r\n                                    },\r\n                                    {\r\n                                        name: 'Preview',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            setFilters(pre => ({ ...pre, printPreviewDialog: true }));\r\n                                            setSelectedRow(row);\r\n                                        }\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        )\r\n                    }\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <>\r\n                        {row?.Employees_Involved?.length > 0 && (\r\n                            <table className=\"fa-14\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\" colSpan={3}>Involved Employees</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\">SNo</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Name</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Role</th>\r\n                                    </tr>\r\n                                    {row.Employees_Involved.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"py-1 px-2 border\">{i + 1}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Emp_Name}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Cost_Category}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n\r\n                        <FilterableTable\r\n                            title=\"Items\"\r\n                            EnableSerialNumber\r\n                            dataArray={Array.isArray(row.Products_List) ? row.Products_List : []}\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Reason',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Stock_Journal_Bill_type ?? 'Not Available',\r\n                                },\r\n                                createCol('Batch_No', 'string'),\r\n                                createCol('Product_Name', 'string', 'Item'),\r\n                                createCol('HSN_Code', 'string'),\r\n                                createCol('QTY', 'number'),\r\n                                createCol('KGS', 'number'),\r\n                                createCol('Gst_Rate', 'number'),\r\n                                createCol('Total_Value', 'number'),\r\n                                createCol('FromLocation', 'string', 'From'),\r\n                                createCol('ToLocation', 'string', 'To'),\r\n                            ]}\r\n                            disablePagination\r\n                            ExcelPrintOption\r\n                        />\r\n                    </>\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Staffs</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Staffs}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Staffs: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueStaffs}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Staff\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Items</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Items}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Items: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueItems}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Items\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From Godown</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.FromGodown}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, FromGodown: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueFromLocations}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select From Godown\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To Godown</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.ToGodown}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, ToGodown: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueToLocations}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select To Godown\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate\r\n                            };\r\n                            updateQueryString(updatedFilters);\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.printPreviewDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                maxWidth='xl' fullWidth\r\n            >\r\n                <DialogTitle>Print Preview</DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    {isValidObject(selectedRow) && <React.Fragment>\r\n\r\n                        <table className=\"table table-bordered fa-13 m-0\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan={3}>DELIVERY CHALLAN</td>\r\n                                    <td colSpan={3}>GSTIN : 33AADFS4987M1ZL</td>\r\n                                    <td colSpan={2}>ORIGINAL / DUPLICATE</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan={3} rowSpan={2}>\r\n                                        <span className=\"fa-14 fw-bold\">S.M TRADERS</span> <br />\r\n                                        H.O: 153, CHITRAKARA STREET, MADURAI - 625001 <br />\r\n                                        G.O: 746-A, PULIYUR, SAYANAPURAM, SIVAGANGAI - 630611\r\n                                    </td>\r\n                                    <td colSpan={3}>FSSAI No : 12418012000818</td>\r\n                                    <td>Challan No</td>\r\n                                    <td>{selectedRow?.Challan_No}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan={3}>Phone No: 9842131353, 9786131353</td>\r\n                                    <td>Date</td>\r\n                                    <td>{selectedRow.Trip_Date ? LocalDate(selectedRow.Trip_Date) : ''}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan={8} className=\"text-center\">Reason for Transfer - Branch Transfer / Line Sales / Purchase Return / Job Work</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Vehicle No</td>\r\n                                    <td>{selectedRow?.Vehicle_No}</td>\r\n                                    <td>Driver Name</td>\r\n                                    <td>\r\n                                        {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                            staff?.Cost_Category === 'Driver'\r\n                                        ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                    </td>\r\n                                    <td>Start Time</td>\r\n                                    <td>{selectedRow?.StartTime ? LocalTime(new Date(selectedRow.StartTime)) : ''}</td>\r\n                                    <td>Start KM</td>\r\n                                    <td>{selectedRow?.Trip_ST_KM}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Trip No</td>\r\n                                    <td>{selectedRow?.Trip_No}</td>\r\n                                    <td>LoadMan</td>\r\n                                    <td>\r\n                                        {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                            staff?.Cost_Category === 'Load Man'\r\n                                        ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                    </td>\r\n                                    <td>End Time</td>\r\n                                    <td>{selectedRow?.EndTime ? LocalTime(new Date(selectedRow.EndTime)) : ''}</td>\r\n                                    <td>End KM</td>\r\n                                    <td>{selectedRow?.Trip_ST_KM}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        {/* items */}\r\n                        <table className=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"fa-12 bg-light\">#</th>\r\n                                    <th className=\"fa-12 bg-light\">Reason</th>\r\n                                    <th className=\"fa-12 bg-light\">Party</th>\r\n                                    <th className=\"fa-12 bg-light\">Address</th>\r\n                                    <th className=\"fa-12 bg-light\">Item</th>\r\n                                    <th className=\"fa-12 bg-light\">HSN</th>\r\n\r\n                                    <th className=\"fa-12 bg-light\">Qty</th>\r\n                                    <th className=\"fa-12 bg-light\">KGS</th>\r\n                                    <th className=\"fa-12 bg-light\">Rate</th>\r\n                                    <th className=\"fa-12 bg-light\">Amount</th>\r\n                                    <th className=\"fa-12 bg-light\">Transfer To</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {(Array.isArray(selectedRow?.Products_List) ? selectedRow.Products_List : []).sort(\r\n                                    (a, b) => String(a.Trip_From).localeCompare(b.Trip_From)\r\n                                ).map((item, index, array) => {\r\n                                    const isFirstOccurrence =\r\n                                        index === 0 || item.Trip_From !== array[index - 1]?.Trip_From;\r\n                                    const rowSpan = array.filter((row) => row.Trip_From === item.Trip_From).length;\r\n\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td className=\"fa-10\">{index + 1}</td>\r\n                                            {/* Render the `Trip_From` cell only for the first occurrence */}\r\n                                            {isFirstOccurrence && (\r\n                                                <td className=\"fa-10 vctr\" rowSpan={rowSpan}>\r\n                                                    {item.Trip_From === \"STOCK JOURNAL\" && \"T\"}\r\n                                                </td>\r\n                                            )}\r\n                                            <td className=\"fa-10\"></td>\r\n                                            <td className=\"fa-10\"></td>\r\n                                            <td className=\"fa-10\">{item?.Product_Name}</td>\r\n                                            <td className=\"fa-10\">{item?.HSN_Code}</td>\r\n                                            <td className=\"fa-10\">{NumberFormat(item?.QTY)}</td>\r\n                                            <td className=\"fa-10\">{NumberFormat(item?.KGS)}</td>\r\n                                            <td className=\"fa-10\">{NumberFormat(item?.Gst_Rate)}</td>\r\n                                            <td className=\"fa-10\">{NumberFormat(item?.Total_Value)}</td>\r\n                                            <td className=\"fa-10\">{item?.ToLocation}</td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n\r\n                                <tr>\r\n                                    <td className=\"fa-10 fw-bold\" colSpan={6}>\r\n                                        Total:&emsp;\r\n                                        {numberToWords((Array.isArray(selectedRow.Products_List) ? selectedRow.Products_List : []).reduce(\r\n                                            (acc, item) => Addition(acc, item.Total_Value ?? 0), 0\r\n                                        ))} Only.\r\n                                    </td>\r\n                                    <td className=\"fa-10 fw-bold \">\r\n                                        {NumberFormat((Array.isArray(selectedRow.Products_List) ? selectedRow.Products_List : []).reduce(\r\n                                            (acc, item) => Addition(acc, item.QTY ?? 0), 0\r\n                                        ))}.\r\n                                    </td>\r\n                                    <td className=\"fa-10 fw-bold\">\r\n                                        {NumberFormat((Array.isArray(selectedRow.Products_List) ? selectedRow.Products_List : []).reduce(\r\n                                            (acc, item) => Addition(acc, item.KGS ?? 0), 0\r\n                                        ))}.\r\n                                    </td>\r\n                                    <td className=\"fa-10\"></td>\r\n                                    <td className=\"fa-10 fw-bold\" colSpan={2}>\r\n                                        {NumberFormat((Array.isArray(selectedRow.Products_List) ? selectedRow.Products_List : []).reduce(\r\n                                            (acc, item) => Addition(acc, item.Total_Value ?? 0), 0\r\n                                        ))}.\r\n                                    </td>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        {/* tax calculation */}\r\n\r\n                        <table className=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className=\"bg-light fa-12 text-center\">HSN / SAC</td>\r\n                                    <td className=\"bg-light fa-12 text-center\">Taxable Value</td>\r\n                                    <td className=\"bg-light fa-12 text-center\">IGST</td>\r\n                                    <td className=\"bg-light fa-12 text-center\">CGST</td>\r\n                                    <td className=\"bg-light fa-12 text-center\">SGST</td>\r\n                                    <td className=\"bg-light fa-12 text-center\">Total</td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {TaxData.map((o, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td className=\"fa-10 text-end\">{o?.hsnCode}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(o?.taxableValue)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(o?.igst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(o?.cgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(o?.sgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">\r\n                                                {NumberFormat(o?.totalTax)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                <tr>\r\n                                    <td className=\"border fa-10 text-end\">Total</td>\r\n                                    <td className=\"border fa-10 text-end fw-bold\">\r\n                                        {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.taxableValue), 0))}\r\n                                    </td>\r\n                                    <td className=\"border fa-10 text-end fw-bold\">\r\n                                        {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.igst), 0))}\r\n                                    </td>\r\n                                    <td className=\"border fa-10 text-end fw-bold\">\r\n                                        {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.cgst), 0))}\r\n                                    </td>\r\n                                    <td className=\"border fa-10 text-end fw-bold\">\r\n                                        {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.sgst), 0))}\r\n                                    </td>\r\n                                    <td className=\"border fa-10 text-end fw-bold\">\r\n                                        {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0))}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td\r\n                                        colSpan={6}\r\n                                        className='border fa-13 fw-bold'\r\n                                    >\r\n                                        Tax Amount (in words) : INR &nbsp;\r\n                                        {numberToWords(\r\n                                            parseInt(\r\n                                                TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0)\r\n                                            )\r\n                                        )} only.\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table table-bordered fa-10\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Prepared By</td>\r\n                                    <td style={{ minWidth: 150 }}></td>\r\n                                    <td>Executed By</td>\r\n                                    <td style={{ minWidth: 150 }}></td>\r\n                                    <td>Verified By</td>\r\n                                    <td style={{ minWidth: 150 }}></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Other Expenses</td>\r\n                                    <td>0</td>\r\n                                    <td>Round Off</td>\r\n                                    <td>0</td>\r\n                                    <td>Grand Total</td>\r\n                                    <td>\r\n                                        {NumberFormat((Array.isArray(selectedRow.Products_List) ? selectedRow.Products_List : []).reduce(\r\n                                            (acc, item) => Addition(acc, item.Total_Value ?? 0), 0\r\n                                        ))}.\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"col-12 text-center\">\r\n                            <p>This is a Computer Generated Invoice</p>\r\n                        </div>\r\n\r\n                    </React.Fragment>\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >close</Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant='outlined'\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TripSheets;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","tdClass","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdIndex","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","defaultFilters","Fromdate","ISOString","Todate","_selectedRow$Employee","_selectedRow$Employee2","_selectedRow$Employee3","_selectedRow$Employee4","loadingOn","loadingOff","nav","useNavigate","location","useLocation","query","URLSearchParams","search","tripData","setTripData","filters","setFilters","fetchFrom","fetchTo","filterDialog","refresh","printPreviewDialog","FromGodown","ToGodown","Staffs","Items","selectedRow","setSelectedRow","printRef","useRef","useEffect","fetchLink","then","success","finally","catch","queryFilters","get","isValidDate","closeDialog","TaxData","isArray","Products_List","reduce","item","_Number","_Number2","_Number3","_Number4","HSNindex","findIndex","obj","hsnCode","HSN_Code","Taxable_Value","Cgst_P","Sgst_P","Igst_P","prev","newValue","taxableValue","Addition","cgst","sgst","igst","totalTax","newEntry","handlePrint","useReactToPrint","content","current","uniqueFromLocations","useMemo","allLocations","flatMap","trip","product","FromLocation","label","uniqueToLocations","ToLocation","uniqueItems","allItems","Product_Name","items","uniqueStaffs","allStaffs","Employees_Involved","staff","Emp_Name","filteredData","hasFromGodownMatch","some","selected","hasToGodownMatch","hasItemMatch","hasEmployeeMatch","Button","FilterAlt","startTime","StartTime","Date","endTime","EndTime","timeTaken","timeDuration","Subraction","Trip_EN_KM","Trip_ST_KM","_row$Products_List","acc","_product$QTY","QTY","_ref5","_row$Products_List$le","_ref6","Edit","isEditable","checkIsNumber","convertedPurchaseOrderId","Visibility","_ref7","_row$Employees_Involv","Cost_Category","_ref8","_row$Stock_Journal_Bi","Stock_Journal_Bill_type","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","onChange","Select","selectedOptions","menuPortalTarget","document","options","isMulti","styles","isSearchable","placeholder","maxMenuHeight","DialogActions","newFilters","params","toString","updateQueryString","startIcon","Search","ref","isValidObject","React","rowSpan","Challan_No","Trip_Date","Vehicle_No","join","Trip_No","Trip_From","localeCompare","array","_array","isFirstOccurrence","KGS","Gst_Rate","Total_Value","numberToWords","_item$Total_Value","_item$QTY","_item$KGS","_item$Total_Value2","sum","minWidth","_item$Total_Value3","createSvgIcon","d"],"sourceRoot":""}
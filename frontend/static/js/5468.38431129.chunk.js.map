{"version":3,"file":"static/js/5468.38431129.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/AddBox.js","Pages/Sales/PreSaleOrder/orderList.jsx","Pages/Sales/convertedStatus.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4z\"\n}), 'AddBox');","import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { isGraterNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, {\r\n    createCol,\r\n} from \"../../../Components/filterableTable2\";\r\nimport { Card, IconButton, Button } from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AddBox, Edit } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\n\r\nconst OrderList = ({ loadingOn, loadingOff }) => {\r\n    const [filters, setFilters] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        refresh: false,\r\n        search: '',\r\n    });\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [load, setLoad] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false);\r\nuseEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            if (loadingOn) loadingOn();\r\n            \r\n            try {\r\n                const response = await fetchLink({\r\n                    address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n                });\r\n                \r\n                if (response.success) {\r\n                    setData(response.data);\r\n                    // setTallyLOL(response.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                setIsLoading(false);\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [filters.FromDate, filters.ToDate, filters.refresh]);\r\n\r\n    // useEffect(() => {\r\n    //     if (!search) return;\r\n    //     if (loadingOn) loadingOn();\r\n    //     setLoad(true);\r\n    //     fetchLink({\r\n    //         address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n    //     })\r\n    //         .then((data) => {\r\n    //             if (data.success) {\r\n    //                 setData(data.data);\r\n    //                 setTallyLOL(data.data); // Changed from tallyLOL to data.data\r\n    //             }\r\n    //         })\r\n    //         .catch((e) => {\r\n    //             console.error(e);\r\n    //         })\r\n    //         .finally(() => {\r\n    //             setLoad(false);\r\n    //             setSearch(false);\r\n    //             if (loadingOff) loadingOff();\r\n    //         });\r\n    // }, [filters.refresh, search, filters.FromDate, filters.ToDate]);\r\n\r\n    const filterableText = (text) =>\r\n        String(text)\r\n            .toLowerCase()\r\n            .replace(/\\s+/g, \" \")\r\n            .replace(/[^a-z0-9]/gi, '')\r\n            .trim();\r\n\r\n    const FilteredData = useMemo(() => {\r\n        const search = filterableText(filters.search || \"\");\r\n\r\n        return data.filter((obj) => {\r\n\r\n            let values = [];\r\n\r\n            for (let key in obj) {\r\n                if (key !== \"ProductList\") {\r\n                    values.push(obj[key]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(obj.ProductList)) {\r\n                obj.ProductList.forEach(item => {\r\n                    values.push(...Object.values(item));\r\n                });\r\n            }\r\n\r\n\r\n            const combined = filterableText(values.join(\" \"));\r\n            return combined.includes(search);\r\n        });\r\n    }, [filters.search, data]);\r\n\r\n\r\n\r\n\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                {row?.ProductList?.length > 0 && (\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"border p-2 bg-light\">S_No</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Id</th>\r\n                                <th className=\"border p-2 bg-light\">Product_Name</th>\r\n                                <th className=\"border p-2 bg-light\">Bill_Qty</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Rate</th>\r\n                                <th className=\"border p-2 bg-light\">Unit_Id</th>\r\n                                <th className=\"border p-2 bg-light\">Unit_Name</th>\r\n                                <th className=\"border p-2 bg-light\">Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {row?.ProductList?.map((data, index) => (\r\n                                <tr key={index}>\r\n                                    <td className=\"border p-2\">{data?.S_No}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Id}</td>\r\n                                    <td className=\"border p-2\">{data?.Product_Name}</td>\r\n                                    <td className=\"border p-2\">{data?.Bill_Qty}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Rate}</td>\r\n\r\n                                    <td className=\"border p-2\">{data?.Unit_Id}</td>\r\n                                    <td className=\"border p-2\">{data?.Unit_Name}</td>\r\n\r\n                                    <td className=\"border p-2\">{data?.Amount}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n\r\n\r\nconst postSaleOrder = (data) => {\r\n    loadingOn();\r\n\r\n    // Product processing remains the same\r\n    const extractWeightFromName = (name) => {\r\n        const match = name?.match(/(\\d+)\\s?kg/i);\r\n        return match ? parseInt(match[1]) : 1;\r\n    };\r\n\r\n    const validProducts = Array.isArray(data.ProductList)\r\n        ? data.ProductList\r\n            .filter(p => isGraterNumber(p?.Bill_Qty, 0))\r\n            .map(p => {\r\n                const weight = extractWeightFromName(p?.Product_Name);\r\n                return {\r\n                    ...p,\r\n                    Pre_Id: data?.Pre_Id,\r\n                    Bill_Qty: weight * p?.Bill_Qty,\r\n                    Total_Qty: p?.Bill_Qty\r\n                };\r\n            })\r\n        : [];\r\n\r\n    const transformStaffData = (orderData) => {\r\n        const staffs = [];\r\n        \r\n        if (orderData.Broker_Id && orderData.Broker_Id !== 0) {\r\n            staffs.push({\r\n                Id: \"\",\r\n                So_Id: \"\",\r\n                Emp_Id: orderData.Broker_Id,\r\n                Emp_Type_Id: orderData.Broker_Type || 0 \r\n            });\r\n        }\r\n        \r\n        if (orderData.Transporter_Id && orderData.Transporter_Id !== 0) {\r\n            staffs.push({\r\n                Id: \"\",\r\n                Do_Id: \"\",\r\n                Emp_Id: orderData.Transporter_Id,\r\n                Emp_Type_Id: orderData.TrasnportType || 0  \r\n            });\r\n        }\r\n        \r\n        return staffs.filter(staff => staff.Emp_Type_Id !== 0);  \r\n    };\r\n\r\n    const staffsArray = transformStaffData(data);\r\n\r\n    const payload = {\r\n        ...data,\r\n        Product_Array: validProducts,\r\n        Retailer_Id: data?.Custome_Id,\r\n        Staffs_Array: staffsArray\r\n    };\r\n\r\n\r\n\r\n    fetchLink({\r\n        address: `sales/presaleOrder/saleOrderCreationWithPso`,\r\n        method: data?.isConverted !== 0 ? 'PUT' : 'POST',\r\n        bodyData: payload\r\n    })\r\n    .then((response) => {\r\n        if (response.success) {\r\n            toast.success(response?.message);\r\n            setLoad(true);\r\n        } else {\r\n            toast.error(response?.message);\r\n        }\r\n    })\r\n    .catch(() => {\r\n        toast.error(\"Something went wrong!\");\r\n    })\r\n    .finally(() => loadingOff());\r\n};\r\n\r\n    useEffect(() => {\r\n        if (load) {\r\n            fetchLink({\r\n                address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n            })\r\n                .then((data) => {\r\n                    if (data.success) {\r\n                        setData(data.data);\r\n                        // setTallyLOL(data.data);\r\n                    }\r\n                })\r\n                .catch((e) => console.error(e))\r\n                .finally(() => setLoad(false));\r\n        }\r\n    }, [load, filters.FromDate, filters.ToDate]);\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"px-3 py-2 fa-14\">\r\n                    <div className=\"d-flex flex-wrap align-items-center\">\r\n                        <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, FromDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n                        <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, ToDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n                        \r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setFilters((prev) => {\r\n                                    const updatedFilters = {\r\n                                        ...prev,\r\n                                        viewNotSynced: !prev.viewNotSynced,\r\n                                    };\r\n\r\n                                    return updatedFilters;\r\n                                });\r\n                            }}\r\n                        >\r\n\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    filters.search ? (\r\n                        <FilterableTable\r\n                            title={\"Pre-Sale Order List\"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={FilteredData}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                   createCol(\"Broker_Name\", \"string\", \"Broker_Name\"),\r\n                                   createCol(\"Transporter_Name\", \"string\", \"Transporter_Name\"),\r\n\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                    Field_Name: \"Actions\",\r\n                                    ColumnHeader: \"Actions\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    ),\r\n                                }\r\n\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <FilterableTable\r\n                            title={\"Pre-Sale Order List\"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={data}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                createCol(\"Broker_Name\", \"string\", \"Broker_Name\"),\r\n                                createCol(\"Transporter_Name\", \"string\", \"Transporter_Name\"),\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                    Field_Name: \"Actions\",\r\n                                    ColumnHeader: \"Actions\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    ),\r\n                                }\r\n\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderList;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]\r\n\r\nexport const dbStatus = [\r\n    {\r\n        id: 1,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Progess',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Completed',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 4,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["createSvgIcon","_jsx","d","_ref","loadingOn","loadingOff","filters","setFilters","useState","FromDate","Date","toISOString","split","ToDate","refresh","search","searchInput","setSearchInput","data","setData","load","setLoad","isLoading","setIsLoading","useEffect","async","response","fetchLink","address","success","e","console","error","fetchData","filterableText","text","String","toLowerCase","replace","trim","FilteredData","useMemo","filter","obj","values","key","push","Array","isArray","ProductList","forEach","item","Object","join","includes","ExpendableComponent","_ref2","_row$ProductList","_row$ProductList2","row","_Fragment","children","length","_jsxs","className","map","index","S_No","Item_Id","Product_Name","Bill_Qty","Item_Rate","Unit_Id","Unit_Name","Amount","postSaleOrder","validProducts","p","isGraterNumber","weight","name","match","parseInt","extractWeightFromName","Pre_Id","Total_Qty","staffsArray","orderData","staffs","Broker_Id","Id","So_Id","Emp_Id","Emp_Type_Id","Broker_Type","Transporter_Id","Do_Id","TrasnportType","staff","transformStaffData","payload","Product_Array","Retailer_Id","Custome_Id","Staffs_Array","method","isConverted","bodyData","then","toast","message","catch","finally","Card","style","verticalAlign","type","value","onChange","target","IconButton","size","onClick","prev","viewNotSynced","FilterableTable","title","bodyFontSizePx","headerFontSizePx","dataArray","columns","createCol","Field_Name","ColumnHeader","isVisible","isCustomCell","Cell","_ref3","minWidth","Pre_Date","align","_ref4","_ref5","_convert$label","convert","convertedStatus","find","status","id","Number","color","label","_ref6","AddBox","Edit","isExpendable","tableMaxHeight","expandableComp","ButtonArea","Button","sx","ml","variant","placeholder","_ref7","_ref8","_ref9","_convert$label2","_ref10","dbStatus"],"sourceRoot":""}
{"version":3,"file":"static/js/7712.e77522e1.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/SalesDeliveryConvert.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, Button, Dialog, Tooltip, TextField, IconButton, DialogTitle, DialogContent, DialogActions, Switch } from \"@mui/material\";\r\nimport '../../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { getPreviousDate, isEqualNumber, ISOString, isValidObject } from \"../../../Components/functions\";\r\n// import NewDeliveryOrder from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { FilterAlt, Visibility } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport NewDeliveryOrder from \"../SalesReportComponent/NewDeliveryOrder\";\r\nimport InvoiceBillTemplate from \"./newInvoiceTemplate\";\r\n\r\nimport TwoWheelerIcon from '@mui/icons-material/TwoWheeler';\r\nimport DeliveryDetailsList from \"./DeliveryDetailsList\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst SalesDeliveryConvert = ({ loadingOn, loadingOff }) => {\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [reload, setReload] = useState(false)\r\n    const [routes, setRoutes] = useState([])\r\n    const [area, setArea] = useState([])\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] = useState(false)\r\n\r\n    const checked = useState(true)\r\n    const [Product_Array, setProductArray] = useState([]);\r\n\r\n    const [tripDetailsData, setTripDetailsData] = useState({\r\n        Trip_ST_KM: '',\r\n        Branch_Id: '',\r\n        // Vehicle_No:'',                 \r\n        // Trip_No:'',                    \r\n        // Trip_Date:'',                   \r\n        // StartTime:'',            \r\n        // Created_by:'',                 \r\n        // GST_Inclusive : 1,        \r\n        // IS_IGST :0,             \r\n        // Delivery_Person_Id:'',         \r\n        // Delivery_Location:'',           \r\n        // Delivery_Time,               \r\n        // Payment_Ref_No,       \r\n        // Payment_Mode,           \r\n        // Payment_Status,            \r\n        // Narration,                \r\n        // Alter_Id:'',              \r\n        // Delivery_Status:'',\r\n    });\r\n\r\n    const Created_by = storage?.UserId;\r\n    const Branch_Id = storage?.BranchId;\r\n    const Cost_Center_Type_Id = storage?.UserTypeId\r\n    const [deliveryDialogBox, setDeliveryDialogBox] = useState(false)\r\n\r\n    const handleCloseDialog = () => setDeliveryDialogBox(false);\r\n\r\n    const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n    const [DeliveryList, setDeliveryList] = useState([]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Sales_Person_Id: '',\r\n        SalsePersonGet: 'ALL',\r\n        Cancel_status: 0,\r\n        Route_Id: '',\r\n        RoutesGet: 'ALL',\r\n        Area_Id: '',\r\n        AreaGet: 'ALL'\r\n    });\r\n\r\n    const [deliveryDetails, setDeliveryDetails] = useState({\r\n        Do_Date: ISOString(),\r\n        Vehicle_No: '',\r\n        Trip_No: '',\r\n        Trip_Date: ISOString(),\r\n        StartTime: '',\r\n        Created_by: '',\r\n        Delivery_Person_Id: '',\r\n        Delivery_Location: '',\r\n        Delivery_Time: '',\r\n        Payment_Ref_No: '',\r\n        Payment_Mode: '',\r\n        Payment_Status: '',\r\n        Narration: '',\r\n        Alter_Id: '',\r\n        Delivery_Status: '',\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDeliveryDetails((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleDelivery?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}&Route_Id=${filters?.Route_Id}&Area_Id=${filters?.Area_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSaleOrders(data?.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Sales_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        filters?.Route_Id,\r\n        filters?.Area_Id,\r\n        reload\r\n    ])\r\n\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        const EmployeesInvolved = {\r\n            Trip_ST_KM: deliveryDetails.Trip_ST_KM || \"\",\r\n            Branch_Id: deliveryDetails.Branch_Id || \"\",\r\n            Vehicle_No: deliveryDetails.Vehicle_No || \"\",\r\n            Trip_No: deliveryDetails.Trip_No || \"\",\r\n            StartTime: deliveryDetails.StartTime || \"\",\r\n            Delivery_Person_Id: deliveryPerson?.UserId || \"\",\r\n            Delivery_Location: deliveryDetails.Delivery_Location || \"\",\r\n            Alter_Id: deliveryDetails.Alter_Id || \"\",\r\n            Delivery_Status: deliveryDetails.Delivery_Status || \"\",\r\n            Cost_Center_Type_Id: Cost_Center_Type_Id,\r\n\r\n        };\r\n\r\n        const Trip_ST_KM = setTripDetailsData?.Trip_ST_KM;\r\n\r\n\r\n\r\n        const tripData = {\r\n            ...deliveryDetails,\r\n            DeliveryList,\r\n\r\n            Branch_Id: Branch_Id,\r\n            Created_by: Created_by,\r\n           };\r\n\r\n        try {\r\n\r\n            const response = await fetchLink({\r\n                address: `delivery/multipleDelivery`,\r\n                method: \"POST\",\r\n                bodyData: tripData,\r\n            });\r\n\r\n            if (!response.success) {\r\n                toast.error(\"Failed to add Trip Data\");\r\n                handleCloseDialog(true);\r\n                return false;\r\n            }\r\n            toast.success(response.message);\r\n\r\n            setReload(true)\r\n            handleCloseDialog(true);\r\n\r\n        } catch (error) {\r\n\r\n            console.error(\"Error during API call:\", error);\r\n            handleCloseDialog(true);\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsers(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setDeliveryPersonList(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/routes/dropdown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRoutes(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/areas/dropdown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setArea(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n    }, [])\r\n\r\n    const handleDeliveryPersonChange = (selectedOption) => {\r\n\r\n        setDeliveryPerson(selectedOption ? { UserId: selectedOption.value, Name: selectedOption.label } : null);\r\n    };\r\n\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        const isSelected = selectedRows.some((selectedRow) => selectedRow.So_Id === row.So_Id);\r\n\r\n        if (isSelected) {\r\n\r\n            setSelectedRows(selectedRows.filter((selectedRow) => selectedRow.So_Id !== row.So_Id));\r\n        } else {\r\n\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: 'checkbox',\r\n            ColumnHeader: '',\r\n            isVisible: 1,\r\n            pointer: true,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const isSelected = selectedRows.some((selectedRow) => selectedRow.So_Id === row.So_Id);\r\n\r\n                return (\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleCheckboxChange(row)}\r\n                        disabled={row?.isConverted !== 0}\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            transform: 'scale(1.5)',\r\n                            width: '14px',\r\n                            height: '20px',\r\n                        }}\r\n\r\n                    />\r\n                );\r\n            },\r\n        },\r\n        {\r\n            Field_Name: 'So_Id',\r\n            ColumnHeader: 'Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Customer',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'So_Date',\r\n            ColumnHeader: 'Sale Order Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            ColumnHeader: 'Status',\r\n            isVisible: 1,\r\n            align: 'center',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const convert = convertedStatus.find(status => status.id === Number(row?.isConverted));\r\n                return (\r\n                    <span className={'py-0 fw-bold px-2 rounded-4 fa-12 ' + convert?.color ?? 'bg-secondary text-white'}>\r\n                        {convert?.label ?? 'Undefined'}\r\n                    </span>\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title='View Order'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    })\r\n                                }}\r\n                                color='primary' size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n\r\n                        <Tooltip title='Sales Delivery'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <TwoWheelerIcon className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const setTripDetails = (data) => {\r\n        if (!Array.isArray(data)) {\r\n            console.error(\"Invalid data format. Expected an array.\");\r\n            return;\r\n        }\r\n\r\n        setDeliveryDialogBox(true);\r\n\r\n        const DeliveryList = [];\r\n        const Product_Array = [];\r\n\r\n        data.forEach((item) => {\r\n            if (item) {\r\n                DeliveryList.push(item);\r\n\r\n                if (item.Products_List && Array.isArray(item.Products_List)) {\r\n                    Product_Array.push(...item.Products_List);\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        setDeliveryList(DeliveryList);\r\n        setProductArray(Product_Array);\r\n\r\n        setDeliveryDetails({\r\n            DeliveryList,\r\n            Product_Array,\r\n        });\r\n    };\r\n\r\n\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen)\r\n        setOrderInfo({});\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n    }\r\n    const handleToggle = () => {\r\n\r\n        setScreen((prev) => !prev);\r\n        setIsDeliveryDetailsVisible((prev) => !prev);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">\r\n                        {screen\r\n                            ? 'Sale Orders'\r\n                            : isValidObject(orderInfo)\r\n                        }\r\n\r\n                    </h6>\r\n\r\n                    <div>\r\n                        {screen && (\r\n                            <Tooltip title=\"Filters\">\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n\r\n                        {selectedRows.length > 0 && screen && (\r\n                            <Button variant=\"outlined\" onClick={() => setTripDetails(selectedRows)}>Convert To Delivery</Button>\r\n                        )}\r\n\r\n\r\n                        {screen && (\r\n                            <Switch\r\n                                checked={checked}\r\n                                onChange={() => {\r\n                                    setScreen(false);\r\n                                    setIsDeliveryDetailsVisible(true);\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'controlled' }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <CardContent className=\"p-0\">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : isDeliveryDetailsVisible ? (\r\n                        <DeliveryDetailsList\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => { setReload(prev => !prev); setScreen(pre => !pre) }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            onToggle={handleToggle}\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload(prev => !prev); setScreen(prev => !prev)\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            editOn={true}\r\n                        />\r\n                        // reload={() => {\r\n                        //     setReload(pre => !pre);\r\n                        //     setScreen(pre => !pre)\r\n                        // }}\r\n                        // switchScreen={switchScreen}\r\n                    )}\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Sale Order'}\r\n                />\r\n            )}\r\n            <Dialog open={deliveryDialogBox} onClose={handleCloseDialog} fullWidth maxWidth=\"sm\">\r\n                <DialogTitle>Delivery Details</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <td style={{ verticalAlign: 'middle' }}>Delivery Date</td>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            type=\"date\"\r\n                            name=\"Do_Date\"\r\n                            value={deliveryDetails.Do_Date}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Salse Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Sales_Person_Id, label: filters?.SalsePersonGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Sales_Person_Id: e.value, SalsePersonGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Routes</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Route_Id, label: filters?.RoutesGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Route_Id: e.value, RoutesGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...routes.map(obj => ({ value: obj?.Route_Id, label: obj?.Route_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Route Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Area</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Area_Id, label: filters?.AreaGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Area_Id: e.value, AreaGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...area.map(obj => ({ value: obj?.Area_Id, label: obj?.Area_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Area Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesDeliveryConvert;\r\n\r\n\r\n"],"names":["_ref","loadingOn","loadingOff","selectedRows","setSelectedRows","useState","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","reload","setReload","routes","setRoutes","area","setArea","isDeliveryDetailsVisible","setIsDeliveryDetailsVisible","checked","Product_Array","setProductArray","tripDetailsData","setTripDetailsData","Trip_ST_KM","Branch_Id","Created_by","UserId","BranchId","deliveryDialogBox","setDeliveryDialogBox","UserTypeId","handleCloseDialog","deliveryPerson","setDeliveryPerson","deliveryPersonList","setDeliveryPersonList","DeliveryList","setDeliveryList","filters","setFilters","Fromdate","getPreviousDate","Todate","ISOString","Retailer_Id","RetailerGet","CreatedByGet","Sales_Person_Id","SalsePersonGet","Cancel_status","Route_Id","RoutesGet","Area_Id","AreaGet","deliveryDetails","setDeliveryDetails","Do_Date","Vehicle_No","Trip_No","Trip_Date","StartTime","Delivery_Person_Id","Delivery_Location","Delivery_Time","Payment_Ref_No","Payment_Mode","Payment_Status","Narration","Alter_Id","Delivery_Status","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","Company_id","saleOrderColumn","Field_Name","ColumnHeader","isVisible","pointer","isCustomCell","Cell","_ref2","row","isSelected","some","selectedRow","So_Id","_jsx","type","onChange","filter","handleCheckboxChange","disabled","isConverted","style","cursor","transform","width","height","Fied_Data","align","_ref3","_ref4","_convert$label","convert","convertedStatus","find","status","id","Number","className","color","children","label","_ref5","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","orderProducts","Products_List","size","Visibility","switchScreen","_objectSpread","TwoWheelerIcon","closeDialog","Card","isValidObject","FilterAlt","length","Button","variant","Array","isArray","forEach","item","push","setTripDetails","Switch","inputProps","CardContent","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref6","Branch_Name","Sales_Person_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","DeliveryDetailsList","editValues","prev","pre","onToggle","handleToggle","NewDeliveryOrder","editOn","Object","keys","InvoiceBillTemplate","download","actionOpen","clearDetails","TitleText","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","verticalAlign","TextField","name","value","target","InputLabelProps","shrink","DialogActions","async","tripData","response","method","bodyData","toast","message","Select","options","map","obj","Retailer_Name","styles","customSelectStyles","isSearchable","placeholder","Name","Route_Name","Area_Name"],"sourceRoot":""}
{"version":3,"file":"static/js/8012.2dad4cfb.chunk.js","mappings":"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","sources":["Pages/UserModule/areaMaster.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js"],"sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nconst initialState = {\r\n    Area_Id: \"\",\r\n    Area_Name: \"\",\r\n    District_Id: \"\",\r\n    District_Name: \"\"\r\n};\r\n\r\nfunction AreaMaster() {\r\n    const [UserTypeData, setUserTypeData] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editUser, setEditUser] = useState(false);\r\n\r\n    const [areaName, setAreaName] = useState(\"\");\r\n    const [districts, setDistricts] = useState([]);\r\n    const [selectedDistrict, setSelectedDistrict] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/areas`\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setUserTypeData(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/district`\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setDistricts(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    }, [reload]);\r\n\r\n    const handleDelete = () => {\r\n\r\n        fetchLink({\r\n            address: `masters/areas`,\r\n            method: \"DELETE\",\r\n            bodyData: { Area_Id: inputValue.Area_Id },\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setReload(!reload);\r\n                setOpen(false);\r\n                toast.success(\"Area deleted successfully!\");\r\n            } else {\r\n                toast.error(\"Failed to delete area:\", data.message);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    };\r\n\r\n    const handleCreate = () => {\r\n        if (!selectedDistrict || !areaName) {\r\n            toast.error(\"Please fill all fields\");\r\n            return;\r\n        }\r\n\r\n        fetchLink({\r\n            address: `masters/areas`,\r\n            method: \"POST\",\r\n            bodyData: {\r\n                Area_Name: areaName,\r\n                District_Id: selectedDistrict\r\n            },\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setIsCreateDialogOpen(false);\r\n                setReload(!reload);\r\n                toast.success(data.message);\r\n                setAreaName(\"\");\r\n                setSelectedDistrict(\"\");\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    };\r\n\r\n    const editRow = (user) => {\r\n        setEditUser(true);\r\n        setInputValue({\r\n            Area_Id: user.Area_Id,\r\n            Area_Name: user.Area_Name,\r\n            District_Id: user.District_Id, // This is important for updating the dropdown\r\n        });\r\n        setSelectedDistrict(user.District_Id); // Set the dropdown value to the selected district ID\r\n    };\r\n\r\n\r\n    const editFun = (Area_Id, Area_Name, District_Id) => {\r\n        fetchLink({\r\n            address: `masters/areas`,\r\n            method: \"PUT\",\r\n            bodyData: { Area_Id, Area_Name, District_Id },\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setReload(!reload);\r\n                setEditUser(false);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    Area\r\n                    <div className=\"text-end\">\r\n                        <Button\r\n                            className=\"rounded-5 px-3 py-1 fa-13 btn-primary shadow\"\r\n                            onClick={() => setIsCreateDialogOpen(true)}\r\n                        >\r\n                            Create Area\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                <FilterableTable\r\n                    dataArray={UserTypeData}\r\n                    EnableSerialNumber={true}\r\n                    isExpendable={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n\r\n                        createCol('Area_Name', 'string', 'Area_Name'),\r\n                        {\r\n\r\n                            Field_Name: \"Actions\",\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n\r\n                                return (\r\n                                    <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                        <IconButton\r\n                                            onClick={() => editRow(row)}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Edit className=\"fa-in\" />\r\n                                        </IconButton>\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                setOpen(true);\r\n                                                setInputValue({ Area_Id: row.Area_Id });\r\n                                            }}\r\n                                            size=\"small\"\r\n                                            color='error'\r\n                                        >\r\n                                            <Delete className=\"fa-in \" />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                );\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={isCreateDialogOpen}\r\n                onClose={() => setIsCreateDialogOpen(false)}\r\n                aria-labelledby=\"create-dialog-title\"\r\n                aria-describedby=\"create-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"create-dialog-title\">Area Creation</DialogTitle>\r\n                <DialogContent>\r\n                    <div>\r\n                        <div className=\"p-2\">\r\n                            <label>Area Name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => setAreaName(event.target.value)}\r\n                                placeholder=\"Ex: BB Kulam\"\r\n                                value={areaName}\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <label>District Name</label>\r\n                            <select\r\n                                value={selectedDistrict}\r\n                                onChange={(event) => setSelectedDistrict(event.target.value)}\r\n                                className=\"cus-inpt\"\r\n                            >\r\n                                <option value=\"\">Select District</option>\r\n                                {districts.map((district) => (\r\n                                    <option key={district.District_Id} value={district.District_Id}>\r\n                                        {district.District_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => setIsCreateDialogOpen(false)}>\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton onClick={handleCreate} color=\"success\">\r\n                        CREATE\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editUser}\r\n                onClose={() => setEditUser(false)}\r\n                aria-labelledby=\"create-dialog-title\"\r\n                aria-describedby=\"create-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"create-dialog-title\">Area</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>Area </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={(event) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Area_Name: event.target.value,\r\n                                })\r\n                            }\r\n                            placeholder={inputValue.Area_Name}\r\n                            value={inputValue.Area_Name}\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>District Name</label>\r\n                        <select\r\n                            value={selectedDistrict}\r\n                            onChange={(event) => setSelectedDistrict(event.target.value)}\r\n                            className=\"cus-inpt\"\r\n                        >\r\n                            <option value=\"\">Select District</option>\r\n                            {districts.map((district) => (\r\n                                <option key={district.District_Id} value={district.District_Id}>\r\n                                    {district.District_Name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => setEditUser(false)}>Cancel</MuiButton>\r\n                    <MuiButton onClick={() => editFun(inputValue.Area_Id, inputValue.Area_Name, inputValue.District_Id)} color=\"success\">\r\n                        Update\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    <b>Do you want to delete the Area?</b>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={() => setOpen(false)}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus color=\"error\">\r\n                        Delete\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AreaMaster;\r\n\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;"],"names":["initialState","Area_Id","Area_Name","District_Id","District_Name","UserTypeData","setUserTypeData","useState","reload","setReload","open","setOpen","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editUser","setEditUser","areaName","setAreaName","districts","setDistricts","selectedDistrict","setSelectedDistrict","useEffect","fetchLink","address","then","data","success","catch","e","console","error","_jsxs","Fragment","children","className","_jsx","Button","onClick","FilterableTable","dataArray","EnableSerialNumber","isExpendable","maxHeightOption","columns","createCol","Field_Name","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","style","minWidth","IconButton","editRow","user","size","Edit","color","Delete","Dialog","onClose","DialogTitle","id","DialogContent","type","onChange","event","target","value","placeholder","map","district","DialogActions","MuiButton","handleCreate","method","bodyData","toast","message","_objectSpread","editFun","handleDelete","autoFocus","createSvgIcon","d","_excluded","useButtonProps","_ref2","tagName","disabled","href","rel","role","tabIndex","meta","handleClick","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","ref","as","asProp","props","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","variant","active","_objectWithoutProperties","prefix","useBootstrapPrefix","classNames","concat"],"sourceRoot":""}
{"version":3,"file":"static/js/6140.4fda6e97.chunk.js","mappings":"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","sources":["Pages/DataEntry/inwardActivity.jsx","Pages/DataEntry/machineOutern.jsx","Pages/DataEntry/fileUploads.jsx","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { isEqualNumber, LocalDateWithTime } from '../../Components/functions';\r\nimport { toast } from 'react-toastify'\r\nimport { Button, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, Tooltip } from '@mui/material';\r\nimport { Upload } from '@mui/icons-material'\r\nimport { MyContext } from '../../Components/context/contextProvider';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport api from '../../API';\r\n\r\nconst InwardActivity = () => {\r\n    const { contextObj } = useContext(MyContext);\r\n    const [inwardActivity, setInwardActivity] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const initialValue = {\r\n        image: '',\r\n        dialog: false\r\n    }\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp']\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `dataEntry/inwardActivity`,\r\n        }).then(data => setInwardActivity(data.data)).catch(e => console.error(e))\r\n\r\n    }, [reload])\r\n\r\n    const handlePaste = async (event) => {\r\n        const items = event.clipboardData.items;\r\n        for (const item of items) {\r\n            if (item.type.startsWith('image/')) {\r\n                const blob = item.getAsFile();\r\n                setInputValues(pre => ({\r\n                    ...pre,\r\n                    image: blob,\r\n                }))\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    // const uploadInwardImage = () => {\r\n    //     const formData = new FormData();\r\n    //     formData.append('image', inputValues.image);\r\n    //     if (inputValues?.image) {\r\n    //         fetchLink({\r\n    //             address: `dataEntry/inwardActivity`,\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 \"Content-Type\": 'multipart/form-data'\r\n    //             },\r\n    //             bodyData: formData\r\n    //         }).then(data => {\r\n    //             if (data.success) {\r\n    //                 toast.success(data.message);\r\n    //                 imageUploadDialogClose()\r\n    //                 setReload(!reload)\r\n    //             } else {\r\n    //                 toast.error(data.message)\r\n    //             }\r\n    //         }).catch(e => console.error(e))\r\n    //     }\r\n    // }\r\n\r\n    const uploadInwardImage = () => {\r\n        const formData = new FormData();\r\n        formData.append('image', inputValues.image);\r\n        if (inputValues?.image) {\r\n            fetch(`${api}dataEntry/inwardActivity`, {\r\n                method: 'POST',\r\n                body: formData\r\n            }).then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        toast.success(data.message);\r\n                        imageUploadDialogClose()\r\n                        setReload(!reload)\r\n                    } else {\r\n                        toast.error(data.message)\r\n                    }\r\n                }).catch(e => console.error(e))\r\n        }\r\n    }\r\n\r\n    const imageUploadDialogClose = () => {\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveImage = async (url) => {\r\n        try {\r\n            const response = await fetch(url);\r\n            const blob = await response.blob();\r\n            const objectUrl = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = objectUrl;\r\n            a.download = 'Inward_Activity_Image_' + LocalDateWithTime();\r\n            a.click();\r\n            URL.revokeObjectURL(objectUrl);\r\n        } catch (error) {\r\n            console.error(\"Failed to create object URL:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-3 pt-0 fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                <span>Inward Activities</span>\r\n                {isEqualNumber(contextObj?.Add_Rights, 1) && (\r\n                    <Button \r\n                        variant='outlined' \r\n                        onClick={() => setInputValues(pre => ({ ...pre, dialog: true }))}\r\n                        startIcon={<Upload />}\r\n                    >\r\n                        Upload Image\r\n                    </Button>\r\n                )}\r\n            </div>\r\n\r\n            <CardContent>\r\n                {inwardActivity?.length > 0 && (\r\n                    inwardActivity?.map((o, i) => (\r\n                        <div key={i}>\r\n                            <h5>Updated At: <span className='text-muted'>{o?.modifiedTime && LocalDateWithTime(o?.modifiedTime)}</span></h5>\r\n                            <Tooltip title='Click image to Download'>\r\n                                <img\r\n                                    src={o?.url}\r\n                                    alt=\"img\"\r\n                                    onClick={() => saveImage(o?.url)}\r\n                                    style={{ maxWidth: '100%', maxHeight: 700, marginTop: 10, cursor: 'pointer' }}\r\n                                />\r\n                            </Tooltip>\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </CardContent>\r\n\r\n            <Dialog\r\n                open={inputValues.dialog}\r\n                onClose={imageUploadDialogClose}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle>\r\n                    Upload Inward Activity\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <textarea\r\n                        type='file'\r\n                        className=\"drag-and-drop mt-2\"\r\n                        onPaste={handlePaste}\r\n                        placeholder='Paste Excel Rows...'\r\n                        rows={4}\r\n                    />\r\n\r\n                    <div className=' d-flex align-items-center my-2'>\r\n                        <hr className='w-100' />\r\n                        <span className='px-4'>OR</span>\r\n                        <hr className='w-100' />\r\n                    </div>\r\n\r\n                    <label className='w-100'>Select File To Upload ( {imageExtensions.join(', ')} )</label>\r\n                    <input\r\n                        type='file'\r\n                        className=\"cus-inpt mt-2\"\r\n                        style={{ backgroundColor: '#eaf4fe', borderColor: '#66afe9' }}\r\n                        onChange={e => setInputValues(pre => ({ ...pre, image: e.target.files[0] }))}\r\n                        accept=\"image/*\"\r\n                    />\r\n\r\n                    {inputValues.image && (\r\n                        <img\r\n                            src={URL.createObjectURL(inputValues.image)}\r\n                            alt=\"Pasted\"\r\n                            style={{ maxWidth: '100%', maxHeight: 700, marginTop: 10 }}\r\n                        />\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={imageUploadDialogClose}>cancel</Button>\r\n                    <Button\r\n                        onClick={uploadInwardImage}\r\n                        className=''\r\n                        variant='outlined'\r\n                    >\r\n                        submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InwardActivity;","import React, { useEffect, useState, useContext } from 'react';\r\nimport { isEqualNumber, LocalDateWithTime } from '../../Components/functions';\r\nimport { toast } from 'react-toastify'\r\nimport { Button, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, Tooltip } from '@mui/material';\r\nimport { Upload } from '@mui/icons-material'\r\nimport { MyContext } from '../../Components/context/contextProvider';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport api from '../../API';\r\n\r\n\r\nconst MachineOuternActivity = () => {\r\n    const { contextObj } = useContext(MyContext);\r\n    const [machineOuternData, setMachineOuternData] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const initialValue = {\r\n        image: '',\r\n        dialog: false\r\n    }\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp']\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `dataEntry/machineOutern`,\r\n        }).then(data => setMachineOuternData(data.data)).catch(e => console.error(e))\r\n    }, [reload])\r\n\r\n    const handlePaste = async (event) => {\r\n        const items = event.clipboardData.items;\r\n        for (const item of items) {\r\n            if (item.type.startsWith('image/')) {\r\n                const blob = item.getAsFile();\r\n                setInputValues(pre => ({\r\n                    ...pre,\r\n                    image: blob,\r\n                }))\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    // const uploadMachineOuternImage = () => {\r\n    //     const formData = new FormData();\r\n    //     formData.append('image', inputValues.image);\r\n    //     if (inputValues?.image) {\r\n    //         fetchLink({\r\n    //             address: `dataEntry/machineOutern`,\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 \"Content-Type\": 'multipart/form-data'\r\n    //             },\r\n    //             bodyData: formData\r\n    //         }).then(data => {\r\n    //             if (data.success) {\r\n    //                 toast.success(data.message);\r\n    //                 imageUploadDialogClose()\r\n    //                 setReload(!reload)\r\n    //             } else {\r\n    //                 toast.error(data.message)\r\n    //             }\r\n    //         }).catch(e => console.error(e))\r\n    //     }\r\n    // }\r\n\r\n    const uploadMachineOuternImage = () => {\r\n        const formData = new FormData();\r\n        formData.append('image', inputValues.image);\r\n        if (inputValues?.image) {\r\n            fetch(`${api}dataEntry/machineOutern`, {\r\n                method: 'POST',\r\n                body: formData\r\n            }).then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        toast.success(data.message);\r\n                        imageUploadDialogClose()\r\n                        setReload(!reload)\r\n                    } else {\r\n                        toast.error(data.message)\r\n                    }\r\n                }).catch(e => console.error(e))\r\n        }\r\n    }\r\n\r\n    const imageUploadDialogClose = () => {\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveImage = async (url) => {\r\n        try {\r\n            const response = await fetch(url);\r\n            const blob = await response.blob();\r\n            const objectUrl = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = objectUrl;\r\n            a.download = 'pasted-image.png';\r\n            a.click();\r\n            URL.revokeObjectURL(objectUrl);\r\n        } catch (error) {\r\n            console.error(\"Failed to create object URL:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-3 pt-0 fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                <span>Machine Outern Activities</span>\r\n                {isEqualNumber(contextObj?.Add_Rights, 1) && (\r\n                    <Button\r\n                        variant='outlined'\r\n                        onClick={() => setInputValues(pre => ({ ...pre, dialog: true }))}\r\n                        startIcon={<Upload />}\r\n                    >\r\n                        Upload Image\r\n                    </Button>\r\n                )}\r\n            </div>\r\n\r\n            <CardContent>\r\n                {machineOuternData?.length > 0 && (\r\n                    machineOuternData?.map((o, i) => (\r\n                        <>\r\n                            <h5>Updated At: <span className='text-muted'>{o?.modifiedTime && LocalDateWithTime(o?.modifiedTime)}</span></h5>\r\n                            <Tooltip title='Click image to Download'>\r\n                                <img\r\n                                    key={i}\r\n                                    src={o?.url}\r\n                                    alt=\"img\"\r\n                                    onClick={() => saveImage(o)}\r\n                                    style={{ maxWidth: '100%', maxHeight: 700, marginTop: 10, cursor: 'pointer' }}\r\n                                />\r\n                            </Tooltip>\r\n                        </>\r\n                    ))\r\n                )}\r\n            </CardContent>\r\n\r\n            <Dialog\r\n                open={inputValues.dialog}\r\n                onClose={imageUploadDialogClose}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogTitle>\r\n                    Upload MachineOutern Activity\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <textarea\r\n                        type='file'\r\n                        className=\"drag-and-drop mt-2\"\r\n                        onPaste={handlePaste}\r\n                        placeholder='Paste Excel Rows...'\r\n                        rows={4}\r\n                    />\r\n\r\n                    <div className=' d-flex align-items-center my-2'>\r\n                        <hr className='w-100' />\r\n                        <span className='px-4'>OR</span>\r\n                        <hr className='w-100' />\r\n                    </div>\r\n\r\n                    <label className='w-100'>Select File To Upload ( {imageExtensions.join(', ')} )</label>\r\n                    <input\r\n                        type='file'\r\n                        className=\"cus-inpt mt-2\"\r\n                        style={{ backgroundColor: '#eaf4fe', borderColor: '#66afe9' }}\r\n                        onChange={e => setInputValues(pre => ({ ...pre, image: e.target.files[0] }))}\r\n                        accept=\"image/*\"\r\n                    />\r\n\r\n                    {inputValues.image && (\r\n                        <img\r\n                            src={URL.createObjectURL(inputValues.image)}\r\n                            alt=\"Pasted\"\r\n                            style={{ maxWidth: '100%', maxHeight: 700, marginTop: 10 }}\r\n                        />\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={imageUploadDialogClose}>cancel</Button>\r\n                    <Button\r\n                        onClick={uploadMachineOuternImage}\r\n                        className=''\r\n                        variant='outlined'\r\n                    >\r\n                        submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MachineOuternActivity;","import { useState } from \"react\";\r\nimport InwardActivity from \"./inwardActivity\";\r\nimport MachineOuternActivity from \"./machineOutern\";\r\nimport { Card } from \"@mui/material\";\r\n\r\nconst ActivityImagesUpload = () => {\r\n    const [open, setOpen] = useState('INWARD');\r\n    const pages = ['INWARD', 'MACHINE OUTERN']\r\n\r\n    const displayContent = (page) => {\r\n        switch (page) {\r\n            case 'INWARD':\r\n                return <InwardActivity />;\r\n            case 'MACHINE OUTERN':\r\n                return <MachineOuternActivity />;\r\n            default:\r\n                return <></>;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-2 fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n                    <span className=\"text-primary text-uppercase ps-3\">file Uploads</span>\r\n                    <select \r\n                        className=\"cus-inpt w-auto\"\r\n                        value={open}\r\n                        onChange={e => setOpen(e.target.value)}\r\n                    >\r\n                        {pages.map((o, i) => <option value={o} key={i}>{o}</option>)}\r\n                    </select>\r\n                </div>\r\n\r\n                <hr className=\"mt-0\" />\r\n\r\n                {displayContent(open)}\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActivityImagesUpload;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5zm0-10h4v6h6v-6h4l-7-7z\"\n}), 'Upload');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["InwardActivity","contextObj","useContext","MyContext","inwardActivity","setInwardActivity","useState","reload","setReload","initialValue","image","dialog","inputValues","setInputValues","useEffect","fetchLink","address","then","data","catch","e","console","error","imageUploadDialogClose","_jsxs","_Fragment","children","className","_jsx","isEqualNumber","Add_Rights","Button","variant","onClick","pre","_objectSpread","startIcon","Upload","CardContent","length","map","o","i","modifiedTime","LocalDateWithTime","Tooltip","title","src","url","alt","async","response","fetch","blob","objectUrl","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","saveImage","style","maxWidth","maxHeight","marginTop","cursor","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","type","onPaste","items","event","clipboardData","item","startsWith","getAsFile","placeholder","rows","join","backgroundColor","borderColor","onChange","target","files","accept","DialogActions","uploadInwardImage","formData","FormData","append","concat","api","method","body","res","json","success","toast","message","MachineOuternActivity","machineOuternData","setMachineOuternData","uploadMachineOuternImage","ActivityImagesUpload","setOpen","Card","value","page","displayContent","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","getCardUtilityClass","CardRoot","Paper","overflow","raised","elevation","undefined"],"sourceRoot":""}
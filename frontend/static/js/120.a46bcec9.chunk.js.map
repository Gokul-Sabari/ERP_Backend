{"version":3,"file":"static/js/120.a46bcec9.chunk.js","mappings":"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","sources":["Pages/Reports/costCenterReports.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol, ButtonActions } from '../../Components/filterableTable2';\r\nimport { Addition, checkIsNumber, filterableText, groupData, ISOString, isValidDate } from \"../../Components/functions\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { FilterAlt, Search, ToggleOff, ToggleOn } from \"@mui/icons-material\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\n\r\nconst CostCenterReports = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        filterDialog: false,\r\n        refresh: false,\r\n        disablePagination: false,\r\n        searchString: '',\r\n        searchCategory: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `dataEntry/costCenter/report?Fromdate=${filters.fetchFrom}&Todate=${filters.fetchTo}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n\r\n                setReportData(data.data);\r\n            } else {\r\n                setReportData([]);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }, [filters.fetchFrom, filters.fetchTo]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, fetchFrom: queryFilters.Fromdate, fetchTo: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const showData = useMemo(() => {\r\n        const data = [...reportData];\r\n        const filteredData = data.filter(staff => {\r\n            if (filters.searchString) {\r\n                return filterableText(Object.values(staff).join(' ')).includes(filterableText(filters.searchString));\r\n            } else if (filters.searchCategory) {\r\n                return filterableText(staff.CostType || \"\").includes(filterableText(filters.searchCategory || \"\"));\r\n            } else {\r\n                return true;\r\n            }\r\n        });\r\n        const reStructured = groupData(filteredData, 'UserId');\r\n        const staffAbstract = reStructured.map(staff => ({\r\n            ...staff,\r\n            Name: staff?.groupedData[0] ? staff?.groupedData[0]?.Name : ' - ',\r\n            Tonnage: staff?.groupedData?.reduce((acc, staff) => Addition(acc, staff?.TotalTonnage), 0),\r\n            StockJournalTonnage: staff?.groupedData?.filter(\r\n                fil => filterableText(fil.DataFrom) === filterableText('Stock Journal')\r\n            )?.reduce((acc, staff) => Addition(acc, staff?.TotalTonnage), 0),\r\n            TripSheetTonnage: staff?.groupedData?.filter(\r\n                fil => filterableText(fil.DataFrom) === filterableText('Trip Sheet')\r\n            )?.reduce((acc, staff) => Addition(acc, staff?.TotalTonnage), 0),\r\n            Invoices: staff?.groupedData?.length ?? 0,\r\n            DayTransactions: Array.isArray(staff?.groupedData) ?\r\n                groupData(staff?.groupedData, 'EventDate').sort((a, b) => new Date(a.EventDate) - new Date(b.EventDate)) :\r\n                [],\r\n            StaffInvoices: checkIsNumber(staff?.groupedData?.length) ? staff?.groupedData?.length : 0\r\n        }));\r\n        const dayAbstract = staffAbstract.map(staff => ({\r\n            ...staff,\r\n            DayTransactions: staff?.DayTransactions?.map(day => ({\r\n                ...day,\r\n                TotalTonnage: day?.groupedData?.reduce((acc, day) => Addition(acc, day?.TotalTonnage), 0),\r\n                StockJournalTonnage: day?.groupedData?.filter(\r\n                    fil => filterableText(fil.DataFrom) === filterableText('Stock Journal')\r\n                )?.reduce((acc, staff) => Addition(acc, staff?.TotalTonnage), 0),\r\n                TripSheetTonnage: day?.groupedData?.filter(\r\n                    fil => filterableText(fil.DataFrom) === filterableText('Trip Sheet')\r\n                )?.reduce((acc, staff) => Addition(acc, staff?.TotalTonnage), 0),\r\n                DayInvoices: checkIsNumber(day?.groupedData?.length) ? day?.groupedData?.length : 0\r\n            }))\r\n        }));\r\n\r\n        return dayAbstract;\r\n    }, [reportData?.length, filters.searchString, filters.searchCategory]);\r\n\r\n    const uniqueCategory = useMemo(() => {\r\n        return [...new Set(reportData.map(sj => sj.CostType))];\r\n    }, [reportData]);\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                title=\"Cost Center Report\"\r\n                dataArray={showData}\r\n                columns={[\r\n                    createCol('Name', 'string', 'Name'),\r\n                    createCol('StockJournalTonnage', 'number', 'Stock Journal'),\r\n                    createCol('TripSheetTonnage', 'number', 'Trip Sheet'),\r\n                    createCol('Tonnage', 'number', 'Total'),\r\n                    createCol('Invoices', 'number', 'Invoices'),\r\n                ]}\r\n                MenuButtons={[\r\n                    {\r\n                        name: 'Pagination',\r\n                        icon: filters.disablePagination\r\n                            ? <ToggleOff fontSize=\"small\" />\r\n                            : <ToggleOn fontSize=\"small\" color='primary' />,\r\n                        onclick: () => setFilters(pre => ({ ...pre, disablePagination: !pre.disablePagination })),\r\n                        // disabled: isEqualNumber(FilteredVoucherData?.length, 0)\r\n                    },\r\n                    {\r\n                        name: 'Filters',\r\n                        icon: <FilterAlt fontSize=\"small\" color='primary' />,\r\n                        onclick: () => setFilters(pre => ({ ...pre, filterDialog: true })),\r\n                    }\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        title={row?.Name + \"'s Activity\"}\r\n                        dataArray={Array.isArray(row?.DayTransactions) ? row?.DayTransactions : []}\r\n                        columns={[\r\n                            createCol('EventDate', 'date', 'Date'),\r\n                            createCol('StockJournalTonnage', 'number', 'Stock Journal'),\r\n                            createCol('TripSheetTonnage', 'number', 'Trip Sheet'),\r\n                            createCol('TotalTonnage', 'number', 'Total'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Invoices',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => row?.DayInvoices\r\n                            }\r\n                        ]}\r\n                        EnableSerialNumber\r\n                    />\r\n                )}\r\n                ButtonArea={\r\n                    <input \r\n                        className=\"cus-inpt p-2 fa-13 w-auto\"\r\n                        type=\"search\"\r\n                        value={filters.searchString}\r\n                        onChange={e => setFilters(pre => ({...pre, searchString: e.target.value}))}\r\n                        placeholder=\"Search...\"\r\n                    />\r\n                }\r\n                EnableSerialNumber\r\n                headerFontSizePx={13}\r\n                bodyFontSizePx={13}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, filterDialog: !pre.filterDialog }))}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table fa-16 table-borderless\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>From Date</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>To Date</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Cost Category</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt\"\r\n                                            value={filters.searchCategory}\r\n                                            onChange={e => {\r\n                                                setFilters(pre => ({\r\n                                                    ...pre,\r\n                                                    searchCategory: e.target.value,\r\n                                                }));\r\n                                            }}\r\n                                        >\r\n                                            <option value={''}>All Category</option>\r\n                                            {uniqueCategory.map((CostType, key) => (\r\n                                                <option value={CostType} key={key}>{CostType}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        size=\"small\"\r\n                        onClick={() => setFilters(pre => ({ ...pre, filterDialog: false }))}\r\n                    >Close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate,\r\n                                filterDialog: false\r\n                            };\r\n                            setFilters(pre => ({ ...pre, ...updatedFilters }))\r\n                            updateQueryString(updatedFilters);\r\n                        }}\r\n                        variant=\"outlined\" size=\"small\"\r\n                        startIcon={<Search />}\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CostCenterReports;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["defaultFilters","Fromdate","ISOString","Todate","_ref","loadingOn","loadingOff","navigate","useNavigate","location","useLocation","query","URLSearchParams","search","reportData","setReportData","useState","filters","setFilters","fetchFrom","fetchTo","filterDialog","refresh","disablePagination","searchString","searchCategory","useEffect","fetchLink","address","then","data","success","catch","e","console","error","finally","queryFilters","get","isValidDate","pre","showData","useMemo","filteredData","filter","staff","filterableText","Object","values","join","includes","CostType","groupData","map","_staff$groupedData$","_staff$groupedData","_staff$groupedData2","_staff$groupedData2$f","_staff$groupedData3","_staff$groupedData3$f","_staff$groupedData$le","_staff$groupedData4","_staff$groupedData5","_staff$groupedData6","Name","groupedData","Tonnage","reduce","acc","Addition","TotalTonnage","StockJournalTonnage","fil","DataFrom","TripSheetTonnage","Invoices","length","DayTransactions","Array","isArray","sort","a","b","Date","EventDate","StaffInvoices","checkIsNumber","_staff$DayTransaction","day","_day$groupedData","_day$groupedData2","_day$groupedData2$fil","_day$groupedData3","_day$groupedData3$fil","_day$groupedData4","_day$groupedData5","DayInvoices","uniqueCategory","Set","sj","_jsxs","_Fragment","children","_jsx","FilterableTable","title","dataArray","columns","createCol","MenuButtons","name","icon","ToggleOff","fontSize","ToggleOn","color","onclick","FilterAlt","isExpendable","expandableComp","_ref2","row","isVisible","ColumnHeader","isCustomCell","Cell","_ref3","EnableSerialNumber","ButtonArea","className","type","value","onChange","target","placeholder","headerFontSizePx","bodyFontSizePx","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","key","DialogActions","Button","size","onClick","updatedFilters","newFilters","params","toString","replace","updateQueryString","variant","startIcon","Search","createSvgIcon","d"],"sourceRoot":""}
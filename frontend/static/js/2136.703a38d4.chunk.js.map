{"version":3,"file":"static/js/2136.703a38d4.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Components/taxCalculator.js","Pages/Sales/SalesReportComponent/DeliveryDetailsList.jsx","Pages/Sales/SalesReportComponent/NewDeliveryOrder.jsx","Pages/Sales/convertedStatus.js"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","/**\r\n * @param {number} amount \r\n * @param {number} gstRate \r\n * @param {string} type 3 Types add, remove, zerotax\r\n * @returns {object} \r\n */\r\n\r\nimport { toNumber } from \"./functions\";\r\n\r\nexport const calculateGSTDetails = (amount, gstRate, type = 'add') => {\r\n\r\n    const validatedAmount = toNumber(amount);\r\n    const validatedGstRate = toNumber(gstRate);\r\n\r\n    const halfGstRate = validatedGstRate / 2;\r\n    let baseAmount, taxAmount, withTax, withoutTax;\r\n\r\n    if (type === 'zerotax') {\r\n        baseAmount = validatedAmount; // No tax applied\r\n        taxAmount = 0;\r\n        withTax = validatedAmount;\r\n        withoutTax = validatedAmount;\r\n    } else if (type === 'add') {\r\n        taxAmount = (validatedAmount * validatedGstRate) / 100;\r\n        baseAmount = validatedAmount;\r\n        withTax = validatedAmount + taxAmount;\r\n        withoutTax = validatedAmount;\r\n    } else if (type === 'remove') {\r\n        baseAmount = validatedAmount / (1 + validatedGstRate / 100);\r\n        taxAmount = validatedAmount - baseAmount;\r\n        withTax = validatedAmount;\r\n        withoutTax = baseAmount;\r\n    } else {\r\n        throw new Error(\"Invalid type. Use 'add', 'remove', or 'zerotax'.\");\r\n    }\r\n\r\n    const sgstAmount = (taxAmount / 2).toFixed(2);\r\n    const cgstAmount = (taxAmount / 2).toFixed(2);\r\n    const igstAmount = taxAmount.toFixed(2);\r\n\r\n    return {\r\n        base_amount: Number(baseAmount).toFixed(2),\r\n        with_tax: Number(withTax).toFixed(2),\r\n        without_tax: Number(withoutTax).toFixed(2),\r\n        tax_per: Number(validatedGstRate),\r\n        tax_amount: Number(taxAmount).toFixed(2),\r\n        sgst_per: Number(halfGstRate),\r\n        sgst_amount: Number(sgstAmount),\r\n        cgst_per: Number(halfGstRate),\r\n        cgst_amount: Number(cgstAmount),\r\n        igst_per: Number(validatedGstRate),\r\n        igst_amount: Number(igstAmount),\r\n        type,\r\n    };\r\n};","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, Button, Dialog, Tooltip, IconButton, DialogTitle, DialogContent, DialogActions, Switch } from \"@mui/material\";\r\n// import '../common.css'\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { getPreviousDate, isEqualNumber, ISOString, isValidObject } from \"../../../Components/functions\";\r\nimport DeliveryInvoiceTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Edit, FilterAlt, Delete } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\n// import SalesDelivery from \"./SalesReportComponent/SalesDeliveryConvert\"\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NewDeliveryOrder from \"./NewDeliveryOrder\";\r\nconst DeliveryDetailsList = ({ loadingOn, loadingOff, onToggle, reload }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n\r\n\r\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\r\n    const [itemTodelete, setItemToDelete] = useState({})\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] = useState(false)\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Delivery_Person_Id: '',\r\n        Delivery_Person_Name: 'ALL',\r\n        Cancel_status: 0\r\n    });\r\n\r\n    const [pageLoad, setPageLoad] = useState(false)\r\n\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderList?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Delivery_Person_Id=${filters?.Delivery_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSaleOrders(data?.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Delivery_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        reload,\r\n        pageLoad\r\n    ])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsers(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n    const openDeleteDialog = (itemData) => {\r\n\r\n        setItemToDelete({\r\n            So_No: itemData.So_No,\r\n            Do_Id: itemData.Do_Id\r\n        });\r\n        setDeleteConfirm(true);\r\n    };\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: 'Do_Id',\r\n            ColumnHeader: 'Delivery ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'So_No',\r\n            ColumnHeader: 'Sale Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n\r\n        {\r\n            Field_Name: 'Do_Inv_No',\r\n            ColumnHeader: 'Do_Inv_No ',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Customer',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'SalesDate',\r\n            ColumnHeader: 'Sale Order Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Do_Date',\r\n            ColumnHeader: 'Delivery Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n\r\n\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'DeliveryStatusName',\r\n            ColumnHeader: 'Delivery Status ',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n\r\n        // {\r\n        //     Field_Name: 'DeliveryStatusName',\r\n        //     // ColumnHeader: 'DeliveryStatusName',\r\n        //     isVisible: 1,\r\n        //     Field_Data:'String',\r\n        //     align: 'center',\r\n        //     // isCustomCell: true,\r\n\r\n        // },\r\n        // {\r\n        //     Field_Name: 'Sales_Person_Name',\r\n        //     ColumnHeader: 'Sales Person',\r\n        //     Fied_Data: 'string',\r\n        //     isVisible: 1,\r\n        // },\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n\r\n                        <Tooltip title='Edit'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row, isEdit: true });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <Edit className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Delete'>\r\n                            <IconButton\r\n                                onClick={() => openDeleteDialog(row)}\r\n\r\n                                size=\"small\"\r\n                            >\r\n                                <Delete className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Delivery Person</td>\r\n                            <td className=\"border p-2\">{row.Delivery_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen)\r\n        setOrderInfo({});\r\n        setIsDeliveryDetailsVisible(!isDeliveryDetailsVisible);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n\r\n\r\n        setDeleteConfirm(false)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const confirmData = async () => {\r\n        if (!itemTodelete) return;\r\n\r\n        try {\r\n            const data = await fetchLink({\r\n                address: 'delivery/deliveryOrder',\r\n                method: 'DELETE',\r\n                bodyData: {\r\n                    Order_Id: itemTodelete.So_No,\r\n                    Do_Id: itemTodelete.Do_Id\r\n                }\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success('Delivery Deleted successfully');\r\n\r\n\r\n\r\n                setDeleteConfirm(false);\r\n\r\n                setPageLoad(prev => !prev);\r\n                setIsDeliveryDetailsVisible(false);\r\n            } else {\r\n                toast.error(data?.message || 'Deletion failed');\r\n            }\r\n        } catch (error) {\r\n            toast.error('An error occurred while deleting.');\r\n        } finally {\r\n            setDeleteConfirm(false);\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">{\r\n                        screen\r\n                            ? 'Delivery Orders'\r\n                            : isValidObject(orderInfo)\r\n                                ? 'Modify Delivery Order'\r\n                                : ''}\r\n                    </h6>\r\n                    <span>\r\n                        {screen && (\r\n                            <Tooltip title='Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n\r\n                        {screen && (\r\n                            <Switch\r\n                                checked={!screen}\r\n                                onChange={onToggle}\r\n                                label={'Delivery Details'}\r\n                                inputProps={{ 'aria-label': 'controlled' }}\r\n\r\n                            />\r\n                        )}\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent className=\"p-0 \">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setScreen(pre => !pre)\r\n                            }}\r\n                            switchScreen={switchScreen}\r\n                        />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <DeliveryInvoiceTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Sale Order'}\r\n                />\r\n            )}\r\n\r\n\r\n            <Dialog\r\n                open={deleteConfirm}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Delete</DialogTitle>\r\n                <DialogContent>\r\n                    <div>Are You Want to Delete Delivery Details</div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button onClick={confirmData}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Delivery Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Delivery_Person_Id, label: filters?.Delivery_Person_Name }}\r\n                                            onChange={(e) => setFilters({ ...filters, Delivery_Person_Id: e.value, Delivery_Person_Name: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Delivery Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeliveryDetailsList;\r\n\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions, IconButton } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    Multiplication, Division, NumberFormat, Subraction, numberToWords,\r\n    RoundNumber, Addition\r\n} from \"../../../Components/functions\";\r\nimport { Add, Clear, ClearAll, Delete, Edit, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    switch (method) {\r\n        case 0:\r\n            return RoundNumber(amount * (percentage / 100));\r\n        case 1:\r\n            return RoundNumber(amount - (amount * (100 / (100 + percentage))));\r\n        case 2:\r\n            return 0;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst NewDeliveryOrder = ({ editValues, loadingOn, loadingOff, reload, switchScreen, editOn }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        salesPerson: [],\r\n        brand: [],\r\n    });\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [productBrand, setProductBrand] = useState([]);\r\n    const [productUOM, setProductUOM] = useState([]);\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const [voucherType, setVoucherType] = useState([]);\r\n\r\n    const [branch, setBranch] = useState([]);\r\n    const initialValue = {\r\n        Company_Id: storage?.Company_id,\r\n        Do_Date: ISOString(),\r\n        VoucherType: '',\r\n        Retailer_Id: '',\r\n        Retailer_Name: 'Select',\r\n        Delivery_Status: 1,\r\n        Delivery_Person_Id: 0,\r\n        Payment_Ref_No: '',\r\n        Delivery_Person_Name: '',\r\n        Payment_Mode: 0,\r\n        Payment_Status: 0,\r\n        Branch_Id: storage?.BranchId,\r\n        Narration: '',\r\n        Created_by: storage?.UserId,\r\n        Product_Array: [],\r\n        So_No: editValues?.So_Id,\r\n        GST_Inclusive: 1,\r\n        IS_IGST: 0,\r\n    }\r\n\r\n    const productInitialDetails = {\r\n        Item_Id: '',\r\n        ItemName: 'Search Item',\r\n        Bill_Qty: 0,\r\n        Item_Rate: 0,\r\n        UOM: '',\r\n        Units: '',\r\n        Product: {},\r\n        Group: 'Search Group',\r\n        GroupID: '',\r\n        Brand: 'Search Brand',\r\n        BrandID: '',\r\n        Amount: 0\r\n    }\r\n\r\n    const [orderDetails, setOrderDetails] = useState(initialValue)\r\n    const [orderProducts, setOrderProducts] = useState([]);\r\n    const [productDetails, setProductDetails] = useState(productInitialDetails);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [addProductDialog, setAddProductDialog] = useState(false);\r\n\r\n    const isExclusiveBill = isEqualNumber(orderDetails.GST_Inclusive, 0);\r\n    const isInclusive = isEqualNumber(orderDetails.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(orderDetails.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(orderDetails.IS_IGST, 1);\r\n    const deliveryPerson = useState(0);\r\n    // const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchLocation = async () => {\r\n            try {\r\n                const position = await new Promise((resolve, reject) => {\r\n                    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n                });\r\n                const { latitude, longitude } = position.coords;\r\n\r\n                setOrderDetails(pre => ({\r\n                    ...pre,\r\n                    Delivery_Latitude: latitude,\r\n                    Delivery_Longitude: longitude,\r\n                }));\r\n            } catch (error) {\r\n                toast.warn('Unable to fetch location. Allow location access.');\r\n            }\r\n        };\r\n\r\n        if (isValidObject(editValues)) {\r\n\r\n            setOrderDetails(pre => ({\r\n                ...pre,\r\n                Do_Id: editValues?.Do_Id,\r\n                Do_Date: editValues?.Do_Date ?? ISOString(),\r\n                VoucherType: editValues?.Voucher_Type,\r\n                Retailer_Id: editValues?.Retailer_Id,\r\n                Retailer_Name: editValues?.Retailer_Name,\r\n                Delivery_Status: editValues?.Delivery_Status,\r\n                // Delivery_Person_Id: editValues?.Delivery_Person_Id,\r\n                // Delivery_Person_Name: editValues?.Delivery_Person_Name,\r\n                Payment_Status: editValues?.Payment_Status,\r\n                Payment_Mode: editValues?.Payment_Mode,\r\n                Branch_Id: editValues?.Branch_Id,\r\n                Narration: editValues?.Narration,\r\n                Created_by: editValues?.Created_by,\r\n                Payment_Ref_No: editValues?.Payment_Ref_No,\r\n                So_No: editValues?.So_Id,\r\n                GST_Inclusive: editValues?.GST_Inclusive,\r\n                IS_IGST: editValues?.IS_IGST,\r\n\r\n            }));\r\n            setOrderProducts(editValues?.Products_List?.map(pro => ({\r\n                ...pro,\r\n                Item_Id: pro.Item_Id ?? '',\r\n                ItemName: pro?.Product_Name ?? \"\",\r\n                Bill_Qty: pro?.Bill_Qty ?? 0,\r\n                Item_Rate: pro?.Item_Rate ?? 0,\r\n                UOM: pro?.Unit_Id ?? '',\r\n                Units: pro?.Units ?? '',\r\n                Product: {\r\n                    ...pro,\r\n                    Cgst_P: Number(findProductDetails(products, pro.Item_Id)?.Cgst_P) ?? 0,\r\n                    Sgst_P: Number(findProductDetails(products, pro.Item_Id)?.Sgst_P) ?? 0,\r\n                    Igst_P: Number(findProductDetails(products, pro.Item_Id)?.Igst_P) ?? 0,\r\n                    Gst_P: Addition(findProductDetails(products, pro.Item_Id)?.Cgst_P, findProductDetails(products, pro.Item_Id)?.Sgst_P) ?? 0\r\n                } ?? {},\r\n                Group: 'Search Group',\r\n                GroupID: '',\r\n                Brand: 'Search Brand',\r\n                BrandID: '',\r\n                Amount: pro?.Amount ?? 0\r\n            })));\r\n            setIsEdit(true)\r\n            if (!editValues?.Latitude || !editValues?.Longitude) {\r\n                fetchLocation();\r\n            }\r\n        } else {\r\n            setOrderDetails(initialValue);\r\n            setOrderProducts([])\r\n            setIsEdit(false)\r\n        }\r\n    }, [editValues, products])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/uom`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProductUOM(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/products?Company_Id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProducts(data.data);\r\n\r\n                const uniqueBrand = getUniqueData(data.data, 'Brand', ['Brand_Name']);\r\n                setProductBrand(uniqueBrand);\r\n\r\n            } else {\r\n                setProducts([]);\r\n                setProductBrand([]);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n\r\n        // fetchLink({\r\n        //     address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        // }).then(data => {\r\n        //     if (data.success) {\r\n        //         setDeliveryPersonList(data.data);\r\n        //     }\r\n        // }).catch(e => console.error(e));\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/company?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setCompanyInfo(data?.data[0] ? data?.data[0] : {})\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `purchase/voucherType`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setVoucherType(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/branch/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setBranch(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const handleProductInputChange = (productId, value, rate, obj, UOM_Id, Units) => {\r\n        const productIndex = orderProducts.findIndex(item => isEqualNumber(item.Item_Id, productId));\r\n\r\n        if (productIndex !== -1) {\r\n            const updatedValues = [...orderProducts];\r\n            updatedValues[productIndex].Bill_Qty = Number(value);\r\n            updatedValues[productIndex].Item_Rate = Number(rate);\r\n            updatedValues[productIndex].UOM = UOM_Id;\r\n            updatedValues[productIndex].Units = Units;\r\n            updatedValues[productIndex].Amount = Multiplication(value, rate);\r\n            updatedValues[productIndex] = { ...updatedValues[productIndex], Product: obj }\r\n\r\n            setOrderProducts(updatedValues);\r\n        } else {\r\n            setOrderProducts(prevValues => [...prevValues, {\r\n                Item_Id: productId,\r\n                Bill_Qty: Number(value),\r\n                Item_Rate: Number(rate),\r\n                UOM: UOM_Id,\r\n                Units: Units,\r\n                Amount: Multiplication(value, rate),\r\n                Product: obj\r\n            }]);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const postSaleOrder = () => {\r\n        if (orderProducts?.length > 0 && orderDetails?.Retailer_Id) {\r\n            loadingOn();\r\n            console.log(\"fasdadadas\", orderProducts)\r\n            fetchLink({\r\n                address: `delivery/deliveryOrder`,\r\n                method: (isEdit && !editOn) ? 'PUT' : 'POST',\r\n\r\n                bodyData: {\r\n                    ...orderDetails,\r\n                    Product_Array: orderProducts.filter(o => isGraterNumber(o?.Bill_Qty, 0)),\r\n                    Delivery_Person_Id: deliveryPerson ?? Number(orderDetails?.Delivery_Person_Id) ?? 0,\r\n                    Payment_Status: (orderDetails?.Payment_Status) ? Number(orderDetails?.Payment_Status) : 1,\r\n                    Payment_Ref_No: orderDetails?.Payment_Ref_No,\r\n                    Delivery_Status: (orderDetails?.Delivery_Status) ? Number(orderDetails?.Delivery_Status) : 1,\r\n                    Payment_Mode: (orderDetails?.Payment_Mode) ? Number(orderDetails?.Payment_Mode) : 1\r\n                }\r\n\r\n            }).then(data => {\r\n\r\n                if (data.success) {\r\n                    toast.success(data?.message);\r\n\r\n                    setOrderDetails(initialValue);\r\n                    setOrderProducts([])\r\n                    reload()\r\n                } else {\r\n                    toast.error(data?.message)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => loadingOff())\r\n\r\n        } else {\r\n            if (orderProducts.length <= 0) {\r\n                return toast.error('Enter any one product quantity')\r\n            }\r\n            if (!orderDetails?.Retailer_Id) {\r\n                toast.error('Select Retailer')\r\n                return toast.error('Select Retailer')\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeAddProduct = () => {\r\n        setAddProductDialog(false);\r\n        setProductDetails(productInitialDetails);\r\n    }\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0)\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    const totalValueBeforeTax = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return {\r\n                TotalValue: Addition(acc.TotalValue, Amount),\r\n                TotalTax: 0\r\n            }\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n            const TotalValue = Addition(acc.TotalValue, taxInfo.without_tax);\r\n            const TotalTax = Addition(acc.TotalTax, taxInfo.tax_amount);\r\n\r\n            return {\r\n                TotalValue, TotalTax\r\n            };\r\n        }, {\r\n            TotalValue: 0,\r\n            TotalTax: 0\r\n        });\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    useEffect(() => {\r\n        setOrderProducts(pre => pre?.map(pro => ({\r\n            ...pro,\r\n            Amount: Multiplication(pro?.Item_Rate, pro?.Bill_Qty)\r\n        })));\r\n    }, [orderDetails.GST_Inclusive])\r\n\r\n    useEffect(() => {\r\n        setOrderProducts(pre => pre?.map(pro => ({\r\n            ...pro,\r\n            Amount: Multiplication(pro?.Item_Rate, pro?.Bill_Qty)\r\n        })));\r\n    }, [orderDetails.GST_Inclusive])\r\n\r\n    // const handleDeliveryPersonChange = (selectedOption) => {\r\n\r\n    //     setDeliveryPerson(selectedOption ? { UserId: selectedOption.value, Name: selectedOption.label } : null);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            {editOn && (\r\n                <>\r\n                    <h6 className=\"fa-18 m-0 p-3 py-2 d-flex align-items-center justify-content-between\">Create Delivery Order</h6>\r\n                </>\r\n            )}\r\n\r\n            <div className=\"p-3 pt-0\">\r\n                {/* CompnayInfo  */}\r\n                <div className=\"p-3 bg-light rounded-3 mb-3 shadow-sm\">\r\n                    <h5 className=\"border-bottom\">From:</h5>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 col-md-7\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\" colSpan={2}>\r\n                                            {companyInfo?.Company_Name}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Address:</td>\r\n                                        <td className=\"border-0 bg-light\">{companyInfo?.Company_Address}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Phone:</td>\r\n                                        <td className=\"border-0 bg-light\">{companyInfo?.Telephone_Number}</td>\r\n                                    </tr>\r\n\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-md-5\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Date:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={orderDetails?.Do_Date ? ISOString(orderDetails?.Do_Date) : ''}\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Do_Date: e.target.value })}\r\n                                                className=\"cus-inpt p-1\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Invoice Type:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, GST_Inclusive: Number(e.target.value) })}\r\n                                                value={orderDetails.GST_Inclusive}\r\n                                            >\r\n                                                <option value={1}>Inclusive Tax</option>\r\n                                                <option value={0}>Exclusive Tax</option>\r\n                                                <option value={2}>Not Taxable</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Tax Type:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, IS_IGST: Number(e.target.value) })}\r\n                                                value={orderDetails.IS_IGST}\r\n                                            >\r\n                                                <option value='0'>GST</option>\r\n                                                <option value='1'>IGST</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Voucher Type <span style={{ color: \"red\" }}>*</span></td>\r\n\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1 \"\r\n                                                onChange={e => setOrderDetails({\r\n                                                    ...orderDetails,\r\n                                                    VoucherType: e.target.value\r\n                                                })}\r\n\r\n                                                value={orderDetails.VoucherType}\r\n                                            >\r\n\r\n                                                <option value='' disabled>select voucher</option>\r\n                                                {voucherType.map((vou, ind) => (\r\n                                                    <option\r\n                                                        value={vou.Vocher_Type_Id}\r\n                                                        key={ind}\r\n                                                    >\r\n                                                        {vou.Voucher_Type}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </td>\r\n\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Branch <span style={{ color: \"red\" }}>*</span></td>\r\n\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Branch_Id: Number(e.target.value) })}\r\n                                                value={orderDetails.Branch_Id}\r\n                                            >\r\n                                                <option value='' disabled>select Branch</option>\r\n                                                {branch.map((branch, ind) => (\r\n                                                    <option value={branch.BranchId} key={ind}>{branch.BranchName}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Customer Info */}\r\n\r\n                <div className=\"p-3 bg-light rounded-3 mb-3 shadow-sm\">\r\n                    <h5 className=\"border-bottom\">To:</h5>\r\n                    <div className=\"row \">\r\n                        <div className=\"col-md-6\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Retailer Name:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <Select\r\n                                                value={{ value: orderDetails?.Retailer_Id, label: orderDetails?.Retailer_Name }}\r\n                                                onChange={(e) => setOrderDetails({ ...orderDetails, Retailer_Id: e.value, Retailer_Name: e.label })}\r\n                                                options={[\r\n                                                    { value: '', label: 'select', isDisabled: true },\r\n                                                    ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={\"Retailer Name\"}\r\n                                                maxMenuHeight={200}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Address:</td>\r\n                                        <td className=\"border-0 bg-light\">{storage.Name}</td>\r\n                                    </tr>\r\n\r\n\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Phone:</td>\r\n                                        <td className=\"border-0 bg-light\">{ }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Delivery_Status:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Delivery_Status: e.target.value })}\r\n                                                value={orderDetails.Delivery_Status ? orderDetails.Delivery_Status : 1}\r\n                                            >\r\n                                                <option value={5}>Pending</option>\r\n\r\n                                                <option value={7}>Delivered</option>\r\n                                                <option value={6}>Return</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Payment_Mode:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Payment_Mode: e.target.value })}\r\n                                                value={orderDetails.Payment_Mode || 0}\r\n                                            >\r\n                                                <option value={0}></option>\r\n                                                <option value={1}>Cash</option>\r\n                                                <option value={3}>QR-Pay</option>\r\n                                                <option value={2}>G-Pay</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Q-Pay:</td>\r\n                                        <td className=\"border-0 bg-light\">{10}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Frequency Days:</td>\r\n                                        <td className=\"border-0 bg-light\">{20}</td>\r\n                                    </tr>\r\n\r\n\r\n\r\n\r\n\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Payment_Status:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <select\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Payment_Status: Number(e.target.value) })}\r\n                                                value={orderDetails.Payment_Status}\r\n                                            >\r\n                                                <option value={1}>Pending</option>\r\n\r\n                                                <option value={3}>Complete</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                    {/* <tr>\r\n                                        <td className=\"border-0 bg-light\">Delivery Person Name:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <Select\r\n                                                value={\r\n                                                    deliveryPerson\r\n                                                        ? { value: deliveryPerson.UserId, label: deliveryPerson.Name }\r\n                                                        : { value: orderDetails?.Delivery_Person_Id, label: orderDetails?.Delivery_Person_Name }\r\n                                                }\r\n                                                onChange={handleDeliveryPersonChange}\r\n                                                options={[\r\n                                                    { value: '', label: 'Select', isDisabled: true },\r\n                                                    ...deliveryPersonList.map((obj) => ({\r\n                                                        value: obj.UserId,\r\n                                                        label: obj.Name,\r\n                                                    })),\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={\r\n                                                    deliveryPerson\r\n                                                        ? deliveryPerson.Name\r\n                                                        : 'Sales Person Name'\r\n                                                }\r\n                                            />\r\n                                        </td>\r\n                                    </tr> */}\r\n\r\n\r\n                                    <tr>\r\n                                        <td className=\"border-0 bg-light\">Payment Reference No:</td>\r\n                                        <td className=\"border-0 bg-light\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"cus-inpt p-1\"\r\n                                                onChange={e => setOrderDetails({ ...orderDetails, Payment_Ref_No: e.target.value })}\r\n                                                value={orderDetails?.Payment_Ref_No}  // Default to empty string if no value available\r\n                                                placeholder=\"Enter Payment Reference Number\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* Actions */}\r\n                <div className=\"d-flex align-items-end justify-content-end flex-wrap mb-3\">\r\n\r\n                    <Button\r\n                        onClick={() => setAddProductDialog(true)}\r\n                        sx={{ ml: 1 }}\r\n                        variant='outlined'\r\n                        startIcon={<Add />}\r\n                    >Add Product</Button>\r\n                </div>\r\n\r\n                <FilterableTable\r\n                    dataArray={orderProducts}\r\n                    columns={[\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Product?.Product_Name,\r\n                            ColumnHeader: 'Product',\r\n                            isVisible: 1,\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Product?.HSN_Code,\r\n                            ColumnHeader: 'HSN Code',\r\n                            isVisible: 1,\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => row?.Bill_Qty + (row?.Units ?? ''),\r\n                            ColumnHeader: 'Quantity',\r\n                            isVisible: 1,\r\n                            align: 'center'\r\n                        },\r\n                        {\r\n                            Field_Name: 'Item_Rate',\r\n                            ColumnHeader: \"Rate\",\r\n                            Fied_Data: 'number',\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            ColumnHeader: 'Taxable Amount',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                const percentage = (\r\n                                    IS_IGST ? row?.Product?.Igst_P : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                const tax = taxCalc(orderDetails.GST_Inclusive, amount, percentage);\r\n                                return NumberFormat(\r\n                                    isInclusive ? (amount - tax) : amount\r\n                                )\r\n                            },\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                const percentage = (\r\n                                    IS_IGST ? row?.Product?.Igst_P : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                return NumberFormat(\r\n                                    taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                ) + ' (' + percentage + '%)'\r\n                            },\r\n                            ColumnHeader: 'Tax',\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            ColumnHeader: 'Amount',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                const percentage = (\r\n                                    IS_IGST\r\n                                        ? row?.Product?.Igst_P\r\n                                        : Addition(row?.Product?.Cgst_P, row?.Product?.Sgst_P)\r\n                                ) ?? 0;\r\n                                const amount = row.Amount ?? 0;\r\n                                const tax = taxCalc(orderDetails.GST_Inclusive, amount, percentage)\r\n                                return NumberFormat(\r\n                                    isEqualNumber(orderDetails.GST_Inclusive, 1) ? amount : (amount + tax)\r\n                                )\r\n                            },\r\n                            isVisible: 1,\r\n                            align: 'right'\r\n                        },\r\n                        {\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => {\r\n                                return (\r\n                                    <>\r\n                                        <IconButton\r\n                                            onClick={() => {\r\n                                                setProductDetails({\r\n                                                    Item_Id: row.Item_Id,\r\n                                                    ItemName: row?.Product?.Product_Name,\r\n                                                    Bill_Qty: row.Bill_Qty,\r\n                                                    Item_Rate: row.Item_Rate,\r\n                                                    UOM: row.Product.UOM_Id,\r\n                                                    Product: row.Product,\r\n                                                    Group: row?.Product?.Pro_Group,\r\n                                                    GroupID: row?.Product?.Product_Group,\r\n                                                    Brand: row?.Product?.Brand_Name,\r\n                                                    BrandID: row?.Product?.Brand,\r\n                                                    Amount: row?.Amount\r\n                                                });\r\n                                                setAddProductDialog(true);\r\n                                            }}\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                setOrderProducts(pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id)))\r\n                                            }}\r\n                                            color='error'\r\n                                        >\r\n                                            <Delete />\r\n                                        </IconButton>\r\n\r\n                                    </>\r\n                                )\r\n                            },\r\n                            ColumnHeader: 'Action',\r\n                            isVisible: 1,\r\n                        },\r\n                    ]}\r\n                    EnableSerialNumber\r\n                    CellSize=\"small\"\r\n                    disablePagination={true}\r\n                />\r\n\r\n\r\n                {orderProducts.length > 0 && (\r\n                    <div className=\"d-flex justify-content-end py-2\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border p-2\" rowSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                        Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                    </td>\r\n                                    <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                    </td>\r\n                                </tr>\r\n                                {!isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">CGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">SGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </>\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">IGST</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    {/* {\r\n                                            Total_Invoice_value}\r\n                                            {\r\n                                                totalValueBeforeTax}\r\n                                                 { totalValueBeforeTax.TotalTax\r\n                                             }\r\n                                        */}\r\n\r\n                                    <td className=\"border p-2\">Round Off</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {RoundNumber(Math.round(Total_Invoice_value) - Total_Invoice_value)}\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border p-2\">Total</td>\r\n                                    <td className=\"border p-2\">\r\n                                        {NumberFormat(Math.round(Total_Invoice_value))}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                <p className=\"fa-15 mt-3 m-0\">Narration</p>\r\n                <textarea\r\n                    className=\"cus-inpt \"\r\n                    value={orderDetails.Narration}\r\n                    onChange={e => setOrderDetails(pre => ({ ...pre, Narration: e.target.value }))}\r\n                />\r\n\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button\r\n                        variant='outlined'\r\n                        startIcon={<Clear />}\r\n                        onClick={switchScreen}\r\n                    >\r\n                        {'cancel'}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={postSaleOrder}\r\n                        sx={{ ml: 1 }}\r\n                        variant='outlined'\r\n                        color='success'\r\n                        startIcon={<Save />}\r\n                        disabled={orderProducts?.length === 0 || !orderDetails?.Retailer_Id}\r\n                    >Save</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog\r\n                open={addProductDialog}\r\n                onClose={closeAddProduct}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle className=\"border-bottom\">\r\n                    <span>Add Products Details</span>\r\n                </DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    if (productDetails.Item_Id && productDetails.Bill_Qty && productDetails.Item_Rate) {\r\n                        handleProductInputChange(\r\n                            productDetails.Item_Id,\r\n                            productDetails.Bill_Qty,\r\n                            productDetails.Item_Rate,\r\n                            productDetails.Product,\r\n                            productDetails.UOM,\r\n                            productDetails.Units,\r\n                        );\r\n                        closeAddProduct();\r\n                    } else {\r\n                        toast.warn(!productDetails.Item_Id ? 'Select Product' : !productDetails.Bill_Qty ? 'Enter Quantity' : 'Enter Rate or Amount');\r\n                    }\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row pb-5\">\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Brand</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.BrandID, label: productDetails.Brand }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, BrandID: e.value, Brand: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...productBrand.map(obj => ({ value: obj?.Brand, label: obj?.Brand_Name }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Brand\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            {/* <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, GroupID: e.value, Group: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...productGroup.map(obj => ({ value: obj?.Product_Group, label: obj?.Pro_Group }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div> */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) =>\r\n                                        setProductDetails((pre) => ({ ...pre, GroupID: e.value, Group: e.label }))\r\n                                    }\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...products\r\n                                            .filter(\r\n                                                (pro) =>\r\n                                                    productDetails.BrandID\r\n                                                        ? isEqualNumber(pro.Brand, productDetails.BrandID)\r\n                                                        : true\r\n                                            )\r\n                                            .reduce((acc, pro) => {\r\n                                                if (\r\n                                                    !acc.some((grp) => grp.value === pro.Product_Group)\r\n                                                ) {\r\n                                                    acc.push({\r\n                                                        value: pro.Product_Group,\r\n                                                        label: pro.Pro_Group,\r\n                                                    });\r\n                                                }\r\n                                                return acc;\r\n                                            }, []),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 p-2\">\r\n                                <label>Item Name <RequiredStar /></label>\r\n                                <Select\r\n                                    value={{ value: productDetails.Item_Id, label: productDetails.ItemName }}\r\n                                    onChange={e => {\r\n                                        const productInfo = products.find(pro => isEqualNumber(pro.Product_Id, e.value))\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            Item_Id: e.value,\r\n                                            ItemName: e.label,\r\n                                            Product: productInfo ?? {},\r\n                                            Group: productInfo.Pro_Group ?? pre.Group,\r\n                                            GroupID: productInfo.Product_Group ?? pre.GroupID,\r\n                                            Brand: productInfo.Brand_Name ?? pre.Brand,\r\n                                            BrandID: productInfo.Brand ?? pre.BrandID,\r\n                                            UOM: productInfo.UOM_Id ?? pre.UOM,\r\n                                            Units: productInfo.Units ?? pre.Units,\r\n                                            Item_Rate: productInfo.Item_Rate ?? 0,\r\n                                            Amount: 0,\r\n                                            Bill_Qty: 0,\r\n                                        }));\r\n                                    }}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...[\r\n                                            ...products\r\n                                                .filter(pro => productDetails.BrandID ? isEqualNumber(pro.Brand, productDetails.BrandID) : true)\r\n                                                .filter(pro => productDetails.GroupID ? isEqualNumber(pro.Product_Group, productDetails.GroupID) : true)\r\n                                        ].map(obj => ({\r\n                                            value: obj?.Product_Id,\r\n                                            label: obj?.Product_Name,\r\n                                            isDisabled: (\r\n                                                orderProducts.findIndex(ind => isEqualNumber(\r\n                                                    ind?.Item_Id, obj?.Product_Id\r\n                                                ))\r\n                                            ) === -1 ? false : true\r\n                                        }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    required\r\n                                    placeholder={\"Select Product\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Quantity <RequiredStar /></label>\r\n                                <input\r\n                                    type=\"input\"\r\n                                    required\r\n                                    value={productDetails.Bill_Qty ? productDetails.Bill_Qty : ''}\r\n                                    onChange={e => {\r\n                                        if (productDetails.Item_Rate) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Amount: Multiplication(productDetails.Item_Rate, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else if (productDetails.Amount) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Item_Rate: Division(pre.Amount, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Bill_Qty: e.target.value,\r\n                                            }));\r\n                                        }\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Rate </label>\r\n                                <input\r\n                                    type=\"float\"\r\n                                    value={productDetails.Item_Rate ? (productDetails.Item_Rate) : ''}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Item_Rate: e.target.value,\r\n                                        Amount: pre.Bill_Qty ? Multiplication(e.target.value, pre.Bill_Qty) : pre.Amount\r\n                                    }))}\r\n                                    min={1}\r\n                                    className=\"cus-inpt\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>UOM</label>\r\n                                <select\r\n                                    value={productDetails.UOM}\r\n                                    onChange={e => {\r\n                                        const selectedIndex = e.target.selectedIndex;\r\n                                        const label = e.target.options[selectedIndex].text;\r\n                                        const value = e.target.value;\r\n                                        setProductDetails(pre => ({ ...pre, UOM: value, Units: label }));\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                >\r\n                                    <option value=\"\" disabled>select</option>\r\n                                    {productUOM.map((o, i) => (\r\n                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-6 p-2\">\r\n                                <label>Amount</label>\r\n                                <input\r\n                                    type=\"input\"\r\n                                    value={productDetails.Amount ? productDetails.Amount : ''}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Amount: e.target.value,\r\n                                        Item_Rate: pre.Bill_Qty ? Division(e.target.value, pre.Bill_Qty) : pre.Item_Rate\r\n                                    }))}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions className=\"d-flex justify-content-between align-items-center\">\r\n                        <Button onClick={() => setProductDetails(productInitialDetails)} type='button' startIcon={<ClearAll />}>Clear</Button>\r\n                        <span>\r\n                            <Button type=\"button\" onClick={closeAddProduct}>cancel</Button>\r\n                            <Button type='submit' variant=\"outlined\">Add</Button>\r\n                        </span>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default NewDeliveryOrder;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","calculateGSTDetails","amount","gstRate","type","arguments","length","undefined","validatedAmount","toNumber","validatedGstRate","halfGstRate","baseAmount","taxAmount","withTax","withoutTax","Error","sgstAmount","toFixed","cgstAmount","igstAmount","base_amount","Number","with_tax","without_tax","tax_per","tax_amount","sgst_per","sgst_amount","cgst_per","cgst_amount","igst_per","igst_amount","_ref","loadingOn","loadingOff","onToggle","reload","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","useState","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","deleteConfirm","setDeleteConfirm","itemTodelete","setItemToDelete","isDeliveryDetailsVisible","setIsDeliveryDetailsVisible","filters","setFilters","Fromdate","getPreviousDate","Todate","ISOString","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Delivery_Person_Id","Delivery_Person_Name","Cancel_status","pageLoad","setPageLoad","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","Company_id","saleOrderColumn","Field_Name","ColumnHeader","Fied_Data","isVisible","align","isCustomCell","Cell","_ref2","row","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","switchScreen","_objectSpread","isEdit","size","Edit","className","openDeleteDialog","So_No","itemData","Do_Id","Delete","closeDialog","Card","isValidObject","FilterAlt","Switch","checked","onChange","label","inputProps","CardContent","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref3","Branch_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","Sales_Person_Name","colSpan","Narration","NewDeliveryOrder","editValues","pre","Object","keys","DeliveryInvoiceTemplate","orderProducts","download","actionOpen","clearDetails","TitleText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","Button","async","method","bodyData","Order_Id","toast","prev","message","onClose","verticalAlign","Select","value","options","map","obj","Retailer_Name","styles","customSelectStyles","isSearchable","placeholder","UserId","Name","target","taxCalc","percentage","RoundNumber","findProductDetails","_arr$find","productid","find","Product_Id","editOn","baseData","setBaseData","products","branch","voucherType","uom","staff","staffType","brand","setProducts","productBrand","setProductBrand","productUOM","setProductUOM","companyInfo","setCompanyInfo","setVoucherType","setBranch","initialValue","Company_Id","Do_Date","VoucherType","Delivery_Status","Payment_Ref_No","Payment_Mode","Payment_Status","Branch_Id","BranchId","Product_Array","So_Id","productInitialDetails","Item_Id","ItemName","Bill_Qty","Item_Rate","UOM","Units","Product","Group","GroupID","Brand","BrandID","Amount","setOrderDetails","setOrderProducts","productDetails","setProductDetails","setIsEdit","addProductDialog","setAddProductDialog","isInclusive","isNotTaxableBill","deliveryPerson","_editValues$Products_","_editValues$Do_Date","Voucher_Type","Products_List","pro","_pro$Item_Id","_pro$Product_Name","_pro$Bill_Qty","_pro$Item_Rate","_pro$Unit_Id","_pro$Units","_pro$Cgst_P$Sgst_P$Ig","_Number","_findProductDetails","_Number2","_findProductDetails2","_Number3","_findProductDetails3","_Addition","_findProductDetails4","_findProductDetails5","_pro$Amount","Product_Name","Unit_Id","Cgst_P","Sgst_P","Igst_P","Gst_P","Addition","Latitude","Longitude","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","Delivery_Latitude","Delivery_Longitude","warn","fetchLocation","uniqueBrand","getUniqueData","closeAddProduct","Total_Invoice_value","useMemo","reduce","acc","item","product","gstPercentage","totalValueBeforeTax","TotalValue","TotalTax","taxInfo","Multiplication","Company_Name","Company_Address","Telephone_Number","disabled","vou","ind","Vocher_Type_Id","BranchName","isDisabled","maxMenuHeight","sx","ml","variant","startIcon","Add","_row$Product","_ref4","_row$Product2","HSN_Code","_ref5","_row$Units","_ref6","_ref7","_row$Product3","_row$Product4","_row$Product5","_row$Amount","tax","NumberFormat","_ref8","_ref9","_row$Product6","_row$Product7","_row$Product8","_row$Amount2","_ref10","_ref11","_row$Product9","_row$Product10","_row$Product11","_row$Amount3","_ref12","_row$Product12","_row$Product13","_row$Product14","_row$Product15","_row$Product16","UOM_Id","Pro_Group","Product_Group","Brand_Name","filter","EnableSerialNumber","CellSize","disablePagination","rowSpan","numberToWords","parseInt","Math","round","Clear","postSaleOrder","log","o","isGraterNumber","finally","Save","onSubmit","preventDefault","handleProductInputChange","productId","rate","productIndex","findIndex","updatedValues","prevValues","some","grp","push","productInfo","_productInfo$Pro_Grou","_productInfo$Product_","_productInfo$Brand_Na","_productInfo$Brand","_productInfo$UOM_Id","_productInfo$Units","_productInfo$Item_Rat","required","Division","min","selectedIndex","text","i","ClearAll","convertedStatus","id"],"sourceRoot":""}
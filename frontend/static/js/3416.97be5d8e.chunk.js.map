{"version":3,"file":"static/js/3416.97be5d8e.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Pages/Authorization/newMenuManagement.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center', tdClass = '') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        tdClass,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass\r\n                                ? String(' ' + column?.tdClass({ row, Field_Name, index: tdIndex }) + ' ')\r\n                                : ''\r\n                        );\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`\r\n                                        border-end`\r\n                                        + horizondalalignClass\r\n                                        + verticalAlignClass\r\n                                        + tdClass(row, column.Field_Name, index)\r\n                                    }\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`\r\n                                    border-end`\r\n                                    + horizondalalignClass\r\n                                    + verticalAlignClass\r\n                                    + tdClass(row, column.Field_Name, index)\r\n                                }\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber, isValidObject } from '../../Components/functions';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport { Add, Edit } from \"@mui/icons-material\";\r\nimport { toast } from \"react-toastify\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\n\r\nconst initialValue = {\r\n    id: '',\r\n    name: '',\r\n    menu_type: 1,\r\n    parent_id: '',\r\n    url: '',\r\n    display_order: 1,\r\n    is_active: 1,\r\n    parantDetails: {},\r\n}\r\n\r\nconst MenuManagement = ({ loadingOn, loadingOff }) => {\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const [reload, setReload] = useState(false);\r\n    const [menuData, setMenuData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setMenuData(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload]);\r\n\r\n    const DisplaySubRoutings = ({ dataSource }) => (\r\n        <FilterableTable\r\n            dataArray={dataSource?.SubRoutes ?? []}\r\n            title='Sub Routes'\r\n            columns={[\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'name',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Menu',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'url',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Address',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <Tooltip title='Add SubRouting'>\r\n                            <span>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    className=\"bg-light\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            menu_type: 0,\r\n                                            parent_id: row.id,\r\n                                            parantDetails: row,\r\n                                            url: (row?.url ?? '') + '/'\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                    startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                >\r\n                                    {row?.SubRoutes?.length ?? 0}\r\n                                </Button>\r\n                            </span>\r\n                        </Tooltip>\r\n                    ),\r\n                    ColumnHeader: 'Sub Routings',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'display_order',\r\n                    Fied_Data: 'number',\r\n                    ColumnHeader: 'Order',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        isEqualNumber(row?.is_active, 1) ? (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                        ) : (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                        )\r\n                    ),\r\n                    ColumnHeader: 'Status',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='Edit Menu'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"p-1\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            id: row?.id,\r\n                                            name: row?.name ?? '',\r\n                                            menu_type: 0,\r\n                                            parent_id: row?.parent_id ?? '',\r\n                                            url: row?.url ?? '',\r\n                                            display_order: row?.display_order ?? '',\r\n                                            is_active: row?.is_active ?? '',\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                >\r\n                                    <Edit sx={{ fontSize: '18px' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </>\r\n                    ),\r\n                    ColumnHeader: 'Action',\r\n                }\r\n            ]}\r\n            tableMaxHeight={700}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (row?.SubRoutes?.length > 0) && <DisplaySubRoutings dataSource={row} />}\r\n        />\r\n    )\r\n\r\n    const DisplayChildMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row?.ChildMenu?.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.ChildMenu ?? []}\r\n                        title='Child Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => row?.SubRoutes?.length > 0 && <DisplaySubRoutings dataSource={row} />}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const DisplaySubMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row.SubMenu.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.SubMenu ?? []}\r\n                        title='Sub Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Sub Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add Child-Menu'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.ChildMenu?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 2,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (row?.ChildMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplayChildMenu row={row} />}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: 'authorization/menuMaster',\r\n            method: inputValues.id ? 'PUT' : 'POST',\r\n            bodyData: inputValues\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                closeDialog();\r\n                setReload(pre => !pre);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {/* <div className=\"d-flex justify-content-end pb-2\">\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"Main Menu\"\r\n                ButtonArea={\r\n                    <Button\r\n                        onClick={() => {\r\n                            setDialog(true);\r\n                            setInputValues(initialValue);\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        startIcon={<Add />}\r\n                    >\r\n                        New Menu\r\n                    </Button>\r\n                }\r\n                dataArray={menuData}\r\n                columns={[\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'name',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Main Menu',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'url',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Address',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add Sub-Menu'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 2,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubMenu?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Menu',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add SubRouting'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 0,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubRoutes?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Routings',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'display_order',\r\n                        Fied_Data: 'number',\r\n                        ColumnHeader: 'Order',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            isEqualNumber(row?.is_active, 1) ? (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                            ) : (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                            )\r\n                        ),\r\n                        ColumnHeader: 'Status',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <>\r\n                                <Tooltip title='Edit Menu'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        className=\"p-1\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                id: row?.id,\r\n                                                name: row?.name ?? '',\r\n                                                menu_type: 1,\r\n                                                parent_id: row?.parent_id ?? '',\r\n                                                url: row?.url ?? '',\r\n                                                display_order: row?.display_order ?? '',\r\n                                                is_active: row?.is_active ?? '',\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                    >\r\n                                        <Edit sx={{ fontSize: '18px' }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </>\r\n                        ),\r\n                        ColumnHeader: 'Action',\r\n                    }\r\n                ]}\r\n                tableMaxHeight={700}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (row?.SubMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplaySubMenu row={row} />}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>\r\n                    {inputValues.id ? 'Modify ' : 'Add '}\r\n                    {(() => {\r\n                        switch (inputValues.menu_type) {\r\n                            case 0:\r\n                                return 'SUB ROUTING'\r\n                            case 1:\r\n                                return 'MAIN MENU'\r\n                            case 2:\r\n                                return 'SUB MENU'\r\n                            case 3:\r\n                                return 'CHILD MENU'\r\n                            default:\r\n                                return ''\r\n                        }\r\n                    })()}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveData();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            {(isValidObject(inputValues.parantDetails) && inputValues.parantDetails.name) && (\r\n                                <div className=\"col-lg-12 p-2\">\r\n                                    <label>Parant Name </label>\r\n                                    <input\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues?.parantDetails?.name}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Name <RequiredStar /></label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.name}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, name: e.target.value }))}\r\n                                    required\r\n                                    minLength={3}\r\n                                    maxLength={20}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Order No</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.display_order}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, display_order: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-12 p-2\">\r\n                                <label>URL (Link)</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.url}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, url: e.target.value }))}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValues.id && (\r\n                                <div className=\"col-lg-6 p-2\">\r\n                                    <label>Is Active</label>\r\n                                    <select\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues.is_active}\r\n                                        onChange={e => setInputValues(pre => ({ ...pre, is_active: e.target.value }))}\r\n                                    >\r\n                                        <option value='' disabled>select</option>\r\n                                        <option value='1'>Active</option>\r\n                                        <option value='0'>Disable</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={closeDialog}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MenuManagement","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","tdClass","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdIndex","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","RequiredStar","style","fontWeight","initialValue","id","menu_type","parent_id","url","display_order","is_active","parantDetails","_inputValues$parantDe","loadingOn","loadingOff","inputValues","setInputValues","reload","setReload","menuData","setMenuData","dialog","setDialog","useEffect","fetchLink","address","then","success","catch","DisplaySubRoutings","_dataSource$SubRoutes","dataSource","SubRoutes","_row$SubRoutes$length","_row$SubRoutes","Button","_row$url","startIcon","Add","_ref5","_row$name","_row$parent_id","_row$url2","_row$display_order","_row$is_active","Edit","_ref6","_row$SubRoutes2","DisplayChildMenu","_ref7","_row$ChildMenu","_row$ChildMenu2","ChildMenu","_ref8","_row$SubRoutes$length2","_row$SubRoutes3","_row$ParantData","_row$ParantData2","_row$url3","ParantData","_ref9","_ref10","_row$name2","_row$parent_id2","_row$url4","_row$display_order2","_row$is_active2","_ref11","_row$SubRoutes4","DisplaySubMenu","_ref12","_row$SubMenu","SubMenu","_ref13","_row$ChildMenu$length","_row$ChildMenu3","_row$ParantData3","_row$ParantData4","_row$url5","_ref14","_row$SubRoutes$length3","_row$SubRoutes5","_row$ParantData5","_row$ParantData6","_row$url6","_ref15","_ref16","_row$name3","_row$parent_id3","_row$url7","_row$display_order3","_row$is_active3","_ref17","_row$ChildMenu4","_row$SubRoutes6","closeDialog","variant","_ref18","_row$SubMenu$length","_row$SubMenu2","_row$url8","_ref19","_row$SubRoutes$length4","_row$SubRoutes7","_row$url9","_ref20","_ref21","_row$name4","_row$parent_id4","_row$url10","_row$display_order4","_row$is_active4","_ref22","_row$SubMenu3","_row$SubRoutes8","Dialog","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","method","bodyData","toast","message","finally","DialogContent","isValidObject","onChange","required","minLength","maxLength","DialogActions","createSvgIcon","d"],"sourceRoot":""}
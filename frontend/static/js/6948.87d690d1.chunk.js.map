{"version":3,"file":"static/js/6948.87d690d1.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n\r\n\r\n    const totalBrokerage = brokerData?.Items?.reduce((sum, item) => sum + (item.Brok_Amt || 0), 0) || 0;\r\n\r\n    const totalCoolie = brokerData?.Items?.reduce((sum, item) => sum + (item.Coolie_Amt || 0), 0) || 0;\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = brokerData?.Items?.reduce((acc, item) => {\r\n            const packSize = Math.round(item.KGS / item.QTY);\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + item.QTY;\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        if (!packQuantities) return null;\r\n\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n            <DialogTitle>\r\n                Broker Report: {brokerData?.Broker_Name}\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n\r\n            <DialogContent ref={printRef}>\r\n                <div className=\"text-center mb-3\">\r\n                    <h4>Broker Report Page</h4>\r\n                    <p className=\"mb-0\">Date: {new Date().toLocaleDateString('en-IN')}</p>\r\n                    <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                    {packSizeSummary && (\r\n                        <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                    )}\r\n                </div>\r\n\r\n                <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>PARTY NAME</th>\r\n                            <th>ALIAS NAME</th>\r\n                            <th className=\"text-end\">BILL RATE</th>\r\n                            <th className=\"text-end\">BROKER EXP</th>\r\n                            <th className=\"text-end\">QTY</th>\r\n                            <th className=\"text-end\">KGS</th>\r\n                            <th className=\"text-end\">AMOUNT</th>\r\n                            <th className=\"text-end\">VILAIVAASI</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {brokerData?.Items?.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                <td>{item.Product_Name || item.Short_Name}</td>\r\n\r\n                                <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                <td className=\"text-end\">\r\n                                    {NumberFormat(item.Brok_Amt || 0)}\r\n                                </td>\r\n                                <td className=\"text-end\">{item.QTY}</td>\r\n                                <td className=\"text-end\">{item.KGS}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"text-end fw-bold\">{getPackSizeSummary()}</td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-6 offset-6\">\r\n                        <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">COOLIE</td>\r\n                                    <td className=\"text-end fw-bold\">\r\n                                        {NumberFormat(totalCoolie)}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">BROKERAGE</td>\r\n                                    <td className=\"text-end fw-bold\">\r\n                                        - {NumberFormat(totalBrokerage)}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                    <td className=\"text-end fw-bold\">\r\n                                        - {NumberFormat(brokerData?.VilaiVasi || 0)}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                    <td className=\"text-end fw-bold\">\r\n                                        {NumberFormat(\r\n                                            parseFloat(brokerData?.Total_Amount || 0) -\r\n                                            totalBrokerage -\r\n                                            totalCoolie -\r\n                                            parseFloat(brokerData?.VilaiVasi || 0) -\r\n                                            Math.round(\r\n                                                parseFloat(brokerData?.Total_Amount || 0) -\r\n                                                totalBrokerage -\r\n                                                totalCoolie -\r\n                                                parseFloat(brokerData?.VilaiVasi || 0)\r\n                                            ))}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr className=\"bg-light\">\r\n                                    <td className=\"fw-bold\">NET TOTAL</td>\r\n                                    <td className=\"text-end fw-bold\">\r\n                                        {NumberFormat(\r\n                                            Math.round(\r\n                                                parseFloat(brokerData?.Total_Amount || 0) -\r\n                                                totalBrokerage -\r\n                                                totalCoolie -\r\n                                                parseFloat(brokerData?.VilaiVasi || 0)\r\n                                            )\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"text-center mt-3 small\">\r\n                    <p>This is a computer generated report</p>\r\n                </div>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button\r\n                    startIcon={<Download />}\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={handlePrint}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField, Button, Dialog, DialogActions, DialogContent, IconButton, Paper, Table, TableBody,\r\n    TableCell, TableContainer, TableHead, TableRow, Typography, Box, Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\r\n\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\n\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({ page: 0, rowsPerPage: 10 });\r\n    const [listingPagination, setListingPagination] = useState({ page: 0, rowsPerPage: 10 });\r\n\r\n\r\n    const [activeTab, setActiveTab] = useState(0);\r\n\r\n\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n\r\n\r\n    const [filtersDataEntry, setFiltersDataEntry] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [deliveryReport, setDeliveryReport] = useState([]);\r\n    const [brokerageValues, setBrokerageValues] = useState({});\r\n\r\n\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({ ledgers: [], items: [] });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const res = await fetchLink({\r\n                    address: `reports/brokerageNakalReport/sales?FromDate=${filtersDataEntry.FromDate}&ToDate=${filtersDataEntry.ToDate}&broker=${filtersDataEntry.Broker.value}`,\r\n                });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDeliveryReport(data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n                    setBrokerageValues(initialBrokerage);\r\n                } else {\r\n                    setDeliveryReport([]);\r\n                    setBrokerageValues({});\r\n                }\r\n            } catch (err) {\r\n                setDeliveryReport([]);\r\n                setBrokerageValues({});\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [filtersDataEntry.refresh]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n                let url = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                if (filtersListing.Broker.value) url += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value) url += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value) url += `&item=${filtersListing.Item.value}`;\r\n                const res = await fetchLink({ address: url });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n                    const uniqueLedgers = Array.from(new Map(\r\n                        allItems.map((item) => [item.Ledger_Tally_Id, { value: item.Ledger_Tally_Id, label: item.Ledger_Name }])\r\n                    ).values());\r\n                    const uniqueItems = Array.from(new Map(\r\n                        allItems.map((item) => [item.Product_Id, { value: item.Product_Id, label: item.Product_Name }])\r\n                    ).values());\r\n                    setDropdownOptionsListing({ ledgers: uniqueLedgers, items: uniqueItems });\r\n                }\r\n            } catch (e) { }\r\n            finally { loadingOff(); }\r\n        };\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh]);\r\n\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) => setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) => setDataEntryPagination({ page: 0, rowsPerPage: parseInt(event.target.value, 10) });\r\n    const handleListingPageChange = (event, newPage) => setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) => setListingPagination({ page: 0, rowsPerPage: parseInt(event.target.value, 10) });\r\n    const handleBrokerageChange = (doId, productId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = `${doId}-${productId}`;\r\n        setBrokerageValues((prev) => ({ ...prev, [key]: value }));\r\n    };\r\n    const handleExpandBroker = (brokerName) => setExpandedBrokers((prev) => ({ ...prev, [brokerName]: !prev[brokerName] }));\r\n    const closeDialogDataEntry = () => setFiltersDataEntry((prev) => ({ ...prev, filterDialog: false }));\r\n    const closeDialogListing = () => setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n            const recordsToSave = deliveryReport.map((item) => {\r\n                const brokerageValue = brokerageValues[`${item.Do_Id}-${item.Product_Id}`];\r\n                return {\r\n                    ...item,\r\n                    brokerage: parseFloat(brokerageValue) || 0,\r\n                    Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                    Vilaivasi_Rate: ((parseFloat(brokerageValue) || 0) / 100) * (parseFloat(item.Bill_Qty) || 0),\r\n                    Brok_Rate: item?.Brokerage,\r\n                    Brok_Amt: item?.Brokerage * item?.displayQuantity,\r\n                    Coolie_Rate: item?.Coolie,\r\n                    Coolie_Amt: item?.Coolie * item?.displayQuantity,\r\n                    Amount: item?.Amount,\r\n                    Created_By: storage?.UserId,\r\n                };\r\n            });\r\n            const response = await fetchLink({\r\n                address: \"reports/brokerageNagal/create\",\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n            if (response.success) {\r\n                toast.success(\"Nakal Created successfully!\");\r\n                setFiltersDataEntry((prev) => ({ ...prev, refresh: !prev.refresh }));\r\n\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Save failed\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const totalBagsDataEntry = useMemo(() =>\r\n        deliveryReport.reduce((acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0), 0),\r\n        [deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(() =>\r\n        dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) => ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || \"Unknown Broker\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n    const brokerNames = useMemo(() => Object.keys(groupedByBroker), [groupedByBroker]);\r\n    const brokerTotals = useMemo(() => {\r\n        const totals = {};\r\n        brokerNames.forEach((broker) => {\r\n            const brokerData = groupedByBroker[broker];\r\n            totals[broker] = {\r\n                totalKGS: brokerData.reduce((sum, item) => sum + (item.KGS || 0), 0),\r\n                totalBillQty: brokerData.reduce((sum, item) => sum + (item.Bill_Qty || 0), 0),\r\n                totalActQty: brokerData.reduce((sum, item) => sum + (item.Act_Qty || 0), 0),\r\n                totalVilaiVasi: brokerData.reduce((sum, item) => sum + (item.Vilai_Vasi || 0), 0),\r\n                totalVilaivasiRate: brokerData.reduce((sum, item) => sum + (item.Vilaivasi_Rate || 0), 0),\r\n            };\r\n        });\r\n        return totals;\r\n    }, [brokerNames, groupedByBroker]);\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }\r\n            }>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" mb={3} >\r\n                    <Typography variant=\"h5\" component=\"h2\" > Brokerage Nakal Report </Typography>\r\n                    < Box >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={< FilterAlt />}\r\n                            onClick={() =>\r\n                                activeTab === 0\r\n                                    ? setFiltersDataEntry((prev) => ({ ...prev, filterDialog: true }))\r\n                                    : setFiltersListing((prev) => ({ ...prev, filterDialog: true }))\r\n                            }\r\n                            sx={{ mr: 2 }}\r\n                        > Filters </Button>\r\n                        < Typography component=\"span\" variant=\"body1\" >\r\n                            Total Bags: <strong>{activeTab === 0 ? totalBagsDataEntry : totalBagsListing}</strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                < Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n\r\n                {\r\n                    activeTab === 0 ? (\r\n                        <>\r\n                            <TableContainer component={Paper} >\r\n                                <Table size=\"small\" >\r\n                                    <TableHead>\r\n                                        <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                            <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Date </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }\r\n                                            }> Do No </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}> Product </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}> Ledger_Name </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}> Broker </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Bill_Qty </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Qty </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Rate </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Pack </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Amount </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Brok.Rate </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Brokerage </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Coolie.Rate </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Coolie.Amt </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Vilaivasi </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Narration </TableCell>\r\n                                            < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Vilaivasi Amt </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {\r\n                                            deliveryReport\r\n                                                .slice(dataEntryPagination.page * dataEntryPagination.rowsPerPage, dataEntryPagination.page * dataEntryPagination.rowsPerPage + dataEntryPagination.rowsPerPage)\r\n                                                .map((row, idx) => {\r\n                                                    const vilaivasiValue = brokerageValues[`${row.Do_Id}-${row.Product_Id}`] || \"\";\r\n                                                    const vilaivasiAmt = calculateVilaivasiAmt(vilaivasiValue, row.Bill_Qty);\r\n                                                    return (\r\n                                                        <TableRow key={idx} hover >\r\n                                                            <TableCell align=\"left\" > {row.Date.split(\"T\")[0]} </TableCell>\r\n                                                            < TableCell > {row.Do_No || row.Do_Inv_No} </TableCell>\r\n                                                            < TableCell > {row.Product_Name} </TableCell>\r\n                                                            < TableCell > {row.Retailer_Name} </TableCell>\r\n                                                            < TableCell > {row.CostCenterGet} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Bill_Qty} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row?.displayQuantity} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Rate || row.Item_Rate} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Pack} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Amount} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Brokerage} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Brokerage * row.displayQuantity} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Coolie} </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Coolie * row.displayQuantity} </TableCell>\r\n                                                            < TableCell align=\"right\" >\r\n                                                                <TextField\r\n                                                                    size=\"small\"\r\n                                                                    type=\"number\"\r\n                                                                    value={vilaivasiValue}\r\n                                                                    onChange={handleBrokerageChange(row.Do_Id, row.Product_Id)\r\n                                                                    }\r\n                                                                    sx={{ width: \"120px\" }}\r\n                                                                    inputProps={{ step: \"0.01\" }}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            < TableCell align=\"right\" > {row.Narration} </TableCell>\r\n                                                            < TableCell align=\"right\" > {vilaivasiAmt.toFixed(2)} </TableCell>\r\n                                                        </TableRow>\r\n                                                    );\r\n                                                })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                                < TablePagination\r\n                                    rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                    component=\"div\"\r\n                                    count={deliveryReport.length}\r\n                                    rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                    page={dataEntryPagination.page}\r\n                                    onPageChange={handleDataEntryPageChange}\r\n                                    onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                                />\r\n                            </TableContainer>\r\n\r\n                            < Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    startIcon={< Save />}\r\n                                    onClick={handleSave}\r\n                                    disabled={saving}\r\n                                    size=\"large\"\r\n                                > {saving ? \"Saving...\" : \"Save Brokerage\"} </Button>\r\n                            </Box>\r\n                        </>)\r\n                        : (\r\n                            <>\r\n                                <TableContainer component={Paper} >\r\n                                    <Table size=\"small\" >\r\n                                        <TableHead>\r\n                                            <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                                <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}> Broker </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total KGS </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total Bill Qty </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total_Amount </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total_Broker_Exp </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total_VilaiVasi </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Total_Bags </TableCell>\r\n                                                < TableCell sx={{ color: \"white\", fontWeight: \"bold\" }} align=\"right\" > Actions </TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {\r\n                                                brokerNames.length > 0 ? (\r\n                                                    brokerNames\r\n                                                        .slice(\r\n                                                            listingPagination.page * listingPagination.rowsPerPage,\r\n                                                            listingPagination.page * listingPagination.rowsPerPage + listingPagination.rowsPerPage\r\n                                                        )\r\n                                                        .map((brokerName, idx) => {\r\n                                                            const brokerData = dataset.find(item => item.Broker_Name === brokerName);\r\n                                                            return (\r\n                                                                <React.Fragment key={idx} >\r\n                                                                    <TableRow hover >\r\n                                                                        <TableCell>\r\n                                                                            <IconButton size=\"small\" onClick={() => handleExpandBroker(brokerName)\r\n                                                                            }>\r\n                                                                                {expandedBrokers[brokerName] ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n                                                                            </IconButton>\r\n                                                                            {brokerName}\r\n                                                                        </TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.Total_Qty || \"0.00\"}</TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.Total_KGS || \"0.00\"}</TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.Total_Amount || \"0.00\"}</TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.Broker_Exp || \"0.00\"}</TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.VilaiVasi || \"0.00\"}</TableCell>\r\n                                                                        < TableCell align=\"right\" > {brokerData?.Total_Bags || 0}</TableCell>\r\n                                                                        < TableCell align=\"right\" >\r\n                                                                            <Tooltip title=\"Preview PDF\" >\r\n                                                                                <IconButton\r\n                                                                                    color=\"primary\"\r\n                                                                                    onClick={() => {\r\n                                                                                        setPdfPreviewData(brokerData);\r\n                                                                                        setPdfPreviewOpen(true);\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <PictureAsPdfIcon />\r\n                                                                                </IconButton>\r\n                                                                            </Tooltip>\r\n                                                                        </TableCell>\r\n                                                                        < PdfPreviewModal\r\n                                                                            open={pdfPreviewOpen}\r\n                                                                            onClose={() => setPdfPreviewOpen(false)}\r\n                                                                            brokerData={pdfPreviewData}\r\n                                                                        />\r\n\r\n                                                                    </TableRow>\r\n                                                                    < TableRow >\r\n                                                                        <TableCell style={{ padding: 0 }} colSpan={7} >\r\n                                                                            <Collapse in={expandedBrokers[brokerName]} timeout=\"auto\" unmountOnExit >\r\n                                                                                <Box margin={1}>\r\n                                                                                    <Typography variant=\"h6\" gutterBottom component=\"div\" >\r\n                                                                                        Details for {brokerName}\r\n                                                                                    </Typography>\r\n                                                                                    < Table size=\"small\" >\r\n                                                                                        <TableHead>\r\n                                                                                            <TableRow>\r\n                                                                                                <TableCell>Date </TableCell>\r\n                                                                                                < TableCell > Invoice No </TableCell>\r\n                                                                                                < TableCell > Retailer </TableCell>\r\n                                                                                                < TableCell > Alias </TableCell>\r\n                                                                                                < TableCell > Product </TableCell>\r\n                                                                                                < TableCell > Short Name </TableCell>\r\n                                                                                                < TableCell align=\"right\" > QTY </TableCell>\r\n                                                                                                < TableCell align=\"right\" > KGS </TableCell>\r\n                                                                                                < TableCell align=\"right\" > Amount </TableCell>\r\n                                                                                                < TableCell align=\"right\" > Vilai Vasi </TableCell>\r\n                                                                                                < TableCell align=\"right\" > Vilai Amt </TableCell>\r\n                                                                                            </TableRow>\r\n                                                                                        </TableHead>\r\n                                                                                        <TableBody>\r\n                                                                                            {\r\n                                                                                                brokerData?.Items?.map((item, itemIdx) => (\r\n                                                                                                    <TableRow key={itemIdx} >\r\n                                                                                                        <TableCell>{item.Date} </TableCell>\r\n                                                                                                        < TableCell > {item.Do_Inv_No} </TableCell>\r\n                                                                                                        < TableCell > {item.Retailer_Name} </TableCell>\r\n                                                                                                        < TableCell > {item.Ledger_Alias} </TableCell>\r\n                                                                                                        < TableCell > {item.Product_Name} </TableCell>\r\n                                                                                                        < TableCell > {item.Short_Name} </TableCell>\r\n                                                                                                        < TableCell align=\"right\" > {item.QTY} </TableCell>\r\n                                                                                                        < TableCell align=\"right\" > {item.KGS} </TableCell>\r\n                                                                                                        < TableCell align=\"right\" > {item.Amount?.toFixed(2)} </TableCell>\r\n                                                                                                        < TableCell align=\"right\" > {item.Vilai_Vasi} </TableCell>\r\n                                                                                                        < TableCell align=\"right\" > {item.Vilai_Vasi} </TableCell>\r\n                                                                                                    </TableRow>\r\n                                                                                                ))\r\n                                                                                            }\r\n                                                                                        </TableBody>\r\n                                                                                    </Table>\r\n                                                                                </Box>\r\n                                                                            </Collapse>\r\n                                                                        </TableCell>\r\n                                                                    </TableRow>\r\n                                                                </React.Fragment>\r\n                                                            );\r\n                                                        })\r\n                                                ) : (\r\n                                                    <TableRow>\r\n                                                        <TableCell colSpan={7} align=\"center\" > No data found </TableCell>\r\n                                                    </TableRow>\r\n                                                )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    < TablePagination\r\n                                        rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                        component=\"div\"\r\n                                        count={brokerNames.length}\r\n                                        rowsPerPage={listingPagination.rowsPerPage}\r\n                                        page={listingPagination.page}\r\n                                        onPageChange={handleListingPageChange}\r\n                                        onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                                    />\r\n                                </TableContainer>\r\n                            </>)\r\n                }\r\n            </Paper>\r\n\r\n            < Dialog\r\n                open={filtersDataEntry.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2} >\r\n                        <Typography variant=\"h6\" > Data Entry Filters </Typography>\r\n                        < IconButton onClick={closeDialogDataEntry} >\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    < Grid container spacing={2} >\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                fullWidth type=\"date\" label=\"From Date\" value={filtersDataEntry.FromDate}\r\n                                onChange={e => setFiltersDataEntry(prev => ({ ...prev, FromDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }} />\r\n                        </Grid>\r\n                        < Grid item xs={12} >\r\n                            <TextField\r\n                                fullWidth type=\"date\" label=\"To Date\" value={filtersDataEntry.ToDate}\r\n                                onChange={e => setFiltersDataEntry(prev => ({ ...prev, ToDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }} />\r\n                        </Grid>\r\n                        < Grid item xs={2} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n\r\n                        </Grid>\r\n                        < Grid item xs={12} >\r\n                            <Select\r\n                                fullWidth label=\"Brokers\" value={filtersDataEntry.Broker}\r\n                                onChange={selected => setFiltersDataEntry(prev => ({ ...prev, Broker: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Brokers\" }, ...dropDown.broker]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n                </DialogContent>\r\n                < DialogActions >\r\n                    <Button onClick={closeDialogDataEntry}> Cancel </Button>\r\n                    < Button variant=\"contained\" onClick={() => {\r\n                        setFiltersDataEntry(prev => ({ ...prev, refresh: !prev.refresh, filterDialog: false }));\r\n                    }}> Apply Filters </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            < Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2} >\r\n                        <Typography variant=\"h6\" > Listing Filters </Typography>\r\n                        < IconButton onClick={closeDialogListing} >\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    < Grid container spacing={2} >\r\n                        <Grid item xs={5} >\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={e => setFiltersListing(prev => ({ ...prev, FromDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        < Grid item xs={5} >\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={e => setFiltersListing(prev => ({ ...prev, ToDate: e.target.value }))}\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        < Grid item xs={2} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n\r\n                                    setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n                                }}\r\n                                style={{ height: '30px', width: '100%' }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        < Grid item xs={12} >\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Broker: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Brokers\" }, ...dropDown.broker]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        < Grid item xs={12} >\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Ledger: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Ledger\" }, ...dropdownOptionsListing.ledgers]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        < Grid item xs={12} >\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={selected => setFiltersListing(prev => ({ ...prev, Item: selected }))}\r\n                                options={[{ value: \"\", label: \"ALL Item\" }, ...dropdownOptionsListing.items]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                < DialogActions >\r\n                    <Button onClick={closeDialogListing}> Cancel </Button>\r\n                    < Button variant=\"contained\" onClick={() => {\r\n                        setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh, filterDialog: false }));\r\n                    }}> Apply Filters </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;\r\n"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","_brokerData$Items","_brokerData$Items2","_brokerData$Items4","open","onClose","brokerData","printRef","useRef","handlePrint","useReactToPrint","content","current","totalBrokerage","Items","reduce","sum","item","Brok_Amt","totalCoolie","Coolie_Amt","getPackSizeSummary","_brokerData$Items3","packQuantities","acc","packSize","Math","round","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","join","packSizeSummary","_jsxs","Dialog","fullWidth","maxWidth","children","DialogTitle","Broker_Name","_jsx","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","toLocaleDateString","index","Retailer_Name","Ledger_Name","Product_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","Total_Amount","VilaiVasi","parseFloat","DialogActions","Button","startIcon","Download","loadingOn","loadingOff","dataEntryPagination","setDataEntryPagination","useState","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","filtersDataEntry","setFiltersDataEntry","FromDate","toISOString","split","ToDate","Broker","value","label","Ledger","Item","refresh","filterDialog","deliveryReport","setDeliveryReport","brokerageValues","setBrokerageValues","filtersListing","setFiltersListing","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","items","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","pdfPreviewData","setPdfPreviewData","useEffect","fetchLink","then","data","success","prev","toArray","catch","console","error","async","res","initialBrokerage","forEach","key","Do_Id","Product_Id","brokerage","err","fetchData","url","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","e","fetchDatasetAndDropdowns","closeDialogDataEntry","closeDialogListing","totalBagsDataEntry","useMemo","Addition","displayQuantity","Qty","totalBagsListing","Total_Bags","groupedByBroker","length","push","brokerNames","keys","totals","totalKGS","totalBillQty","Bill_Qty","totalActQty","Act_Qty","totalVilaiVasi","Vilai_Vasi","totalVilaivasiRate","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","FilterAlt","mr","Tabs","onChange","handleTabChange","event","newValue","Tab","_Fragment","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","row","idx","vilaivasiValue","vilaivasiAmt","vilaivasi","billQty","calculateVilaivasiAmt","doId","productId","hover","Do_No","Do_Inv_No","CostCenterGet","Rate","Pack","Brokerage","Coolie","TextField","type","target","inputProps","step","Narration","toFixed","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","parseInt","mt","display","Save","recordsToSave","brokerageValue","Brok_Rate","Coolie_Rate","Created_By","UserId","response","method","bodyData","headers","toast","message","disabled","brokerName","find","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Broker_Exp","Tooltip","title","PictureAsPdfIcon","PdfPreviewModal","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","itemIdx","_item$Amount","Ledger_Alias","handleListingPageChange","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","document","body","isSearchable","placeholder","height"],"sourceRoot":""}
{"version":3,"file":"static/js/5468.e30703c0.chunk.js","mappings":"mPAIA,SAAeA,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,mHACD,U,yBCKJ,MA+XA,EA/XkBC,IAAgC,IAA/B,UAAEC,EAAS,WAAEC,GAAYF,EACxC,MAAOG,EAASC,IAAcC,EAAAA,EAAAA,UAAS,CACnCC,UAAU,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAC9CC,QAAQ,IAAIH,MAAOC,cAAcC,MAAM,KAAK,GAC5CE,SAAS,EACTC,OAAQ,MAELC,EAAaC,IAAkBT,EAAAA,EAAAA,UAAS,KACxCU,EAAMC,IAAWX,EAAAA,EAAAA,UAAS,KAC1BY,EAAUC,IAAeb,EAAAA,EAAAA,UAAS,KAClCc,EAAMC,IAAWf,EAAAA,EAAAA,WAAS,IAEjCgB,EAAAA,EAAAA,YAAU,KACFpB,GAAWA,IACfmB,GAAQ,IACRE,EAAAA,EAAAA,GAAU,CACNC,QAAQ,uCAADC,OAAyCrB,EAAQG,SAAQ,YAAAkB,OAAWrB,EAAQO,UAElFe,MAAMV,IACCA,EAAKW,UACLV,EAAQD,EAAKA,MACbG,EAAYD,GAChB,IAEHU,OAAOC,IACJC,QAAQC,MAAMF,EAAE,IAEnBG,SAAQ,KACLX,GAAQ,GACJlB,GAAYA,GAAY,GAC9B,GACP,CAACC,EAAQQ,QAASR,EAAQG,SAAUH,EAAQO,SAE/C,MAAMsB,EAAkBC,GACpBC,OAAOD,GACFE,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,cAAe,IACvBC,OAEHC,GAAeC,EAAAA,EAAAA,UAAQ,KACzB,MAAM3B,EAASoB,EAAe7B,EAAQS,QAAU,IAEhD,OAAOG,EAAKyB,QAAQC,IAEhB,IAAIC,EAAS,GAEb,IAAK,IAAIC,KAAOF,EACA,gBAARE,GACAD,EAAOE,KAAKH,EAAIE,IAIpBE,MAAMC,QAAQL,EAAIM,cAClBN,EAAIM,YAAYC,SAAQC,IACpBP,EAAOE,QAAQM,OAAOR,OAAOO,GAAM,IAM3C,OADiBjB,EAAeU,EAAOS,KAAK,MAC5BC,SAASxC,EAAO,GAClC,GACH,CAACT,EAAQS,OAAQG,IAMdsC,EAAsBC,IAAc,IAADC,EAAAC,EAAA,IAAZ,IAAEC,GAAKH,EAChC,OACIxD,EAAAA,EAAAA,KAAA4D,EAAAA,SAAA,CAAAC,UACQ,OAAHF,QAAG,IAAHA,GAAgB,QAAbF,EAAHE,EAAKV,mBAAW,IAAAQ,OAAb,EAAHA,EAAkBK,QAAS,IACxBC,EAAAA,EAAAA,MAAA,SAAOC,UAAU,QAAOH,SAAA,EACpB7D,EAAAA,EAAAA,KAAA,SAAA6D,UACIE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACI7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,UACpC7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,aACpC7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,kBACpC7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,cACpC7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,eACpC7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,sBAAqBH,SAAC,iBAG5C7D,EAAAA,EAAAA,KAAA,SAAA6D,SACQ,OAAHF,QAAG,IAAHA,GAAgB,QAAbD,EAAHC,EAAKV,mBAAW,IAAAS,OAAb,EAAHA,EAAkBO,KAAI,CAAChD,EAAMiD,KAC1BH,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACI7D,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,QAClCnE,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMmD,WAClCpE,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMoD,gBAClCrE,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMqD,YAClCtE,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,aAClCvE,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,aAAYH,SAAM,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMuD,WAN7BN,WAY1B,EAMLO,EAAiBxD,IACnBd,IAEA,MAAMuE,EAAgB3B,MAAMC,QAAQ/B,EAAKgC,aACnChC,EAAKgC,YAAYP,QAAOiC,IAAKC,EAAAA,EAAAA,IAAgB,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGL,SAAU,KAAIL,KAAIU,IAACE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7DF,GAAC,IACJG,OAAY,OAAJ7D,QAAI,IAAJA,OAAI,EAAJA,EAAM6D,WAEhB,GAEAC,GAAOF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN5D,GAAI,IACP+D,cAAeN,EAEfO,YAAiB,OAAJhE,QAAI,IAAJA,OAAI,EAAJA,EAAMiE,cAIvB1D,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8CACR0D,OAA8B,KAAlB,OAAJlE,QAAI,IAAJA,OAAI,EAAJA,EAAMmE,aAAoB,MAAQ,OAC1CC,SAAUN,IAETpD,MAAM2D,IACCA,EAAS1D,SACT2D,EAAAA,GAAM3D,QAAgB,OAAR0D,QAAQ,IAARA,OAAQ,EAARA,EAAUE,SACxBlE,GAAQ,IAERiE,EAAAA,GAAMvD,MAAc,OAARsD,QAAQ,IAARA,OAAQ,EAARA,EAAUE,QAC1B,IAEH3D,OAAOC,IACJyD,EAAAA,GAAMvD,MAAM,wBAAwB,IAEvCC,SAAQ,IAAM7B,KAAa,EAmBpC,OAhBAmB,EAAAA,EAAAA,YAAU,KACFF,IACAG,EAAAA,EAAAA,GAAU,CACNC,QAAQ,uCAADC,OAAyCrB,EAAQG,SAAQ,YAAAkB,OAAWrB,EAAQO,UAElFe,MAAMV,IACCA,EAAKW,UACLV,EAAQD,EAAKA,MACbG,EAAYH,EAAKA,MACrB,IAEHY,OAAOC,GAAMC,QAAQC,MAAMF,KAC3BG,SAAQ,IAAMX,GAAQ,IAC/B,GACD,CAACD,EAAMhB,EAAQG,SAAUH,EAAQO,UAGhCZ,EAAAA,EAAAA,KAAA4D,EAAAA,SAAA,CAAAC,UACIE,EAAAA,EAAAA,MAAC0B,EAAAA,EAAI,CAAA5B,SAAA,EAED7D,EAAAA,EAAAA,KAAA,OAAKgE,UAAU,kBAAiBH,UAC5BE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCH,SAAA,EAChD7D,EAAAA,EAAAA,KAAA,MAAI0F,MAAO,CAAEC,cAAe,UAAW9B,SAAC,UACxC7D,EAAAA,EAAAA,KAAA,MAAA6D,UACI7D,EAAAA,EAAAA,KAAA,SACI4F,KAAK,OACLC,MAAOxF,EAAQG,SACfsF,SAAWhE,GACPxB,GAAUuE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIxE,GAAO,IAAEG,SAAUsB,EAAEiE,OAAOF,SAEhD7B,UAAU,gBAGlBhE,EAAAA,EAAAA,KAAA,MAAI0F,MAAO,CAAEC,cAAe,UAAW9B,SAAC,QACxC7D,EAAAA,EAAAA,KAAA,MAAA6D,UACI7D,EAAAA,EAAAA,KAAA,SACI4F,KAAK,OACLC,MAAOxF,EAAQO,OACfkF,SAAWhE,GACPxB,GAAUuE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIxE,GAAO,IAAEO,OAAQkB,EAAEiE,OAAOF,SAE9C7B,UAAU,gBAIlBhE,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,KACL5F,GAAY6F,IACYtB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbsB,GAAI,IACPC,eAAgBD,EAAKC,iBAI3B,SASd/F,EAAQS,QACJd,EAAAA,EAAAA,KAACqG,EAAAA,GAAe,CACZC,MAAO,mBACPC,eAAgB,GAChBC,iBAAkB,GAClBC,UAAWjE,EACXkE,QAAS,EACLC,EAAAA,EAAAA,IAAU,SAAU,SAAU,UAC9B,CACIC,WAAY,WACZC,aAAc,WACdC,UAAW,EACXC,cAAc,EACdC,KAAMC,IAAA,IAAC,IAAEtD,GAAKsD,EAAA,OACVjH,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,QAAQ0B,MAAO,CAAEwB,SAAU,QAASrD,SAC1C,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKwD,SAASxG,MAAM,KAAK,IACzB,IAGbgG,EAAAA,EAAAA,IAAU,gBAAiB,SAAU,kBACrCA,EAAAA,EAAAA,IAAU,sBAAuB,SAAU,uBAC3C,CACIE,aAAc,SACdC,UAAW,EACXM,MAAO,SACPL,cAAc,EACdC,KAAMK,IAAc,IAADC,EAAAC,EAAA,IAAZ,IAAE5D,GAAK0D,EACV,MAAMG,EAAUC,EAAAA,EAAgBC,MAC3BC,GAAWA,EAAOC,KAAOC,OAAU,OAAHlE,QAAG,IAAHA,OAAG,EAAHA,EAAKyB,eAE1C,OACIpF,EAAAA,EAAAA,KAAA,QACIgE,UACyD,QADhDsD,EACL,sCAA8C,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAASM,cAAK,IAAAR,EAAAA,EACrD,0BACHzD,SAEc,QAFd0D,EAEO,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAASO,aAAK,IAAAR,EAAAA,EAAI,aAChB,GAInB,CACIX,WAAY,UACZC,aAAc,UACdC,UAAW,EACXC,cAAc,EACdC,KAAMgB,IAAA,IAAC,IAAErE,GAAKqE,EAAA,OACVhI,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,QAAQ0B,MAAO,CAAEwB,SAAU,QAASrD,UAC9C7D,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CAACC,KAAK,QAAQC,QAASA,IAAMzB,EAAcd,GAAKE,SACjC,KAAlB,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKyB,cAAoBpF,EAAAA,EAAAA,KAACiI,EAAM,KAAMjI,EAAAA,EAAAA,KAACkI,EAAAA,EAAI,OAE/C,IAKjBC,cAAc,EACdC,eAAgB,IAChBC,eAAgB9E,EAChB+E,YACIvE,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EAEI7D,EAAAA,EAAAA,KAACuI,EAAAA,EAAM,CACHC,GAAI,CAAEC,GAAI,GACVC,QAAQ,WACRxC,QAASA,IACL5F,GAAY6F,IAAItB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTsB,GAAI,IACPrF,OAAQC,MAEf8C,SACJ,YAGD7D,EAAAA,EAAAA,KAAA,SACI4F,KAAK,SACL5B,UAAU,sBACV6B,MAAO9E,EACP+E,SAAWhE,GAAMd,EAAec,EAAEiE,OAAOF,OACzC8C,YAAY,mBAM5B3I,EAAAA,EAAAA,KAACqG,EAAAA,GAAe,CACZC,MAAO,mBACPC,eAAgB,GAChBC,iBAAkB,GAClBC,UAAWxF,EACXyF,QAAS,EACLC,EAAAA,EAAAA,IAAU,SAAU,SAAU,UAC9B,CACIC,WAAY,WACZC,aAAc,WACdC,UAAW,EACXC,cAAc,EACdC,KAAM4B,IAAA,IAAC,IAAEjF,GAAKiF,EAAA,OACV5I,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,QAAQ0B,MAAO,CAAEwB,SAAU,QAASrD,SAC1C,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKwD,SAASxG,MAAM,KAAK,IACzB,IAGbgG,EAAAA,EAAAA,IAAU,gBAAiB,SAAU,kBACrCA,EAAAA,EAAAA,IAAU,sBAAuB,SAAU,uBAC3C,CACIE,aAAc,SACdC,UAAW,EACXM,MAAO,SACPL,cAAc,EACdC,KAAM6B,IAAc,IAADC,EAAAC,EAAA,IAAZ,IAAEpF,GAAKkF,EACV,MAAMrB,EAAUC,EAAAA,EAAgBC,MAC3BC,GAAWA,EAAOC,KAAOC,OAAU,OAAHlE,QAAG,IAAHA,OAAG,EAAHA,EAAKyB,eAE1C,OACIpF,EAAAA,EAAAA,KAAA,QACIgE,UACyD,QADhD8E,EACL,sCAA8C,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASM,cAAK,IAAAgB,EAAAA,EACrD,0BACHjF,SAEc,QAFdkF,EAEO,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASO,aAAK,IAAAgB,EAAAA,EAAI,aAChB,GAInB,CACInC,WAAY,UACZC,aAAc,UACdC,UAAW,EACXC,cAAc,EACdC,KAAMgC,IAAA,IAAC,IAAErF,GAAKqF,EAAA,OACVhJ,EAAAA,EAAAA,KAAA,MAAIgE,UAAU,QAAQ0B,MAAO,CAAEwB,SAAU,QAASrD,UAC9C7D,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CAACC,KAAK,QAAQC,QAASA,IAAMzB,EAAcd,GAAKE,SACjC,KAAlB,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKyB,cAAoBpF,EAAAA,EAAAA,KAACiI,EAAM,KAAMjI,EAAAA,EAAAA,KAACkI,EAAAA,EAAI,OAE/C,IAKjBC,cAAc,EACdC,eAAgB,IAChBC,eAAgB9E,EAEhB+E,YACIvE,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EAEI7D,EAAAA,EAAAA,KAACuI,EAAAA,EAAM,CACHC,GAAI,CAAEC,GAAI,GACVC,QAAQ,WACRxC,QAASA,IACL5F,GAAY6F,IAAItB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTsB,GAAI,IACPrF,OAAQC,MAEf8C,SACJ,YAGD7D,EAAAA,EAAAA,KAAA,SACI4F,KAAK,SACL5B,UAAU,sBACV6B,MAAO9E,EACP+E,SAAWhE,GAAMd,EAAec,EAAEiE,OAAOF,OACzC8C,YAAY,sBAQzC,C,2CCtYJ,MAAMlB,EAAkB,CAC3B,CACIG,GAAI,EACJG,MAAO,MACPD,MAAO,wBAEX,CACIF,GAAI,EACJG,MAAO,WACPD,MAAO,2BAEX,CACIF,GAAI,EACJG,MAAO,YACPD,MAAO,2BAEX,CACIF,GAAI,EACJG,MAAO,WACPD,MAAO,2BAIFmB,EAAW,CACpB,CACIrB,GAAI,EACJG,MAAO,MACPD,MAAO,wBAEX,CACIF,GAAI,EACJG,MAAO,UACPD,MAAO,2BAEX,CACIF,GAAI,EACJG,MAAO,YACPD,MAAO,2BAEX,CACIF,GAAI,EACJG,MAAO,WACPD,MAAO,0B,4DCtCf,SAAe/H,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,uIACD,O","sources":["../node_modules/@mui/icons-material/esm/AddBox.js","Pages/Sales/PreSaleOrder/orderList.jsx","Pages/Sales/convertedStatus.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4z\"\n}), 'AddBox');","import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { isGraterNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, {\r\n    createCol,\r\n} from \"../../../Components/filterableTable2\";\r\nimport { Card, IconButton, Button } from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AddBox, Edit } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\n\r\nconst OrderList = ({ loadingOn, loadingOff }) => {\r\n    const [filters, setFilters] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        refresh: false,\r\n        search: '',\r\n    });\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [tallyLOL, setTallyLOL] = useState([]);\r\n    const [load, setLoad] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n        setLoad(true);\r\n        fetchLink({\r\n            address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setData(data.data);\r\n                    setTallyLOL(tallyLOL);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            })\r\n            .finally(() => {\r\n                setLoad(false)\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    }, [filters.refresh, filters.FromDate, filters.ToDate]);\r\n\r\n    const filterableText = (text) =>\r\n        String(text)\r\n            .toLowerCase()\r\n            .replace(/\\s+/g, \" \")\r\n            .replace(/[^a-z0-9]/gi, '')\r\n            .trim();\r\n\r\n    const FilteredData = useMemo(() => {\r\n        const search = filterableText(filters.search || \"\");\r\n\r\n        return data.filter((obj) => {\r\n\r\n            let values = [];\r\n\r\n            for (let key in obj) {\r\n                if (key !== \"ProductList\") {\r\n                    values.push(obj[key]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(obj.ProductList)) {\r\n                obj.ProductList.forEach(item => {\r\n                    values.push(...Object.values(item));\r\n                });\r\n            }\r\n\r\n\r\n            const combined = filterableText(values.join(\" \"));\r\n            return combined.includes(search);\r\n        });\r\n    }, [filters.search, data]);\r\n\r\n\r\n\r\n\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                {row?.ProductList?.length > 0 && (\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"border p-2 bg-light\">S_No</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Id</th>\r\n                                <th className=\"border p-2 bg-light\">Product_Name</th>\r\n                                <th className=\"border p-2 bg-light\">Bill_Qty</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Rate</th>\r\n                                <th className=\"border p-2 bg-light\">Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {row?.ProductList?.map((data, index) => (\r\n                                <tr key={index}>\r\n                                    <td className=\"border p-2\">{data?.S_No}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Id}</td>\r\n                                    <td className=\"border p-2\">{data?.Product_Name}</td>\r\n                                    <td className=\"border p-2\">{data?.Bill_Qty}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Rate}</td>\r\n                                    <td className=\"border p-2\">{data?.Amount}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const postSaleOrder = (data) => {\r\n        loadingOn();\r\n\r\n        const validProducts = Array.isArray(data.ProductList)\r\n            ? data.ProductList.filter(p => isGraterNumber(p?.Bill_Qty, 0)).map(p => ({\r\n                ...p,\r\n                Pre_Id: data?.Pre_Id\r\n            }))\r\n            : [];\r\n\r\n        const payload = {\r\n            ...data,\r\n            Product_Array: validProducts,\r\n\r\n            Retailer_Id: data?.Custome_Id\r\n        };\r\n\r\n\r\n        fetchLink({\r\n            address: `sales/presaleOrder/saleOrderCreationWithPso`,\r\n            method: data?.isConverted !== 0 ? 'PUT' : 'POST',\r\n            bodyData: payload\r\n        })\r\n            .then((response) => {\r\n                if (response.success) {\r\n                    toast.success(response?.message);\r\n                    setLoad(true)\r\n                } else {\r\n                    toast.error(response?.message);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                toast.error(\"Something went wrong!\");\r\n            })\r\n            .finally(() => loadingOff());\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (load) {\r\n            fetchLink({\r\n                address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n            })\r\n                .then((data) => {\r\n                    if (data.success) {\r\n                        setData(data.data);\r\n                        setTallyLOL(data.data);\r\n                    }\r\n                })\r\n                .catch((e) => console.error(e))\r\n                .finally(() => setLoad(false));\r\n        }\r\n    }, [load, filters.FromDate, filters.ToDate]);\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"px-3 py-2 fa-14\">\r\n                    <div className=\"d-flex flex-wrap align-items-center\">\r\n                        <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, FromDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n                        <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, ToDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setFilters((prev) => {\r\n                                    const updatedFilters = {\r\n                                        ...prev,\r\n                                        viewNotSynced: !prev.viewNotSynced,\r\n                                    };\r\n\r\n                                    return updatedFilters;\r\n                                });\r\n                            }}\r\n                        >\r\n\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    filters.search ? (\r\n                        <FilterableTable\r\n                            title={\"Not synced list \"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={FilteredData}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                    Field_Name: \"Actions\",\r\n                                    ColumnHeader: \"Actions\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    ),\r\n                                }\r\n\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <FilterableTable\r\n                            title={\"Not synced list \"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={data}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                    Field_Name: \"Actions\",\r\n                                    ColumnHeader: \"Actions\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    ),\r\n                                }\r\n\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderList;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]\r\n\r\nexport const dbStatus = [\r\n    {\r\n        id: 1,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Progess',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Completed',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 4,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["createSvgIcon","_jsx","d","_ref","loadingOn","loadingOff","filters","setFilters","useState","FromDate","Date","toISOString","split","ToDate","refresh","search","searchInput","setSearchInput","data","setData","tallyLOL","setTallyLOL","load","setLoad","useEffect","fetchLink","address","concat","then","success","catch","e","console","error","finally","filterableText","text","String","toLowerCase","replace","trim","FilteredData","useMemo","filter","obj","values","key","push","Array","isArray","ProductList","forEach","item","Object","join","includes","ExpendableComponent","_ref2","_row$ProductList","_row$ProductList2","row","_Fragment","children","length","_jsxs","className","map","index","S_No","Item_Id","Product_Name","Bill_Qty","Item_Rate","Amount","postSaleOrder","validProducts","p","isGraterNumber","_objectSpread","Pre_Id","payload","Product_Array","Retailer_Id","Custome_Id","method","isConverted","bodyData","response","toast","message","Card","style","verticalAlign","type","value","onChange","target","IconButton","size","onClick","prev","viewNotSynced","FilterableTable","title","bodyFontSizePx","headerFontSizePx","dataArray","columns","createCol","Field_Name","ColumnHeader","isVisible","isCustomCell","Cell","_ref3","minWidth","Pre_Date","align","_ref4","_ref5","_convert$label","convert","convertedStatus","find","status","id","Number","color","label","_ref6","AddBox","Edit","isExpendable","tableMaxHeight","expandableComp","ButtonArea","Button","sx","ml","variant","placeholder","_ref7","_ref8","_ref9","_convert$label2","_ref10","dbStatus"],"sourceRoot":""}
{"version":3,"file":"static/js/8808.26c778f4.chunk.js","mappings":"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","sources":["Pages/Inventry/liveStockReport.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { getPreviousDate, groupData, calcTotal, ISOString } from \"../../Components/functions\";\r\nimport FilterableTable from '../../Components/filterableTable2'\r\nimport { Card, CardContent, Autocomplete, TextField, Checkbox, Tooltip, IconButton, Button, Dialog, DialogContent, DialogActions, Tab, Box } from \"@mui/material\";\r\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff } from \"@mui/icons-material\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\n\r\nconst LiveStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [groupedData, setGroupedData] = useState([]);\r\n    const [apiFilters, setAPIFilters] = useState({\r\n        Fromdata: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        view: 'Grouped'\r\n    });\r\n    const [filters, setFilters] = useState({});\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filteredData, setFilteredData] = useState(reportData);\r\n\r\n    const columns = [\r\n        { Field_Name: \"Stock_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Grade_Item_Group\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"Group_Name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"stock_item_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        { Field_Name: \"godown_name\", Fied_Data: \"string\", isVisible: 1 },\r\n        ...(apiFilters.view === 'List' ? [\r\n            { Field_Name: \"Act_Bags\", Fied_Data: \"number\", ColumnHeader: 'Bags', isVisible: 1 },\r\n            { Field_Name: \"Bal_Act_Qty\", Fied_Data: \"number\", ColumnHeader: 'Balance Quantity', isVisible: 1 }\r\n        ] : [])\r\n    ];\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    useEffect(() => setFilters({}), [apiFilters.view])\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of columns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(reportData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: `reports/liveStockReport?Fromdata=${apiFilters.Fromdata}&Todate=${apiFilters.Todate}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(data.data);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }, [apiFilters.Fromdata, apiFilters.Todate])\r\n\r\n    useEffect(() => {\r\n        const runLoading = async () => {\r\n            try {\r\n                const dataToUse = (Object.keys(filters).length > 0) ? filteredData : reportData;\r\n\r\n                if (loadingOn) {\r\n                    await loadingOn();\r\n                }\r\n\r\n                const grouped_Stock_Group = groupData(dataToUse, 'Stock_Group');\r\n                const aggregatedStockGroup = grouped_Stock_Group?.sort((a, b) => String(a.Stock_Group).localeCompare(b.Stock_Group ?? '')).map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    BagsTotal: calcTotal(stockGroup.groupedData, 'Act_Bags'),\r\n                    BalQtyTotal: calcTotal(stockGroup.groupedData, 'Bal_Act_Qty'),\r\n                }));\r\n\r\n                const Grade_Item_Group = aggregatedStockGroup?.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: groupData(stockGroup?.groupedData, 'Grade_Item_Group')\r\n                }));\r\n                const aggregatedGradeItemGroup = Grade_Item_Group.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        BagsTotal: calcTotal(gradeItemGroup.groupedData, 'Act_Bags'),\r\n                        BalQtyTotal: calcTotal(gradeItemGroup.groupedData, 'Bal_Act_Qty'),\r\n                    }))\r\n                }));\r\n\r\n                const GroupName = aggregatedGradeItemGroup.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: groupData(gradeItemGroup?.groupedData, 'Group_Name')\r\n                    }))\r\n                }));\r\n                const aggregatedGroupName = GroupName.map(stockGroup => ({\r\n                    ...stockGroup,\r\n                    groupedData: stockGroup.groupedData?.map(gradeItemGroup => ({\r\n                        ...gradeItemGroup,\r\n                        groupedData: gradeItemGroup?.groupedData?.map(grouopName => ({\r\n                            ...grouopName,\r\n                            BagsTotal: calcTotal(grouopName.groupedData, 'Act_Bags'),\r\n                            BalQtyTotal: calcTotal(grouopName.groupedData, 'Bal_Act_Qty'),\r\n                        }))\r\n                    }))\r\n                }));\r\n\r\n                // setGroupedData(aggregatedGroupName);\r\n                setTimeout(() => setGroupedData(aggregatedGroupName), 500);\r\n            } catch (e) {\r\n                console.error(e)\r\n            } finally {\r\n                if (loadingOff) {\r\n                    setTimeout(() => loadingOff(), 500);\r\n                }\r\n            }\r\n        }\r\n\r\n        runLoading();\r\n    }, [reportData, filters, filteredData])\r\n\r\n    const columnCells = (mainKey) => [\r\n        {\r\n            Field_Name: mainKey,\r\n            isVisible: 1,\r\n            Fied_Data: 'string',\r\n        },\r\n        {\r\n            Field_Name: 'BagsTotal',\r\n            ColumnHeader: 'Bags',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n        {\r\n            Field_Name: 'BalQtyTotal',\r\n            ColumnHeader: 'Balance Quantity',\r\n            isVisible: 1,\r\n            Fied_Data: 'number',\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"p-1 d-flex justify-content-between align-items-center flex-wrap border-bottom\">\r\n                    <h5 className=\"ps-2 pt-2\">Live Stock Report</h5>\r\n                    <span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Fromdata}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Fromdata: e.target.value }))}\r\n                        /> - TO -\r\n                        <input\r\n                            type=\"date\"\r\n                            value={apiFilters.Todate}\r\n                            className=\"cus-inpt w-auto p-1\"\r\n                            onChange={e => setAPIFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                        />\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setDialog(true)}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n\r\n                            <TabContext value={apiFilters.view}>\r\n                                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <TabList\r\n                                        indicatorColor='transparant'\r\n                                        onChange={(e, n) => setAPIFilters(pre => ({ ...pre, view: n }))}\r\n                                        variant=\"scrollable\"\r\n                                        scrollButtons=\"auto\"\r\n                                        allowScrollButtonsMobile\r\n                                    >\r\n                                        <Tab sx={apiFilters.view === 'Grouped' ? { backgroundColor: '#c6d7eb' } : {}} label=\"Grouped\" value='Grouped' />\r\n                                        <Tab sx={apiFilters.view === 'List' ? { backgroundColor: '#c6d7eb' } : {}} label=\"List\" value='List' />\r\n                                    </TabList>\r\n                                </Box>\r\n\r\n                                <TabPanel value={'Grouped'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={groupedData}\r\n                                        title=\"Stock Group\"\r\n                                        columns={columnCells('Stock_Group')}\r\n                                        isExpendable={true}\r\n                                        EnableSerialNumber\r\n                                        expandableComp={({ row }) => (\r\n                                            <FilterableTable\r\n                                                dataArray={row.groupedData}\r\n                                                title=\"Grade Item Group\"\r\n                                                columns={columnCells('Grade_Item_Group')}\r\n                                                isExpendable={true}\r\n                                                EnableSerialNumber\r\n                                                expandableComp={({ row }) => (\r\n                                                    <FilterableTable\r\n                                                        dataArray={row.groupedData}\r\n                                                        title=\"Group Name\"\r\n                                                        columns={columnCells('Group_Name')}\r\n                                                        isExpendable={true}\r\n                                                        EnableSerialNumber\r\n                                                        expandableComp={({ row }) => (\r\n                                                            <FilterableTable\r\n                                                                dataArray={row.groupedData}\r\n                                                                title=\"Stock Item Name\"\r\n                                                                columns={[\r\n                                                                    {\r\n                                                                        Field_Name: 'stock_item_name',\r\n                                                                        ColumnHeader: 'Stock Item Name',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bags',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'Bal_Act_Qty',\r\n                                                                        ColumnHeader: 'Balance Quantity',\r\n                                                                        Fied_Data: 'number',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Field_Name: 'godown_name',\r\n                                                                        ColumnHeader: 'Godown',\r\n                                                                        Fied_Data: 'string',\r\n                                                                        isVisible: 1,\r\n                                                                    },\r\n                                                                ]}\r\n                                                                EnableSerialNumber\r\n                                                                tableMaxHeight={2000}\r\n                                                                disablePagination={true}\r\n                                                            />\r\n                                                        )}\r\n                                                        tableMaxHeight={3000}\r\n                                                        disablePagination={true}\r\n\r\n                                                    />\r\n                                                )}\r\n                                                tableMaxHeight={4000}\r\n                                                disablePagination={true}\r\n                                            />\r\n                                        )}\r\n                                        tableMaxHeight={5000}\r\n                                        disablePagination={true}\r\n                                    />\r\n                                </TabPanel>\r\n\r\n                                <TabPanel value={'List'} sx={{ px: 0, py: 2 }} >\r\n                                    <FilterableTable\r\n                                        dataArray={(Object.keys(filters).length > 0) ? filteredData : reportData}\r\n                                        columns={columns}\r\n                                    />\r\n                                </TabPanel>\r\n                            </TabContext>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                            <h5 className=\"d-flex justify-content-between px-2\">\r\n                                <span>Filters</span>\r\n                                <span>\r\n                                    <Tooltip title='Clear Filters'>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => setFilters({})}\r\n                                        >\r\n                                            <FilterAltOff />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </span>\r\n                            </h5>\r\n                            <div className=\"border rounded-3 \">\r\n                                {columns.map((column, ke) => (\r\n                                    <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                        <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                        {renderFilter(column)}\r\n                                    </div>\r\n                                ))}\r\n                                <br />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </CardContent>\r\n\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {columns.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveStockReport;"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","loadingOn","loadingOff","reportData","setReportData","useState","groupedData","setGroupedData","apiFilters","setAPIFilters","Fromdata","getPreviousDate","Todate","ISOString","view","filters","setFilters","dialog","setDialog","filteredData","setFilteredData","columns","Field_Name","Fied_Data","isVisible","ColumnHeader","useEffect","applyFilters","handleFilterChange","column","value","prevFilters","_objectSpread","filtered","type","min","max","filter","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","length","_item$column$Field_Na","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","map","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","concat","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","fetchLink","address","then","data","success","catch","console","error","finally","async","dataToUse","Object","keys","grouped_Stock_Group","groupData","aggregatedStockGroup","sort","a","b","_b$Stock_Group","String","Stock_Group","localeCompare","stockGroup","BagsTotal","calcTotal","BalQtyTotal","aggregatedGradeItemGroup","_stockGroup$groupedDa","gradeItemGroup","aggregatedGroupName","_stockGroup$groupedDa2","_stockGroup$groupedDa3","_gradeItemGroup$group","grouopName","setTimeout","runLoading","columnCells","mainKey","_Fragment","Card","pre","Tooltip","title","IconButton","onClick","size","FilterAlt","CardContent","TabContext","Box","sx","borderBottom","borderColor","TabList","indicatorColor","n","variant","scrollButtons","allowScrollButtonsMobile","Tab","backgroundColor","TabPanel","px","py","FilterableTable","dataArray","isExpendable","EnableSerialNumber","expandableComp","_ref3","row","_ref4","_ref5","tableMaxHeight","disablePagination","FilterAltOff","ke","_column$Field_Name","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","_column$Field_Name2","DialogActions","Button","color"],"sourceRoot":""}
{"version":3,"file":"static/js/156.cd730d7c.chunk.js","mappings":"scAkEA,MAAMA,EAA0BA,CAACC,EAAMC,IAC5BD,EAAKE,KAAKC,IACb,MAAMC,EAAe,CAAC,EA2BtB,OAzBAH,EAAQI,SAAQ,CAACC,EAAQC,KACrB,GAAID,EAAOE,WAAaF,EAAOG,eAC3B,GAAIH,EAAOI,cAAgBJ,EAAOK,KAAM,CACpC,MAAMC,EAAcN,EAAOK,KAAK,CAAER,QAE5BU,EAAmBP,EAAOQ,aAC1BC,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,cAChD,SAAQV,EAAQ,IAEI,kBAAhBK,GAAmD,kBAAhBA,GAAmD,kBAAhBA,IAC7ER,EAAaS,GAAoBD,EAOzC,KAAO,CAEH,IAAIM,EAAMZ,EAAOa,WACjBf,EAAac,GAAOf,EAAIe,IAAQ,EACpC,CACJ,IAGGd,CAAY,IA0CrBgB,EAAY,WAOZ,IAJFN,EAAYO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAKf,MAAO,CACHb,UAHKa,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAIRF,WATCE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAUJG,UATAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAUHI,MARCJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OASJK,cARSL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,YASRP,GAAgB,CAAEA,gBAE9B,EAEMa,EAAgBC,IAAoD,IAAnD,YAAEC,EAAc,GAAE,YAAEC,EAAc,WAAWF,EAChE,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,MAEnCC,EAAcC,QAAQJ,GAU5B,OACIK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAOX,EAAYQ,UACxBC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAAC,mBAAkBR,EAAaS,QAXlCC,IACjBZ,EAAYY,EAAMC,cAAc,EAUyCC,UAAU,OAAOC,KAAK,QAAOT,UAC1FC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,SAIjBT,EAAAA,EAAAA,KAACU,EAAAA,GAAO,CACJC,KAAMhB,EACNH,SAAUA,EACVoB,QAfQC,KAChBpB,EAAY,KAAK,EAeTqB,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACdjB,UAEFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAAAnB,SACJT,EAAY3B,KAAI,CAACwD,EAAKC,KACnBvB,EAAAA,EAAAA,MAACwB,EAAAA,EAAQ,CAELjB,QAASA,KAAS,OAAHe,QAAG,IAAHA,OAAG,EAAHA,EAAKG,WAAc,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKG,WACpCC,SAAa,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASxB,SAAA,EAExBC,EAAAA,EAAAA,KAACwB,EAAAA,EAAY,CAAAzB,SAAK,OAAHoB,QAAG,IAAHA,OAAG,EAAHA,EAAKM,QACpBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAY,CAAA3B,SAAK,OAAHoB,QAAG,IAAHA,OAAG,EAAHA,EAAKQ,SALfP,WAUtB,EAILQ,EAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOD,GAAME,EAAAA,EAAAA,IAAaF,GAAOA,EACrC,IAAK,OACD,OAAOA,GAAMG,EAAAA,EAAAA,IAAUH,GAAOA,EAClC,IAAK,OACD,OAAOA,GAAMI,EAAAA,EAAAA,IAAUJ,GAAOA,EAClC,IAAK,SACD,OAAOA,EACX,QACI,MAAO,GACf,EAGEK,EAAkBC,IAmBjB,IAnBkB,UACrBC,EAAY,GAAE,QACd1E,EAAU,GAAE,WACZ2E,EAAa,KAAI,aACjBC,GAAe,EAAK,eACpBC,EAAiB,KAAI,eACrBC,EAAiB,IAAG,iBACpBC,EAAmB,GAAE,mBACrBC,GAAqB,EAAK,SAC1BC,EAAW,QAAmB,kBAC9BC,GAAoB,EAAK,MACzB1C,EAAQ,GAAE,eACV2C,GAAiB,EAAK,iBACtBC,GAAmB,EAAK,gBACxBC,GAAkB,EAAK,WACvBC,EAAa,KAAI,YACjBC,EAAc,GAAE,eAChBC,EAAiB,GAAE,iBACnBC,EAAmB,IACtBhB,EAEG,MAAOiB,EAAMC,IAAW3D,EAAAA,EAAAA,UAAS,IAC1B4D,EAAaC,IAAkB7D,EAAAA,EAAAA,UAAS+C,IACxCe,EAAcC,IAAmB/D,EAAAA,EAAAA,UAAS,KAC1CgE,EAAgBC,IAAqBjE,EAAAA,EAAAA,WAAS,GAC/CkE,EAAeF,GAAkBX,EAAmB,gBAAkBP,EAEtEqB,EAAc,CAChB,CACIC,KAAM,OACNC,MAAO,cACR,CACCD,KAAM,QACNC,MAAO,YACR,CACCD,KAAM,SACNC,MAAO,gBAITC,EAAsB,CACxB,CACIF,KAAM,MACNC,MAAO,UACR,CACCD,KAAM,SACNC,MAAO,aACR,CACCD,KAAM,SACNC,MAAO,WAkDTE,GAvBYxG,KACd,IAAK+F,EAAazE,OAAQ,OAAOtB,EAmBjC,MAjBmB,IAAIA,GAAMyG,MAAK,CAACC,EAAGC,KAClC,IAAK,MAAMC,KAAYb,EAAc,CACjC,MAAM,SAAEc,EAAQ,UAAEC,GAAcF,EAC1BG,EAASL,EAAEG,GACXG,EAASL,EAAEE,GAEjB,GAAIE,IAAWC,EACX,MAAkB,QAAdF,EACOC,EAASC,EAAS,GAAK,EAEvBD,EAASC,EAAS,GAAK,CAG1C,CACA,OAAO,CAAC,GAGK,EAGFC,CAAStC,GACtBuC,GAAavB,EAAOE,EACpBsB,GAAWD,GAAarB,EACxBuB,GAAgBZ,GAAWa,MAAMH,GAAYC,IAE7CG,GAAUC,IAAqB,IAApB,IAAEpH,EAAG,MAAEI,GAAOgH,EAC3B,MAAOrE,EAAMsE,IAAWvF,EAAAA,EAAAA,WAAS,GAC3BwF,EAAW,OAEjB,OACIrF,EAAAA,EAAAA,MAACsF,EAAAA,SAAQ,CAAApF,SAAA,EACLF,EAAAA,EAAAA,MAACuF,EAAAA,EAAQ,CAAArF,SAAA,EAEc,IAAjBuC,GAAyBC,IACvBvC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAAC9E,UAAU,8BAA8B+E,GAAI,CAAEJ,SAAW,GAAEhC,OAAqBnD,UACvFC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACK,KAAK,QAAQJ,QAASA,IAAM6E,GAAQM,IAAQA,IAAKxF,SACxDY,GAAOX,EAAAA,EAAAA,KAACwF,EAAAA,EAAe,CAACF,GAAI,CAAEJ,eAAiBlF,EAAAA,EAAAA,KAACyF,EAAAA,EAAiB,CAACH,GAAI,CAAEJ,mBAK7D,IAAvBxC,IACG1C,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAAC9E,UAAU,8BAA8B+E,GAAI,CAAEJ,SAAW,GAAEhC,OAAqBnD,SACrFuD,EAAcF,EAAQpF,EAAQ,IAIhC,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASC,KAAI,CAACI,EAAQ2H,KAAe,IAADC,EAAAC,EACjC,MAAMC,GAAkBC,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4H,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/FE,EAAeyB,QAAc,OAAN7B,QAAM,IAANA,OAAM,EAANA,EAAQI,eAAiBJ,EAAOK,KACvD2H,GAAiB5H,EAEjB6H,EAAUA,CAACpI,EAAKgB,EAAYqH,IACxB,OAANlI,QAAM,IAANA,GAAAA,EAAQiI,QAAW,IAAS,OAANjI,QAAM,IAANA,OAAM,EAANA,EAAQiI,QAAQ,CAAEpI,MAAKgB,aAAYZ,MAAOiI,OAAgB,GAG9EC,EAAuBnI,EAAOmB,MAC8C,QADzCyG,EACnC9B,EAAYsC,MAAKjH,GAASA,EAAM4E,OAAStF,OAAOT,EAAOmB,OAAOR,uBAAc,IAAAiH,OAAA,EAA5EA,EAA8E5B,MAC9E,GAEAqC,EAAqBrI,EAAOoB,cACgE,QADnDyG,EACzC5B,EAAoBmC,MAAKjH,GAASA,EAAM4E,OAAStF,OAAOT,EAAOoB,eAAeT,uBAAc,IAAAkH,OAAA,EAA5FA,EAA8F7B,MAC9F,SAEN,GAAI8B,GAAmBE,EAAe,CAClC,MAAMM,EAAaC,OAAOC,QAAQ3I,GAAKuI,MAAKK,IAAA,IAAE7H,GAAI6H,EAAA,OAAK7H,IAAQZ,EAAOa,UAAU,IAEhF,OACIoB,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAEN9E,UAAY,cAAa2F,KAAwBE,KAAsBJ,EAAQpI,EAAKG,EAAOa,WAAYZ,KACvGsH,GAAI,CAAEJ,SAAW,GAAEhC,OACnB9C,QAASA,IAAMiC,EAAaA,EAAWzE,GAAO6I,QAAQC,IAAI,yBAAyB3G,SAElFsG,EAAazE,EAAayE,EAAW,GAAU,OAANtI,QAAM,IAANA,OAAM,EAANA,EAAQkB,WAAa,KAL1DyG,EAQjB,CAEA,OAAIG,GAAmB1H,GAEf6B,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAEN9E,UAAY,cAAa2F,KAAwBE,KAAsBJ,EAAQpI,EAAKG,EAAOa,WAAYZ,KACvGsH,GAAI,CAAEJ,SAAW,GAAEhC,OAAqBnD,SAEvChC,EAAOK,KAAK,CAAER,MAAKgB,WAAYb,EAAOa,WAAYZ,WAJ9C0H,IAUb1F,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAENC,GAAI,CAAEJ,SAAW,GAAEhC,OACnB3C,UAAY,cAAa2F,KAAwBE,IAAqBrG,SACzE,KAHQ2F,EAKG,QAML,IAAjBpD,GAAyBC,GAAkB5B,IACzCX,EAAAA,EAAAA,KAACoF,EAAAA,EAAQ,CAAArF,UACLC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACsB,QAASC,OAAc,OAAPlJ,QAAO,IAAPA,OAAO,EAAPA,EAASqB,UAAkC,IAAvB2D,EAA8B,EAAI,GAAG3C,SAAEwC,EAAe,CAAE3E,MAAKI,gBAG7G,EAInB,OACI6B,EAAAA,EAAAA,MAACgH,EAAAA,EAAI,CAACtG,UAAU,qCAAqCuG,UAAWC,EAAAA,EAAMhH,SAAA,EAClEF,EAAAA,EAAAA,MAAA,OACIU,UAAU,kEAAiER,SAAA,EAEzE8C,GAAkBC,GAAoBG,EAAYlE,OAAS,GAAKgE,KAC9D/C,EAAAA,EAAAA,KAACZ,EAAa,CACVG,YAAY,gBACZD,YAAa,IACLyD,EACE,CAAC,CACCpB,KAAM,aACNF,KAAMiC,GACA1D,EAAAA,EAAAA,KAACgH,EAAAA,EAAQ,CAAC9B,SAAS,QAAQ+B,MAAM,aACjCjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAS,CAAChC,SAAS,UAC1B5D,QAASA,IAAMqC,GAAkB4B,IAAQA,IACzChE,UAAUuE,EAAAA,EAAAA,IAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACF8D,EACE,CAAC,CACClB,KAAM,YACNF,MAAMzB,EAAAA,EAAAA,KAACmH,EAAAA,EAAQ,CAACjC,SAAS,QAAQ+B,MAAM,YACvC3F,QAASA,IAjVzB8F,EAAChF,EAAW1E,KAC5B,IACI,MAAM2J,EAAM,IAAIC,EAAAA,QACVC,EAAgB/J,EAAwB4E,EAAW1E,GAEnD8J,EAAU9J,EACX+J,QAAQ1J,GAAWA,EAAOE,WAAaF,EAAOG,iBAC9CP,KAAKI,GAAWA,EAAOa,YAAcJ,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,gBAErFgJ,EAAOH,EAAc5J,KAAKC,GAC5B4J,EAAQ7J,KAAKgK,GAAW/J,EAAI+J,OAC9BhK,KAAI,CAACiK,EAAGC,KAAC,IAAWD,EAAGE,IAAKD,EAAI,MAElCR,EAAIU,UAAU,CACVC,KAAM,CAACR,GACPS,KAAMP,IAGVL,EAAIa,KAAK,YACb,CAAE,MAAOC,GACL1B,QAAQ2B,MAAMD,EAClB,GA4T+Cf,CAAYhF,EAAW1E,GACtC6D,UAAUuE,EAAAA,EAAAA,IAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACF+D,EACE,CAAC,CACCnB,KAAM,cACNF,MAAMzB,EAAAA,EAAAA,KAACmH,EAAAA,EAAQ,CAACjC,SAAS,QAAQ+B,MAAM,YACvC3F,QAASA,IAjUvB+G,EAACjG,EAAW1E,KAC9B,IACI,MAAM6J,EAAgB/J,EAAwB4E,EAAW1E,GAEnD4K,EAAYC,EAAAA,GAAWC,cAAcjB,GACrCkB,EAAWF,EAAAA,GAAWG,WAE5BH,EAAAA,GAAWI,kBAAkBF,EAAUH,EAAW,QAClDC,EAAAA,GAAeE,EAAU,aAC7B,CAAE,MAAON,GACL1B,QAAQ2B,MAAMD,EAClB,GAsT+CE,CAAcjG,EAAW1E,GACxC6D,UAAUuE,EAAAA,EAAAA,IAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACHkE,KAIdD,GAAcA,EACd9C,IAASF,EAAAA,EAAAA,KAAA,MAAIO,UAAU,qCAAoCR,SAAEG,QAGlEF,EAAAA,EAAAA,KAAC4I,EAAAA,EAAc,CAACtD,GAAI,CAAEuD,UAAWjF,GAAc7D,UAE3CF,EAAAA,EAAAA,MAACiJ,EAAAA,EAAK,CAACC,cAAY,EAACvI,KAAMmC,EAAS5C,SAAA,EAE/BC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAS,CAAAjJ,UACNF,EAAAA,EAAAA,MAACuF,EAAAA,EAAQ,CAAArF,SAAA,CAEJuC,GAAgBC,IACbvC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CACN9E,UAAU,4CACV+E,GAAI,CAAEJ,SAAW,GAAE/B,MAAsB8F,gBAAiB,WAAYlJ,SACzE,MAMJ2C,IACG1C,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CACN9E,UAAU,4CACV+E,GAAI,CAAEJ,SAAW,GAAE/B,MAAsB8F,gBAAiB,WAAYlJ,SACzE,QAMJrC,EAAQC,KAAI,CAACI,EAAQmL,KAClB,MAAMrD,GAAkBC,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4H,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/FkL,GAA+C,IAAlCvJ,QAAc,OAAN7B,QAAM,IAANA,OAAM,EAANA,EAAQI,gBAA4BJ,EAAOK,KAChEgL,EAAoB5F,EAAa2C,MAAK9B,GAAYA,EAASC,WAAavG,EAAOa,aAC/EyK,EAAgBD,EAAoBA,EAAkB7E,UAAY,MAElD,IAAD+E,EAAAC,EAAAC,EAAAC,EAArB,OAAI5D,EACOsD,GACHnJ,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAEN9E,UAAY,kCACPxC,EAAOmB,MAAoF,QAA/EoK,EAAGzF,EAAYsC,MAAKjH,GAASA,EAAM4E,OAAStF,OAAOT,EAAOmB,OAAOR,uBAAc,IAAA4K,OAAA,EAA5EA,EAA8EvF,MAAQ,IAC1GuB,GAAI,CAAEJ,SAAW,GAAE/B,MAAsB8F,gBAAiB,WAC1DI,gBAAeD,GAAoBC,EAAsBtJ,UAEzDC,EAAAA,EAAAA,KAAC0J,EAAAA,EAAc,CACXC,SAAUP,EACV7E,UAAW8E,EACXjJ,QAASA,IA1N1BkE,KACvB,MAAMsF,EAAmBpG,EAAa2C,MAAK9B,GAAYA,EAASC,WAAaA,IAC7E,GAAIsF,EAAkB,CAClB,MAAMC,EAAuC,QAA/BD,EAAiBrF,UAC/Bd,EAAgBD,EAAa7F,KAAI0G,GAC7BA,EAASC,WAAaA,EAChB,IAAKD,EAAUE,UAAWsF,EAAQ,OAAS,OAC3CxF,IAEd,MACIZ,EAAgB,IAAID,EAAc,CAAEc,WAAUC,UAAW,QAC7D,EA+MuDuF,CAAkB/L,EAAOa,YAAYmB,SAEnDhC,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZwL,EAANxL,EAAQa,kBAAU,IAAA2K,OAAZ,EAANA,EAAoB9K,QAAQ,KAAM,SAXzDyK,IAeTlJ,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAEN9E,WACQxC,EAAOQ,cAAsB,OAANR,QAAM,IAANA,GAAAA,EAAQa,WAC7B,8CACA,SAFL,KAIAb,EAAOmB,MAC0E,QADrEsK,EACP3F,EAAYsC,MAAKjH,GAASA,EAAM4E,OAAStF,OAAOT,EAAOmB,OAAOR,uBAAc,IAAA8K,OAAA,EAA5EA,EAA8EzF,MAC9E,IAEVuB,GAAI,CAAEJ,SAAW,GAAE/B,MAAsB8F,gBAAiB,WAAYlJ,SAErEhC,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZ0L,EAAN1L,EAAQa,kBAAU,IAAA6K,OAAZ,EAANA,EAAoBhL,QAAQ,KAAM,OAZrDyK,GAgBV,IAAI,UAKvBrJ,EAAAA,EAAAA,MAACkK,EAAAA,EAAS,CAAAhK,SAAA,EACJ6C,EAAoBqB,GAAaY,IAAelH,KAAI,CAACC,EAAKI,KACxDgC,EAAAA,EAAAA,KAAC+E,GAAO,CAAanH,IAAKA,EAAKI,MAAOA,GAAxBA,KAEI,IAArBoE,EAAUrD,SACPiB,EAAAA,EAAAA,KAACoF,EAAAA,EAAQ,CAAArF,UACLC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CACNsB,QACIjJ,EAAQqB,SACW,IAAjBuD,GAAyBC,EAAkB,EAAI,KACzB,IAAvBG,EAA8B,EAAI,GAEvC4C,GAAI,CAAE0E,UAAW,UAAWjK,SAC/B,uBAUnB6C,GAA8C,IAAzBiC,GAAc9F,SACjCiB,EAAAA,EAAAA,KAAA,OACIO,UAAU,WAAUR,UAEpBC,EAAAA,EAAAA,KAACiK,EAAAA,EAAe,CACZnD,UAAU,MACVoD,MAAO9H,EAAUrD,OACjBqE,KAAMA,EACN+G,aA9RKC,CAAC/J,EAAOgK,KAC7BhH,EAAQgH,EAAQ,EA8RA/G,YAAaA,EACbgH,oBA5RajK,IAC7BkD,EAAegH,SAASlK,EAAMmK,OAAOC,MAAO,KAC5CpH,EAAQ,EAAE,EA2RMqH,mBAAoBC,MAAMC,KAAK,IAAIC,IAAI,CAACpI,EAAkB,EAAG,GAAI,GAAI,IAAK,IAAK,OAAOyB,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACzG0G,iBAAiB,gBACjBC,iBAAe,EACfC,gBAAc,QAKvB,EAiCf9I,EAAgB+I,aAAe,CAC3B7I,UAAW,GACX1E,QAAS,GACT2E,WAAY,KACZC,cAAc,EACdC,eAAgB,KAChBC,eAAgB,IAChBC,iBAAkB,GAClBC,oBAAoB,EACpBC,SAAU,QACVC,mBAAmB,EACnB1C,WAAOlB,EACP6D,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,WAAY,KACZC,YAAa,GACbE,iBAAkB,GAClBD,eAAgB,IAGpB,S,+YCpmBA,MAqJA,EArJqB7D,IAQd,IARe,KAClBsB,EAAI,QACJC,EAAO,QACPlD,EAAO,QACPwN,EAAO,WACPC,EAAU,UACV/I,EAAS,gBACTgJ,GACH/L,EACG,MAAMgM,EAAqBA,CAACtN,EAAQ0M,KAChCU,GAAWG,IAAI,IACRA,EACH,CAACvN,GAAS0M,KACX,EAGDc,EAAgBxN,IAClB,MAAM,WAAEa,EAAU,UAAEK,GAAclB,EACL,IAADyN,EAAAC,EAAAC,EAAAC,EA+BKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA/BjC,GAAkB,WAAdhN,EACA,OACIY,EAAAA,EAAAA,MAAA,OAAKU,UAAU,sCAAqCR,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SACIkM,YAAY,MACZpI,KAAK,SACLvD,UAAU,iCACVkK,MAA+B,QAA1Be,EAAqB,QAArBC,EAAEP,EAAQtM,UAAW,IAAA6M,OAAA,EAAnBA,EAAqBU,WAAG,IAAAX,EAAAA,EAAI,GACnCY,SAAWjE,GACPkD,EAAmBzM,EAAY,CAC3BkF,KAAM,WACHoH,EAAQtM,GACXuN,IAAKhE,EAAEqC,OAAOC,MAAQ4B,WAAWlE,EAAEqC,OAAOC,YAASzL,OAI/DgB,EAAAA,EAAAA,KAAA,SACIkM,YAAY,MACZpI,KAAK,SACLvD,UAAU,iCACVkK,MAA+B,QAA1BiB,EAAqB,QAArBC,EAAET,EAAQtM,UAAW,IAAA+M,OAAA,EAAnBA,EAAqBW,WAAG,IAAAZ,EAAAA,EAAI,GACnCU,SAAWjE,GACPkD,EAAmBzM,EAAY,CAC3BkF,KAAM,WACHoH,EAAQtM,GACX0N,IAAKnE,EAAEqC,OAAOC,MAAQ4B,WAAWlE,EAAEqC,OAAOC,YAASzL,SAMpE,GAAkB,SAAdC,EACP,OACIY,EAAAA,EAAAA,MAAA,OAAKU,UAAU,sCAAqCR,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SACI8D,KAAK,OACLvD,UAAU,iCACVkK,MAAwC,QAAnCmB,EAAqB,QAArBC,EAAEX,EAAQtM,UAAW,IAAAiN,GAAO,QAAPC,EAAnBD,EAAqBpB,aAAK,IAAAqB,OAAP,EAAnBA,EAA4BS,aAAK,IAAAX,EAAAA,EAAI,GAC5CQ,SAAWjE,IAAC,IAAAqE,EAAA,OACRnB,EAAmBzM,EAAY,CAC3BkF,KAAM,OACN2G,MAAO,IACmB,QAAtB+B,EAAGtB,EAAQtM,UAAW,IAAA4N,OAAA,EAAnBA,EAAqB/B,MACxB8B,MAAOpE,EAAEqC,OAAOC,YAASzL,IAE/B,KAGVgB,EAAAA,EAAAA,KAAA,SACI8D,KAAK,OACLvD,UAAU,iCACVkK,MAAsC,QAAjCsB,EAAqB,QAArBC,EAAEd,EAAQtM,UAAW,IAAAoN,GAAO,QAAPC,EAAnBD,EAAqBvB,aAAK,IAAAwB,OAAP,EAAnBA,EAA4BQ,WAAG,IAAAV,EAAAA,EAAI,GAC1CK,SAAWjE,IAAC,IAAAuE,EAAA,OACRrB,EAAmBzM,EAAY,CAC3BkF,KAAM,OACN2G,MAAO,IACmB,QAAtBiC,EAAGxB,EAAQtM,UAAW,IAAA8N,OAAA,EAAnBA,EAAqBjC,MACxBgC,IAAKtE,EAAEqC,OAAOC,YAASzL,IAE7B,OAKf,GAAkB,WAAdC,EAAwB,CAC/B,MAAM0N,EAAiB,IAAI,IAAI9B,IAAIzI,EAAUzE,KAAIiP,IAAI,IAAAC,EAAAC,EAAA,OAAoB,QAApBD,EAAID,EAAKhO,UAAW,IAAAiO,GAAe,QAAfC,EAAhBD,EAAkBnO,qBAAa,IAAAoO,OAAf,EAAhBA,EAAiCC,MAAM,MAChG,OACI/M,EAAAA,EAAAA,KAACgN,EAAAA,EAAY,CACTC,UAAQ,EACRC,QAASP,EACTQ,sBAAoB,EACpB1C,MAAOS,EAAQtM,IAAe,GAC9BwN,SAAUA,CAAC/L,EAAO+M,IAAa/B,EAAmBzM,EAAYwO,GAC9DC,aAAcA,CAACC,EAAOC,EAAMpL,KAAA,IAAE,SAAEqL,GAAUrL,EAAA,OACtCtC,EAAAA,EAAAA,MAAA,SAAQyN,EAAKvN,SAAA,EACTC,EAAAA,EAAAA,KAACyN,EAAAA,EAAQ,CAACC,QAASF,EAAUG,MAAO,CAAEC,YAAa,KAClDL,IACA,EAETM,qBAAsBA,CAACC,EAAKjM,IAAQiM,IAAQjM,EAC5CkM,YAAcC,IACVhO,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,IACFD,EACJE,MAAOtP,EACPsN,YAAc,UAAmB,OAAVtN,QAAU,IAAVA,OAAU,EAAVA,EAAYH,QAAQ,KAAM,UAKrE,CACA,OAAO,IAAI,EAGf,OACIoB,EAAAA,EAAAA,MAACsO,EAAAA,EAAM,CAACxN,KAAMA,EAAMC,QAASA,EAASwN,SAAS,KAAKC,WAAS,EAAAtO,SAAA,EACzDF,EAAAA,EAAAA,MAACyO,EAAAA,EAAa,CAAAvO,SAAA,EACVF,EAAAA,EAAAA,MAAA,MAAIU,UAAU,sCAAqCR,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aACNF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,oBAAmBH,UAC9BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACK,KAAK,QAAQJ,QAASA,IAAMgL,GAAgB,GAAMrL,UAC1DC,EAAAA,EAAAA,KAACuO,EAAAA,EAAQ,SAGjBvO,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,gBAAeH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACK,KAAK,QAAQJ,QAASA,IAAM+K,EAAW,CAAC,GAAGpL,UACnDC,EAAAA,EAAAA,KAACwO,EAAAA,EAAY,eAK7BxO,EAAAA,EAAAA,KAAA,OAAKO,UAAU,mBAAkBR,SAC5BrC,EAAQC,KAAI,CAACI,EAAQ8J,KAAC,IAAA0B,EAAA,OACnB1J,EAAAA,EAAAA,MAAA,OAAaU,UAAU,iCAAgCR,SAAA,EACnDC,EAAAA,EAAAA,KAAA,SAAOO,UAAU,YAAWR,SACN,QADMwJ,EACvBxL,EAAOa,kBAAU,IAAA2K,OAAA,EAAjBA,EAAmB9K,QAAQ,KAAM,OAErC8M,EAAaxN,KAJR8J,EAKJ,UAIlB7H,EAAAA,EAAAA,KAACyO,EAAAA,EAAa,CAAA1O,UACVC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CAACtO,QAASQ,EAASqG,MAAM,QAAOlH,SAAC,cAIvC,E,0BCnJjB,MA+EA,EA7E6BV,IAMtB,IANuB,KAC1BsB,EAAI,QACJC,EAAO,QACPlD,EAAO,WACPiR,EAAU,gBACVC,EAAkB,IACrBvP,EAyBG,OACIQ,EAAAA,EAAAA,MAACsO,EAAAA,EAAM,CAACxN,KAAMA,EAAMC,QAASA,EAASwN,SAAS,KAAKC,WAAS,EAAAtO,SAAA,EACzDC,EAAAA,EAAAA,KAAC6O,EAAAA,EAAW,CAAA9O,SAAC,qBACbC,EAAAA,EAAAA,KAACsO,EAAAA,EAAa,CAAAvO,UACVC,EAAAA,EAAAA,KAAA,OAAKO,UAAU,MAAKR,SACfrC,EAAQC,KAAI,CAACmR,EAAKjH,KACf7H,SAAAA,EAAAA,KAAA,OAAKO,UAAU,wBAAuBR,UAClCF,EAAAA,EAAAA,MAACgH,EAAAA,EAAI,CACDC,UAAWC,EAAAA,EACXxG,UAAY,oEAAkEsH,EAAI,IAAM,EAAI,WAAa,IAAK9H,SAAA,EAE9GF,EAAAA,EAAAA,MAAA,OAAKU,UAAU,8DAA6DR,SAAA,EACxEC,EAAAA,EAAAA,KAAC+O,EAAAA,EAAM,CACHrB,QAAS9N,QAAW,OAAHkP,QAAG,IAAHA,OAAG,EAAHA,EAAKE,YAAcpP,QAAW,OAAHkP,QAAG,IAAHA,OAAG,EAAHA,EAAK7Q,WACjDsD,SAAU3B,QAAW,OAAHkP,QAAG,IAAHA,OAAG,EAAHA,EAAKE,WACvB5C,SAAWjE,IACP8G,OAxClBC,EAwCkC,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKlQ,WAxCzB8O,EAwCqCvF,EAAEqC,OAAOkD,aAvC3EiB,GAAWrD,GACPA,EAAK3N,KAAImR,GACLA,EAAIlQ,aAAesQ,EACb,IAAKJ,EAAK7Q,UAAWyP,EAAU,EAAI,GACnCoB,MALGG,IAACC,EAAWxB,CAyCI,KAEL1N,EAAAA,EAAAA,KAAA,MAAIO,UAAU,qBAAoBR,SAC1B,OAAH+O,QAAG,IAAHA,OAAG,EAAHA,EAAKlQ,iBAGdoB,EAAAA,EAAAA,KAAA,SACI8D,KAAK,SACL2G,OA1Db5I,EA0DqC,OAAHiN,QAAG,IAAHA,OAAG,EAAHA,EAAKK,QA1D9BC,MAAMvN,IAAgB,OAARA,GAAwB,KAARA,EA0D0B,GAAZ,OAAHiN,QAAG,IAAHA,OAAG,EAAHA,EAAKK,SAC1C/C,SAAWjE,IACPkH,OAzCTH,EAyC8B,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKlQ,WAzCrB6L,EAyCiCtC,EAAEqC,OAAOC,WAxC5EkE,GAAWrD,GACPA,EAAK3N,KAAImR,GACLA,EAAIlQ,aAAesQ,EACb,IAAKJ,EAAKK,QAAS1E,GACnBqE,MALQO,IAACH,EAAWzE,CA0CL,EACDlK,UAAU,6BACVoN,MAAO,CAAE2B,MAAO,QAChBpD,YAAY,cAzBoBrE,GAvC7ChG,KAoEF,SAGThC,EAAAA,EAAAA,MAAC4O,EAAAA,EAAa,CAAA1O,SAAA,EACVC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CAACtO,QA3CAmP,KAChBZ,EAAWC,EAAgB,EA0CWY,QAAQ,WAAUzP,SAAC,WACjDC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CAACtO,QAASQ,EAASqG,MAAM,QAAOlH,SAAC,eAEvC,E,kJChFV,MAAM+F,EAAgBA,CAAC3B,EAAGC,IAAMwC,OAAOzC,KAAOyC,OAAOxC,GAE/CxC,EAAeA,CAACC,EAAKC,KAC9B,OAAQA,GACJ,IAAK,SACD,OAAOD,GAAM,IAAI4N,KAAK1N,cAAe2N,OAAO7N,GAAOA,EACvD,IAAK,OACD,OAAOA,EAAM,IAAI8N,KAAK9N,GAAK+N,qBAAuB/N,EACtD,IAAK,OACD,OAAOA,EAAM,IAAI8N,KAAK9N,GAAKgO,qBAAuBhO,EACtD,IAAK,SACD,OAAOA,EACX,QACI,MAAO,GACf,EAGSrE,EAA0BA,CAACC,EAAMC,IACnCD,EAAKE,KAAIC,IACZ,MAAMkS,EAAU,CAAC,EAgBjB,OAfApS,EAAQI,SAAQ,CAACgR,EAAK9Q,KAClB,GAAI8Q,EAAI7Q,WAAa6Q,EAAI5Q,eAAgB,CACrC,MAAM6R,EAAajB,EAAIvQ,aACjBC,OAAOsQ,EAAIvQ,cAAcE,QAAQ,OAAQ,KAAKC,cAC7C,SAAQV,EAAQ,IACvB,GAAI8Q,EAAI3Q,cAAgB2Q,EAAI1Q,KAAM,CAC9B,MAAM4R,EAAUlB,EAAI1Q,KAAK,CAAER,QACJ,kBAAZoS,GAA2C,kBAAZA,IACtCF,EAAQC,GAAcC,EAE9B,MACIF,EAAQC,GAAcnS,EAAIkR,EAAIlQ,aAAe,EAErD,KAEGkR,CAAO,IC6EtB,GAjGqBzQ,IAWd,IAXe,UAClB+C,EAAY,GAAE,QACd1E,EAAU,GAAE,eACZmF,GAAiB,EAAK,iBACtBC,GAAmB,EAAK,YACxBG,EAAc,GAAE,gBAChBF,GAAkB,EAAK,eACvBW,GAAiB,EAAI,kBACrBC,EAAoBA,SAAS,cAC7BsM,GAAgB,EAAK,gBACrBC,EAAkBA,UACrB7Q,EACG,MAAOG,EAAUC,GAAe0Q,EAAAA,SAAe,MACzCxP,EAAOf,QAAQJ,GAGfqB,EAAcA,IAAMpB,EAAY,MAEhCH,EAAc,IACZyD,EACE,CAAC,CACCpB,KAAM,aACNF,KAAMiC,GACA1D,EAAAA,EAAAA,KAACgH,EAAAA,EAAQ,CAAC9B,SAAS,QAAQ+B,MAAM,aACjCjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAS,CAAChC,SAAS,UAC1B5D,QAASA,IAAMqC,GAAkB2H,IAASA,IAC1C/J,SAAUuE,EAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACF8D,EACE,CAAC,CACClB,KAAM,YACNF,MAAMzB,EAAAA,EAAAA,KAACmH,EAAAA,EAAQ,CAACjC,SAAS,QAAQ+B,MAAM,YACvC3F,QAASA,IDTE8F,EAAChF,EAAW1E,KACnC,IACI,MAAM2J,EAAM,IAAIC,EAAAA,QACV8I,EAAY5S,EAAwB4E,EAAW1E,GAE/C8J,EAAU9J,EACX+J,QAAOqH,GAAOA,EAAI7Q,WAAa6Q,EAAI5Q,iBACnCP,KAAImR,GAAOA,EAAIlQ,YAAckQ,EAAIvQ,cAAgB,KAEhDmJ,EAAO0I,EAAUzS,KAAIC,GACvB4J,EAAQ7J,KAAI0S,GAAKzS,EAAIyS,OAGzBhJ,EAAIU,UAAU,CACVC,KAAM,CAACR,GACPS,KAAMP,IAGVL,EAAIa,KAAK,YACb,CAAE,MAAOC,GACL1B,QAAQ2B,MAAM,oBAAqBD,EACvC,GCZ2Bf,CAAYhF,EAAW1E,GACtC6D,SAAUuE,EAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACF+D,EACE,CAAC,CACCnB,KAAM,cACNF,MAAMzB,EAAAA,EAAAA,KAACmH,EAAAA,EAAQ,CAACjC,SAAS,QAAQ+B,MAAM,YACvC3F,QAASA,IDOI+G,EAACjG,EAAW1E,KACrC,IACI,MAAM0S,EAAY5S,EAAwB4E,EAAW1E,GAC/C4S,EAAQ/H,EAAAA,GAAWC,cAAc4H,GACjC3H,EAAWF,EAAAA,GAAWG,WAC5BH,EAAAA,GAAWI,kBAAkBF,EAAU6H,EAAO,QAC9C/H,EAAAA,GAAeE,EAAU,aAC7B,CAAE,MAAON,GACL1B,QAAQ2B,MAAM,sBAAuBD,EACzC,GChB2BE,CAAcjG,EAAW1E,GACxC6D,SAAUuE,EAAuB,OAAT1D,QAAS,IAATA,OAAS,EAATA,EAAWrD,OAAQ,KAE7C,MACHkE,GAGP,OACIpD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,gBAAeH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QApCHC,GAAUZ,EAAYY,EAAMC,eAoCHE,KAAK,QAAOT,UAC1CC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,QAIhBwP,IACGjQ,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,eAAcH,UACzBC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAASA,IAAM8P,GAAgB,GAAO1P,KAAK,QAAOT,UAC1DC,EAAAA,EAAAA,KAACuQ,EAAAA,EAAU,SAKvBvQ,EAAAA,EAAAA,KAACU,EAAAA,GAAO,CACJC,KAAMA,EACNnB,SAAUA,EACVoB,QAASC,EACTC,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACdjB,UAEFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAAAnB,SACJT,EAAY3B,KAAI,CAACwD,EAAK0G,KACnBhI,EAAAA,EAAAA,MAACwB,EAAAA,EAAQ,CAELjB,QAASA,MACF,OAAHe,QAAG,IAAHA,OAAG,EAAHA,EAAKG,UAAWH,EAAIG,UACpBT,GAAa,EAEjBU,SAAa,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAASxB,SAAA,EAExBC,EAAAA,EAAAA,KAACwB,EAAAA,EAAY,CAAAzB,SAAK,OAAHoB,QAAG,IAAHA,OAAG,EAAHA,EAAKM,QACpBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAY,CAAA3B,SAAK,OAAHoB,QAAG,IAAHA,OAAG,EAAHA,EAAKQ,SARfkG,WAatB,EChEX,GA9CwB2I,CAACC,EAAc/S,KACnC,MAAOwN,EAASC,IAAczL,EAAAA,EAAAA,UAAS,CAAC,IACjCgR,EAAcC,IAAmBjR,EAAAA,EAAAA,UAAS+Q,GAAgB,KAEjEG,EAAAA,EAAAA,YAAU,KACNC,GAAc,GACf,CAAC3F,EAASuF,EAAc/S,IAE3B,MAAMmT,EAAeA,KACjB,IAAIpT,EAAO,IAAIgT,GAEf,IAAK,MAAM1S,KAAUL,EAAS,CAC1B,MAAMoT,EAAQ/S,EAAOa,WACf6I,EAASyD,EAAQ4F,GAEvB,GAAKrJ,EAEL,GAAoB,UAAhBA,EAAO3D,KAAkB,CACzB,MAAM,IAAEqI,EAAG,IAAEG,GAAQ7E,EACrBhK,EAAOA,EAAKgK,QAAOmF,IACf,MAAM/K,EAAM+E,OAAOgG,EAAKkE,IACxB,YAAgB9R,IAARmN,GAAqBtK,GAAOsK,UAAiBnN,IAARsN,GAAqBzK,GAAOyK,EAAI,GAErF,MAAO,GAAoB,SAAhB7E,EAAO3D,KAAiB,CAC/B,MAAM,MAAEyI,EAAK,IAAEE,GAAQhF,EAAOgD,OAAS,CAAC,EACxChN,EAAOA,EAAKgK,QAAOmF,IACf,MAAM/K,EAAM,IAAI8N,KAAK/C,EAAKkE,IAC1B,QAASvE,GAAS1K,GAAO,IAAI8N,KAAKpD,OAAaE,GAAO5K,GAAO,IAAI8N,KAAKlD,GAAK,GAEnF,MAAW9B,MAAMoG,QAAQtJ,KACrBhK,EAAOgK,EAAO1I,OACRtB,EAAKgK,QAAOmF,IAAI,IAAAoE,EAAAC,EAAA,OAAIxJ,EAAOyJ,SAAoB,QAAZF,EAACpE,EAAKkE,UAAM,IAAAE,GAAe,QAAfC,EAAXD,EAAatS,qBAAa,IAAAuS,OAAf,EAAXA,EAA4BlE,OAAO,IACvEtP,EAEd,CAEAkT,EAAgBlT,EAAK,EAGzB,MAAO,CACHyN,UACAC,aACAuF,eACH,ECYCS,GAAe9R,IAoBd,IApBe,UACpB+C,EAAY,GACZ1E,QAAS0T,EAAe,GAAE,WAC1B/O,EAAa,KAAI,aACjBC,GAAe,EAAK,eACpBC,EAAiB,KAAI,eACrBC,EAAiB,IAAG,iBACpBC,EAAmB,GAAE,mBACrBC,GAAqB,EAAK,SAC1BC,EAAW,QAAO,kBAClBC,GAAoB,EAAK,MACzB1C,EAAQ,GAAE,eACV2C,GAAiB,EAAK,iBACtBC,GAAmB,EAAK,gBACxBC,GAAkB,EAAK,WACvBC,EAAa,KAAI,YACjBC,EAAc,GAAE,iBAChBE,EAAmB,GAAE,eACrBD,EAAiB,GAAE,cACnB+M,GAAgB,GACjB5Q,EACC,MAAO3B,EAASiR,IAAcjP,EAAAA,EAAAA,UAAS0R,IAChCC,EAAcnB,IAAmBxQ,EAAAA,EAAAA,WAAS,IAC1C4R,EAAclG,IAAmB1L,EAAAA,EAAAA,WAAS,IAC1C0D,EAAMC,IAAW3D,EAAAA,EAAAA,UAAS,IAC1B4D,EAAaC,IAAkB7D,EAAAA,EAAAA,UAAS+C,IACxCe,EAAcC,IAAmB/D,EAAAA,EAAAA,UAAS,KAC1CgE,EAAgBC,IAAqBjE,EAAAA,EAAAA,WAAS,GAE/C6R,GAAgBC,EAAAA,EAAAA,UAAQ,IACrB,IAAI9T,GAASwG,MAAK,CAACC,EAAGC,IAAQ,OAADD,QAAC,IAADA,GAAAA,EAAGgL,SAAY,OAAD/K,QAAC,IAADA,GAAAA,EAAG+K,QAAUhL,EAAEgL,QAAU/K,EAAE+K,QAAU,KACtF,CAACzR,IAEE+T,IAAiBD,EAAAA,EAAAA,UAAQ,IACtBD,EAAc9J,QAAOqH,GAC1BhJ,EAAiB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAK5Q,eAAgB,IAAM4H,EAAiB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAK7Q,UAAW,MAExE,CAACsT,KAEE,QACJrG,GAAO,WACPC,GAAU,aACVuF,IACEF,GAAgBpO,EAAWmP,GAEzBtN,IAAauN,EAAAA,EAAAA,UAAQ,KACzB,MAAME,EAAW/G,MAAMoG,QAAQL,IAAgBA,GAAe,GAC9D,OAAKlN,EAAazE,OACX,IAAI2S,GAAUxN,MAAK,CAACC,EAAGC,KAC5B,IAAK,MAAM,SAAEE,EAAQ,UAAEC,KAAef,EAAc,CAClD,MAAMgB,EAASL,EAAEG,GACXG,EAASL,EAAEE,GACjB,GAAIE,IAAWC,EACb,MAAqB,QAAdF,EAAuBC,EAASC,EAAS,GAAK,EAAMD,EAASC,EAAS,GAAK,CAEtF,CACA,OAAO,CAAC,IATuBiN,CAU/B,GACD,CAAChB,GAAclN,IAEZqB,IAAgB2M,EAAAA,EAAAA,UAAQ,KAC5B,MAAMjF,EAAQnJ,EAAOE,EACrB,OAAOqH,MAAMoG,QAAQ9M,IAAcA,GAAWa,MAAMyH,EAAOA,EAAQjJ,GAAe,EAAE,GACnF,CAACW,GAAYb,EAAME,IAehBqO,GAAexP,IAAqB,IAApB,IAAEvE,EAAG,MAAEI,GAAOmE,EAClC,MAAOyP,EAAUC,IAAenS,EAAAA,EAAAA,WAAS,GAEzC,OACEG,EAAAA,EAAAA,MAACsF,EAAAA,SAAQ,CAAApF,SAAA,EACPF,EAAAA,EAAAA,MAACuF,EAAAA,EAAQ,CAAArF,SAAA,CACNuC,GAAgBC,IACfvC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACC,GAAI,CAAEJ,SAAW,GAAEhC,OAAqBnD,UACjDC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACK,KAAK,QAAQJ,QAASA,IAAMyR,GAAaD,GAAU7R,SAC5D6R,GAAW5R,EAAAA,EAAAA,KAACwF,EAAAA,EAAe,KAAMxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAiB,QAIzD/C,IACC1C,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACC,GAAI,CAAEJ,SAAW,GAAEhC,OAAqBnD,SAC/CuD,EAAcF,EAAQpF,EAAQ,IAGnCyT,GAAe9T,KAAI,CAACmR,EAAKjH,KACxB7H,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAERC,GAAI,CAAEJ,SAAW,GAAEhC,OACnB9C,QAASA,IAAgB,OAAViC,QAAU,IAAVA,OAAU,EAAVA,EAAazE,GAAKmC,SAE7B,OAAH+O,QAAG,IAAHA,GAAAA,EAAK3Q,cAAmB,OAAH2Q,QAAG,IAAHA,GAAAA,EAAK1Q,KACvB0Q,EAAI1Q,KAAK,CAAER,MAAKgB,WAAYkQ,EAAIlQ,WAAYZ,UAC5C4D,EAAahE,EAAIkR,EAAIlQ,YAAgB,OAAHkQ,QAAG,IAAHA,OAAG,EAAHA,EAAK7P,YANtC4I,QAUV+J,GAAYrP,IACXvC,EAAAA,EAAAA,KAACoF,EAAAA,EAAQ,CAAArF,UACPC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACsB,QAAS8K,GAAe1S,QAAU2D,EAAqB,EAAI,IAAMJ,EAAe,EAAI,GAAGvC,SAC/FwC,EAAe,CAAE3E,MAAKI,gBAIpB,EAIf,OACE6B,EAAAA,EAAAA,MAACgH,EAAAA,EAAI,CAACtG,UAAU,qCAAqCuG,UAAWC,EAAAA,EAAMhH,SAAA,EACpEF,EAAAA,EAAAA,MAAA,OAAKU,UAAU,8DAA6DR,SAAA,EAC1EC,EAAAA,EAAAA,KAAC8R,GAAY,CACX1P,UAAWsO,GACXhT,QAAS+T,GACT5O,eAAgBA,EAChBC,iBAAkBA,EAClBG,YAAaA,EACbU,kBAAmBA,EACnBD,eAAgBA,EAChBX,gBAAiBA,EACjBkN,cAAeA,EACfC,gBAAiBA,IAElBlN,GAAcA,EACd9C,IAASF,EAAAA,EAAAA,KAAA,MAAIO,UAAU,yBAAwBR,SAAEG,QAGpDF,EAAAA,EAAAA,KAAC4I,EAAAA,EAAc,CAACtD,GAAI,CAAEuD,UAAWnF,GAAkBX,EAAkB,cAAgBP,GAAiBzC,UACpGF,EAAAA,EAAAA,MAACiJ,EAAAA,EAAK,CAACC,cAAY,EAACvI,KAAMmC,EAAS5C,SAAA,EACjCC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAS,CAAAjJ,UACRF,EAAAA,EAAAA,MAACuF,EAAAA,EAAQ,CAAArF,SAAA,CACNuC,GAAgBC,IACfvC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACC,GAAI,CAAEJ,SAAW,GAAE/B,OAAuBpD,SAAC,MAEvD2C,IACC1C,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACC,GAAI,CAAEJ,SAAW,GAAE/B,OAAuBpD,SAAC,QAEvD0R,GAAe9T,KAAI,CAACmR,EAAKjH,KACxB,MAAMkK,EAAQvO,EAAa2C,MAAK6L,GAAKA,EAAE1N,WAAawK,EAAIlQ,aACxD,OACEoB,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAERC,GAAI,CAAEJ,SAAW,GAAE/B,OACnBkG,eAAoB,OAAL0I,QAAK,IAALA,OAAK,EAALA,EAAOxN,aAAa,EAAMxE,UAEzCC,EAAAA,EAAAA,KAAC0J,EAAAA,EAAc,CACbC,SAAUoI,EACVxN,WAAgB,OAALwN,QAAK,IAALA,OAAK,EAALA,EAAOxN,YAAa,MAC/BnE,QAASA,IA9FFkE,KACzB,MAAM2N,EAAWzO,EAAa2C,MAAK+L,GAAKA,EAAE5N,WAAaA,IAErDb,EADEwO,EACczO,EAAa7F,KAAIuU,GAC/BA,EAAE5N,WAAaA,EACX,IAAK4N,EAAG3N,UAA2B,QAAhB2N,EAAE3N,UAAsB,OAAS,OACpD2N,IAGU,IAAI1O,EAAc,CAAEc,WAAUC,UAAW,QAC3D,EAoFiCuF,CAAkBgF,EAAIlQ,YAAYmB,SAEhD+O,EAAIvQ,cAAgBuQ,EAAIlQ,cATtBiJ,EAWK,UAKpBhI,EAAAA,EAAAA,MAACkK,EAAAA,EAAS,CAAAhK,SAAA,EACN6C,EAAoBqB,GAAaY,IAAelH,KAAI,CAACC,EAAKiK,KAC1D7H,EAAAA,EAAAA,KAAC2R,GAAY,CAAS/T,IAAKA,EAAKI,MAAO6J,GAApBA,MAEnB6I,GAAa3R,SACbiB,EAAAA,EAAAA,KAACoF,EAAAA,EAAQ,CAAArF,UACPC,EAAAA,EAAAA,KAACqF,EAAAA,EAAS,CAACsB,QAAS8K,GAAe1S,QAAU2D,EAAqB,EAAI,IAAMJ,EAAe,EAAI,GAAIpD,MAAM,SAAQa,SAAC,uBAS1H6C,GAAqB8N,GAAa3R,OAAS,IAC3CiB,EAAAA,EAAAA,KAAA,OAAKO,UAAU,WAAUR,UACvBC,EAAAA,EAAAA,KAACiK,EAAAA,EAAe,CACdnD,UAAU,MACVoD,MAAOwG,GAAa3R,OACpBqE,KAAMA,EACN+G,aAAcA,CAACgI,EAAG9H,IAAYhH,EAAQgH,GACtC/G,YAAaA,EACbgH,oBAAqBnC,IACnB5E,EAAegH,SAASpC,EAAEqC,OAAOC,MAAO,KACxCpH,EAAQ,EAAE,EAEZqH,mBAAoB,CAAC,EAAG,GAAI,GAAI,GAAI,KACpCI,iBAAiB,gBACjBC,iBAAe,EACfC,gBAAc,MAKnBiF,IACCpQ,EAAAA,EAAAA,MAACsF,EAAAA,SAAQ,CAAApF,SAAA,EACPC,EAAAA,EAAAA,KAACoS,EAAY,CACXzR,KAAM0Q,EACNzQ,QAASA,IAAMsP,GAAgB,GAC/BxS,QAAS+T,GACTvG,QAASA,GACTC,WAAYA,GACZ/I,UAAWA,EACXgJ,gBAAiBA,KAEnBpL,EAAAA,EAAAA,KAACqS,EAAoB,CACnB1R,KAAM2Q,EACN1Q,QAASA,IAAMwK,GAAgB,GAC/B1N,QAASA,EACTiR,WAAYA,EACZC,gBAAiBwC,SAIlB,EA4BXD,GAAalG,aAAe,CAC1B5I,WAAY,KACZC,cAAc,EACdC,eAAgB,KAChBC,eAAgB,IAChBC,iBAAkB,GAClBC,oBAAoB,EACpBC,SAAU,QACVC,mBAAmB,EACnB1C,WAAOlB,EACP6D,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,WAAY,KACZC,YAAa,GACbE,iBAAkB,GAClBD,eAAgB,GAChB+M,eAAe,GCrUjB,MAAMqC,IAAcC,EAAAA,EAAAA,MAAiBC,KAyBxBC,KAfGC,EAAAA,EAAAA,IAAyB,OAAXJ,SAAW,IAAXA,QAAW,EAAXA,GAAaK,UAAqB,OAAXL,SAAW,IAAXA,IAAAA,GAAaK,SAYlDD,EAAAA,EAAAA,IAAyB,OAAXJ,SAAW,IAAXA,QAAW,EAAXA,GAAaK,UAAqB,OAAXL,SAAW,IAAXA,IAAAA,GAAaK,QAG/B,CAC/B,CAAE/T,WAAY,aAAcK,UAAW,OAAQV,aAAc,QAC7D,CAAEK,WAAY,QAASK,UAAW,SAAUV,aAAc,SAC1D,CAAEK,WAAY,iBAAkBK,UAAW,SAAUV,aAAc,WACnE,CAAEK,WAAY,aAAcK,UAAW,SAAUV,aAAc,UAC/D,CAAEK,WAAY,YAAaK,UAAW,SAAUV,aAAc,cAC9D,CAAEK,WAAY,kBAAmBK,UAAW,SAAUV,aAAc,iBACpE,CAAEK,WAAY,mBAAoBK,UAAW,SAAUV,aAAc,gBACrE,CAAEK,WAAY,gBAAiBK,UAAW,SAAUV,aAAc,aCzBhEkD,IAAOzB,EAAAA,EAAAA,KAAC4S,EAAAA,EAAoB,CAAC1N,SAAS,UACtC2N,IAAc7S,EAAAA,EAAAA,KAAC8S,EAAAA,EAAQ,CAAC5N,SAAS,UA6XvC,GA3XqB7F,IAAgC,IAA/B,UAAE0T,EAAS,WAAEC,GAAY3T,EAC3C,MAAO+C,EAAW6Q,IAAgBvT,EAAAA,EAAAA,UAAS,KACpCwT,EAAYC,IAAiBzT,EAAAA,EAAAA,UAAS,CACzC0T,UAAUC,EAAAA,EAAAA,MACVC,QAAQD,EAAAA,EAAAA,MACRE,gBAAgBF,EAAAA,EAAAA,MAChBG,cAAcH,EAAAA,EAAAA,MACdI,UAAW,KACXpC,cAAc,KAEXnG,EAASC,IAAczL,EAAAA,EAAAA,UAAS,CAAC,IACjCgU,EAASC,IAAcjU,EAAAA,EAAAA,UAAS,KAChCgR,EAAcC,IAAmBjR,EAAAA,EAAAA,UAAS,KAC1C2R,EAAcnB,IAAmBxQ,EAAAA,EAAAA,WAAS,IAEjDkR,EAAAA,EAAAA,YAAU,MAENgD,EAAAA,EAAAA,GAAU,CACNC,QAAU,6DACCX,EAAWE,iCACbF,EAAWI,kCACRJ,EAAWO,YACvBV,YAAWC,eACZc,MAAKrW,IACAA,EAAKsW,QAASd,EAAaxV,EAAKA,MAC/BwV,EAAa,GAAG,IACtBe,OAAM7L,GAAK1B,QAAQ2B,MAAMD,IAAG,GAEhC,CAAC+K,EAAWE,SAAUF,EAAWI,OAAQJ,EAAWO,YAEvD,MAAMrC,EAAeqB,GAAoB9U,KAAI,CAACmR,EAAKmF,KAAM,CACrDhW,UAAWgW,EAAS,GAAK,EAAI,EAC7BrV,WAAe,OAAHkQ,QAAG,IAAHA,OAAG,EAAHA,EAAKlQ,WACjBK,UAAc,OAAH6P,QAAG,IAAHA,OAAG,EAAHA,EAAK7P,UAChBV,aAAcuQ,EAAIvQ,aAClB4Q,QAAS8E,EAAS,MAGhBC,GAAgB1C,EAAAA,EAAAA,UAAQ,IACnBJ,EAAa3J,QAChBqH,IAAQhJ,EAAAA,EAAAA,IAAiB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAK5Q,eAAgB,KAAM4H,EAAAA,EAAAA,IAAiB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAK7Q,UAAW,MAEpF,CAACmT,IAEE+C,GAAW3C,EAAAA,EAAAA,UAAQ,KACrB,MAAM/J,EAASnB,OAAO8N,KAAKlJ,GAASnM,OAAS,EAAGsV,IAAWX,EAErDY,EAAW7M,EAASiJ,EAAetO,EACnCmS,EAAgBF,GAAWG,EAAAA,EAAAA,IAAUF,EAAUZ,GAAW,GAE1De,EAAUP,EAAczM,QAAOiN,GACC,YAAlCC,EAAAA,EAAAA,IAAeD,EAAIzV,aACpBtB,KAAImR,GAAOA,EAAIlQ,aAEZgW,EAAoBL,EAAc5W,KAAIkX,IACxC,MAAMC,EAAU,CAAC,YAAa,kBAAmB,mBAAoB,iBAErE,MAAO,IACAD,KACAvO,OAAOyO,YACNN,EAAQ9W,KAAIgB,IAAG,IAAAqW,EAAAC,EAAA,MAAI,CACftW,EACAmW,EAAQ5D,SAASvS,GACR,OAAHkW,QAAG,IAAHA,GAAgB,QAAbG,EAAHH,EAAKK,mBAAW,IAAAF,OAAb,EAAHA,EAAkBG,QAChB,CAACC,EAAKC,KAAUC,EAAAA,EAAAA,IAASF,GAAKG,EAAAA,EAAAA,IAASF,EAAM1W,KAAS,IACtD,IAEF6W,EAAAA,EAAAA,IACK,OAAHX,QAAG,IAAHA,GAAgB,QAAbI,EAAHJ,EAAKK,mBAAW,IAAAD,OAAb,EAAHA,EAAkBE,QACd,CAACC,EAAKC,KAAUC,EAAAA,EAAAA,IAASF,GAAKG,EAAAA,EAAAA,IAASF,EAAM1W,KAAS,IACtD,GAEJkW,EAAIK,YAAYnW,QAE3B,KAER,IAGL,OAAOsV,EAAWO,EAAoBN,CAAQ,GAC/C,CAACpJ,EAAS9I,EAAWsO,EAAcgD,EAASQ,KAE/CtD,EAAAA,EAAAA,YAAU,KACNC,GAAc,GACf,CAAC3F,IAEJ,MAAMG,EAAqBA,CAACtN,EAAQ0M,KAChCU,GAAWsK,IAAW,IACfA,EACH,CAAC1X,GAAS0M,KACX,EAGDoG,EAAeA,KACjB,IAAIyD,EAAW,IAAIlS,GACnB,IAAK,MAAMrE,KAAUqT,EACjB,GAAIlG,EAAQnN,EAAOa,YACf,GAAwC,UAApCsM,EAAQnN,EAAOa,YAAYkF,KAAkB,CAC7C,MAAM,IAAEqI,EAAG,IAAEG,GAAQpB,EAAQnN,EAAOa,YACpC0V,EAAWA,EAAS7M,QAAOmF,IACvB,MAAMnC,EAAQmC,EAAK7O,EAAOa,YAC1B,YAAgBI,IAARmN,GAAqB1B,GAAS0B,UAAiBnN,IAARsN,GAAqB7B,GAAS6B,EAAI,GAEzF,MAAO,GAAwC,SAApCpB,EAAQnN,EAAOa,YAAYkF,KAAiB,CACnD,MAAM,MAAEyI,EAAK,IAAEE,GAAQvB,EAAQnN,EAAOa,YAAY6L,MAClD6J,EAAWA,EAAS7M,QAAOmF,IACvB,MAAM8I,EAAY,IAAI/F,KAAK/C,EAAK7O,EAAOa,aACvC,YAAkBI,IAAVuN,GAAuBmJ,GAAa,IAAI/F,KAAKpD,WAAoBvN,IAARyN,GAAqBiJ,GAAa,IAAI/F,KAAKlD,GAAK,GAEzH,MAAO,GAAI9B,MAAMoG,QAAQ7F,EAAQnN,EAAOa,aAAc,CAAC,IAAD+W,EAClDrB,GAAqC,QAA1BqB,EAAAzK,EAAQnN,EAAOa,mBAAW,IAAA+W,OAAA,EAA1BA,EAA4B5W,QAAS,EAAIuV,EAAS7M,QAAOmF,IAAI,IAAAgJ,EAAA,OAAI1K,EAAQnN,EAAOa,YAAYsS,SAAgC,QAAxB0E,EAAChJ,EAAK7O,EAAOa,mBAAW,IAAAgX,OAAA,EAAvBA,EAAyBlX,cAAcqO,OAAO,IAAIuH,CACtK,CAGR3D,EAAgB2D,EAAS,EAGvB/I,EAAgBxN,IAClB,MAAM,WAAEa,EAAU,UAAEK,GAAclB,EACL,IAADyN,EAAAC,EAAAC,EAAAC,EAmBKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAnBjC,GAAkB,WAAdhN,EACA,OACIY,EAAAA,EAAAA,MAAA,OAAKU,UAAU,sCAAqCR,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SACIkM,YAAY,MACZpI,KAAK,SACLvD,UAAU,iCACVkK,MAA+B,QAA1Be,EAAqB,QAArBC,EAAEP,EAAQtM,UAAW,IAAA6M,OAAA,EAAnBA,EAAqBU,WAAG,IAAAX,EAAAA,EAAI,GACnCY,SAAWjE,GAAMkD,EAAmBzM,EAAY,CAAEkF,KAAM,WAAYoH,EAAQtM,GAAauN,IAAKhE,EAAEqC,OAAOC,MAAQ4B,WAAWlE,EAAEqC,OAAOC,YAASzL,OAEhJgB,EAAAA,EAAAA,KAAA,SACIkM,YAAY,MACZpI,KAAK,SACLvD,UAAU,iCACVkK,MAA+B,QAA1BiB,EAAqB,QAArBC,EAAET,EAAQtM,UAAW,IAAA+M,OAAA,EAAnBA,EAAqBW,WAAG,IAAAZ,EAAAA,EAAI,GACnCU,SAAWjE,GAAMkD,EAAmBzM,EAAY,CAAEkF,KAAM,WAAYoH,EAAQtM,GAAa0N,IAAKnE,EAAEqC,OAAOC,MAAQ4B,WAAWlE,EAAEqC,OAAOC,YAASzL,SAIrJ,GAAkB,SAAdC,EACP,OACIY,EAAAA,EAAAA,MAAA,OAAKU,UAAU,sCAAqCR,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SACIkM,YAAY,aACZpI,KAAK,OACLvD,UAAU,iCACVkK,MAAwC,QAAnCmB,EAAqB,QAArBC,EAAEX,EAAQtM,UAAW,IAAAiN,GAAO,QAAPC,EAAnBD,EAAqBpB,aAAK,IAAAqB,OAAP,EAAnBA,EAA4BS,aAAK,IAAAX,EAAAA,EAAI,GAC5CQ,SAAWjE,IAAC,IAAAqE,EAAA,OAAKnB,EAAmBzM,EAAY,CAAEkF,KAAM,OAAQ2G,MAAO,IAAwB,QAAtB+B,EAAGtB,EAAQtM,UAAW,IAAA4N,OAAA,EAAnBA,EAAqB/B,MAAO8B,MAAOpE,EAAEqC,OAAOC,YAASzL,IAAc,KAEnJgB,EAAAA,EAAAA,KAAA,SACIkM,YAAY,WACZpI,KAAK,OACLvD,UAAU,iCACVkK,MAAsC,QAAjCsB,EAAqB,QAArBC,EAAEd,EAAQtM,UAAW,IAAAoN,GAAO,QAAPC,EAAnBD,EAAqBvB,aAAK,IAAAwB,OAAP,EAAnBA,EAA4BQ,WAAG,IAAAV,EAAAA,EAAI,GAC1CK,SAAWjE,IAAC,IAAAuE,EAAA,OAAKrB,EAAmBzM,EAAY,CAAEkF,KAAM,OAAQ2G,MAAO,IAAwB,QAAtBiC,EAAGxB,EAAQtM,UAAW,IAAA8N,OAAA,EAAnBA,EAAqBjC,MAAOgC,IAAKtE,EAAEqC,OAAOC,YAASzL,IAAc,OAItJ,GAAkB,WAAdC,EAAwB,CAC/B,MAAM0N,EAAiB,IAAI,IAAI9B,IAAIzI,EAAUzE,KAAIiP,IAAI,IAAAC,EAAAC,EAAA,OAAoB,QAApBD,EAAID,EAAKhO,UAAW,IAAAiO,GAAe,QAAfC,EAAhBD,EAAkBnO,qBAAa,IAAAoO,OAAf,EAAhBA,EAAiCC,MAAM,MAChG,OACI/M,EAAAA,EAAAA,KAACgN,EAAAA,EAAY,CACTC,UAAQ,EACR4I,GAAK,GAAEjX,WACPsO,QAASP,EACTQ,sBAAoB,EACpB2I,eAAgBvI,GAAUA,EAC1B9C,MAAOS,EAAQtM,IAAe,GAC9BwN,SAAUA,CAAC/L,EAAO+M,IAAa/B,EAAmBzM,EAAYwO,GAC9DC,aAAcA,CAACC,EAAOC,EAAMpL,KAAA,IAAE,SAAEqL,GAAUrL,EAAA,OACtCtC,EAAAA,EAAAA,MAAA,SAAQyN,EAAKvN,SAAA,EACTC,EAAAA,EAAAA,KAACyN,EAAAA,EAAQ,CACLhM,KAAMA,GACNoR,YAAaA,GACblF,MAAO,CAAEC,YAAa,GACtBF,QAASF,IAEZD,IACA,EAETM,qBAAsBA,CAACC,EAAKjM,IAAQiM,IAAQjM,EAC5CkM,YAAcC,IACVhO,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,IACFD,EACJE,MAAOtP,EACPsN,YAAc,UAAmB,OAAVtN,QAAU,IAAVA,OAAU,EAAVA,EAAYH,QAAQ,KAAM,UAKrE,GAGEsX,EAAcA,KAChB7F,GAAgB,EAAM,EAI1B,OACIrQ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEIC,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CACZhC,MAAM,gBACNwC,oBAAkB,EAClBM,YACInD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,gBAAeH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPK,KAAK,QACLJ,QAASA,IAAM+K,EAAW,CAAC,GAAGpL,UAE9BC,EAAAA,EAAAA,KAACwO,EAAAA,EAAY,SAGrBxO,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,UAASH,UACpBC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,QAASA,IAAM8P,GAAgB,GAC/B1P,KAAK,QACTT,UAEIC,EAAAA,EAAAA,KAACgW,EAAAA,EAAS,SAGlBnW,EAAAA,EAAAA,MAAA,UACIU,UAAU,0BACVkK,MAAOiJ,EACPtH,SAAUjE,GAAKwL,EAAWxL,EAAEqC,OAAOC,OAAO1K,SAAA,EAE1CC,EAAAA,EAAAA,KAAA,UAAQyK,MAAM,GAAE1K,SAAC,aAChBmU,EAAczM,QAAOiN,GACgB,YAAlCC,EAAAA,EAAAA,IAAeD,EAAIzV,YACI,iBAAjB,OAAHyV,QAAG,IAAHA,OAAG,EAAHA,EAAK9V,cACTjB,KAAI,CAACmR,EAAKmF,KAAM,IAAAgC,EAAA,OACfjW,EAAAA,EAAAA,KAAA,UAAQyK,MAAU,OAAHqE,QAAG,IAAHA,OAAG,EAAHA,EAAKlQ,WAAWmB,SAAkB,OAAH+O,QAAG,IAAHA,GAAe,QAAZmH,EAAHnH,EAAKlQ,kBAAU,IAAAqX,OAAZ,EAAHA,EAAiBxX,QAAQ,KAAM,MAAxCwV,EAAsD,UAK3GlR,iBAAe,EACfD,kBAAgB,EAChBV,UAAW+R,EACXzW,QAaIgW,EACMQ,EAAczM,QAAOiN,GACnBP,EAASpV,OAAS,GAAKuH,OAAO8N,KAAKD,EAAS,IAAIjD,SAASwD,EAAI9V,cAC/DjB,KAAImR,IAAG,IACFA,EACHvQ,aAAcuQ,EAAIlQ,aAAe8U,EAAUA,EAAU5E,EAAIvQ,iBAE3D2V,EAEVjE,eAAa,EACb3N,eAAcoR,EACdnR,eAAgByC,IAAA,IAAC,IAAEpH,GAAKoH,EAAA,OACpBhF,EAAAA,EAAAA,KAACkC,EAAAA,GAAe,CACZQ,oBAAkB,EAClBS,iBAAkB,GAClBD,eAAgB,GAChBd,WAAW8T,EAAAA,EAAAA,IAAW,OAAHtY,QAAG,IAAHA,OAAG,EAAHA,EAAKsX,aACxBxX,QAASwW,EAAczM,QAClB0O,KAASC,EAAAA,EAAAA,IAAcD,EAAIvX,WAAY8U,MAE9C,KAIV7T,EAAAA,EAAAA,MAACsO,EAAAA,EAAM,CACHxN,KAAM0Q,EACNzQ,QAASmV,EACT3H,SAAS,KAAKC,WAAS,EAAAtO,SAAA,EAEvBF,EAAAA,EAAAA,MAACyO,EAAAA,EAAa,CAAAvO,SAAA,EACVF,EAAAA,EAAAA,MAAA,MAAIU,UAAU,sCAAqCR,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aACNF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,gBAAeH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPK,KAAK,QACLJ,QAASA,IAAM+K,EAAW,CAAC,GAAGpL,UAE9BC,EAAAA,EAAAA,KAACwO,EAAAA,EAAY,SAIrBxO,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CACHtO,QAASA,KACL2V,IACA5C,GAAc5N,IAAG,IACVA,EACH6N,SAAoB,OAAVF,QAAU,IAAVA,OAAU,EAAVA,EAAYK,eACtBD,OAAQJ,EAAWM,aACnBC,UAAW,SACZ,EAEP4C,WAAWrW,EAAAA,EAAAA,KAACsW,EAAAA,EAAM,IAClB9G,QAAQ,WAAUzP,SACrB,kBAITC,EAAAA,EAAAA,KAAA,OAAKO,UAAU,mBAAkBR,UAC7BC,EAAAA,EAAAA,KAAA,SAAOO,UAAU,uBAAsBR,UACnCF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAI2N,MAAO,CAAExO,cAAe,UAAWY,SAAC,UACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACI8D,KAAK,OACL2G,MAAOyI,EAAWK,eAClBnH,SAAUjE,GAAKgL,EAAc,IAAKD,EAAYK,eAAgBpL,EAAEqC,OAAOC,QACvElK,UAAU,mBAKtBV,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAI2N,MAAO,CAAExO,cAAe,UAAWY,SAAC,QACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACI8D,KAAK,OACL2G,MAAOyI,EAAWM,aAClBpH,SAAUjE,GAAKgL,EAAc,IAAKD,EAAYM,aAAcrL,EAAEqC,OAAOC,QACrElK,UAAU,mBAKtBP,EAAAA,EAAAA,KAAA,MAAAD,UACIF,EAAAA,EAAAA,MAAA,MAAI8N,MAAO,CAAExO,cAAe,UAAWY,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIO,UAAU,4CACVoN,MAAO,CAAE4I,QAAS,SAClBzS,KAAK,WACL+R,GAAG,0BACHnI,SAAS0I,EAAAA,EAAAA,IAAclD,EAAWO,UAAW,OAC7CrH,SAAUA,IAAM+G,GAAc5N,IAAG,IAC1BA,EACHkO,WAAW2C,EAAAA,EAAAA,IAAc7Q,EAAIkO,UAAW,OAAS,KAAO,aAGhEzT,EAAAA,EAAAA,KAAA,SAAOwW,QAAQ,0BAA0BjW,UAAU,UAASR,SAAC,oCAQjFF,EAAAA,EAAAA,MAAA,OAAKU,UAAU,oBAAmBR,SAAA,CAC7BmU,EAAcvW,KAAI,CAACI,EAAQmL,KAAE,IAAAK,EAAA,OAC1B1J,EAAAA,EAAAA,MAAA,OAAcU,UAAU,iCAAgCR,SAAA,EACpDC,EAAAA,EAAAA,KAAA,SAAOO,UAAU,YAAWR,SAAQ,OAANhC,QAAM,IAANA,GAAkB,QAAZwL,EAANxL,EAAQa,kBAAU,IAAA2K,OAAZ,EAANA,EAAoB9K,QAAQ,KAAM,OAC/D8M,EAAaxN,KAFRmL,EAGJ,KAEVlJ,EAAAA,EAAAA,KAAA,gBAIRA,EAAAA,EAAAA,KAACyO,EAAAA,EAAa,CAAA1O,UACVC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAM,CAACtO,QAAS2V,EAAYhW,SAAC,iBAIvC,C","sources":["Components/filterableTable2.jsx","Components/tableComp/FilterDialog.jsx","Components/tableComp/ColumnSettingsDialog.jsx","Components/tableComp/tableUtils.js","Components/tableComp/TableActions.jsx","Components/tableComp/useFilteredData.js","Components/tableComp/TableWrapper.jsx","Pages/Inventry/BatchManagement/variable.js","Pages/Inventry/BatchManagement/batchList.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    IconButton,\r\n    Tooltip,\r\n    Button,\r\n    Checkbox,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { FilterAltOff, Settings } from '@mui/icons-material';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nconst FilterDialog = ({\r\n    open,\r\n    onClose,\r\n    columns,\r\n    filters,\r\n    setFilters,\r\n    dataArray,\r\n    setColumnDialog,\r\n}) => {\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prev => ({\r\n            ...prev,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: 'range',\r\n                                ...filters[Field_Name],\r\n                                min: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: 'range',\r\n                                ...filters[Field_Name],\r\n                                max: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: 'date',\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    start: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: 'date',\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    end: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox checked={selected} style={{ marginRight: 8 }} />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n            <DialogContent>\r\n                <h5 className=\"d-flex justify-content-between px-2\">\r\n                    <span>Filters</span>\r\n                    <span>\r\n                        <Tooltip title=\"Column Visibility\">\r\n                            <IconButton size=\"small\" onClick={() => setColumnDialog(true)}>\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Clear Filters\">\r\n                            <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </span>\r\n                </h5>\r\n                <div className=\"border rounded-3\">\r\n                    {columns.map((column, i) => (\r\n                        <div key={i} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                            <label className=\"mt-2 mb-1\">\r\n                                {column.Field_Name?.replace(/_/g, ' ')}\r\n                            </label>\r\n                            {renderFilter(column)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onClose} color=\"error\">\r\n                    Close\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default FilterDialog;\r\n","import {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Card,\r\n    Paper,\r\n    Switch,\r\n    Button\r\n} from '@mui/material';\r\n\r\nconst checkIsNumber = (val) => !isNaN(val) && val !== null && val !== '';\r\n\r\nconst ColumnSettingsDialog = ({\r\n    open,\r\n    onClose,\r\n    columns,\r\n    setColumns,\r\n    originalColumns = []\r\n}) => {\r\n    const handleToggle = (fieldName, checked) => {\r\n        setColumns(prev =>\r\n            prev.map(col =>\r\n                col.Field_Name === fieldName\r\n                    ? { ...col, isVisible: checked ? 1 : 0 }\r\n                    : col\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleOrderChange = (fieldName, value) => {\r\n        setColumns(prev =>\r\n            prev.map(col =>\r\n                col.Field_Name === fieldName\r\n                    ? { ...col, OrderBy: value }\r\n                    : col\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setColumns(originalColumns);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\r\n            <DialogTitle>Column Settings</DialogTitle>\r\n            <DialogContent>\r\n                <div className=\"row\">\r\n                    {columns.map((col, i) => (\r\n                        <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                            <Card\r\n                                component={Paper}\r\n                                className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                            >\r\n                                <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                    <Switch\r\n                                        checked={Boolean(col?.isDefault) || Boolean(col?.isVisible)}\r\n                                        disabled={Boolean(col?.isDefault)}\r\n                                        onChange={(e) =>\r\n                                            handleToggle(col?.Field_Name, e.target.checked)\r\n                                        }\r\n                                    />\r\n                                    <h6 className=\"fa-13 mb-0 fw-bold\">\r\n                                        {col?.Field_Name}\r\n                                    </h6>\r\n                                </div>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={checkIsNumber(col?.OrderBy) ? col?.OrderBy : ''}\r\n                                    onChange={(e) =>\r\n                                        handleOrderChange(col?.Field_Name, e.target.value)\r\n                                    }\r\n                                    className=\"mt-2 p-1 border-0 cus-inpt\"\r\n                                    style={{ width: '80px' }}\r\n                                    placeholder=\"Order\"\r\n                                />\r\n                            </Card>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleReset} variant=\"outlined\">Reset</Button>\r\n                <Button onClick={onClose} color=\"error\">Close</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ColumnSettingsDialog;\r\n","// utils/tableUtils.js\r\n\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport const isEqualNumber = (a, b) => Number(a) === Number(b);\r\n\r\nexport const formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? new Intl.NumberFormat().format(val) : val;\r\n        case 'date':\r\n            return val ? new Date(val).toLocaleDateString() : val;\r\n        case 'time':\r\n            return val ? new Date(val).toLocaleTimeString() : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return '';\r\n    }\r\n};\r\n\r\nexport const preprocessDataForExport = (data, columns) => {\r\n    return data.map(row => {\r\n        const flatRow = {};\r\n        columns.forEach((col, index) => {\r\n            if (col.isVisible || col.Defult_Display) {\r\n                const safeHeader = col.ColumnHeader\r\n                    ? String(col.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                    : `field_${index + 1}`;\r\n                if (col.isCustomCell && col.Cell) {\r\n                    const content = col.Cell({ row });\r\n                    if (typeof content === 'string' || typeof content === 'number') {\r\n                        flatRow[safeHeader] = content;\r\n                    }\r\n                } else {\r\n                    flatRow[safeHeader] = row[col.Field_Name] || '';\r\n                }\r\n            }\r\n        });\r\n        return flatRow;\r\n    });\r\n};\r\n\r\nexport const generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processed = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter(col => col.isVisible || col.Defult_Display)\r\n            .map(col => col.Field_Name || col.ColumnHeader || '');\r\n\r\n        const rows = processed.map(row =>\r\n            headers.map(h => row[h])\r\n        );\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error('PDF Export Error:', e);\r\n    }\r\n};\r\n\r\nexport const exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processed = preprocessDataForExport(dataArray, columns);\r\n        const sheet = XLSX.utils.json_to_sheet(processed);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, sheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error('Excel Export Error:', e);\r\n    }\r\n};\r\n","// components/TableActions.jsx\r\n\r\nimport React from 'react';\r\nimport {\r\n    IconButton,\r\n    Tooltip,\r\n    Popover,\r\n    MenuList,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    ListItemText\r\n} from '@mui/material';\r\nimport {\r\n    MoreVert,\r\n    Download,\r\n    ToggleOff,\r\n    ToggleOn,\r\n    FilterList\r\n} from '@mui/icons-material';\r\nimport { generatePDF, exportToExcel, isEqualNumber } from './tableUtils';\r\n\r\nconst TableActions = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    MenuButtons = [],\r\n    maxHeightOption = false,\r\n    showFullHeight = true,\r\n    setShowFullHeight = () => { },\r\n    enableFilters = false,\r\n    setFilterDialog = () => { }\r\n}) => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => setAnchorEl(event.currentTarget);\r\n    const handleClose = () => setAnchorEl(null);\r\n\r\n    const buttonsData = [\r\n        ...(maxHeightOption\r\n            ? [{\r\n                name: 'Max Height',\r\n                icon: showFullHeight\r\n                    ? <ToggleOn fontSize=\"small\" color=\"primary\" />\r\n                    : <ToggleOff fontSize=\"small\" />,\r\n                onclick: () => setShowFullHeight(prev => !prev),\r\n                disabled: isEqualNumber(dataArray?.length, 0)\r\n            }]\r\n            : []),\r\n        ...(PDFPrintOption\r\n            ? [{\r\n                name: 'PDF Print',\r\n                icon: <Download fontSize=\"small\" color=\"primary\" />,\r\n                onclick: () => generatePDF(dataArray, columns),\r\n                disabled: isEqualNumber(dataArray?.length, 0)\r\n            }]\r\n            : []),\r\n        ...(ExcelPrintOption\r\n            ? [{\r\n                name: 'Excel Print',\r\n                icon: <Download fontSize=\"small\" color=\"primary\" />,\r\n                onclick: () => exportToExcel(dataArray, columns),\r\n                disabled: isEqualNumber(dataArray?.length, 0)\r\n            }]\r\n            : []),\r\n        ...MenuButtons\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Table Options\">\r\n                <IconButton onClick={handleClick} size=\"small\">\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            {enableFilters && (\r\n                <Tooltip title=\"Open Filters\">\r\n                    <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\r\n                        <FilterList />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n\r\n            <Popover\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left'\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left'\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, i) => (\r\n                        <MenuItem\r\n                            key={i}\r\n                            onClick={() => {\r\n                                btn?.onclick && btn.onclick();\r\n                                handleClose();\r\n                            }}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TableActions;\r\n","// hooks/useFilteredData.js\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFilteredData = (originalData, columns) => {\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(originalData || []);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters, originalData, columns]);\r\n\r\n    const applyFilters = () => {\r\n        let data = [...originalData];\r\n\r\n        for (const column of columns) {\r\n            const field = column.Field_Name;\r\n            const filter = filters[field];\r\n\r\n            if (!filter) continue;\r\n\r\n            if (filter.type === 'range') {\r\n                const { min, max } = filter;\r\n                data = data.filter(item => {\r\n                    const val = Number(item[field]);\r\n                    return (min === undefined || val >= min) && (max === undefined || val <= max);\r\n                });\r\n            } else if (filter.type === 'date') {\r\n                const { start, end } = filter.value || {};\r\n                data = data.filter(item => {\r\n                    const val = new Date(item[field]);\r\n                    return (!start || val >= new Date(start)) && (!end || val <= new Date(end));\r\n                });\r\n            } else if (Array.isArray(filter)) {\r\n                data = filter.length\r\n                    ? data.filter(item => filter.includes(item[field]?.toLowerCase()?.trim()))\r\n                    : data;\r\n            }\r\n        }\r\n\r\n        setFilteredData(data);\r\n    };\r\n\r\n    return {\r\n        filters,\r\n        setFilters,\r\n        filteredData\r\n    };\r\n};\r\n\r\nexport default useFilteredData;\r\n","/**\r\n * @typedef {Object} Column\r\n * @property {string} Field_Name\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {string} [ColumnHeader]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n * @property {0|1} [isVisible]\r\n * @property {0|1} [Defult_Display]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {(props: {row: object, Field_Name: string, index: number}) => string} [tdClass]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} TableWrapperProps\r\n * @property {Array<Object>} dataArray\r\n * @property {Array<Column>} columns\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element|Function} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [headerFontSizePx]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {boolean} [enableFilters]\r\n */\r\n\r\nimport React, { useState, useMemo, useEffect, Fragment } from 'react';\r\nimport {\r\n  Paper, Card, TableContainer, Table, TableHead, TableRow,\r\n  TableCell, TableBody, TablePagination, TableSortLabel, IconButton\r\n} from '@mui/material';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';\r\n\r\nimport FilterDialog from './FilterDialog';\r\nimport ColumnSettingsDialog from './ColumnSettingsDialog';\r\nimport TableActions from './TableActions';\r\nimport useFilteredData from './useFilteredData';\r\nimport { isEqualNumber, formatString } from './tableUtils';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TableWrapper = ({\r\n  dataArray = [],\r\n  columns: propsColumns = [],\r\n  onClickFun = null,\r\n  isExpendable = false,\r\n  expandableComp = null,\r\n  tableMaxHeight = 550,\r\n  initialPageCount = 20,\r\n  EnableSerialNumber = false,\r\n  CellSize = 'small',\r\n  disablePagination = false,\r\n  title = '',\r\n  PDFPrintOption = false,\r\n  ExcelPrintOption = false,\r\n  maxHeightOption = false,\r\n  ButtonArea = null,\r\n  MenuButtons = [],\r\n  headerFontSizePx = 13,\r\n  bodyFontSizePx = 13,\r\n  enableFilters = false\r\n}) => {\r\n  const [columns, setColumns] = useState(propsColumns);\r\n  const [filterDialog, setFilterDialog] = useState(false);\r\n  const [columnDialog, setColumnDialog] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n  const [sortCriteria, setSortCriteria] = useState([]);\r\n  const [showFullHeight, setShowFullHeight] = useState(true);\r\n\r\n  const sortedColumns = useMemo(() => {\r\n    return [...columns].sort((a, b) => (a?.OrderBy && b?.OrderBy ? a.OrderBy - b.OrderBy : 0));\r\n  }, [columns]);\r\n\r\n  const visibleColumns = useMemo(() => {\r\n    return sortedColumns.filter(col =>\r\n      isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1)\r\n    );\r\n  }, [sortedColumns]);\r\n\r\n  const {\r\n    filters,\r\n    setFilters,\r\n    filteredData\r\n  } = useFilteredData(dataArray, sortedColumns);\r\n\r\n  const sortedData = useMemo(() => {\r\n    const safeData = Array.isArray(filteredData) ? filteredData : [];\r\n    if (!sortCriteria.length) return safeData;\r\n    return [...safeData].sort((a, b) => {\r\n      for (const { columnId, direction } of sortCriteria) {\r\n        const aValue = a[columnId];\r\n        const bValue = b[columnId];\r\n        if (aValue !== bValue) {\r\n          return direction === 'asc' ? (aValue > bValue ? 1 : -1) : (aValue < bValue ? 1 : -1);\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n  }, [filteredData, sortCriteria]);\r\n\r\n  const paginatedData = useMemo(() => {\r\n    const start = page * rowsPerPage;\r\n    return Array.isArray(sortedData) ? sortedData.slice(start, start + rowsPerPage) : [];\r\n  }, [sortedData, page, rowsPerPage]);\r\n\r\n  const handleSortRequest = (columnId) => {\r\n    const existing = sortCriteria.find(s => s.columnId === columnId);\r\n    if (existing) {\r\n      setSortCriteria(sortCriteria.map(s =>\r\n        s.columnId === columnId\r\n          ? { ...s, direction: s.direction === 'asc' ? 'desc' : 'asc' }\r\n          : s\r\n      ));\r\n    } else {\r\n      setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n    }\r\n  };\r\n\r\n  const RowComponent = ({ row, index }) => {\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    return (\r\n      <Fragment>\r\n        <TableRow>\r\n          {isExpendable && expandableComp && (\r\n            <TableCell sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n              <IconButton size=\"small\" onClick={() => setExpanded(!expanded)}>\r\n                {expanded ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n              </IconButton>\r\n            </TableCell>\r\n          )}\r\n          {EnableSerialNumber && (\r\n            <TableCell sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n              {(rowsPerPage * page) + index + 1}\r\n            </TableCell>\r\n          )}\r\n          {visibleColumns.map((col, i) => (\r\n            <TableCell\r\n              key={i}\r\n              sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n              onClick={() => onClickFun?.(row)}\r\n            >\r\n              {col?.isCustomCell && col?.Cell\r\n                ? col.Cell({ row, Field_Name: col.Field_Name, index })\r\n                : formatString(row[col.Field_Name], col?.Fied_Data)}\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n        {expanded && expandableComp && (\r\n          <TableRow>\r\n            <TableCell colSpan={visibleColumns.length + (EnableSerialNumber ? 1 : 0) + (isExpendable ? 1 : 0)}>\r\n              {expandableComp({ row, index })}\r\n            </TableCell>\r\n          </TableRow>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"rounded-3 bg-white overflow-hidden\" component={Paper}>\r\n      <div className=\"d-flex align-items-center justify-content-between px-3 py-2\">\r\n        <TableActions\r\n          dataArray={filteredData}\r\n          columns={visibleColumns}\r\n          PDFPrintOption={PDFPrintOption}\r\n          ExcelPrintOption={ExcelPrintOption}\r\n          MenuButtons={MenuButtons}\r\n          setShowFullHeight={setShowFullHeight}\r\n          showFullHeight={showFullHeight}\r\n          maxHeightOption={maxHeightOption}\r\n          enableFilters={enableFilters}\r\n          setFilterDialog={setFilterDialog}\r\n        />\r\n        {ButtonArea && ButtonArea}\r\n        {title && <h6 className=\"fw-bold text-muted m-0\">{title}</h6>}\r\n      </div>\r\n\r\n      <TableContainer sx={{ maxHeight: showFullHeight && maxHeightOption ? 'max-content' : tableMaxHeight }}>\r\n        <Table stickyHeader size={CellSize}>\r\n          <TableHead>\r\n            <TableRow>\r\n              {isExpendable && expandableComp && (\r\n                <TableCell sx={{ fontSize: `${headerFontSizePx}px` }}>#</TableCell>\r\n              )}\r\n              {EnableSerialNumber && (\r\n                <TableCell sx={{ fontSize: `${headerFontSizePx}px` }}>SNo</TableCell>\r\n              )}\r\n              {visibleColumns.map((col, i) => {\r\n                const match = sortCriteria.find(c => c.columnId === col.Field_Name);\r\n                return (\r\n                  <TableCell\r\n                    key={i}\r\n                    sx={{ fontSize: `${headerFontSizePx}px` }}\r\n                    sortDirection={match?.direction || false}\r\n                  >\r\n                    <TableSortLabel\r\n                      active={!!match}\r\n                      direction={match?.direction || 'asc'}\r\n                      onClick={() => handleSortRequest(col.Field_Name)}\r\n                    >\r\n                      {col.ColumnHeader || col.Field_Name}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(disablePagination ? sortedData : paginatedData).map((row, i) => (\r\n              <RowComponent key={i} row={row} index={i} />\r\n            ))}\r\n            {!filteredData.length && (\r\n              <TableRow>\r\n                <TableCell colSpan={visibleColumns.length + (EnableSerialNumber ? 1 : 0) + (isExpendable ? 1 : 0)} align=\"center\">\r\n                  No Data\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {!disablePagination && filteredData.length > 0 && (\r\n        <div className=\"p-2 pb-0\">\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredData.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={e => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n            rowsPerPageOptions={[5, 10, 20, 50, 100]}\r\n            labelRowsPerPage=\"Rows per page\"\r\n            showFirstButton\r\n            showLastButton\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {enableFilters && (\r\n        <Fragment>\r\n          <FilterDialog\r\n            open={filterDialog}\r\n            onClose={() => setFilterDialog(false)}\r\n            columns={visibleColumns}\r\n            filters={filters}\r\n            setFilters={setFilters}\r\n            dataArray={dataArray}\r\n            setColumnDialog={setColumnDialog}\r\n          />\r\n          <ColumnSettingsDialog\r\n            open={columnDialog}\r\n            onClose={() => setColumnDialog(false)}\r\n            columns={columns}\r\n            setColumns={setColumns}\r\n            originalColumns={propsColumns}\r\n          />\r\n        </Fragment>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TableWrapper;\r\n\r\nTableWrapper.propTypes = {\r\n  dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onClickFun: PropTypes.func,\r\n  isExpendable: PropTypes.bool,\r\n  expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n  tableMaxHeight: PropTypes.number,\r\n  initialPageCount: PropTypes.number,\r\n  EnableSerialNumber: PropTypes.bool,\r\n  CellSize: PropTypes.oneOf(['small', 'medium', 'large']),\r\n  disablePagination: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  PDFPrintOption: PropTypes.bool,\r\n  ExcelPrintOption: PropTypes.bool,\r\n  maxHeightOption: PropTypes.bool,\r\n  ButtonArea: PropTypes.element,\r\n  MenuButtons: PropTypes.arrayOf(PropTypes.object),\r\n  headerFontSizePx: PropTypes.number,\r\n  bodyFontSizePx: PropTypes.number,\r\n  enableFilters: PropTypes.bool\r\n};\r\n\r\nTableWrapper.defaultProps = {\r\n  onClickFun: null,\r\n  isExpendable: false,\r\n  expandableComp: null,\r\n  tableMaxHeight: 550,\r\n  initialPageCount: 20,\r\n  EnableSerialNumber: false,\r\n  CellSize: 'small',\r\n  disablePagination: false,\r\n  title: undefined,\r\n  PDFPrintOption: false,\r\n  ExcelPrintOption: false,\r\n  maxHeightOption: false,\r\n  ButtonArea: null,\r\n  MenuButtons: [],\r\n  headerFontSizePx: 13,\r\n  bodyFontSizePx: 13,\r\n  enableFilters: false\r\n};","import { getSessionUser, checkIsNumber } from \"../../../Components/functions\";\r\n\r\nconst userDetails = getSessionUser().user;\r\n\r\nexport const batchGeneralInfo = {\r\n    id: '',\r\n    batch: '',\r\n    item_id: '',\r\n    godown_id: '',\r\n    quantity: 0,\r\n    rate: 0,\r\n    created_at: '',\r\n    created_by: checkIsNumber(userDetails?.UserId) ? userDetails?.UserId : '',\r\n}\r\n\r\nexport const batchMasterTransaction = {\r\n    id: '',\r\n    batch_id: '',\r\n    item_id: '',\r\n    godown_id: '',\r\n    quantity: 0,\r\n    type: '',\r\n    reference_id: '',\r\n    created_at: '',\r\n    created_by: checkIsNumber(userDetails?.UserId) ? userDetails?.UserId : '',\r\n}\r\n\r\nexport const batchListingColumns = [\r\n    { Field_Name: 'trans_date', Fied_Data: 'date', ColumnHeader: 'Date' },\r\n    { Field_Name: 'batch', Fied_Data: 'string', ColumnHeader: 'Batch' },\r\n    { Field_Name: 'productNameGet', Fied_Data: 'string', ColumnHeader: 'Product' },\r\n    { Field_Name: 'godownName', Fied_Data: 'string', ColumnHeader: 'Godown' },\r\n    { Field_Name: 'stockDays', Fied_Data: 'number', ColumnHeader: 'Stock Days' },\r\n    { Field_Name: 'pendingQuantity', Fied_Data: 'number', ColumnHeader: 'Available Qty' },\r\n    { Field_Name: 'consumedQuantity', Fied_Data: 'number', ColumnHeader: 'Consumed Qty' },\r\n    { Field_Name: 'totalQuantity', Fied_Data: 'number', ColumnHeader: 'Max Qty' },\r\n]","import { useEffect, useMemo } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { isEqualNumber, filterableText, groupData, Addition, toNumber, Division, ISOString, stringCompare, toArray } from '../../../Components/functions'\r\nimport FilterableTable, { createCol } from '../../../Components/filterableTable2';\r\nimport { Autocomplete, Checkbox, Dialog, DialogContent, DialogActions, Button, IconButton, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, Search } from \"@mui/icons-material\";\r\nimport TableWrapper from \"../../../Components/tableComp/TableWrapper\";\r\nimport { batchListingColumns } from \"./variable\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst BatchListing = ({ loadingOn, loadingOff }) => {\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        FilterFromDate: ISOString(),\r\n        FilterTodate: ISOString(),\r\n        dateBased: 'no',\r\n        filterDialog: false,\r\n    });\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `inventory/batchMaster/stockBalance?\r\n            Fromdate=${dateFilter.Fromdate}&\r\n            Todate=${dateFilter.Todate}&\r\n            dateBased=${dateFilter.dateBased}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) setDataArray(data.data);\r\n            else setDataArray([]);\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [dateFilter.Fromdate, dateFilter.Todate, dateFilter.dateBased]);\r\n\r\n    const propsColumns = batchListingColumns.map((col, colInd) => ({\r\n        isVisible: colInd < 10 ? 1 : 0,\r\n        Field_Name: col?.Field_Name,\r\n        Fied_Data: col?.Fied_Data,\r\n        ColumnHeader: col.ColumnHeader,\r\n        OrderBy: colInd + 1\r\n    }));\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return propsColumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [propsColumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : dataArray;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            const sumKeys = ['Total_Qty', 'pendingQuantity', 'consumedQuantity', 'totalQuantity'];\r\n\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        sumKeys.includes(key)\r\n                            ? grp?.groupedData?.reduce(\r\n                                (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                0\r\n                            )\r\n                            : Division(\r\n                                grp?.groupedData?.reduce(\r\n                                    (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                    0\r\n                                ),\r\n                                grp.groupedData.length\r\n                            )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, dataArray, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of propsColumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilterDialog(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                title=\"Batch Listing\"\r\n                EnableSerialNumber\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto m-1\"\r\n                            value={groupBy}\r\n                            onChange={e => setGroupBy(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Group By</option>\r\n                            {DisplayColumn.filter(fil => (\r\n                                filterableText(fil.Fied_Data) === \"string\"\r\n                                && fil?.Field_Name !== 'Ledger_Name'\r\n                            )).map((col, colInd) => (\r\n                                <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                }\r\n                maxHeightOption\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    //     [\r\n                    //     createCol('trans_date', 'date', 'Date'),\r\n                    //     createCol('batch', 'string', 'Batch'),\r\n                    //     createCol('productNameGet', 'string', 'Product'),\r\n                    //     createCol('godownName', 'string', 'Godown'),\r\n                    //     createCol('stockDays', 'number', 'Stock Days'),\r\n                    //     createCol('pendingQuantity', 'number', 'Available Qty'),\r\n                    //     createCol('consumedQuantity', 'number', 'Consumed Qty'),\r\n                    //     createCol('totalQuantity', 'number', 'Max Qty'),\r\n                    //     // createCol('createdByGet', 'string', 'Created By'),\r\n                    //     // createCol('trans_date', 'date', 'Date'),\r\n                    // ]\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                enableFilters\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(\r\n                            (clm) => !stringCompare(clm.Field_Name, groupBy) \r\n                        )}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Button\r\n                                onClick={() => {\r\n                                    closeDialog();\r\n                                    setDateFilter(pre => ({\r\n                                        ...pre,\r\n                                        Fromdate: dateFilter?.FilterFromDate,\r\n                                        Todate: dateFilter.FilterTodate,\r\n                                        dateBased: 'yes',\r\n                                    }));\r\n                                }}\r\n                                startIcon={<Search />}\r\n                                variant=\"outlined\"\r\n                            >Search</Button>\r\n                        </span>\r\n                    </h5>\r\n\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-bordered\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={dateFilter.FilterFromDate}\r\n                                            onChange={e => setDateFilter({ ...dateFilter, FilterFromDate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={dateFilter.FilterTodate}\r\n                                            onChange={e => setDateFilter({ ...dateFilter, FilterTodate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>\r\n                                        <input\r\n                                            className=\"form-check-input shadow-none pointer mx-2\"\r\n                                            style={{ padding: '0.7em' }}\r\n                                            type=\"checkbox\"\r\n                                            id=\"applyDateFilterCheckBox\"\r\n                                            checked={stringCompare(dateFilter.dateBased, 'yes')}\r\n                                            onChange={() => setDateFilter(pre => ({\r\n                                                ...pre,\r\n                                                dateBased: stringCompare(pre.dateBased, 'yes') ? 'no' : 'yes',\r\n                                            }))}\r\n                                        />\r\n                                        <label htmlFor=\"applyDateFilterCheckBox\" className=\"fw-bold\">Apply Date Filters</label>\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BatchListing"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","filters","setFilters","setColumnDialog","handleFilterChange","prev","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","min","onChange","parseFloat","max","start","_filters$Field_Name4","end","_filters$Field_Name6","distinctValues","item","_item$Field_Name","_item$Field_Name$toLo","trim","Autocomplete","multiple","options","disableCloseOnSelect","newValue","renderOption","props","option","selected","Checkbox","checked","style","marginRight","isOptionEqualToValue","opt","renderInput","params","TextField","label","Dialog","maxWidth","fullWidth","DialogContent","Settings","FilterAltOff","DialogActions","Button","setColumns","originalColumns","DialogTitle","col","Switch","isDefault","handleToggle","fieldName","OrderBy","isNaN","handleOrderChange","width","handleReset","variant","Intl","format","Date","toLocaleDateString","toLocaleTimeString","flatRow","safeHeader","content","enableFilters","setFilterDialog","React","processed","h","sheet","FilterList","useFilteredData","originalData","filteredData","setFilteredData","useEffect","applyFilters","field","isArray","_item$field","_item$field$toLowerCa","includes","TableWrapper","propsColumns","filterDialog","columnDialog","sortedColumns","useMemo","visibleColumns","safeData","RowComponent","expanded","setExpanded","TableActions","match","c","existing","s","_","FilterDialog","ColumnSettingsDialog","userDetails","getSessionUser","user","batchListingColumns","checkIsNumber","UserId","CheckBoxOutlineBlank","checkedIcon","CheckBox","loadingOn","loadingOff","setDataArray","dateFilter","setDateFilter","Fromdate","ISOString","Todate","FilterFromDate","FilterTodate","dateBased","groupBy","setGroupBy","fetchLink","address","then","success","catch","colInd","DisplayColumn","showData","keys","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","sumKeys","fromEntries","_grp$groupedData","_grp$groupedData2","groupedData","reduce","acc","colmn","Addition","toNumber","Division","prevFilters","dateValue","_filters$column$Field","_item$column$Field_Na","id","getOptionLabel","closeDialog","FilterAlt","_col$Field_Name","toArray","clm","stringCompare","startIcon","Search","padding","htmlFor"],"sourceRoot":""}
{"version":3,"file":"static/js/6708.3928c8d1.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/requiredStar.jsx","Components/tablecolumn.js","Components/taxCalculator.js","Pages/Sales/SaleOrder/addItemToCart.jsx","Pages/Sales/SalesInvoice/importFromSaleOrder.jsx","Pages/Sales/SalesInvoice/variable.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","/**\r\n * @param {number} amount \r\n * @param {number} gstRate \r\n * @param {string} type 3 Types add, remove, zerotax\r\n * @returns {object} \r\n */\r\n\r\nimport { toNumber } from \"./functions\";\r\n\r\nexport const calculateGSTDetails = (amount, gstRate, type = 'add') => {\r\n\r\n    const validatedAmount = toNumber(amount);\r\n    const validatedGstRate = toNumber(gstRate);\r\n\r\n    const halfGstRate = validatedGstRate / 2;\r\n    let baseAmount, taxAmount, withTax, withoutTax;\r\n\r\n    if (type === 'zerotax') {\r\n        baseAmount = validatedAmount; // No tax applied\r\n        taxAmount = 0;\r\n        withTax = validatedAmount;\r\n        withoutTax = validatedAmount;\r\n    } else if (type === 'add') {\r\n        taxAmount = (validatedAmount * validatedGstRate) / 100;\r\n        baseAmount = validatedAmount;\r\n        withTax = validatedAmount + taxAmount;\r\n        withoutTax = validatedAmount;\r\n    } else if (type === 'remove') {\r\n        baseAmount = validatedAmount / (1 + validatedGstRate / 100);\r\n        taxAmount = validatedAmount - baseAmount;\r\n        withTax = validatedAmount;\r\n        withoutTax = baseAmount;\r\n    } else {\r\n        throw new Error(\"Invalid type. Use 'add', 'remove', or 'zerotax'.\");\r\n    }\r\n\r\n    const sgstAmount = (taxAmount / 2).toFixed(2);\r\n    const cgstAmount = (taxAmount / 2).toFixed(2);\r\n    const igstAmount = taxAmount.toFixed(2);\r\n\r\n    return {\r\n        base_amount: Number(baseAmount).toFixed(2),\r\n        with_tax: Number(withTax).toFixed(2),\r\n        without_tax: Number(withoutTax).toFixed(2),\r\n        tax_per: Number(validatedGstRate),\r\n        tax_amount: Number(taxAmount).toFixed(2),\r\n        sgst_per: Number(halfGstRate),\r\n        sgst_amount: Number(sgstAmount),\r\n        cgst_per: Number(halfGstRate),\r\n        cgst_amount: Number(cgstAmount),\r\n        igst_per: Number(validatedGstRate),\r\n        igst_amount: Number(igstAmount),\r\n        type,\r\n    };\r\n};","import { useEffect, useState } from \"react\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { checkIsNumber, Division, isEqualNumber, isValidObject, Multiplication, onlynum, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { ClearAll } from \"@mui/icons-material\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport { validStockValue } from \"../SalesInvoice/importFromSaleOrder\";\r\n\r\nconst AddItemToSaleOrderCart = ({\r\n    children,\r\n    orderProducts = [],\r\n    setOrderProducts,\r\n    open = false,\r\n    onClose,\r\n    products = [],\r\n    brands = [],\r\n    uom = [],\r\n    godowns = [],\r\n    GST_Inclusive,\r\n    IS_IGST,\r\n    editValues = null,\r\n    initialValue = {},\r\n    stockInGodown = [],\r\n}) => {\r\n\r\n    const [productDetails, setProductDetails] = useState(initialValue);\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(editValues) && open) {\r\n            setProductDetails(pre => (\r\n                Object.fromEntries(\r\n                    Object.entries(pre).map(([key, value]) => [key, editValues[key] ? editValues[key] : value])\r\n                )\r\n            ))\r\n        }\r\n    }, [editValues])\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const closeDialog = () => {\r\n        setProductDetails(initialValue);\r\n        onClose();\r\n    }\r\n\r\n    const handleProductInputChange = () => {\r\n\r\n        setOrderProducts(pre => {\r\n            const existingProducts = pre.filter(ordered => !isEqualNumber(ordered.Item_Id, productDetails.Item_Id));\r\n\r\n            const currentProductDetails = Object.fromEntries(\r\n                Object.entries(initialValue).map(([key, value]) => {\r\n                    const productMaster = findProductDetails(productDetails.Item_Id);\r\n                    const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                    const isTaxable = gstPercentage > 0;\r\n\r\n                    const { Bill_Qty, Item_Rate, Amount } = productDetails;\r\n\r\n                    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                    const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                    const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                    const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                    const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                    const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                    const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                    switch (key) {\r\n                        case 'Item_Name': return [key, productMaster.Product_Name]\r\n                        case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                        case 'Total_Qty': return [key, Bill_Qty]\r\n                        case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                        case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                        case 'Tax_Rate': return [key, gstPercentage]\r\n                        case 'Cgst':\r\n                        case 'Sgst': return [key, cgstPer ?? 0]\r\n                        case 'Cgst_Amo':\r\n                        case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                        case 'Igst': return [key, igstPer ?? 0]\r\n                        case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                        case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                        default: return [key, productDetails[key] || value]\r\n                    }\r\n                })\r\n            );\r\n\r\n            return [...existingProducts, currentProductDetails];\r\n        });\r\n\r\n        closeDialog();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle className=\"border-bottom\">\r\n                    <span>Add Products Details</span>\r\n                </DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    if (productDetails.Item_Id) {\r\n                        handleProductInputChange();\r\n                    } else {\r\n                        toast.warn('Select Product');\r\n                    }\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row pb-5\">\r\n\r\n                            {/* brand */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Brand</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.BrandID, label: productDetails.Brand }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, BrandID: e.value, Brand: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...brands.map(obj => ({ value: obj?.Brand, label: obj?.Brand_Name }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Brand\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* group */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) =>\r\n                                        setProductDetails((pre) => ({ ...pre, GroupID: e.value, Group: e.label }))\r\n                                    }\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...products\r\n                                            .filter(\r\n                                                (pro) =>\r\n                                                    productDetails.BrandID\r\n                                                        ? isEqualNumber(pro.Brand, productDetails.BrandID)\r\n                                                        : true\r\n                                            )\r\n                                            .reduce((acc, pro) => {\r\n                                                if (\r\n                                                    !acc.some((grp) => grp.value === pro.Product_Group)\r\n                                                ) {\r\n                                                    acc.push({\r\n                                                        value: pro.Product_Group,\r\n                                                        label: pro.Pro_Group,\r\n                                                    });\r\n                                                }\r\n                                                return acc;\r\n                                            }, []),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* item name */}\r\n                            <div className={\r\n                                Object.hasOwn(productDetails, 'GoDown_Id') ? 'col-md-8 p-2' : \"col-12 p-2\"\r\n                            }>\r\n                                <label>Item Name <RequiredStar /></label>\r\n                                <Select\r\n                                    value={{\r\n                                        value: productDetails.Item_Id,\r\n                                        label: (\r\n                                            findProductDetails(productDetails.Item_Id)?.Product_Name\r\n                                        )\r\n                                    }}\r\n                                    isDisabled={checkIsNumber(productDetails.Pre_Id)}\r\n                                    menuPortalTarget={document.body}\r\n                                    onChange={e => {\r\n                                        const productInfo = findProductDetails(e.value);\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n\r\n                                            Group: productInfo.Pro_Group ?? pre.Group,\r\n                                            GroupID: productInfo.Product_Group ?? pre.GroupID,\r\n                                            Brand: productInfo.Brand_Name ?? pre.Brand,\r\n                                            BrandID: productInfo.Brand ?? pre.BrandID,\r\n\r\n                                            Item_Id: e.value,\r\n                                            Item_Rate: productInfo.Item_Rate ?? 0,\r\n                                            Bill_Qty: 0,\r\n                                            Amount: 0,\r\n                                            Unit_Id: productInfo.UOM_Id ?? pre.Unit_Id,\r\n                                            Unit_Name: productInfo.Units ?? pre.Unit_Name,\r\n                                            HSN_Code: productInfo?.HSN_Code\r\n                                        }));\r\n                                    }}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...[\r\n                                            ...products\r\n                                                .filter(pro => productDetails.BrandID ? isEqualNumber(pro.Brand, productDetails.BrandID) : true)\r\n                                                .filter(pro => productDetails.GroupID ? isEqualNumber(pro.Product_Group, productDetails.GroupID) : true)\r\n                                        ].map(obj => ({\r\n                                            value: obj?.Product_Id,\r\n                                            label: obj?.Product_Name,\r\n                                            isDisabled: (\r\n                                                orderProducts.findIndex(ind => isEqualNumber(\r\n                                                    ind?.Item_Id, obj?.Product_Id\r\n                                                ))\r\n                                            ) === -1 ? false : true\r\n                                        }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    required\r\n                                    placeholder={\"Select Product\"}\r\n                                    maxMenuHeight={200}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* godown  */}\r\n                            {Object.hasOwn(productDetails, 'GoDown_Id') && (\r\n                                <div className=\"col-md-4 p-2\">\r\n                                    <label>Godown</label>\r\n                                    <Select\r\n                                        value={{\r\n                                            value: productDetails?.GoDown_Id,\r\n                                            label: godowns.find(g => isEqualNumber(g.Godown_Id, productDetails?.GoDown_Id))?.Godown_Name || ''\r\n                                        }}\r\n                                        onChange={(e) => setProductDetails(pre => ({ ...pre, GoDown_Id: e.value }))}\r\n                                        options={[\r\n                                            { value: '', label: 'select', isDisabled: true },\r\n                                            {\r\n                                                label: 'Stock-Available-Godowns',\r\n                                                options: toArray(godowns).filter(fil => {\r\n                                                    const stockList = toArray(stockInGodown);\r\n\r\n                                                    if (stockList.length === 0) return false;\r\n\r\n                                                    return stockList.some(\r\n                                                        fnd => (\r\n                                                            isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id)\r\n                                                            && isEqualNumber(productDetails?.Item_Id, fnd?.Product_Id)\r\n                                                        )\r\n                                                    )\r\n                                                }).map(obj => ({\r\n                                                    value: obj?.Godown_Id,\r\n                                                    label: obj?.Godown_Name\r\n                                                        + \" (Bal: \"\r\n                                                        + validStockValue(productDetails?.Item_Id, obj?.Godown_Id, stockInGodown)\r\n                                                        + \")\"\r\n                                                }))\r\n                                            },\r\n                                            {\r\n                                                label: 'Other Godowns',\r\n                                                options: toArray(godowns).filter(fil => {\r\n                                                    const stockList = toArray(stockInGodown);\r\n\r\n                                                    if (stockList.length === 0) return true;\r\n\r\n                                                    return !stockList.some(fnd =>\r\n                                                        isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id) &&\r\n                                                        isEqualNumber(productDetails?.Item_Id, fnd?.Product_Id)\r\n                                                    );\r\n                                                }).map(obj => ({\r\n                                                    value: obj?.Godown_Id,\r\n                                                    label: obj?.Godown_Name\r\n                                                }))\r\n                                            }\r\n                                        ]}\r\n                                        styles={customSelectStyles}\r\n                                        isDisabled={!checkIsNumber(productDetails?.Item_Id)}\r\n                                        menuPortalTarget={document.body}\r\n                                        isSearchable={true}\r\n                                        placeholder={\"Select Godown\"}\r\n                                        // maxMenuHeight={200}  \r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* quantity */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Quantity <RequiredStar /></label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Bill_Qty ? productDetails.Bill_Qty : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => {\r\n                                        if (productDetails.Item_Rate) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Amount: Multiplication(productDetails.Item_Rate, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else if (productDetails.Amount) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Item_Rate: Division(pre.Amount, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Bill_Qty: e.target.value,\r\n                                            }));\r\n                                        }\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n                            {Object.hasOwn(productDetails, 'Act_Qty') && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Actual Quantity </label>\r\n                                    <input\r\n                                        value={productDetails.Act_Qty ? productDetails.Act_Qty : ''}\r\n                                        onInput={onlynum}\r\n                                        disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                        onChange={e => setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            Act_Qty: e.target.value,\r\n                                        }))}\r\n                                        required\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Rate */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Rate </label>\r\n                                <input\r\n                                    value={productDetails.Item_Rate ? productDetails.Item_Rate : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Item_Rate: e.target.value,\r\n                                        Amount: pre.Bill_Qty ? Multiplication(e.target.value, pre.Bill_Qty) : pre.Amount\r\n                                    }))}\r\n                                    required\r\n                                    className=\"cus-inpt\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* UOM */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>UOM</label>\r\n                                <select\r\n                                    value={\r\n                                        Object.hasOwn(productDetails, 'UOM') ? productDetails.UOM : \r\n                                        Object.hasOwn(productDetails, 'Unit_Id') ? productDetails.Unit_Id : '' \r\n                                    }\r\n                                    onChange={e => {\r\n                                        const selectedIndex = e.target.selectedIndex;\r\n                                        const label = e.target.options[selectedIndex].text;\r\n                                        const value = e.target.value;\r\n                                        setProductDetails(pre => ({ \r\n                                            ...pre, \r\n                                            UOM: value, \r\n                                            Unit_Id: value, \r\n                                            Units: label,\r\n                                            Unit_Name: label, \r\n                                        }));\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                >\r\n                                    <option value=\"\" disabled>select</option>\r\n                                    {uom.map((o, i) => (\r\n                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            {/* Amount */}\r\n                            <div className=\"col-md-6 p-2\">\r\n                                <label>Amount</label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Amount ? productDetails.Amount : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Amount: e.target.value,\r\n                                        Item_Rate: pre.Bill_Qty ? Division(e.target.value, pre.Bill_Qty) : pre.Item_Rate\r\n                                    }))}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions className=\"d-flex justify-content-between align-items-center\">\r\n                        <Button onClick={() => setProductDetails(initialValue)} type='button' startIcon={<ClearAll />}>Clear</Button>\r\n                        <span>\r\n                            <Button type=\"button\" onClick={closeDialog}>cancel</Button>\r\n                            <Button type='submit' variant=\"outlined\">Add</Button>\r\n                        </span>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddItemToSaleOrderCart;","import { useEffect, useState } from \"react\";\r\nimport { checkIsNumber, isEqualNumber, ISOString, LocalDate, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Done } from \"@mui/icons-material\";\r\nimport { salesInvoiceDetailsInfo, salesInvoiceStaffInfo } from \"./variable\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\nconst validStockValue = (Item_Id, Godown_Id, stockInGodown) => {\r\n    const godownStockValue = toArray(stockInGodown).find(\r\n        godownItem => (\r\n            isEqualNumber(godownItem?.Product_Id, Item_Id) &&\r\n            isEqualNumber(godownItem?.Godown_Id, Godown_Id)\r\n        )\r\n    )?.Act_Bal_Qty;\r\n\r\n    if (\r\n        godownStockValue === null ||\r\n        godownStockValue === undefined ||\r\n        Number.isNaN(godownStockValue) ||\r\n        godownStockValue == 0\r\n    ) {\r\n        return 0;\r\n    }\r\n\r\n    return godownStockValue;\r\n};\r\n\r\nconst AddProductsInSalesInvoice = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    open,\r\n    onClose,\r\n    retailer,\r\n    children,\r\n    selectedItems = [],\r\n    setSelectedItems,\r\n    staffArray = [],\r\n    setStaffArray,\r\n    products = [],\r\n    GST_Inclusive,\r\n    IS_IGST,\r\n    invoiceInfo = {},\r\n    setInvoiceInfo,\r\n    godowns = [],\r\n    stockInGodown = [],\r\n}) => {\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false,\r\n        Godown: { value: '', label: 'Select Godown For Stock Details' }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(retailer) && open) {\r\n            const { Fromdate, Todate } = filters;\r\n            if (loadingOn) loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${retailer}`\r\n            }).then(data => {\r\n                if (data.success) setSaleOrders(data.data);\r\n                else setSaleOrders([]);\r\n            }).catch(e => console.error(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }, [filters.search])\r\n\r\n    const changeSelectedItems = (itemDetail, godownDetails = {}, deleteRow) => {\r\n\r\n        if (deleteRow) {\r\n            setInvoiceInfo(pre => ({ ...pre, So_No: '' }));\r\n            setSelectedItems([])\r\n            return;\r\n        }\r\n\r\n        setInvoiceInfo(pre => ({ ...pre, So_No: Number(itemDetail?.So_Id) }));\r\n\r\n        setSelectedItems(pre => {\r\n            const oldData = [...pre];\r\n            return toArray(itemDetail?.Products_List).map((cur, curIndex) => (\r\n                Object.fromEntries(\r\n                    Object.entries(salesInvoiceDetailsInfo).map(([key, value]) => {\r\n\r\n                        const productMaster = findProductDetails(cur.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Item_Rate, Bill_Qty, Amount } = cur;\r\n\r\n                        const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'S_No': return [key, curIndex + 1 ?? value];\r\n                            case 'Item_Id': return [key, cur['Item_Id'] ?? value];\r\n                            case 'Item_Name': return [key, productMaster?.Product_Name ?? value];\r\n                            case 'Item_Rate': return [key, toNumber(Item_Rate)];\r\n\r\n                            case 'Bill_Qty': return [key, toNumber(Bill_Qty)];\r\n                            case 'Act_Qty': return [key, toNumber(Bill_Qty)];\r\n                            case 'Alt_Act_Qty': return [key, toNumber(Bill_Qty)];\r\n\r\n                            case 'Amount': return [key, Amount];\r\n                            case 'HSN_Code': return [key, productMaster.HSN_Code ?? value];\r\n\r\n                            case 'Unit_Id': return [key, cur['Unit_Id'] ?? value];\r\n                            case 'Act_unit_Id': return [key, cur['Unit_Id'] ?? value];\r\n                            case 'Alt_Act_Unit_Id': return [key, cur['Unit_Id'] ?? value];\r\n                            case 'Unit_Name': return [key, cur['Units'] ?? value];\r\n                            case 'GoDown_Id': {\r\n                                const isValidGodown = checkIsNumber(godownDetails?.Godown_Id);\r\n                                const isValidItem = checkIsNumber(godownDetails?.Item_Id);\r\n                                const isSameItem = isEqualNumber(cur?.Item_Id, godownDetails?.Item_Id);\r\n                                const oldGodown = oldData.find(\r\n                                    fndOld => isEqualNumber(fndOld.Item_Id, cur?.Item_Id)\r\n                                )?.GoDown_Id\r\n\r\n                                const newValue = (isValidGodown && isValidItem && isSameItem)\r\n                                    ? godownDetails.Godown_Id\r\n                                    : checkIsNumber(oldGodown) ? oldGodown : value;\r\n\r\n                                return [key, newValue];\r\n                            }\r\n\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, toNumber(Bill_Qty)]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, value]\r\n                        }\r\n                    })\r\n                )\r\n            ))\r\n        });\r\n\r\n        const notInStaffList = [...new Map(\r\n            toArray(itemDetail?.Staff_Involved_List).filter(\r\n                staff => !staffArray.some(\r\n                    arrObj => isEqualNumber(arrObj.Emp_Id, staff.Involved_Emp_Id)\r\n                )\r\n            ).map(staff => [staff.Involved_Emp_Id, staff])\r\n        ).values()];\r\n\r\n        if (notInStaffList.length > 0) {\r\n            setStaffArray(prevStaffArray => [\r\n                ...prevStaffArray,\r\n                ...notInStaffList.map(staff => Object.fromEntries(\r\n                    Object.entries(salesInvoiceStaffInfo).map(([key, value]) => {\r\n                        switch (key) {\r\n                            case 'Emp_Id': return [key, staff?.Involved_Emp_Id];\r\n                            case 'Emp_Name': return [key, staff?.EmpName];\r\n                            case 'Emp_Type_Id': return [key, staff?.Cost_Center_Type_Id];\r\n                            default: return [key, value];\r\n                        }\r\n                    })\r\n                ))\r\n            ]);\r\n        }\r\n\r\n        // closeDialog();\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        if (onClose) onClose();\r\n        setSaleOrders([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle>\r\n                    <div className=\"d-flex flex-wrap align-items-center \">\r\n                        <span className=\"flex-grow-1\">Select Sale Order</span>\r\n                        <IconButton\r\n                            onClick={closeDialog}\r\n                            color='success'\r\n                        >\r\n                            <Done className=\"fa-20\" />\r\n                        </IconButton>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"d-flex flex-wrap align-items-end\">\r\n                        <div className=\"p-2\">\r\n                            <label className='d-block ms-2'>From Date</label>\r\n                            <input\r\n                                className=\"cus-inpt p-2 w-auto\"\r\n                                type=\"date\"\r\n                                value={filters?.Fromdate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div className=\"p-2\">\r\n                            <label className='d-block ms-2'>To Date</label>\r\n                            <input\r\n                                className=\"cus-inpt p-2 w-auto\"\r\n                                type=\"date\"\r\n                                min={filters.Fromdate}\r\n                                value={filters?.Todate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        {/* <div style={{ minWidth: '170px', maxWidth: '100%' }} className=\"p-2\">\r\n                            <label className='d-block ms-2'>Godown</label>\r\n                            <Select\r\n                                value={filters.Godown}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Godown: e }))}\r\n                                options={[\r\n                                    { value: '', label: 'select', isDisabled: true },\r\n                                    ...toArray(godowns).map(obj => ({ value: obj?.Godown_Id, label: obj?.Godown_Name }))\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder={\"Select Godown\"}\r\n                                maxMenuHeight={200}\r\n                            />\r\n                        </div> */}\r\n                        <div className=\"p-2\">\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                type=\"button\"\r\n                                onClick={() => setFilters(pre => ({ ...pre, search: !pre.search }))}\r\n                            >search</Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    {saleOrders.map((invoice, ind) => {\r\n                        const {\r\n                            So_Inv_No, So_Date, VoucherTypeGet, Branch_Name,\r\n                            Sales_Person_Name, Total_Tax, Total_Invoice_value, Products_List\r\n                        } = invoice;\r\n\r\n                        const isChecked = isEqualNumber(invoiceInfo?.So_No, invoice.So_Id)\r\n\r\n                        return (\r\n                            <div className=\"container-fluid\" key={ind} >\r\n                                <div\r\n                                    className={`\r\n                                        invoice-card bg-white p-4 shadow-sm mb-4 border rounded  \r\n                                        ${isChecked ? ' border-primary ' : ''}\r\n                                        `\r\n                                    }\r\n                                >\r\n                                    {/* Header */}\r\n                                    <h5 className=\"d-flex align-items-center flex-wrap\">\r\n                                        <span className=\"me-2\">\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none pointer\"\r\n                                                style={{ padding: '0.7em' }}\r\n                                                type=\"checkbox\"\r\n                                                checked={isChecked}\r\n                                                onChange={() => {\r\n                                                    if (isChecked) changeSelectedItems(invoice, null, true)\r\n                                                    else changeSelectedItems(invoice, null, false)\r\n                                                }}\r\n                                            />\r\n                                        </span>\r\n                                        <span>Invoice No: <span className=\"text-primary\">{So_Inv_No}</span></span>\r\n                                    </h5>\r\n                                    <div className=\"invoice-header d-flex justify-content-between flex-wrap border-bottom pb-3 mb-3\">\r\n                                        <div>\r\n                                            <div><strong>Invoice Date:</strong> {LocalDate(So_Date)}</div>\r\n                                            <div><strong>Voucher Type:</strong> {VoucherTypeGet}</div>\r\n                                            <div><strong>Branch:</strong> {Branch_Name}</div>\r\n                                        </div>\r\n                                        <div className=\"text-end\">\r\n                                            <h5 className=\"mt-2\"><strong>Total Invoice:</strong> ₹{Total_Invoice_value}</h5>\r\n                                            {/* <div><strong>Subtotal:</strong> ₹{Total_Before_Tax}</div> */}\r\n                                            <div><strong>Tax:</strong> ₹{Total_Tax}</div>\r\n                                            {/* <div><strong>Round Off:</strong> ₹{Round_off}</div> */}\r\n                                            <div><strong>Salesperson:</strong> {Sales_Person_Name}</div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Product Table */}\r\n                                    <div className=\"table-responsive\">\r\n                                        <table className=\"table table-bordered table-striped product-table\">\r\n                                            <thead className=\"table-light\">\r\n                                                <tr>\r\n                                                    {['#', 'Product', 'Qty', 'Rate', 'Amount', 'Tax %', 'Final Amount', 'Godown'].map(\r\n                                                        (o, i) => (\r\n                                                            <th\r\n                                                                key={i}\r\n                                                                style={{\r\n                                                                    minWidth: '150px',\r\n                                                                    maxWidth: '160px'\r\n                                                                }}\r\n                                                            >{o}</th>\r\n                                                        )\r\n                                                    )}\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {Products_List.map((item, index) => (\r\n                                                    <tr key={item.SO_St_Id}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{item.Product_Name}</td>\r\n                                                        <td>\r\n                                                            {item.Bill_Qty}\r\n                                                            {checkIsNumber(filters.Godown.value) && (\r\n                                                                ' (Bal: ' + validStockValue(item.Item_Id, filters.Godown.value, stockInGodown) + ') '\r\n                                                            )}\r\n                                                        </td>\r\n                                                        <td>₹{item.Item_Rate}</td>\r\n                                                        <td>₹{item.Amount}</td>\r\n                                                        <td>{item.Tax_Rate}%</td>\r\n                                                        <td>₹{item.Final_Amo}</td>\r\n                                                        <td>\r\n                                                            <select\r\n                                                                disabled={!isChecked}\r\n                                                                className=\"cus-inpt p-2\"\r\n                                                                value={\r\n                                                                    toArray(godowns).find(\r\n                                                                        godFnd => toArray(selectedItems).find(\r\n                                                                            fnd => (\r\n                                                                                isEqualNumber(fnd.Item_Id, item?.Item_Id)\r\n                                                                                && isChecked\r\n                                                                                && isEqualNumber(godFnd?.Godown_Id, fnd?.GoDown_Id)\r\n                                                                            )\r\n                                                                        )\r\n                                                                    )?.Godown_Id\r\n                                                                }\r\n                                                                onChange={e => changeSelectedItems(\r\n                                                                    invoice,\r\n                                                                    {\r\n                                                                        Godown_Id: e.target.value,\r\n                                                                        Item_Id: item?.Item_Id\r\n                                                                    },\r\n                                                                    false\r\n                                                                )}\r\n                                                            >\r\n                                                                <option value=\"\" disabled>Select</option>\r\n                                                                <optgroup label=\"Stock-Available-Godown\">\r\n                                                                    {\r\n                                                                        toArray(godowns).filter(\r\n                                                                            fil => (\r\n                                                                                toArray(stockInGodown).some(\r\n                                                                                    fnd => (\r\n                                                                                        isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id)\r\n                                                                                        && isEqualNumber(item?.Item_Id, fnd?.Product_Id)\r\n                                                                                    )\r\n                                                                                )\r\n                                                                            )\r\n                                                                        ).map((obj, objInd) => (\r\n                                                                            <option\r\n                                                                                value={obj?.Godown_Id}\r\n                                                                                key={objInd}\r\n                                                                            >\r\n                                                                                {obj?.Godown_Name\r\n                                                                                    + ' (Bal: '\r\n                                                                                    + validStockValue(item?.Item_Id, obj?.Godown_Id, stockInGodown)\r\n                                                                                    + ')'\r\n                                                                                }\r\n                                                                            </option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </optgroup>\r\n                                                                <optgroup label=\"Other-Godown\">\r\n                                                                    {\r\n                                                                        toArray(godowns).filter(\r\n                                                                            fil => !(\r\n                                                                                toArray(stockInGodown).some(\r\n                                                                                    fnd => (\r\n                                                                                        isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id)\r\n                                                                                        && isEqualNumber(item?.Item_Id, fnd?.Product_Id)\r\n                                                                                    )\r\n                                                                                )\r\n                                                                            )\r\n                                                                        ).map((obj, objInd) => (\r\n                                                                            <option value={obj?.Godown_Id} key={objInd}>{obj?.Godown_Name}</option>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </optgroup>\r\n                                                            </select>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n\r\n                                    {/* Summary */}\r\n                                    <div className=\"invoice-summary border-top pt-3 mt-3 text-end\">\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddProductsInSalesInvoice;\r\nexport {\r\n    validStockValue,\r\n}","import { getSessionUser, ISOString } from \"../../../Components/functions\";\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nexport const salesInvoiceGeneralInfo = {\r\n    Do_Id: '',\r\n    Do_No: '',\r\n    Do_Year: '',\r\n    Do_Inv_No: '',\r\n    \r\n    Voucher_Type: '',\r\n    Do_Date: ISOString(),\r\n    Retailer_Id: '',\r\n    Retailer_Name: '',      // for Front-end purpose\r\n    Delivery_Person_Id: '', // not used in sales invoice\r\n    Branch_Id: '',\r\n    GST_Inclusive: 2,\r\n    IS_IGST: 0,\r\n    Narration: '',\r\n    Cancel_status: 1,\r\n    So_No: '',              // SALE ORDER ID (ONE TO MANY INVOICE MAPPING)\r\n    Trans_Type: '',\r\n\r\n    CSGT_Total: 0,\r\n    SGST_Total: 0,\r\n    IGST_Total: 0,\r\n    Total_Expences: 0,\r\n    Round_off: 0,\r\n    Total_Before_Tax: 0,\r\n    Total_Tax: 0,\r\n    Total_Invoice_value: 0,\r\n    Stock_Item_Ledger_Name: '',\r\n\r\n    // Delivery_Status: '',\r\n    // Delivery_Time: '',\r\n    // Delivery_Location: '',\r\n    // Delivery_Latitude: '',\r\n    // Delivery_Longitude: '',\r\n    // Collected_By: '',\r\n    // Collected_Status: '',\r\n    // Payment_Mode: '',\r\n    // Payment_Ref_No: '',\r\n    // Payment_Status: '',\r\n\r\n    Alter_Id: '',\r\n    Created_by: storage?.UserId,\r\n    Altered_by: storage?.UserId,\r\n    Created_on: '',\r\n    Alterd_on: '',\r\n}\r\n\r\n\r\nexport const salesInvoiceDetailsInfo = {\r\n    DO_St_Id: '',\r\n    Do_Date: '',\r\n    Delivery_Order_Id: '',\r\n\r\n    GoDown_Id: '',\r\n    S_No: '',\r\n    Item_Id: '',                // From front-end\r\n    Item_Name: '',\r\n    HSN_Code: '',\r\n    Taxble: '',\r\n\r\n    Bill_Qty: '',               // From front-end\r\n    Act_Qty: '',\r\n    Alt_Act_Qty: '',\r\n    Free_Qty: '',\r\n    Total_Qty: '',\r\n\r\n    Item_Rate: '',              // From front-end\r\n    Taxable_Rate: '',\r\n    Amount: '',                 // From front-end\r\n    \r\n    Unit_Id: '',                // From front-end\r\n    Unit_Name: '',\r\n    Act_unit_Id: '',\r\n    Alt_Act_Unit_Id: '',\r\n    \r\n    Taxable_Amount: '',\r\n    Tax_Rate: '',\r\n\r\n    Cgst: '',\r\n    Sgst: '',\r\n    Igst: '',\r\n    Cgst_Amo: '',\r\n    Sgst_Amo: '',\r\n    Igst_Amo: '',\r\n\r\n    Final_Amo: '',\r\n    Created_on: '',\r\n}\r\n\r\n\r\nexport const salesInvoiceExpencesInfo = {\r\n    Id: '',\r\n    Do_Id: '',\r\n    Sno: '',\r\n    Expense_Id: '',\r\n    Cgst: 0,\r\n    Cgst_Amo: 0,\r\n    Sgst: 0,\r\n    Sgst_Amo: 0,\r\n    Igst: 0,\r\n    Igst_Amo: 0,\r\n    Expence_Value: 0\r\n}\r\n\r\n\r\nexport const salesInvoiceStaffInfo = {\r\n    Id: '',\r\n    Do_Id: '',\r\n    Emp_Id: '',\r\n    Emp_Name: '',       // for Front-end purpose\r\n    Emp_Type_Id: '',\r\n}"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","RequiredStar","style","fontWeight","customTableStyles","table","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","calculateGSTDetails","amount","gstRate","validatedAmount","toNumber","validatedGstRate","halfGstRate","baseAmount","taxAmount","withTax","withoutTax","Error","sgstAmount","toFixed","cgstAmount","igstAmount","base_amount","with_tax","without_tax","tax_per","tax_amount","sgst_per","sgst_amount","cgst_per","cgst_amount","igst_per","igst_amount","_findProductDetails","_godowns$find","orderProducts","setOrderProducts","products","brands","uom","godowns","GST_Inclusive","IS_IGST","editValues","initialValue","stockInGodown","productDetails","setProductDetails","isInclusive","isNotTaxableBill","useEffect","isValidObject","fromEntries","findProductDetails","productid","_products$find","obj","Product_Id","closeDialog","Dialog","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","Item_Id","ordered","productMaster","gstPercentage","Igst_P","Gst_P","isTaxable","Bill_Qty","Item_Rate","Amount","taxType","itemRateGst","gstInfo","cgstPer","igstPer","Cgst_Amo","Igst_Amo","Product_Name","toast","warn","DialogContent","Select","BrandID","label","Brand","onChange","options","isDisabled","Brand_Name","styles","menuPortalTarget","document","isSearchable","placeholder","maxMenuHeight","GroupID","Group","pro","reduce","acc","some","grp","Product_Group","push","Pro_Group","hasOwn","checkIsNumber","Pre_Id","productInfo","_productInfo$Pro_Grou","_productInfo$Product_","_productInfo$Brand_Na","_productInfo$Brand","_productInfo$Item_Rat","_productInfo$UOM_Id","_productInfo$Units","Unit_Id","UOM_Id","Unit_Name","Units","HSN_Code","findIndex","ind","required","GoDown_Id","g","Godown_Id","Godown_Name","toArray","fil","stockList","fnd","validStockValue","onInput","onlynum","Multiplication","Division","min","Act_Qty","UOM","selectedIndex","text","DialogActions","Button","startIcon","ClearAll","_toArray$find","godownStockValue","godownItem","Act_Bal_Qty","isNaN","loadingOn","loadingOff","retailer","selectedItems","setSelectedItems","staffArray","setStaffArray","invoiceInfo","setInvoiceInfo","saleOrders","setSaleOrders","filters","setFilters","Fromdate","ISOString","Todate","search","Godown","fetchLink","then","success","catch","finally","changeSelectedItems","itemDetail","godownDetails","So_No","So_Id","oldData","Products_List","cur","curIndex","salesInvoiceDetailsInfo","_cur$Item_Id","_productMaster$Produc","_productMaster$HSN_Co","_cur$Unit_Id","_cur$Unit_Id2","_cur$Unit_Id3","_cur$Units","_oldData$find","isValidGodown","isValidItem","isSameItem","oldGodown","fndOld","notInStaffList","Map","Staff_Involved_List","staff","arrObj","Emp_Id","Involved_Emp_Id","values","prevStaffArray","salesInvoiceStaffInfo","EmpName","Cost_Center_Type_Id","fullScreen","Done","invoice","So_Inv_No","So_Date","VoucherTypeGet","Branch_Name","Sales_Person_Name","Total_Tax","Total_Invoice_value","isChecked","checked","minWidth","item","_toArray$find2","Tax_Rate","Final_Amo","godFnd","objInd","SO_St_Id","storage","getSessionUser","user","salesInvoiceGeneralInfo","Do_Id","Do_No","Do_Year","Do_Inv_No","Voucher_Type","Do_Date","Retailer_Id","Retailer_Name","Delivery_Person_Id","Branch_Id","Narration","Cancel_status","Trans_Type","CSGT_Total","SGST_Total","IGST_Total","Total_Expences","Round_off","Total_Before_Tax","Stock_Item_Ledger_Name","Alter_Id","Created_by","UserId","Altered_by","Created_on","Alterd_on","DO_St_Id","Delivery_Order_Id","S_No","Item_Name","Taxble","Alt_Act_Qty","Free_Qty","Total_Qty","Taxable_Rate","Act_unit_Id","Alt_Act_Unit_Id","Taxable_Amount","Cgst","Sgst","Igst","Sgst_Amo","salesInvoiceExpencesInfo","Id","Expense_Id","Expence_Value","Emp_Name","Emp_Type_Id"],"sourceRoot":""}
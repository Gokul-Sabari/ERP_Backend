{"version":3,"file":"static/js/4252.69ee28e0.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/XlPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const items = brokerData?.Items || [];\r\n    const totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!packQuantities) return null;\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    function formatSignedNumber(value) {\r\n        const n = Number(value) || 0;\r\n        return `${n >= 0 ? '+' : ''}${NumberFormat(n)}`;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n            <DialogTitle>\r\n                Broker Report: {brokerData?.Broker_Name}\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n\r\n            <DialogContent ref={printRef}>\r\n                <div className=\"text-center mb-3\">\r\n                    <h4>Broker Report Page</h4>\r\n                    <p className=\"mb-0\">Date: {new Date().toLocaleDateString('en-IN')}</p>\r\n                    <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                    {packSizeSummary && (\r\n                        <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                    )}\r\n                </div>\r\n\r\n                <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>PARTY NAME</th>\r\n                            <th>ALIAS NAME</th>\r\n                            <th className=\"text-end\">BILL RATE</th>\r\n                            <th className=\"text-end\">BROKER EXP</th>\r\n                            <th className=\"text-end\">QTY</th>\r\n                            <th className=\"text-end\">KGS</th>\r\n                            <th className=\"text-end\">AMOUNT</th>\r\n                            <th className=\"text-end\">VILAIVAASI</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                <td>{item.Short_Name}</td>\r\n                                <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Brok_Amt || 0)}</td>\r\n                                <td className=\"text-end\">{item.QTY}</td>\r\n                                <td className=\"text-end\">{item.KGS}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                            <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"text-end fw-bold\">{packSizeSummary}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-6 offset-6\">\r\n                        <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">COOLIE</td>\r\n                                    <td className=\"text-end fw-bold\">{NumberFormat(totalCoolie)}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">BROKERAGE</td>\r\n                                    <td className=\"text-end fw-bold\">- {NumberFormat(totalBrokerage)}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                    <td className=\"text-end fw-bold\">- {NumberFormat(vilaivasi)}</td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                    <td className=\"text-end fw-bold\">{formatSignedNumber(roundOff)}</td>\r\n                                </tr>\r\n\r\n                                <tr className=\"bg-light\">\r\n                                    <td className=\"fw-bold\">NET TOTAL</td>\r\n                                    <td className=\"text-end fw-bold\">{NumberFormat(netTotalRounded)}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"text-center mt-3 small\">\r\n                    <p>This is a computer generated report</p>\r\n                </div>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button\r\n                    startIcon={<Download />}\r\n                    variant='contained'\r\n                    color='primary'\r\n                    onClick={handlePrint}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;\r\n","import { useEffect } from 'react';\r\nimport ExcelJS from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst XlPreviewModal = ({ open, onClose, brokerData }) => {\r\n    const items = brokerData?.Items || [];\r\n    const totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n    const formatSignedNumber = (num) => {\r\n        const n = Number(num) || 0;\r\n        return (n >= 0 ? \"+\" : \"\") + n.toLocaleString(\"en-IN\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    };\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            return acc;\r\n        }, {});\r\n        return Object.entries(packQuantities)\r\n            .sort(([a], [b]) => a - b)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`).join(' & ');\r\n    };\r\n\r\n    const handleExportExcel = async () => {\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Broker Report');\r\n\r\n        const thickBlackBorder = {\r\n            style: 'thick',\r\n            color: { argb: 'FF000000' }\r\n        };\r\n\r\n        const cellStyle = {\r\n            border: {\r\n                top: thickBlackBorder,\r\n                bottom: thickBlackBorder,\r\n                left: thickBlackBorder,\r\n                right: thickBlackBorder\r\n            }\r\n        };\r\n\r\n        const titleRow = worksheet.addRow([\r\n            `Broker Report: ${brokerData?.Broker_Name || ''} - Date: ${new Date().toLocaleDateString('en-IN')}`\r\n        ]);\r\n        worksheet.mergeCells(`A${titleRow.number}:H${titleRow.number}`);\r\n        titleRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, size: 14 },\r\n                alignment: { horizontal: 'center' },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const headerRow = worksheet.addRow([\r\n            'PARTY NAME', 'ALIAS NAME', 'BILL RATE', 'BROKER EXP',\r\n            'QTY', 'KGS', 'AMOUNT', 'VILAIVAASI'\r\n        ]);\r\n\r\n        worksheet.columns = [\r\n            { width: 50 }, { width: 30 }, { width: 15 }, { width: 15 },\r\n            { width: 10 }, { width: 10 }, { width: 15 }, { width: 15 }\r\n        ];\r\n\r\n        headerRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 12 },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2F5496' } },\r\n                alignment: { horizontal: 'center', vertical: 'middle' }\r\n            };\r\n        });\r\n\r\n        items.forEach((item, index) => {\r\n            const row = worksheet.addRow([\r\n                item.Retailer_Name || item.Ledger_Name || '',\r\n                item.Short_Name || '',\r\n                item.Item_Rate || '',\r\n                item.Brok_Amt || '',\r\n                item.QTY || '',\r\n                item.KGS || '',\r\n                Number(item.Amount || 0),\r\n                Number(item.Vilaivasi_Rate || 0)\r\n            ]);\r\n\r\n            row.eachCell((cell) => {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { size: 11 },\r\n                    alignment: { vertical: 'middle' },\r\n                    fill: index % 2 === 1 ? { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF2F2F2' } } : undefined\r\n                };\r\n            });\r\n\r\n            row.getCell(7).numFmt = '#,##0.00';\r\n            row.getCell(8).numFmt = '#,##0.00';\r\n        });\r\n\r\n        const totalRow = worksheet.addRow([\r\n            '', '', '', 'TOTAL',\r\n            Number(brokerData?.Total_Qty || 0),\r\n            Number(brokerData?.Total_KGS || 0),\r\n            Number(brokerData?.Total_Amount || 0),\r\n            Number(brokerData?.VilaiVasi || 0)\r\n        ]);\r\n\r\n        totalRow.eachCell((cell, colNumber) => {\r\n            if (colNumber >= 4) {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                    fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF70AD47' } }\r\n                };\r\n                if (colNumber >= 5) {\r\n                    cell.numFmt = colNumber === 5 || colNumber === 6 ? '0.00' : '#,##0.00';\r\n                }\r\n            } else {\r\n                cell.style = cellStyle;\r\n            }\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const packSizesRow = worksheet.addRow([`Pack Sizes: ${getPackSizeSummary()}`]);\r\n        worksheet.mergeCells(`A${packSizesRow.number}:H${packSizesRow.number}`);\r\n        packSizesRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { italic: true },\r\n                alignment: { horizontal: 'left' }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const summaryRows = [\r\n            { label: 'COOLIE', value: Number(totalCoolie) },\r\n            { label: 'BROKERAGE', value: Number(-totalBrokerage) },\r\n            { label: 'VILAIVAASI', value: Number(-vilaivasi) },\r\n            { label: 'ROUNDOFF', value: formatSignedNumber(roundOff) },\r\n            { label: 'NET TOTAL', value: Number(netTotalRounded) }\r\n        ];\r\n\r\n        summaryRows.forEach((rowData) => {\r\n            const row = worksheet.addRow(['', '', '', '', '', rowData.label, rowData.value, '']);\r\n            row.getCell(6).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } },\r\n                alignment: { horizontal: 'right' }\r\n            };\r\n            row.getCell(7).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FF000000' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC000' } },\r\n                alignment: { horizontal: 'right' },\r\n                numFmt: '#,##0.00'\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n        worksheet.addRow([]);\r\n\r\n        const buffer = await workbook.xlsx.writeBuffer();\r\n        saveAs(new Blob([buffer]), `Broker_Report_${brokerData?.Broker_Name || 'Export'}_${new Date().toISOString().slice(0, 10)}.xlsx`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            handleExportExcel().then(() => {\r\n                if (typeof onClose === 'function') {\r\n                    onClose();\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [open]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default XlPreviewModal;\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    Box,\r\n    Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from \"@mui/icons-material/PictureAsPdf\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\nimport XlPreviewModal from \"./XlPreviewModal\";\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [listingPagination, setListingPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n\r\n    const [activeTab, setActiveTab] = useState(0);\r\n\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n\r\n    const [filtersDataEntry, setFiltersDataEntry] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [deliveryReport, setDeliveryReport] = useState([]);\r\n    const [brokerageValues, setBrokerageValues] = useState({});\r\n\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        VilaiVasiZero: { value: \"\", label: \"All\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({\r\n        ledgers: [],\r\n        items: [],\r\n    });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [xlPreviewOpen, setXlPreViewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n    const [xlPreviewData, setXlPreviewData] = useState(null);\r\n    const [headerVilaiVasi, setHeaderVilaiVasi] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const res = await fetchLink({\r\n                    address: `reports/brokerageNakalReport/sales?FromDate=${filtersDataEntry.FromDate}&ToDate=${filtersDataEntry.ToDate}&broker=${filtersDataEntry.Broker.value}`,\r\n                });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDeliveryReport(data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n                    setBrokerageValues(initialBrokerage);\r\n                } else {\r\n                    setDeliveryReport([]);\r\n                    setBrokerageValues({});\r\n                }\r\n            } catch (err) {\r\n                setDeliveryReport([]);\r\n                setBrokerageValues({});\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [filtersDataEntry.refresh]);\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n                let url = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                if (filtersListing.Broker.value)\r\n                    url += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value)\r\n                    url += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value)\r\n                    url += `&item=${filtersListing.Item.value}`;\r\n                if (filtersListing.VilaiVasiZero.value)\r\n                    url += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n                const res = await fetchLink({ address: url });\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n                    const uniqueLedgers = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Ledger_Tally_Id,\r\n                                { value: item.Ledger_Tally_Id, label: item.Ledger_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n                    const uniqueItems = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Product_Id,\r\n                                { value: item.Product_Id, label: item.Product_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n                    setDropdownOptionsListing({\r\n                        ledgers: uniqueLedgers,\r\n                        items: uniqueItems,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh]);\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) =>\r\n        setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) =>\r\n        setDataEntryPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n    const handleListingPageChange = (event, newPage) =>\r\n        setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) =>\r\n        setListingPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n    const handleBrokerageChange = (doId, productId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = `${doId}-${productId}`;\r\n        setBrokerageValues((prev) => ({ ...prev, [key]: value }));\r\n    };\r\n    const handleExpandBroker = (brokerName) =>\r\n        setExpandedBrokers((prev) => ({\r\n            ...prev,\r\n            [brokerName]: !prev[brokerName],\r\n        }));\r\n    const closeDialogDataEntry = () =>\r\n        setFiltersDataEntry((prev) => ({ ...prev, filterDialog: false }));\r\n    const closeDialogListing = () =>\r\n        setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n            const recordsToSave = deliveryReport.map((item) => {\r\n                const brokerageValue =\r\n                    brokerageValues[`${item.Do_Id}-${item.Product_Id}`];\r\n                return {\r\n                    ...item,\r\n                    brokerage: parseFloat(brokerageValue) || 0,\r\n                    Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                    Vilaivasi_Rate:\r\n                        ((parseFloat(brokerageValue) || 0) / 100) *\r\n                        (parseFloat(item.Bill_Qty) || 0),\r\n                    Brok_Rate: item?.Brokerage,\r\n                    Brok_Amt: item?.Brokerage * item?.displayQuantity,\r\n                    Coolie_Rate: item?.Coolie,\r\n                    Coolie_Amt: item?.Coolie * item?.displayQuantity,\r\n                    Amount: item?.Amount,\r\n                    Created_By: storage?.UserId,\r\n                };\r\n            });\r\n            const response = await fetchLink({\r\n                address: \"reports/brokerageNagal/create\",\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n            if (response.success) {\r\n                toast.success(\"Nakal Created successfully!\");\r\n                setFiltersDataEntry((prev) => ({ ...prev, refresh: !prev.refresh }));\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Save failed\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const totalBagsDataEntry = useMemo(\r\n        () =>\r\n            deliveryReport.reduce(\r\n                (acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0),\r\n                0\r\n            ),\r\n        [deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(\r\n        () => dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) =>\r\n        ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n    const handleFieldChange = (idx, fieldName, value) => {\r\n        const updatedDeliveryReport = [...deliveryReport];\r\n        updatedDeliveryReport[idx][fieldName] = parseFloat(value) || 0;\r\n        setDeliveryReport(updatedDeliveryReport);\r\n    };\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || \"Unknown Broker\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n    const brokerNames = useMemo(\r\n        () => Object.keys(groupedByBroker),\r\n        [groupedByBroker]\r\n    );\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Grid\r\n                    container\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                    mb={3}\r\n                >\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Brokerage Nagal Report\r\n                    </Typography>\r\n                    <Box>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={<FilterAlt />}\r\n                            onClick={() =>\r\n                                activeTab === 0\r\n                                    ? setFiltersDataEntry((prev) => ({\r\n                                        ...prev,\r\n                                        filterDialog: true,\r\n                                    }))\r\n                                    : setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        filterDialog: true,\r\n                                    }))\r\n                            }\r\n                            sx={{ mr: 2 }}\r\n                        >\r\n                            Filters\r\n                        </Button>\r\n                        <Typography component=\"span\" variant=\"body1\">\r\n                            Total Bags:{\" \"}\r\n                            <strong>\r\n                                {activeTab === 0 ? totalBagsDataEntry : totalBagsListing}\r\n                            </strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n                {activeTab === 0 && (\r\n                    <Box\r\n                        mb={1}\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"flex-end\",\r\n                            alignItems: \"center\",\r\n                            gap: 2,\r\n                        }}\r\n                    >\r\n                        <Typography sx={{ fontWeight: \"bold\" }}>\r\n                            VilaiVasi (All):\r\n                        </Typography>\r\n                        <TextField\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            value={headerVilaiVasi}\r\n                            inputProps={{ step: \"1\" }}\r\n                            onChange={(e) => {\r\n                                setHeaderVilaiVasi(e.target.value);\r\n                                setBrokerageValues((prev) => {\r\n                                    const updated = { ...prev };\r\n                                    deliveryReport.forEach((item) => {\r\n                                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                        updated[key] = e.target.value;\r\n                                    });\r\n                                    return updated;\r\n                                });\r\n                            }}\r\n                            placeholder=\"Set VilaiVasi for all\"\r\n                            sx={{\r\n                                \"& .MuiInputBase-input\": {\r\n                                    height: 40,\r\n                                    boxSizing: \"border-box\",\r\n                                },\r\n                            }}\r\n                        />\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setHeaderVilaiVasi(\"\");\r\n                                setBrokerageValues((prev) => {\r\n                                    const updated = { ...prev };\r\n                                    deliveryReport.forEach((item) => {\r\n                                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                        updated[key] = \"\";\r\n                                    });\r\n                                    return updated;\r\n                                });\r\n                            }}\r\n                        >\r\n                            Clear All\r\n                        </Button>\r\n                    </Box>\r\n                )}\r\n\r\n                {activeTab === 0 ? (\r\n                    <>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Date\r\n                                        </TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                                            Do No\r\n                                        </TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                                            Product\r\n                                        </TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                                            Ledger_Name\r\n                                        </TableCell>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                                            Broker\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Bill_Qty\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Qty\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Rate\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Pack\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Amount\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Brok.Rate\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Brokerage\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Coolie.Rate\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Coolie.Amt\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Vilaivasi\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Narration\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Vilaivasi Amt\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {deliveryReport\r\n                                        .slice(\r\n                                            dataEntryPagination.page *\r\n                                            dataEntryPagination.rowsPerPage,\r\n                                            dataEntryPagination.page *\r\n                                            dataEntryPagination.rowsPerPage +\r\n                                            dataEntryPagination.rowsPerPage\r\n                                        )\r\n                                        .map((row, idx) => {\r\n                                            const vilaivasiValue =\r\n                                                brokerageValues[`${row.Do_Id}-${row.Product_Id}`] || \"\";\r\n                                            const vilaivasiAmt = calculateVilaivasiAmt(\r\n                                                vilaivasiValue,\r\n                                                row.Bill_Qty\r\n                                            );\r\n                                            return (\r\n                                                <TableRow key={idx} hover>\r\n                                                    <TableCell align=\"left\">\r\n                                                        {row.Date.split(\"T\")[0]}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{row.Do_No || row.Do_Inv_No}</TableCell>\r\n                                                    <TableCell>{row.Product_Name}</TableCell>\r\n                                                    <TableCell>{row.Retailer_Name}</TableCell>\r\n                                                    <TableCell>{row.CostCenterGet}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Bill_Qty}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {row?.displayQuantity}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {row.Rate || row.Item_Rate}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">{row.Pack}</TableCell>\r\n                                                    <TableCell align=\"right\">{row.Amount}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={row.Brokerage}\r\n                                                            onChange={(e) =>\r\n                                                                handleFieldChange(\r\n                                                                    idx,\r\n                                                                    \"Brokerage\",\r\n                                                                    e.target.value\r\n                                                                )\r\n                                                            }\r\n                                                            sx={{ width: \"80px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {row.Brokerage * row.displayQuantity}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={row.Coolie}\r\n                                                            onChange={(e) =>\r\n                                                                handleFieldChange(idx, \"Coolie\", e.target.value)\r\n                                                            }\r\n                                                            sx={{ width: \"80px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {row.Coolie * row.displayQuantity}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <TextField\r\n                                                            size=\"small\"\r\n                                                            type=\"number\"\r\n                                                            value={vilaivasiValue}\r\n                                                            onChange={handleBrokerageChange(\r\n                                                                row.Do_Id,\r\n                                                                row.Product_Id\r\n                                                            )}\r\n                                                            sx={{ width: \"120px\" }}\r\n                                                            inputProps={{ step: \"0.01\" }}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">{row.Narration}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {vilaivasiAmt.toFixed(2)}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={deliveryReport.length}\r\n                                rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                page={dataEntryPagination.page}\r\n                                onPageChange={handleDataEntryPageChange}\r\n                                onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n\r\n                        <Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={handleSave}\r\n                                disabled={saving}\r\n                                size=\"large\"\r\n                            >\r\n                                {saving ? \"Saving...\" : \"Save Brokerage\"}\r\n                            </Button>\r\n                        </Box>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        <TableCell sx={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                                            Broker\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total KGS\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total Bill Qty\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total_Amount\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total_Broker_Exp\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total_VilaiVasi\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Total_Bags\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {brokerNames.length > 0 ? (\r\n                                        brokerNames\r\n                                            .slice(\r\n                                                listingPagination.page * listingPagination.rowsPerPage,\r\n                                                listingPagination.page * listingPagination.rowsPerPage +\r\n                                                listingPagination.rowsPerPage\r\n                                            )\r\n                                            .map((brokerName, idx) => {\r\n                                                const brokerData = dataset.find(\r\n                                                    (item) => item.Broker_Name === brokerName\r\n                                                );\r\n                                                return (\r\n                                                    <React.Fragment key={idx}>\r\n                                                        <TableRow hover>\r\n                                                            <TableCell>\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    onClick={() => handleExpandBroker(brokerName)}\r\n                                                                >\r\n                                                                    {expandedBrokers[brokerName] ? (\r\n                                                                        <KeyboardArrowUp />\r\n                                                                    ) : (\r\n                                                                        <KeyboardArrowDown />\r\n                                                                    )}\r\n                                                                </IconButton>\r\n                                                                {brokerName}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.Total_Qty || \"0.00\"}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.Total_KGS || \"0.00\"}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.Total_Amount || \"0.00\"}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.Broker_Exp || \"0.00\"}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.VilaiVasi || \"0.00\"}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                {brokerData?.Total_Bags || 0}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"right\">\r\n                                                                <Tooltip title=\"Preview PDF\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={() => {\r\n                                                                            setPdfPreviewData(brokerData);\r\n                                                                            setPdfPreviewOpen(true);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <PictureAsPdfIcon />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n\r\n                                                                <Tooltip title=\"Preview Excel\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={() => {\r\n                                                                            setXlPreviewData(brokerData);\r\n                                                                            setXlPreViewOpen(true);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <FileDownloadIcon />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n                                                            </TableCell>\r\n\r\n                                                            <PdfPreviewModal\r\n                                                                open={pdfPreviewOpen}\r\n                                                                onClose={() => setPdfPreviewOpen(false)}\r\n                                                                brokerData={pdfPreviewData}\r\n                                                            />\r\n                                                            <XlPreviewModal\r\n                                                                open={xlPreviewOpen}\r\n                                                                onClose={() => setXlPreViewOpen(false)}\r\n                                                                brokerData={xlPreviewData}\r\n                                                            />\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell style={{ padding: 0 }} colSpan={7}>\r\n                                                                <Collapse\r\n                                                                    in={expandedBrokers[brokerName]}\r\n                                                                    timeout=\"auto\"\r\n                                                                    unmountOnExit\r\n                                                                >\r\n                                                                    <Box margin={1}>\r\n                                                                        <Typography\r\n                                                                            variant=\"h6\"\r\n                                                                            gutterBottom\r\n                                                                            component=\"div\"\r\n                                                                        >\r\n                                                                            Details for {brokerName}\r\n                                                                        </Typography>\r\n                                                                        <Table size=\"small\">\r\n                                                                            <TableHead>\r\n                                                                                <TableRow>\r\n                                                                                    <TableCell>Date</TableCell>\r\n                                                                                    <TableCell>Invoice No</TableCell>\r\n                                                                                    <TableCell>Retailer</TableCell>\r\n                                                                                    <TableCell>Alias</TableCell>\r\n                                                                                    <TableCell>Product</TableCell>\r\n                                                                                    <TableCell>Short Name</TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        QTY\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        KGS\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Amount\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Vilai Vasi\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        Vilai Amt\r\n                                                                                    </TableCell>\r\n                                                                                </TableRow>\r\n                                                                            </TableHead>\r\n                                                                            <TableBody>\r\n                                                                                {brokerData?.Items?.map(\r\n                                                                                    (item, itemIdx) => (\r\n                                                                                        <TableRow key={itemIdx}>\r\n                                                                                            <TableCell>{item.Date}</TableCell>\r\n                                                                                            <TableCell>\r\n                                                                                                {item.Do_Inv_No}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell>\r\n                                                                                                {item.Retailer_Name}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell>\r\n                                                                                                {item.Ledger_Alias}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell>\r\n                                                                                                {item.Product_Name}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell>\r\n                                                                                                {item.Short_Name}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {item.QTY}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {item.KGS}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {item.Amount?.toFixed(2)}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {item.Vilai_Vasi}\r\n                                                                                            </TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {item.Vilai_Vasi}\r\n                                                                                            </TableCell>\r\n                                                                                        </TableRow>\r\n                                                                                    )\r\n                                                                                )}\r\n                                                                            </TableBody>\r\n                                                                        </Table>\r\n                                                                    </Box>\r\n                                                                </Collapse>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={7} align=\"center\">\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={brokerNames.length}\r\n                                rowsPerPage={listingPagination.rowsPerPage}\r\n                                page={listingPagination.page}\r\n                                onPageChange={handleListingPageChange}\r\n                                onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n\r\n            <Dialog\r\n                open={filtersDataEntry.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">Data Entry Filters</Typography>\r\n                        <IconButton onClick={closeDialogDataEntry}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersDataEntry.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersDataEntry((prev) => ({\r\n                                        ...prev,\r\n                                        FromDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersDataEntry.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersDataEntry((prev) => ({\r\n                                        ...prev,\r\n                                        ToDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                        ></Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersDataEntry.Broker}\r\n                                onChange={(selected) =>\r\n                                    setFiltersDataEntry((prev) => ({ ...prev, Broker: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogDataEntry}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setHeaderVilaiVasi(\"\");\r\n\r\n                            setBrokerageValues((prev) => {\r\n                                const updated = { ...prev };\r\n                                deliveryReport.forEach((item) => {\r\n                                    const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                                    updated[key] = \"\";\r\n                                });\r\n                                return updated;\r\n                            });\r\n                            setFiltersDataEntry((prev) => ({\r\n                                ...prev,\r\n                                refresh: !prev.refresh,\r\n                                filterDialog: false,\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">Listing Filters</Typography>\r\n                        <IconButton onClick={closeDialogListing}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        FromDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        ToDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        refresh: !prev.refresh,\r\n                                    }));\r\n                                }}\r\n                                style={{ height: \"30px\", width: \"100%\" }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                value={filtersListing.VilaiVasiZero}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        VilaiVasiZero: selected,\r\n                                    }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"All\" },\r\n                                    { value: \"zero\", label: \"VilaiVasi Zero\" },\r\n                                    { value: \"nonzero\", label: \"VilaiVasi Non-Zero\" },\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                placeholder=\"VilaiVasi Zero/Non-Zero\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Broker: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Ledger: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Ledger\" },\r\n                                    ...dropdownOptionsListing.ledgers,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Item: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Item\" },\r\n                                    ...dropdownOptionsListing.items,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogListing}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setFiltersListing((prev) => ({\r\n                                ...prev,\r\n                                refresh: !prev.refresh,\r\n                                filterDialog: false,\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;\r\n"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","open","onClose","brokerData","printRef","useRef","handlePrint","useReactToPrint","content","current","items","Items","totalBrokerage","reduce","sum","item","parseFloat","Brok_Amt","totalCoolie","Coolie_Amt","totalAmount","Total_Amount","vilaivasi","VilaiVasi","netTotalRaw","netTotalRounded","Math","round","roundOff","packSizeSummary","getPackSizeSummary","packQuantities","acc","packSize","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","join","_jsxs","Dialog","fullWidth","maxWidth","children","DialogTitle","Broker_Name","_jsx","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","toLocaleDateString","index","Retailer_Name","Ledger_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","value","n","Number","formatSignedNumber","DialogActions","Button","startIcon","Download","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","a","b","useEffect","async","workbook","ExcelJS","worksheet","addWorksheet","thickBlackBorder","argb","cellStyle","border","bottom","left","titleRow","addRow","mergeCells","number","eachCell","cell","font","bold","alignment","horizontal","fill","type","pattern","fgColor","headerRow","columns","vertical","forEach","row","undefined","getCell","numFmt","colNumber","packSizesRow","italic","label","rowData","buffer","xlsx","writeBuffer","saveAs","Blob","toISOString","slice","handleExportExcel","then","loadingOn","loadingOff","dataEntryPagination","setDataEntryPagination","useState","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","filtersDataEntry","setFiltersDataEntry","FromDate","split","ToDate","Broker","Ledger","Item","refresh","filterDialog","deliveryReport","setDeliveryReport","brokerageValues","setBrokerageValues","filtersListing","setFiltersListing","VilaiVasiZero","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","xlPreviewOpen","setXlPreViewOpen","pdfPreviewData","setPdfPreviewData","xlPreviewData","setXlPreviewData","headerVilaiVasi","setHeaderVilaiVasi","fetchLink","data","success","prev","toArray","catch","console","error","res","initialBrokerage","key","Do_Id","Product_Id","brokerage","err","fetchData","url","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","Product_Name","e","fetchDatasetAndDropdowns","closeDialogDataEntry","closeDialogListing","totalBagsDataEntry","useMemo","Addition","displayQuantity","Qty","totalBagsListing","Total_Bags","handleFieldChange","idx","fieldName","updatedDeliveryReport","groupedByBroker","length","push","brokerNames","keys","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","FilterAlt","mr","Tabs","onChange","handleTabChange","event","newValue","Tab","display","gap","TextField","inputProps","step","target","updated","placeholder","height","boxSizing","_Fragment","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","vilaivasiValue","vilaivasiAmt","billQty","Bill_Qty","calculateVilaivasiAmt","doId","productId","hover","Do_No","Do_Inv_No","CostCenterGet","Rate","Pack","Brokerage","Coolie","Narration","toFixed","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","parseInt","mt","Save","recordsToSave","brokerageValue","Vilai_Vasi","Brok_Rate","Coolie_Rate","Created_By","UserId","response","method","bodyData","headers","toast","message","disabled","brokerName","_brokerData$Items","find","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Broker_Exp","Tooltip","title","PictureAsPdfIcon","FileDownloadIcon","PdfPreviewModal","XlPreviewModal","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","itemIdx","_item$Amount","Ledger_Alias","handleListingPageChange","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","document","body","isSearchable"],"sourceRoot":""}
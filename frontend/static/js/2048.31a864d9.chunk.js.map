{"version":3,"file":"static/js/2048.31a864d9.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Reports/CRM/itemWise.jsx","Pages/Reports/CRM/liveStock.jsx","Pages/Reports/CRM/ledgerWise.jsx","Pages/Reports/CRM/salesPersonWise.jsx","Pages/Reports/CRM/lolBased.jsx","Pages/Reports/CRM/losBased.jsx","Pages/Reports/CRM/customerClosingStockReport.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, ISOString, LocalDate, Multiplication, NumberFormat, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockItemBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        searchItem: { value: '', label: 'Select Item' }\r\n    })\r\n    const [baseData, setBaseData] = useState({\r\n        itemDropDown: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/soldItems`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            setBaseData(pre => ({\r\n                ...pre,\r\n                itemDropDown: data.data\r\n            }))\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(filters.searchItem.value)) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/itemSearch?Item_Id=${filters.searchItem.value}&Fromdate=${Fromdate}&Todate=${Todate}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReportData(data.data)\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters.searchItem.value, Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.stockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Item Wise ${sumValue ? '( Total: ' + NumberFormat(sumValue) + ' )'  : ''}`}\r\n            EnableSerialNumber\r\n            dataArray={reportData}\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.searchItem}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, searchItem: e }))}\r\n                            options={[\r\n                                { value: '', label: 'select', isDisabled: true },\r\n                                ...baseData.itemDropDown.map(item => ({\r\n                                    value: item.Item_Id,\r\n                                    label: item.Item_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Product\"}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? LocalDate(row?.Do_Date) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? LocalDate(row?.closingDate) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? getDaysBetween(row?.Do_Date, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? getDaysBetween(row?.closingDate, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Quantity',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockQuantityOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Rate',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockRateOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Value',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockValueOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockItemBasedReport","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, isEqualNumber, NumberFormat, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockRetailerBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Live Stock: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            dataArray={\r\n                checkIsNumber(filters.retailer.value)\r\n                    ? reportData.filter(\r\n                        row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n                    )\r\n                    : reportData\r\n            }\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockRetailerBasedReport","import { NumberFormat, Addition } from '../../../Components/functions';\r\nimport FilterableTable, { createCol } from '../../../Components/filterableTable2';\r\nimport { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toArray } from '../../../Components/functions';\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\n\r\nconst LedgerBasedClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [productClosingStock, setProductClosingStock] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        customer: { value: '', label: 'Select Retailer' },\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/whoHasClosingStock`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (filters?.customer.value) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/retailerBased/detailedInfo?Retailer_Id=${filters?.customer.value}&Fromdate=${Fromdate}&Todate=${Todate}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setProductClosingStock(toArray(data?.data));\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters?.customer.value, Fromdate, Todate]);\r\n\r\n    const productBasedColumn = [\r\n        createCol('Product_Name', 'string'),\r\n        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('stockQuantityOfItem', 'number', ' Quantity'),\r\n        createCol('stockRateOfItem', 'number', 'Rate'),\r\n        createCol('stockValueOfItem', 'number', 'Stock-Value'),\r\n    ];\r\n\r\n    const productGroupedColumn = [\r\n        createCol('Brand_Name', 'string', 'Brand'),\r\n        createCol('entryDate', 'string', 'Entry Date'),\r\n        createCol('updateDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('totalQty', 'number', ' Quantity'),\r\n        createCol('totalValue', 'number', 'Stock-Value'),\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                title={\" Stock value: ₹\" + NumberFormat(\r\n                    productClosingStock.reduce(\r\n                        (sum, product) => Addition(sum, product.stockValueOfItem),\r\n                        0\r\n                    )\r\n                )}\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <div style={{ minWidth: '360px', marginRight: '10px' }}>\r\n                            <Select\r\n                                value={filters.customer}\r\n                                onChange={(e) => {\r\n                                    setFilters({ ...filters, customer: e });\r\n                                }}\r\n                                options={[\r\n                                    // { value: '', label: 'All Retailer' },\r\n                                    ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                ]}\r\n                                menuPortalTarget={document.body}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Retailer Name\"}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                dataArray={productClosingStock}\r\n                columns={productBasedColumn}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LedgerBasedClosingStock;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\n\r\n\r\nconst SalesPersonWiseGroupedLedgerClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/salesPersonGrouped?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate])\r\n\r\n    const groupedSalesPersonData = useMemo(() => {\r\n        const data = checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n\r\n        const groupSalesPersonWise = groupData(data, 'salesPerson');\r\n\r\n        return groupSalesPersonWise.map(salesPerson => {\r\n\r\n            const groupedData = toArray(salesPerson?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...salesPerson,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        })\r\n    }, [filters.retailer.value, reportData]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Sales Person Based Total: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            headerFontSizePx={12}\r\n            bodyFontSizePx={12}\r\n            dataArray={groupedSalesPersonData}\r\n            ButtonArea={\r\n                <>\r\n                    {/* <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                        />\r\n                    </div> */}\r\n                    {/* <div className=\"d-flex align-items-center\">\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Fromdate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\">{' to '}</span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Todate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\"></span>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\r\n                        ><Search /></IconButton>\r\n                    </div> */}\r\n                        {/* <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span> */}\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('salesPerson', 'string', 'Sales/Delivery Person'),\r\n                createCol('entries', 'number', 'Party   '),\r\n                createCol('entryDate', 'date', 'Entry Date'),\r\n                createCol('updateDate', 'date', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (\r\n                <FilterableTable\r\n                    headerFontSizePx={12}\r\n                    bodyFontSizePx={12}\r\n                    dataArray={row.groupedData}\r\n                    EnableSerialNumber\r\n                    columns={[\r\n                        createCol('Retailer_Name', 'string', 'Customer'),\r\n                        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                        createCol('entryDays', 'number', 'Entry Days'),\r\n                        createCol('updateDays', 'number', 'Update Days'),\r\n                        createCol('liveStockValue', 'number', 'Stock Value'),\r\n                    ]}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SalesPersonWiseGroupedLedgerClosingStock","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst RetailerClosingWithLOL = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Sales Person', column: \"salesPerson\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Delivery Person', column: \"deliveryPerson\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Ledger Name', column: \"Ledger_Name\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Ledger Alias', column: \"Ledger_Alias\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Party with Brokers', column: \"Actual_Party_Name_with_Brokers\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'Party Name', column: \"Party_Name\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Party Location', column: \"Party_Location\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Party Nature', column: \"Party_Nature\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'Party Group', column: \"Party_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'Ref Brokers', column: \"Ref_Brokers\", isVisible: false, OrderBy: 10 },\r\n        { displayName: 'Ref Owners', column: \"Ref_Owners\", isVisible: false, OrderBy: 11 },\r\n        { displayName: 'Party District', column: \"Party_District\", isVisible: false, OrderBy: 12 },\r\n        { displayName: 'Party Mailing Name', column: \"Party_Mailing_Name\", isVisible: false, OrderBy: 13 }\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false,\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/withLOL?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.retailer.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOL Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Party   '),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Retailer_Name', 'string', 'Customer'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('liveStockValue', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Retailer Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.retailer}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Retailer_Id,\r\n                                                    label: item.Retailer_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Retailer\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RetailerClosingWithLOL;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst LosBasedClosingReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Brand', column: \"Brand_Name\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Stock Item', column: \"Stock_Item\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Group ST', column: \"Group_ST\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Bag', column: \"Bag\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Stock Group', column: \"Stock_Group\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'S Sub Group 1', column: \"S_Sub_Group_1\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Grade Item Group', column: \"Grade_Item_Group\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Item Name Modified', column: \"Item_Name_Modified\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'POS Group', column: \"POS_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'POS Item Name', column: \"POS_Item_Name\", isVisible: false, OrderBy: 10 },\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        product: { value: '', label: 'Search Item' },\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/withLOS?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.product.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Product_Id, filters.product.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.product.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.StockValueOfItem), 0),\r\n                StockQuantityOfItem: groupedData.reduce((acc, item) => Addition(acc, item.StockQuantityOfItem), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.StockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOS Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Items'),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Product_Name', 'string', 'Product'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                            createCol('StockValueOfItem', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Product Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.product}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, product: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Product_Name).localeCompare(String(b?.Product_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Product_Id,\r\n                                                    label: item.Product_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Product\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LosBasedClosingReport;","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport ClosingStockItemBasedReport from './itemWise';\r\nimport ClosingStockRetailerBasedReport from './liveStock';\r\n// import RetailerClosingStock from '../../UserModule/retailer/closingStockRetailerBasedReport';\r\nimport LedgerBasedClosingStock from './ledgerWise';\r\nimport SalesPersonWiseGroupedLedgerClosingStock from './salesPersonWise';\r\nimport RetailerClosingWithLOL from './lolBased';\r\nimport LosBasedClosingReport from './losBased';\r\nimport { getPreviousDate, ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: getPreviousDate(30),\r\n        Todate: ISOString(),\r\n        FilterFromDate: getPreviousDate(30),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ClosingStockItemBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Ledger Wise',\r\n            component: (\r\n                <LedgerBasedClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOL Based',\r\n            component: (\r\n                <RetailerClosingWithLOL\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOS Based',\r\n            component: (\r\n                <LosBasedClosingReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Live Stock',\r\n            component: (\r\n                <ClosingStockRetailerBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Sales Person Based',\r\n            component: (\r\n                <SalesPersonWiseGroupedLedgerClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","loadingOn","loadingOff","Fromdate","Todate","reportData","setReportData","filters","setFilters","searchItem","label","baseData","setBaseData","itemDropDown","useEffect","fetchLink","then","catch","checkIsNumber","success","sumValue","useMemo","reduce","acc","item","Addition","stockValueOfItem","minWidth","Select","menuPortalTarget","document","onChange","options","isDisabled","Item_Id","Item_Name","styles","isSearchable","required","placeholder","Do_Date","closingDate","getDaysBetween","ISOString","_ref5","_ref6","stockQuantityOfItem","_ref7","stockRateOfItem","_ref8","retailer","dataValue","toArray","liveStockValue","Retailer_Id","Retailer_Name","localeCompare","retailers","setRetailers","productClosingStock","setProductClosingStock","customer","productBasedColumn","sum","product","marginRight","obj","reload","groupedSalesPersonData","groupData","salesPerson","groupedData","deliveryDates","party","Latest_Delivery_Date","d","isValidDate","closingDates","Latest_Closing_Date","entryDate","Date","Math","max","updateDate","entryDays","updateDays","groupingColumns","setGroupingColumns","displayName","OrderBy","groupColumn","settingsDialog","groupedArray","lolData","closeDialog","FilterAlt","col","toNumber","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","colKey","stringCompare","colInd","Switch","checked","prevColumns","preCol","DialogActions","Button","Product_Id","StockValueOfItem","StockQuantityOfItem","Product_Name","tabValue","setTabValue","dateFilter","setDateFilter","getPreviousDate","FilterFromDate","FilterTodate","tabData","ClosingStockItemBasedReport","LedgerBasedClosingStock","RetailerClosingWithLOL","LosBasedClosingReport","ClosingStockRetailerBasedReport","SalesPersonWiseGroupedLedgerClosingStock","htmlFor","Search","TabContext","Box","borderColor","TabList","indicatorColor","n","scrollButtons","tab","tabInd","Tab","TabPanel","p","pt"],"sourceRoot":""}
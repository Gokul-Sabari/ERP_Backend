{"version":3,"file":"static/js/1684.4056bbbf.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Attendance/fingerPrintAttendance.jsx","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n            ? '#E2ECF9'\r\n            : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    IconButton,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { ISOString, isValidDate } from \"../../Components/functions\";\r\n// import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Search, Refresh } from \"@mui/icons-material\";\r\n// import { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    Chip,\r\n    Autocomplete,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as XLSX from \"xlsx\";\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst AttendanceNewScreen = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n    const getCurrentMonthYear = () => {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n        return `${year}-${month}`;\r\n    };\r\n\r\n    const initialValue = {\r\n        From: getCurrentMonthYear(),\r\n        To: getCurrentMonthYear(),\r\n        EmpId: \"0\",\r\n        Name: \"ALL\",\r\n    };\r\n    const query = useQuery();\r\n\r\n    const defaultFilters = {\r\n        From: getCurrentMonthYear(),\r\n        To: getCurrentMonthYear(),\r\n    };\r\n\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [viewMode, setViewMode] = useState(\"default\");\r\n    const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const [attendanceData, setAttendanceData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n    const [employees, setEmployees] = useState([]);\r\n    const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n    const userTypeId = storage?.UserTypeId;\r\n    const parseData = storage;\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n    const [filter, setFilter] = useState(initialValue);\r\n    const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setDebouncedFilter(filter);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, [filter]);\r\n\r\n    useEffect(() => {\r\n        const { From, EmpId } = debouncedFilter;\r\n        if (From && (EmpId || EmpId === 0)) {\r\n            fetchAttendanceData(From, EmpId);\r\n            fetchDropdownEmployees();\r\n        }\r\n    }, [debouncedFilter]);\r\n\r\n    const getDaysInMonth = (monthYear) => {\r\n        if (!monthYear) return 0;\r\n\r\n        const [year, month] = monthYear.split(\"-\");\r\n\r\n        return new Date(year, month, 0).getDate();\r\n    };\r\n\r\n    const [filters, setFilters] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Cancel_status: 0,\r\n    });\r\n\r\n    const toggleExpand = (department) => {\r\n        if (expandedDepartment === department) {\r\n            setExpandedDepartment(null);\r\n        } else {\r\n            setExpandedDepartment(department);\r\n        }\r\n    };\r\n    const [departments, setDepartments] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const Add_Rights = contextObj?.Add_Rights;\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        const today = new Date().toISOString().split(\"T\")[0];\r\n        const fromDate = filters.FromDate || today;\r\n        const toDate = filters.ToDate || today;\r\n\r\n        fetchLink({\r\n            address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSaleOrders(data?.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    }, [reload]);\r\n\r\n    const handleFromChange = (e) => {\r\n        const getDaysInMonth = (monthYear) => {\r\n            if (!monthYear) return 0;\r\n\r\n            const [year, month] = monthYear.split(\"-\");\r\n\r\n            return new Date(year, month, 0).getDate();\r\n        };\r\n        const selectedMonth = e.target.value;\r\n        const [year, month] = selectedMonth.split(\"-\");\r\n        const startDate = `${year}-${month}-01`;\r\n        const dayCount = getDaysInMonth(`${year}-${month}`);\r\n        const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n        setFilter({\r\n            From: startDate,\r\n            To: endDate,\r\n            EmpId: filter.EmpId || 0,\r\n            Name: filter?.Name,\r\n        });\r\n    };\r\n\r\n    const handleSummaryDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n\r\n            if (response.success) {\r\n                const overallData = response.data;\r\n                const getWorkingDays = (fromDate, endDate) => {\r\n                    const allDays = [];\r\n                    const currentDate = new Date(fromDate);\r\n                    const endDateObj = new Date(endDate);\r\n                    let sundayCount = 0;\r\n\r\n                    while (currentDate <= endDateObj) {\r\n                        const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n                        allDays.push(dateStr);\r\n\r\n                        if (currentDate.getDay() === 0) {\r\n                            sundayCount++;\r\n                        }\r\n\r\n                        currentDate.setDate(currentDate.getDate() + 1);\r\n                    }\r\n\r\n                    if (allDays.length === 0) {\r\n                        allDays.push(\"No days in this range\");\r\n                    }\r\n\r\n                    return {\r\n                        days: allDays,\r\n                        sundayCount,\r\n                        totalDays: allDays.length,\r\n                    };\r\n                };\r\n\r\n                const {\r\n                    days: dateRange,\r\n                    sundayCount,\r\n                    totalDays,\r\n                } = getWorkingDays(startDate, endDate);\r\n\r\n                let totalWorkingDaysSummary = 0;\r\n                let totalLeaveDaysSummary = 0;\r\n\r\n                const summaryData = overallData.map((row) => {\r\n                    const punchDetails = row.AttendanceDetails\r\n                        ? JSON.parse(row.AttendanceDetails)\r\n                        : [];\r\n                    let totalWorkingDays = 0;\r\n                    let totalLeaveDays = 0;\r\n\r\n                    dateRange.forEach((date) => {\r\n                        if (Array.isArray(punchDetails)) {\r\n                            const detail = punchDetails.find(\r\n                                (detail) => detail.Date === date\r\n                            );\r\n\r\n                            const isSunday = new Date(date).getDay() === 0;\r\n\r\n                            if (isSunday) {\r\n                                return;\r\n                            }\r\n\r\n                            if (detail) {\r\n                                if (detail.AttendanceStatus === \"P\") {\r\n                                    totalWorkingDays++;\r\n                                } else if (\r\n                                    detail.AttendanceStatus === \"A\" ||\r\n                                    detail.AttendanceStatus === \"H\"\r\n                                ) {\r\n                                    totalLeaveDays++;\r\n                                }\r\n                            } else {\r\n                                totalLeaveDays++;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    totalWorkingDaysSummary += totalWorkingDays;\r\n                    totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n                    return {\r\n                        EmployeeName: row.Name,\r\n                        EmployeeID: row.EmployeeID,\r\n                        Month: `${month}-${year}`,\r\n                        Branch: row.Branch,\r\n                        NumberOfSundays: sundayCount,\r\n                        NumberOfDaysInMonth: totalDays,\r\n                        TotalWorkingDays: totalWorkingDays,\r\n                        TotalLeaveDays: totalLeaveDays,\r\n                    };\r\n                });\r\n\r\n                const exportData = summaryData.map((item) => ({\r\n                    EmployeeName: item.EmployeeName,\r\n                    EmployeeID: item.EmployeeID,\r\n                    Month: item.Month,\r\n                    Branch: item.Branch,\r\n                    NumberOfSundays: item.NumberOfSundays,\r\n                    NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n                    TotalWorkingDays: item.TotalWorkingDays,\r\n                    TotalLeaveDays: item.TotalLeaveDays,\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n                const headers = [\r\n                    \"EmployeeName\",\r\n                    \"EmployeeID\",\r\n                    \"Month\",\r\n                    \"Branch\",\r\n                    \"NumberOfSundays\",\r\n                    \"NumberOfDaysInMonth\",\r\n                    \"TotalWorkingDays\",\r\n                    \"TotalLeaveDays\",\r\n                ];\r\n\r\n                XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n                XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error downloading overall report:\", error);\r\n        }\r\n    };\r\n    const handleDownload = () => {\r\n        const maxPunches = 4;\r\n\r\n        const exportData = attendanceData.map((row) => {\r\n            const punchDetails = row.AttendanceDetails\r\n                ? row.AttendanceDetails.split(\",\").filter((p) => p.trim() !== \"\")\r\n                : [];\r\n\r\n            let attendanceStatus = row.AttendanceStatus;\r\n\r\n            if (!attendanceStatus) {\r\n                attendanceStatus = punchDetails.length === 0 ? \"A\" : \"P\";\r\n            }\r\n\r\n            const punchColumns = {};\r\n            for (let i = 0; i < maxPunches; i++) {\r\n                punchColumns[`Punch${i + 1}`] = punchDetails[i]\r\n                    ? punchDetails[i].trim()\r\n                    : \"--\";\r\n            }\r\n\r\n            return {\r\n                Employee: row.username || row.Employee,\r\n                \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                \"Attendance Status\": attendanceStatus,\r\n                ...punchColumns,\r\n            };\r\n        });\r\n\r\n        const columnsOrder = [\r\n            \"Employee\",\r\n            \"Log Date\",\r\n            \"Attendance Status\",\r\n            \"Punch1\",\r\n            \"Punch2\",\r\n            \"Punch3\",\r\n            \"Punch4\",\r\n        ];\r\n\r\n        const reorderedData = exportData.map((row) =>\r\n            columnsOrder.reduce((acc, col) => {\r\n                acc[col] = row[col] || \"--\";\r\n                return acc;\r\n            }, {})\r\n        );\r\n\r\n        const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n        XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n    };\r\n\r\n    const MAX_PUNCHES = 6;\r\n\r\n    function formatToAmPm(timeString) {\r\n        if (!timeString) return \"--\";\r\n        const [hourStr, minuteStr] = timeString.split(\":\");\r\n        if (!hourStr || !minuteStr) return \"--\";\r\n\r\n        let hour = parseInt(hourStr, 10);\r\n        const minute = minuteStr;\r\n        const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n        hour = hour % 12 || 12;\r\n\r\n        return `${hour.toString().padStart(2, \"0\")}:${minute} ${ampm}`;\r\n    }\r\n\r\n    const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n        isCustomCell: true,\r\n        ColumnHeader: `Punch ${index + 1}`,\r\n        isVisible: 1,\r\n        width: \"13%\",\r\n        CellProps: {\r\n            sx: {\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                padding: \"10px\",\r\n            },\r\n        },\r\n        Cell: ({ row }) => {\r\n            const punches = row.AttendanceDetails\r\n                ? row.AttendanceDetails.split(\",\")\r\n                    .map((p) => p.trim())\r\n                    .filter((p) => p !== \"\")\r\n                : [];\r\n\r\n            const punch = punches[index] || \"--\";\r\n            const rawTime = punch.split(\":in(\")[0];\r\n            const formattedTime = punch !== \"--\" ? formatToAmPm(rawTime) : \"--\";\r\n\r\n            return formattedTime !== \"--\" ? (\r\n                <Chip\r\n                    label={formattedTime}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    sx={{ color: \"green\", margin: \"2px\" }}\r\n                />\r\n            ) : (\r\n                <div style={{ color: \"gray\" }}>--</div>\r\n            );\r\n        },\r\n    }));\r\n\r\n    const formatAttendanceDate = (logDateTime) => {\r\n        if (!logDateTime) return \"--\";\r\n        const [date] = logDateTime.split(\"T\");\r\n        return `${date} `;\r\n    };\r\n\r\n    const handleOverallDownload = async () => {\r\n        try {\r\n            const fromDate = filter.From;\r\n            const [year, month] = fromDate.split(\"-\");\r\n            const startDate = `${year}-${month}-01`;\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const [attendanceRes, leaveRes] = await Promise.all([\r\n                fetchLink({\r\n                    address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n                }),\r\n                fetchLink({\r\n                    address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n                }),\r\n            ]);\r\n\r\n            if (!attendanceRes.success) throw new Error(\"Attendance data failed\");\r\n\r\n            const leaveMap = {};\r\n            (leaveRes?.data || []).forEach((leave) => {\r\n                if (leave.Status?.toUpperCase() !== \"APPROVED\") return;\r\n\r\n                const userId = leave.User_Id;\r\n                if (!userId) return;\r\n\r\n                const parseDate = (dateStr) => {\r\n                    try {\r\n                        return new Date(\r\n                            dateStr.includes(\"T\") ? dateStr.split(\"T\")[0] : dateStr\r\n                        );\r\n                    } catch {\r\n                        return null;\r\n                    }\r\n                };\r\n\r\n                const leaveStart = parseDate(leave.FromDate);\r\n                const leaveEnd = parseDate(leave.ToDate);\r\n                if (!leaveStart || !leaveEnd) return;\r\n\r\n                let current = new Date(leaveStart);\r\n                while (current <= leaveEnd) {\r\n                    const dateStr = current.toISOString().split(\"T\")[0];\r\n                    if (!leaveMap[userId]) leaveMap[userId] = {};\r\n                    leaveMap[userId][dateStr] = true;\r\n                    current.setDate(current.getDate() + 1);\r\n                }\r\n            });\r\n\r\n            const { days: dateRange } = getDateRange(startDate, endDate);\r\n            const exportData = attendanceRes.data.map((emp) => {\r\n                const attendanceDetails = tryParseJSON(emp.AttendanceDetails) || [];\r\n                const dailyStatus = {};\r\n                let presentCount = 0;\r\n\r\n                const attendanceLookup = {};\r\n                attendanceDetails.forEach((record) => {\r\n                    if (record?.Date) {\r\n                        attendanceLookup[record.Date] = {\r\n                            status: record.AttendanceStatus,\r\n                            hasPunch: record.Punch1 !== \"[]\",\r\n                        };\r\n                    }\r\n                });\r\n\r\n                dateRange.forEach((date, index) => {\r\n                    const dayNum = index + 1;\r\n                    const dayKey = `Day ${dayNum}`;\r\n                    const isSunday = new Date(date).getDay() === 0;\r\n                    const userId = emp.User_Mgt_Id;\r\n                    const attendanceRecord = attendanceLookup[date];\r\n                    const attendanceStatus = attendanceRecord?.status;\r\n                    const hasPunch = attendanceRecord?.hasPunch;\r\n\r\n                    if (isSunday) {\r\n                        dailyStatus[dayKey] = \"H\";\r\n                    } else if (userId && leaveMap[userId]?.[date]) {\r\n                        dailyStatus[dayKey] = \"L\";\r\n                    } else if (attendanceStatus === \"L\") {\r\n                        dailyStatus[dayKey] = \"L\";\r\n                    } else if (attendanceStatus === \"P\") {\r\n                        dailyStatus[dayKey] = hasPunch ? \"P\" : \"A\";\r\n                        if (hasPunch) presentCount++;\r\n                    } else if (attendanceStatus === \"H\") {\r\n                        dailyStatus[dayKey] = \"H\";\r\n                    } else {\r\n                        dailyStatus[dayKey] = \"A\";\r\n                    }\r\n                });\r\n\r\n                return {\r\n                    EmployeeName: emp.username || emp.Name,\r\n                    TotalPresent: presentCount,\r\n                    ...dailyStatus,\r\n                };\r\n            });\r\n\r\n            const headers = [\r\n                \"EmployeeName\",\r\n                \"TotalPresent\",\r\n                ...dateRange.map((_, i) => `Day ${i + 1}`),\r\n            ];\r\n            const ws = XLSX.utils.json_to_sheet(exportData);\r\n            XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n            const wb = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n            XLSX.writeFile(wb, `Attendance_Report_${month}_${year}.xlsx`);\r\n        } catch (error) {\r\n            console.error(\"Download failed:\", error);\r\n            toast.error(\"Failed to generate report\");\r\n        }\r\n    };\r\n\r\n    function getDateRange(start, end) {\r\n        const dates = [];\r\n        const current = new Date(start);\r\n        const endDate = new Date(end);\r\n\r\n        while (current <= endDate) {\r\n            dates.push(current.toISOString().split(\"T\")[0]);\r\n            current.setDate(current.getDate() + 1);\r\n        }\r\n\r\n        return { days: dates, count: dates.length };\r\n    }\r\n\r\n    function tryParseJSON(jsonString) {\r\n        try {\r\n            return jsonString ? JSON.parse(jsonString) : [];\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    const handleOverallWithPunch = async () => {\r\n        try {\r\n            const maxPunches = 6;\r\n\r\n            const firstLogDate = attendanceData[0]?.LogDate;\r\n            if (!firstLogDate) {\r\n                toast.error(\"No attendance data found\");\r\n                return;\r\n            }\r\n\r\n            const dateObj = new Date(firstLogDate);\r\n            const year = dateObj.getFullYear();\r\n            const month = dateObj.getMonth() + 1;\r\n            const startDate = `${year}-${month.toString().padStart(2, \"0\")}-01`;\r\n            const endDate = new Date(year, month, 0).toISOString().split(\"T\")[0];\r\n\r\n            const leaveResponse = await fetchLink({\r\n                address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n            });\r\n            const leaveData = leaveResponse?.success ? leaveResponse.data : [];\r\n\r\n            const leaveMap = {};\r\n            leaveData.forEach((leave) => {\r\n                // Case-insensitive status check\r\n                if (leave.Status?.toLowerCase() !== \"approved\") return;\r\n\r\n                const userId = String(leave.User_Id);\r\n                if (!userId) return;\r\n\r\n                const parseDate = (dateStr) => {\r\n                    const parts = dateStr.split(/[-/]/);\r\n                    if (parts.length === 3) {\r\n                        if (parts[2].length === 4) {\r\n                            return parts[0].length === 2\r\n                                ? new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)\r\n                                : new Date(`${parts[2]}-${parts[0]}-${parts[1]}`);\r\n                        }\r\n\r\n                        return new Date(dateStr);\r\n                    }\r\n                    return new Date(dateStr);\r\n                };\r\n\r\n                const leaveStart = parseDate(leave.FromDate);\r\n                const leaveEnd = parseDate(leave.ToDate);\r\n\r\n                let currentDate = new Date(leaveStart);\r\n\r\n                while (currentDate <= leaveEnd) {\r\n                    const dateStr = currentDate.toISOString().split(\"T\")[0];\r\n                    if (!leaveMap[userId]) leaveMap[userId] = {};\r\n\r\n                    if (currentDate.getDay() !== 0) {\r\n                        leaveMap[userId][dateStr] = \"L\";\r\n                    }\r\n                    currentDate.setDate(currentDate.getDate() + 1);\r\n                }\r\n            });\r\n\r\n            const filteredAttendanceData = attendanceData.filter((row) =>\r\n                selectedEmployees.some(\r\n                    (user) =>\r\n                        String(user.UserId) === String(row.User_Mgt_Id) ||\r\n                        user.UserId === \"ALL\"\r\n                )\r\n            );\r\n\r\n            const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n                acc[row.username] = acc[row.username] || [];\r\n                acc[row.username].push(row);\r\n                return acc;\r\n            }, {});\r\n\r\n            if (Object.keys(groupedData).length === 0) {\r\n                toast.error(\"No attendance data found\");\r\n                return;\r\n            }\r\n\r\n            const wb = XLSX.utils.book_new();\r\n\r\n            Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n                const exportData = userAttendance.map((row) => {\r\n                    const logDate = new Date(row.LogDate);\r\n                    const dateStr = logDate.toISOString().split(\"T\")[0];\r\n                    const isSunday = logDate.getDay() === 0;\r\n\r\n                    const userId = String(row.User_Mgt_Id);\r\n                    const hasApprovedLeave = leaveMap[userId]?.[dateStr] === \"L\";\r\n\r\n                    let attendanceStatus;\r\n                    if (isSunday) {\r\n                        attendanceStatus = \"H\";\r\n                    } else if (hasApprovedLeave) {\r\n                        attendanceStatus = \"L\";\r\n                    } else {\r\n                        const punches =\r\n                            row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n                        attendanceStatus = punches.some((p) => p && p !== \"--\") ? \"P\" : \"A\";\r\n                    }\r\n\r\n                    const punchColumns = {};\r\n                    const punches =\r\n                        row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n                    for (let i = 0; i < maxPunches; i++) {\r\n                        punchColumns[`Punch ${i + 1}`] = punches[i] || \"--\";\r\n                    }\r\n\r\n                    return {\r\n                        Employee: username,\r\n                        \"Log Date\": formatAttendanceDate(row.LogDate),\r\n                        \"Attendance Status\": attendanceStatus,\r\n                        ...punchColumns,\r\n                    };\r\n                });\r\n\r\n                const columnsOrder = [\r\n                    \"Employee\",\r\n                    \"Log Date\",\r\n                    \"Attendance Status\",\r\n                    ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n                ];\r\n\r\n                const reorderedData = exportData.map((row) =>\r\n                    columnsOrder.reduce((acc, col) => {\r\n                        acc[col] = row[col] || \"--\";\r\n                        return acc;\r\n                    }, {})\r\n                );\r\n\r\n                XLSX.utils.book_append_sheet(\r\n                    wb,\r\n                    XLSX.utils.json_to_sheet(reorderedData),\r\n                    username.slice(0, 31)\r\n                );\r\n            });\r\n\r\n            const fileName = `Attendance_Report_${new Date().toLocaleString(\r\n                \"default\",\r\n                { month: \"long\" }\r\n            )}_${year}.xlsx`;\r\n            XLSX.writeFile(wb, fileName);\r\n        } catch (error) {\r\n            console.error(\"Error generating report:\", error);\r\n            toast.error(\"Failed to generate report\");\r\n        }\r\n    };\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    let filteredEmployees = [];\r\n\r\n                    if (\r\n                        Number(userTypeId) === 1 ||\r\n                        Number(userTypeId) === 0 ||\r\n                        Number(Add_Rights) === 1\r\n                    ) {\r\n                        filteredEmployees = data.data;\r\n                        setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n                        setIsDropdownDisabled(false);\r\n                        setDropdownPlaceholder(\"ALL\");\r\n                    } else {\r\n                        filteredEmployees = data.data.filter(\r\n                            (employee) => employee.UserId === userId\r\n                        );\r\n                        setFilter((prev) => ({\r\n                            ...prev,\r\n                            EmpId: userId,\r\n                            Name: storage?.Name,\r\n                        }));\r\n                        setIsDropdownDisabled(true);\r\n                        setDropdownPlaceholder(storage?.Name);\r\n                    }\r\n\r\n                    setEmployees(filteredEmployees);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching employees:\", e));\r\n    }, [\r\n        storage?.UserTypeId,\r\n        storage?.UserId,\r\n        storage?.Company_id,\r\n        storage?.Name,\r\n        reload,\r\n    ]);\r\n\r\n    const fetchAttendanceData = async (From, EmpId) => {\r\n        try {\r\n            const userTypeId = storage?.UserTypeId;\r\n            const [year, month] = From.split(\"-\");\r\n\r\n            const startDate = `${year}-${month}-01`;\r\n\r\n            const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n            const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n            const response = await fetchLink({\r\n                address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                setAttendanceData(response.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Error fetching attendance data:\", e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            FromDate:\r\n                query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n                    ? query.get(\"FromDate\")\r\n                    : defaultFilters.Fromdate,\r\n            ToDate:\r\n                query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n                    ? query.get(\"ToDate\")\r\n                    : defaultFilters.Todate,\r\n        };\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            FromDate: queryFilters.FromDate,\r\n            ToDate: queryFilters.ToDate,\r\n        }));\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        const FromDate =\r\n            stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n                ? ISOString(stateDetails?.FromDate)\r\n                : null;\r\n        const ToDate =\r\n            stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n                ? ISOString(stateDetails?.ToDate)\r\n                : null;\r\n        if (FromDate && ToDate) {\r\n            updateQueryString({ FromDate, ToDate });\r\n            setFilters((pre) => ({\r\n                ...pre,\r\n                FromDate: ISOString(stateDetails.FromDate),\r\n                ToDate: stateDetails.ToDate,\r\n            }));\r\n            setReload((pre) => !pre);\r\n        }\r\n    }, [stateDetails]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n    };\r\n\r\n    const data = () => setViewMode(\"employee\");\r\n    const dataDepartment = () => setViewMode(\"department\");\r\n    // const dashboard=()=>setViewMode('default')\r\n\r\n    const dashboard = () => {\r\n        setFilters((prev) => ({\r\n            ...prev,\r\n            FromDate: prev.FromDate || new Date().toISOString().split(\"T\")[0],\r\n            ToDate: prev.ToDate || new Date().toISOString().split(\"T\")[0],\r\n        }));\r\n        setViewMode(\"default\");\r\n    };\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        const departments =\r\n            typeof row.DepartmentWiseCounts === \"string\"\r\n                ? JSON.parse(row.DepartmentWiseCounts)\r\n                : row.DepartmentWiseCounts;\r\n\r\n        return (\r\n            <table\r\n                style={{\r\n                    width: \"100%\",\r\n                    borderCollapse: \"collapse\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            >\r\n                <thead>\r\n                    <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            Department Name\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            Total Employees\r\n                        </th>\r\n                        <th\r\n                            style={{\r\n                                border: \"1px solid #ccc\",\r\n                                padding: \"8px\",\r\n                                textAlign: \"left\",\r\n                            }}\r\n                        >\r\n                            Present Today\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {departments && departments.length > 0 ? (\r\n                        departments.map((data, index) => (\r\n                            <tr key={index} onClick={() => toggleExpand(data.Department)}>\r\n                                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                    {data?.Department || \"-\"}\r\n                                </td>\r\n                                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                        <span\r\n                                            style={{\r\n                                                fontSize: \"1.25rem\",\r\n                                                fontWeight: \"bold\",\r\n                                                marginRight: \"100px\", // Increased from 15px to 100px\r\n                                                minWidth: \"60px\", // Ensures consistent spacing\r\n                                            }}\r\n                                        >\r\n                                            {data?.TotalEmployees || \"-\"}\r\n                                        </span>\r\n                                        <span style={{ fontSize: \"1rem\" }}>\r\n                                            Male / Female: {data?.TotalMaleEmployees || \"0\"} /{\" \"}\r\n                                            {data?.TotalFemaleEmployees || \"0\"}\r\n                                        </span>\r\n                                    </div>\r\n                                </td>\r\n                                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                        <span\r\n                                            style={{\r\n                                                fontSize: \"1.25rem\",\r\n                                                fontWeight: \"bold\",\r\n                                                marginRight: \"100px\", // Increased from 15px to 100px\r\n                                                minWidth: \"60px\", // Ensures consistent spacing\r\n                                            }}\r\n                                        >\r\n                                            {data?.TotalPresentToday || \"-\"}\r\n                                        </span>\r\n                                        <span style={{ fontSize: \"1rem\" }}>\r\n                                            Male / Female: {data?.TotalMalePresentToday || \"0\"} /{\" \"}\r\n                                            {data?.TotalFemalePresentToday || \"0\"}\r\n                                        </span>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"3\" style={{ padding: \"8px\" }}>\r\n                                No Departments Available\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const handleRefresh = () => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    let filteredEmployees = [];\r\n\r\n                    if (\r\n                        Number(userTypeId) === 1 ||\r\n                        Number(userTypeId) === 0 ||\r\n                        Number(Add_Rights) === 1\r\n                    ) {\r\n                        filteredEmployees = data.data;\r\n                        setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n                        setIsDropdownDisabled(false);\r\n                        setDropdownPlaceholder(\"ALL\");\r\n                    } else {\r\n                        filteredEmployees = data.data.filter(\r\n                            (employee) => employee.UserId === userId\r\n                        );\r\n                        setFilter((prev) => ({\r\n                            ...prev,\r\n                            EmpId: userId,\r\n                            Name: storage?.Name,\r\n                        }));\r\n                        setIsDropdownDisabled(true);\r\n                        setDropdownPlaceholder(storage?.Name);\r\n                    }\r\n\r\n                    setEmployees(filteredEmployees);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching employees:\", e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n                setReload((prev) => !prev);\r\n            });\r\n    };\r\n\r\n    const handleRefreshData = () => {\r\n        window.location.reload();\r\n    };\r\n\r\n    const ExpendableComponent1 = ({ row }) => {\r\n        let departments = [];\r\n        let monthlyAttendance = [];\r\n\r\n        try {\r\n            departments =\r\n                typeof row.Employees === \"string\"\r\n                    ? JSON.parse(row.Employees)\r\n                    : row.Employees || [];\r\n\r\n            monthlyAttendance =\r\n                typeof row.MonthlyAverageAttendance === \"string\"\r\n                    ? JSON.parse(row.MonthlyAverageAttendance)\r\n                    : row.MonthlyAverageAttendance || [];\r\n        } catch (err) {\r\n            departments = [];\r\n            monthlyAttendance = [];\r\n        }\r\n\r\n        const currentYear = new Date().getFullYear();\r\n\r\n        const monthList = [\r\n            { name: \"January\", number: 1 },\r\n            { name: \"February\", number: 2 },\r\n            { name: \"March\", number: 3 },\r\n            { name: \"April\", number: 4 },\r\n            { name: \"May\", number: 5 },\r\n            { name: \"June\", number: 6 },\r\n            { name: \"July\", number: 7 },\r\n            { name: \"August\", number: 8 },\r\n            { name: \"September\", number: 9 },\r\n            { name: \"October\", number: 10 },\r\n            { name: \"November\", number: 11 },\r\n            { name: \"December\", number: 12 },\r\n        ];\r\n\r\n        const attendanceMap = new Map();\r\n        monthlyAttendance.forEach((item) => {\r\n            const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n            attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n        });\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n                <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n                    <table\r\n                        style={{\r\n                            width: \"60%\",\r\n                            borderCollapse: \"collapse\",\r\n                            border: \"1px solid #ccc\",\r\n                        }}\r\n                    >\r\n                        <thead>\r\n                            <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                                <th\r\n                                    style={{\r\n                                        border: \"1px solid #ccc\",\r\n                                        padding: \"5px\",\r\n                                        textAlign: \"left\",\r\n                                    }}\r\n                                >\r\n                                    Emp_Name\r\n                                </th>\r\n                                <th\r\n                                    style={{\r\n                                        border: \"1px solid #ccc\",\r\n                                        padding: \"8px\",\r\n                                        textAlign: \"left\",\r\n                                    }}\r\n                                >\r\n                                    Sex\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {departments && departments.length > 0 ? (\r\n                                departments.map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                            {data?.Emp_Name || \"-\"}\r\n                                        </td>\r\n                                        <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                                            {data?.Sex || \"-\"}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n                                        No Employees Available\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div\r\n                        style={{\r\n                            flex: \"1\",\r\n                            border: \"1px solid #ddd\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"10px\",\r\n                            overflowX: \"auto\",\r\n                            whiteSpace: \"nowrap\",\r\n                        }}\r\n                    >\r\n                        <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                gap: \"10px\",\r\n                            }}\r\n                        >\r\n                            {monthList.map((month) => {\r\n                                const key = `${month.number}-${currentYear}`;\r\n                                const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n                                return (\r\n                                    <div\r\n                                        key={month.number}\r\n                                        style={{\r\n                                            minWidth: \"100px\",\r\n                                            padding: \"8px\",\r\n                                            backgroundColor: \"#f0f0f0\",\r\n                                            color: \"black\",\r\n                                            borderRadius: \"4px\",\r\n                                            textAlign: \"center\",\r\n                                            userSelect: \"none\",\r\n                                        }}\r\n                                    >\r\n                                        <div style={{ fontWeight: \"bold\" }}>\r\n                                            {month.name} {currentYear}\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                marginTop: \"6px\",\r\n                                                fontSize: \"14px\",\r\n                                                color: \"#555\",\r\n                                            }}\r\n                                        >\r\n                                            {uniqueEmployeeDays}\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    let filteredEmployees = [];\r\n\r\n                    if (\r\n                        Number(userTypeId) === 1 ||\r\n                        Number(userTypeId) === 0 ||\r\n                        Number(Add_Rights) === 1\r\n                    ) {\r\n                        filteredEmployees = data.data;\r\n                        setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n                        setIsDropdownDisabled(false);\r\n                        setDropdownPlaceholder(\"ALL\");\r\n                    } else {\r\n                        filteredEmployees = data.data.filter(\r\n                            (employee) => employee.UserId === userId\r\n                        );\r\n                        setFilter((prev) => ({\r\n                            ...prev,\r\n                            EmpId: userId,\r\n                            Name: storage?.Name,\r\n                        }));\r\n                        setIsDropdownDisabled(true);\r\n                        setDropdownPlaceholder(storage?.Name);\r\n                    }\r\n\r\n                    setEmployees(filteredEmployees);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching employees:\", e));\r\n    }, [\r\n        storage?.UserTypeId,\r\n        storage?.UserId,\r\n        storage?.Company_id,\r\n        storage?.Name,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `empAttendance/department?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    if (data.others && data.others.department) {\r\n                        const deptOptions = data.others.department.map((dept) => ({\r\n                            value: dept.value,\r\n                            label: dept.label,\r\n                        }));\r\n                        setDepartments(deptOptions);\r\n                    }\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching departments:\", e));\r\n    }, [storage?.Company_id, reload]);\r\n\r\n    const handleDepartmentChange = (selected) => {\r\n        setSelectedDepartment(selected);\r\n\r\n        setEmployees([]);\r\n        setSelectedEmployee(null);\r\n\r\n        if (selected) {\r\n            fetchLink({\r\n                address: `empAttendance/employeesByDepartment`,\r\n                method: \"POST\",\r\n                bodyData: { department: selected.value },\r\n            })\r\n                .then((data) => {\r\n                    if (data.success && data.others?.employees) {\r\n                        const employeeOptions = data.others.employees.map((emp) => ({\r\n                            value: emp.id || emp.value || emp.Emp_Id,\r\n                            label: emp.name || emp.label || emp.Emp_Name,\r\n                        }));\r\n\r\n                        setEmployees(employeeOptions);\r\n                    } else {\r\n                        setEmployees([]);\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    console.error(\"Error fetching employees:\", e);\r\n                    setEmployees([]);\r\n                });\r\n        } else {\r\n            setEmployees([]);\r\n        }\r\n    };\r\n\r\n    const departmentWiseCounts = React.useMemo(() => {\r\n        if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n        try {\r\n            const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n            return Array.isArray(parsed) ? parsed : [];\r\n        } catch (err) {\r\n            console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n            return [];\r\n        }\r\n    }, [saleOrders]);\r\n\r\n    const filteredData = React.useMemo(() => {\r\n        if (!departmentWiseCounts || !departmentWiseCounts.length) return [];\r\n\r\n        const filteredDepartments = departmentWiseCounts.filter((item) => {\r\n            return selectedDepartment\r\n                ? item.Department === selectedDepartment.label\r\n                : true;\r\n        });\r\n\r\n        return filteredDepartments.map((dept) => {\r\n            const employeeList = dept.employees || dept.Employees || [];\r\n\r\n            const filteredEmployees = selectedEmployee\r\n                ? employeeList.filter((emp) => {\r\n                    if (!emp.Emp_Name) return false;\r\n                    return (\r\n                        emp.Emp_Name.trim().toLowerCase() ===\r\n                        selectedEmployee.label.trim().toLowerCase()\r\n                    );\r\n                })\r\n                : employeeList;\r\n\r\n            return {\r\n                ...dept,\r\n                Employees: filteredEmployees,\r\n            };\r\n        });\r\n    }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n    return (\r\n        <>\r\n            {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n                <>\r\n                    {viewMode === \"default\" && (\r\n                        <FilterableTable\r\n                            title={\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        disabled\r\n                                        onClick={() => dashboard()}\r\n                                    >\r\n                                        Dashboard\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => data()}\r\n                                    >\r\n                                        Employee\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"small mx-2\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => dataDepartment()}\r\n                                    >\r\n                                        Department\r\n                                    </Button>\r\n\r\n                                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                        <label>From Date</label>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, FromDate: e.target.value })\r\n                                            }\r\n                                            value={filters?.FromDate}\r\n                                            className=\"cus-inpt w-auto p-1\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                        <label>To Date</label>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, ToDate: e.target.value })\r\n                                            }\r\n                                            value={filters?.ToDate}\r\n                                            className=\"cus-inpt w-auto p-1\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"p-1\">\r\n                                        <IconButton\r\n                                            onClick={() => setReload(!reload)}\r\n                                            variant=\"outlined\"\r\n                                            size=\"small\"\r\n                                        >\r\n                                            <Search />\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            dataArray={saleOrders}\r\n                            EnableSerialNumber\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: \"Tot.Emp\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const total = row?.TotalEmployees ?? 0;\r\n                                        const male = row?.TotalMaleEmployees ?? 0;\r\n                                        const female = row?.TotalFemaleEmployees ?? 0;\r\n                                        return (\r\n                                            <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                                                <div>{total}</div>\r\n                                                <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                                                    Male / Female: {male} / {female}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: \"Tot.Pre.Today\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const total = row?.TotalPresentToday ?? 0;\r\n                                        const male = row?.TotalMalePresentToday ?? 0;\r\n                                        const female = row?.TotalFemalePresentToday ?? 0;\r\n                                        return (\r\n                                            <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                                                <div>{total}</div>\r\n                                                <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                                                    Male / Female: {male} / {female}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    )}\r\n\r\n                    {viewMode === \"employee\" && (\r\n                        <>\r\n                            <Dialog\r\n                                open={addEmployeeDialogOpen}\r\n                                maxWidth=\"md\"\r\n                                PaperProps={{\r\n                                    style: { width: \"500px\", height: \"500px\" },\r\n                                }}\r\n                            >\r\n                                <DialogTitle>Add Employee</DialogTitle>\r\n                                <DialogContent>\r\n                                    <Autocomplete\r\n                                        multiple\r\n                                        options={[\r\n                                            { UserId: \"all\", Name: \"ALL\" },\r\n                                            ...dropdownEmployees,\r\n                                        ]}\r\n                                        getOptionLabel={(option) => option.Name}\r\n                                        isOptionEqualToValue={(option, value) =>\r\n                                            option.UserId === value.UserId\r\n                                        }\r\n                                        onChange={(event, value) => {\r\n                                            if (value.some((selected) => selected.UserId === \"all\")) {\r\n                                                setSelectedEmployees(dropdownEmployees);\r\n                                            } else {\r\n                                                const uniqueValues = value.filter(\r\n                                                    (val, index, self) =>\r\n                                                        index ===\r\n                                                        self.findIndex((t) => t.UserId === val.UserId)\r\n                                                );\r\n                                                setSelectedEmployees(uniqueValues);\r\n                                            }\r\n                                        }}\r\n                                        value={\r\n                                            selectedEmployees.some((user) => user.UserId === \"all\")\r\n                                                ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                                                : selectedEmployees\r\n                                        }\r\n                                        renderInput={(params) => (\r\n                                            <TextField {...params} placeholder=\"Employees\" />\r\n                                        )}\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() => setSelectedEmployees([])}\r\n                                    >\r\n                                        Clear\r\n                                    </Button>\r\n                                    <span>\r\n                                        <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                                        <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                                    </span>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                            <Card>\r\n                                <CardContent sx={{ minHeight: \"50vh\" }}>\r\n                                    <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                                        <h6 className=\"fa-18\">\r\n                                            <Button\r\n                                                size=\"small mx-2\"\r\n                                                variant=\"outlined\"\r\n                                                onClick={() => dashboard()}\r\n                                            >\r\n                                                Dashboard\r\n                                            </Button>\r\n                                            <Button\r\n                                                size=\"small mx-2\"\r\n                                                variant=\"outlined\"\r\n                                                disabled\r\n                                                onClick={() => data()}\r\n                                            >\r\n                                                EMPLOYEE\r\n                                            </Button>\r\n                                            <Button\r\n                                                size=\"small mx-2\"\r\n                                                variant=\"outlined\"\r\n                                                onClick={() => dataDepartment()}\r\n                                            >\r\n                                                Department\r\n                                            </Button>\r\n                                        </h6>\r\n\r\n                                        <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                            <Button\r\n                                                onClick={handleDownload}\r\n                                                variant=\"contained\"\r\n                                                disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                                            >\r\n                                                Individual Report\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    handleOverallDownload(filter?.From, filter?.To);\r\n                                                }}\r\n                                            >\r\n                                                Monthly Report\r\n                                            </Button>\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    setAddEmployeeDialogOpen(true);\r\n                                                }}\r\n                                            >\r\n                                                Cummulative Monthly Report\r\n                                            </Button>\r\n                                            <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"px-2 row mb-4\">\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>Employee</label>\r\n                                            <Select\r\n                                                value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                                onChange={(e) =>\r\n                                                    setFilter({\r\n                                                        ...filter,\r\n                                                        EmpId: e.value,\r\n                                                        Name: e.label,\r\n                                                    })\r\n                                                }\r\n                                                options={[\r\n                                                    { value: 0, label: `ALL` },\r\n                                                    ...employees.map((obj) => ({\r\n                                                        value: obj?.UserId,\r\n                                                        label: obj?.Name,\r\n                                                    })),\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={dropdownPlaceholder}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>From</label>\r\n                                            <input\r\n                                                type=\"month\"\r\n                                                className=\"cus-inpt\"\r\n                                                value={filter?.From?.slice(0, 7)}\r\n                                                onChange={handleFromChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                                            <button\r\n                                                className=\"btn btn-link ms-2 p-0 mt-3\"\r\n                                                onClick={handleRefresh}\r\n                                                title=\"Refresh Departments & Employees\"\r\n                                            >\r\n                                                <Refresh fontSize=\"medium\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <FilterableTable\r\n                                        dataArray={attendanceData}\r\n                                        columns={[\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) => row.username,\r\n                                                ColumnHeader: \"Employee\",\r\n                                                isVisible: 1,\r\n                                                width: \"20%\",\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: \"10px\",\r\n                                                        textAlign: \"left\",\r\n                                                        fontWeight: \"bold\",\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                isCustomCell: true,\r\n                                                Cell: ({ row }) =>\r\n                                                    formatAttendanceDate(row.LogDate || \"--\"),\r\n                                                ColumnHeader: \"Log Date\",\r\n                                                isVisible: 1,\r\n                                                width: \"20%\",\r\n                                                CellProps: {\r\n                                                    sx: {\r\n                                                        padding: \"10px\",\r\n                                                        textAlign: \"center\",\r\n                                                        color: \"gray\",\r\n                                                    },\r\n                                                },\r\n                                            },\r\n                                            ...punchColumns,\r\n                                        ]}\r\n                                        EnableSerialNumber\r\n                                        CellSize=\"small\"\r\n                                        disablePagination={false}\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </>\r\n                    )}\r\n\r\n                    {viewMode === \"department\" && (\r\n                        <FilterableTable\r\n                            title={\r\n                                <div className=\"d-flex flex-column\">\r\n                                    <div className=\"d-flex align-items-center mb-3\">\r\n                                        <Button\r\n                                            size=\"small mx-2\"\r\n                                            variant=\"outlined\"\r\n                                            onClick={() => dashboard()}\r\n                                        >\r\n                                            Dashboard\r\n                                        </Button>\r\n                                        <Button\r\n                                            size=\"small mx-2\"\r\n                                            variant=\"outlined\"\r\n                                            onClick={() => data()}\r\n                                        >\r\n                                            Employee\r\n                                        </Button>\r\n                                        <Button\r\n                                            size=\"small mx-2\"\r\n                                            variant=\"outlined\"\r\n                                            disabled\r\n                                            onClick={() => dataDepartment()}\r\n                                        >\r\n                                            Department\r\n                                        </Button>\r\n                                    </div>\r\n\r\n                                    <div className=\"row align-items-end\">\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>Department</label>\r\n                                            <Select\r\n                                                options={departments}\r\n                                                isSearchable\r\n                                                placeholder=\"ALL\"\r\n                                                value={selectedDepartment}\r\n                                                styles={customSelectStyles}\r\n                                                onChange={handleDepartmentChange}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label>Employee</label>\r\n                                            <Select\r\n                                                options={employees}\r\n                                                isSearchable\r\n                                                placeholder=\"ALL\"\r\n                                                value={selectedEmployee}\r\n                                                styles={customSelectStyles}\r\n                                                onChange={setSelectedEmployee}\r\n                                                isDisabled={!selectedDepartment}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                                            <button\r\n                                                className=\"btn btn-link ms-2 p-0 mb-2\"\r\n                                                onClick={handleRefreshData}\r\n                                                style={{ minWidth: \"24px\" }}\r\n                                                title=\"Refresh Departments & Employees\"\r\n                                            >\r\n                                                <Refresh fontSize=\"small\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            dataArray={filteredData}\r\n                            EnableSerialNumber\r\n                            columns={[\r\n                                createCol(\"Department\", \"string\", \"Department\"),\r\n                                createCol(\r\n                                    \"TotalMaleEmployees\",\r\n                                    \"number\",\r\n                                    \"Total Male Employees\"\r\n                                ),\r\n                                createCol(\r\n                                    \"TotalFemaleEmployees\",\r\n                                    \"number\",\r\n                                    \"Total Female Employees\"\r\n                                ),\r\n                                createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n                                createCol(\r\n                                    \"TotalMalePresentToday\",\r\n                                    \"number\",\r\n                                    \"Total Male Present Today\"\r\n                                ),\r\n                                createCol(\r\n                                    \"TotalFemalePresentToday\",\r\n                                    \"number\",\r\n                                    \"Total Female Present Today\"\r\n                                ),\r\n                                createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent1}\r\n                        />\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Dialog\r\n                        open={addEmployeeDialogOpen}\r\n                        maxWidth=\"md\"\r\n                        PaperProps={{\r\n                            style: { width: \"500px\", height: \"500px\" },\r\n                        }}\r\n                    >\r\n                        <DialogTitle>Add Employee</DialogTitle>\r\n                        <DialogContent>\r\n                            <Autocomplete\r\n                                multiple\r\n                                options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n                                getOptionLabel={(option) => option.Name}\r\n                                isOptionEqualToValue={(option, value) =>\r\n                                    option.UserId === value.UserId\r\n                                }\r\n                                value={\r\n                                    selectedEmployees.some((user) => user.UserId === \"all\")\r\n                                        ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                                        : selectedEmployees\r\n                                }\r\n                                onChange={(event, value) => {\r\n                                    if (value.some((selected) => selected.UserId === \"all\")) {\r\n                                        setSelectedEmployees(dropdownEmployees);\r\n                                    } else {\r\n                                        const uniqueValues = value.filter(\r\n                                            (val, index, self) =>\r\n                                                index === self.findIndex((t) => t.UserId === val.UserId)\r\n                                        );\r\n                                        setSelectedEmployees(uniqueValues);\r\n                                    }\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField {...params} placeholder=\"Employees\" />\r\n                                )}\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                onClick={() => setSelectedEmployees([])}\r\n                            >\r\n                                Clear\r\n                            </Button>\r\n                            <span>\r\n                                <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                                <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                            </span>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    <Card>\r\n                        <CardContent sx={{ minHeight: \"50vh\" }}>\r\n                            <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                                <h6 className=\"fa-18\">\r\n                                    <Button size=\"small\" variant=\"outlined\" className=\"mx-2\">\r\n                                        EMPLOYEE\r\n                                    </Button>\r\n                                </h6>\r\n\r\n                                {(userTypeId === 1 || userTypeId === 0) && (\r\n                                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                                        <Button\r\n                                            onClick={handleDownload}\r\n                                            variant=\"contained\"\r\n                                            disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                                        >\r\n                                            Individual Report\r\n                                        </Button>\r\n                                        <Button\r\n                                            onClick={() =>\r\n                                                handleOverallDownload(filter?.From, filter?.To)\r\n                                            }\r\n                                        >\r\n                                            Monthly Report\r\n                                        </Button>\r\n                                        <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n                                            Cumulative Monthly Report\r\n                                        </Button>\r\n                                        <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"px-2 row mb-4\">\r\n                                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                    <label>Employee</label>\r\n                                    <Select\r\n                                        value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                        onChange={(e) =>\r\n                                            setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n                                        }\r\n                                        options={[\r\n                                            { value: 0, label: \"ALL\" },\r\n                                            ...employees.map((obj) => ({\r\n                                                value: obj.UserId,\r\n                                                label: obj.Name,\r\n                                            })),\r\n                                        ]}\r\n                                        styles={customSelectStyles}\r\n                                        isSearchable\r\n                                        placeholder={dropdownPlaceholder}\r\n                                        isDisabled={isDropdownDisabled}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                                    <label>From</label>\r\n                                    <input\r\n                                        type=\"month\"\r\n                                        className=\"cus-inpt\"\r\n                                        value={filter?.From?.slice(0, 7)}\r\n                                        onChange={handleFromChange}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <FilterableTable\r\n                                dataArray={attendanceData}\r\n                                columns={[\r\n                                    {\r\n                                        isCustomCell: true,\r\n                                        Cell: ({ row }) => row.username,\r\n                                        ColumnHeader: \"Employee\",\r\n                                        isVisible: 1,\r\n                                        width: \"20%\",\r\n                                        CellProps: {\r\n                                            sx: {\r\n                                                padding: \"10px\",\r\n                                                textAlign: \"left\",\r\n                                                fontWeight: \"bold\",\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                    {\r\n                                        isCustomCell: true,\r\n                                        Cell: ({ row }) =>\r\n                                            formatAttendanceDate(row.LogDate || \"--\"),\r\n                                        ColumnHeader: \"Log Date\",\r\n                                        isVisible: 1,\r\n                                        width: \"20%\",\r\n                                        CellProps: {\r\n                                            sx: {\r\n                                                padding: \"10px\",\r\n                                                textAlign: \"center\",\r\n                                                color: \"gray\",\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                    ...punchColumns,\r\n                                ]}\r\n                                EnableSerialNumber\r\n                                CellSize=\"small\"\r\n                                disablePagination={false}\r\n                            />\r\n                        </CardContent>\r\n                    </Card>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\nexport default AttendanceNewScreen;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","_filter$From","_filter$From2","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","navigate","useNavigate","location","useLocation","stateDetails","addEmployeeDialogOpen","setAddEmployeeDialogOpen","useState","getCurrentMonthYear","date","Date","year","getFullYear","month","getMonth","toString","padStart","concat","initialValue","From","To","EmpId","Name","query","URLSearchParams","search","defaultFilters","saleOrders","setSaleOrders","viewMode","setViewMode","expandedDepartment","setExpandedDepartment","dropdownEmployees","setDropdownEmployees","reload","setReload","attendanceData","setAttendanceData","loading","setLoading","isDropdownDisabled","setIsDropdownDisabled","employees","setEmployees","selectedEmployee","setSelectedEmployee","userTypeId","UserTypeId","parseData","contextObj","useContext","MyContext","dropdownPlaceholder","setDropdownPlaceholder","filter","setFilter","debouncedFilter","setDebouncedFilter","useEffect","timer","setTimeout","clearTimeout","fetchAttendanceData","fetchDropdownEmployees","getDaysInMonth","monthYear","split","getDate","filters","setFilters","FromDate","toISOString","ToDate","Cancel_status","departments","setDepartments","selectedDepartment","setSelectedDepartment","selectedEmployees","setSelectedEmployees","Add_Rights","today","fromDate","toDate","fetchLink","then","data","success","catch","e","console","error","finally","handleFromChange","selectedMonth","target","value","startDate","dayCount","endDate","handleSummaryDownload","async","response","overallData","getWorkingDays","allDays","currentDate","endDateObj","sundayCount","dateStr","push","getDay","setDate","length","days","totalDays","dateRange","totalWorkingDaysSummary","totalLeaveDaysSummary","exportData","map","row","punchDetails","AttendanceDetails","totalWorkingDays","totalLeaveDays","forEach","Array","isArray","detail","find","AttendanceStatus","EmployeeName","EmployeeID","Month","Branch","NumberOfSundays","NumberOfDaysInMonth","TotalWorkingDays","TotalLeaveDays","item","ws","XLSX","json_to_sheet","headers","sheet_add_aoa","origin","wb","book_new","book_append_sheet","handleDownload","p","trim","attendanceStatus","punchColumns","i","Employee","username","formatAttendanceDate","LogDate","columnsOrder","reorderedData","reduce","acc","col","from","_","index","isCustomCell","ColumnHeader","isVisible","CellProps","sx","display","justifyContent","alignItems","Cell","_ref2","punch","rawTime","formattedTime","timeString","hourStr","minuteStr","hour","parseInt","minute","ampm","formatToAmPm","_jsx","Chip","label","size","margin","children","logDateTime","handleOverallDownload","attendanceRes","leaveRes","Promise","all","Error","leaveMap","leave","_leave$Status","Status","toUpperCase","userId","User_Id","parseDate","includes","_unused","leaveStart","leaveEnd","current","start","end","dates","count","getDateRange","emp","attendanceDetails","jsonString","_unused2","tryParseJSON","dailyStatus","presentCount","attendanceLookup","record","status","hasPunch","Punch1","_leaveMap$userId","dayKey","isSunday","User_Mgt_Id","attendanceRecord","TotalPresent","toast","handleOverallWithPunch","_attendanceData$","maxPunches","firstLogDate","dateObj","leaveResponse","leaveData","_leave$Status2","toLowerCase","String","parts","groupedData","some","user","UserId","Object","keys","entries","_ref3","userAttendance","_leaveMap$userId2","_row$AttendanceDetail2","logDate","hasApprovedLeave","_row$AttendanceDetail","d","punches","slice","fileName","toLocaleString","Company_id","companyId","Authorization","filteredEmployees","Number","prev","employee","queryFilters","get","isValidDate","Fromdate","Todate","pre","ISOString","updateQueryString","newFilters","params","replace","handleAddEmployeeClose","dataDepartment","dashboard","others","department","deptOptions","dept","departmentWiseCounts","React","_saleOrders$","DepartmentWiseCounts","parsed","err","filteredData","Department","employeeList","Employees","Emp_Name","_Fragment","_jsxs","FilterableTable","title","className","Button","disabled","onClick","type","onChange","IconButton","Search","dataArray","EnableSerialNumber","columns","_ref6","_row$TotalEmployees","_row$TotalMaleEmploye","_row$TotalFemaleEmplo","total","TotalEmployees","male","TotalMaleEmployees","female","TotalFemaleEmployees","_ref7","_row$TotalPresentToda","_row$TotalMalePresent","_row$TotalFemalePrese","TotalPresentToday","TotalMalePresentToday","TotalFemalePresentToday","isExpendable","tableMaxHeight","expandableComp","_ref4","borderCollapse","marginTop","border","textAlign","toggleExpand","marginRight","minWidth","colSpan","Dialog","open","maxWidth","PaperProps","height","DialogTitle","DialogContent","Autocomplete","multiple","options","getOptionLabel","isOptionEqualToValue","event","selected","uniqueValues","val","self","findIndex","t","renderInput","TextField","placeholder","DialogActions","Card","CardContent","minHeight","Select","obj","styles","isSearchable","handleRefresh","Refresh","_ref8","_ref9","CellSize","disablePagination","method","bodyData","_data$others","employeeOptions","Emp_Id","isDisabled","handleRefreshData","window","createCol","_ref5","monthlyAttendance","MonthlyAverageAttendance","currentYear","attendanceMap","Map","_item$UniqueEmployeeD","key","MonthNumber","YearNumber","set","UniqueEmployeeDays","flexDirection","gap","Sex","flex","borderRadius","overflowX","whiteSpace","number","_attendanceMap$get","uniqueEmployeeDays","userSelect","_ref10","_ref11","createSvgIcon","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
{"version":3,"file":"static/js/9252.ab0358b0.chunk.js","mappings":"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","sources":["Pages/Masters/lollist.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  tableCellClasses,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Tooltip,\r\n  Switch,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  Card,\r\n  CircularProgress,\r\n  InputAdornment,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport {\r\n  Settings as SettingsIcon,\r\n  Search as SearchIcon,\r\n  Clear as ClearIcon,\r\n  ArrowUpward as AscIcon,\r\n  ArrowDownward as DescIcon,\r\n  FilterList as FilterIcon,\r\n  Cancel as CancelIcon,\r\n  Save as SaveIcon,\r\n  Edit as EditIcon,\r\n  Download as DownloadIcon,\r\n  Upload as FileUploadIcon,\r\n} from \"@mui/icons-material\";\r\nimport { getSessionUser } from \"../../Components/functions\";\r\nimport * as XLSX from \"xlsx\";\r\nimport api from \"../../API\";\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#b8b8b8\",\r\n    color: \"#000000\",\r\n    fontWeight: \"bold\",\r\n    borderRight: \"1px solid #e0e0e0\",\r\n    \"&:last-child\": {\r\n      borderRight: \"none\",\r\n    },\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"12px 16px\",\r\n    borderRight: \"1px solid #e0e0e0\",\r\n    \"&:last-child\": {\r\n      borderRight: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  \"&:nth-of-type(even)\": {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.action.selected,\r\n  },\r\n}));\r\n\r\nconst PaginationContainer = styled(\"div\")({\r\n  display: \"flex\",\r\n  justifyContent: \"flex-end\",\r\n  alignItems: \"center\",\r\n  gap: \"16px\",\r\n  padding: \"16px\",\r\n  backgroundColor: \"#f5f5f5\",\r\n  borderTop: \"1px solid #e0e0e0\",\r\n});\r\n\r\nconst PROTECTED_COLUMNS = [\r\n  \"Auto_Id\",\r\n  \"Ledger_Tally_Id\",\r\n  \"Ledger_Name\",\r\n  \"Ledger_Alias\",\r\n  \"Actual_Party_Name_with_Brokers\",\r\n];\r\n\r\nfunction Lollist() {\r\n  const [lolData, setLolData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [columnSettings, setColumnSettings] = useState([]);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [originalColumnSettings, setOriginalColumnSettings] = useState([]);\r\n  const [columnDropDown, setColumnDropDown] = useState([]);\r\n  const [allData, setAllData] = useState([]);\r\n  const [isApplying, setIsApplying] = useState(false);\r\n  const [searchValues, setSearchValues] = useState({});\r\n  const [appliedFilters, setAppliedFilters] = useState({});\r\n  const [globalSearch, setGlobalSearch] = useState(\"\");\r\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: \"asc\" });\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [editedData, setEditedData] = useState({});\r\n  const user = getSessionUser().user;\r\n  const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // const checked = useState(true);\r\n  const [data, setData] = useState(false);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const fetchColumnData = async () => {\r\n    try {\r\n      const dropData = await fetchLink({\r\n        address: `masters/columns/dropDown?company_id=${parseData?.companyId}`,\r\n      });\r\n\r\n      if (dropData.success) {\r\n        setColumnDropDown(dropData.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching columns:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnData();\r\n  }, [parseData?.companyId]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const columnRes = await fetchLink({\r\n          address: `masters/displayColumn?company_id=${parseData?.companyId}`,\r\n        });\r\n\r\n        if (!columnRes.success || !Array.isArray(columnRes.data)) {\r\n          console.error(\"No display columns found\");\r\n          return;\r\n        }\r\n\r\n        const sortedColumns = [...columnRes.data].sort(\r\n          (a, b) => a.Position - b.Position\r\n        );\r\n        setColumnSettings(sortedColumns);\r\n        setOriginalColumnSettings([...sortedColumns]);\r\n\r\n        const visibleColumns = sortedColumns\r\n          .filter((col) => col.status === 1)\r\n          .sort((a, b) => a.Position - b.Position)\r\n          .map((col) => ({\r\n            header: col.Alias_Name || col.ColumnName,\r\n            accessor: col.ColumnName,\r\n            position: col.Position,\r\n          }));\r\n\r\n        setColumns(visibleColumns);\r\n\r\n        const dataRes = await fetchLink({ address: `masters/getlolDetails` });\r\n\r\n        if (dataRes.success && Array.isArray(dataRes.data)) {\r\n          setAllData(dataRes.data);\r\n\r\n          const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n          const filteredData = dataRes.data.map((row) => {\r\n            const filteredRow = {};\r\n            allowedKeys.forEach((key) => {\r\n              filteredRow[key] = row[key] || \"\";\r\n            });\r\n            return filteredRow;\r\n          });\r\n\r\n          setLolData(filteredData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [data]);\r\n\r\n  const handlePositionChange = (columnId, newPosition) => {\r\n    const positionValue = parseInt(newPosition);\r\n\r\n    if (!isNaN(positionValue)) {\r\n      setColumnDropDown((prev) =>\r\n        prev.map((col) =>\r\n          col.Id === columnId ? { ...col, Position: positionValue } : col\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleAliasChange = (columnId, newAlias) => {\r\n    setColumnDropDown((prev) =>\r\n      prev.map((col) =>\r\n        col.Id === columnId ? { ...col, Alias_Name: newAlias } : col\r\n      )\r\n    );\r\n  };\r\n\r\n  const getColumnStatus = (columnId) => {\r\n    const column = columnSettings.find((col) => col.Id === columnId);\r\n    return column ? column.status === 1 : false;\r\n  };\r\n\r\n  const handleColumnToggle = (columnId, isChecked) => {\r\n    const column = columnDropDown.find((col) => col.Id === columnId);\r\n\r\n    if (column?.Position <= 5) {\r\n      toast.error(\"First 5 columns cannot be disabled\");\r\n      return;\r\n    }\r\n\r\n    let updatedSettings;\r\n\r\n    if (columnSettings.some((col) => col.Id === columnId)) {\r\n      updatedSettings = columnSettings.map((col) =>\r\n        col.Id === columnId ? { ...col, status: isChecked ? 1 : 0 } : col\r\n      );\r\n    } else {\r\n      const newColumn = columnDropDown.find((col) => col.Id === columnId);\r\n      if (newColumn) {\r\n        updatedSettings = [\r\n          ...columnSettings,\r\n          {\r\n            ...newColumn,\r\n            status: isChecked ? 1 : 0,\r\n          },\r\n        ];\r\n      } else {\r\n        updatedSettings = [...columnSettings];\r\n      }\r\n    }\r\n\r\n    updatedSettings.sort((a, b) => a.Position - b.Position);\r\n    setColumnSettings(updatedSettings);\r\n  };\r\n\r\n  const handleEditClick = (rowData) => {\r\n    // setCurrentRowData(rowData);\r\n    setEditedData({ ...rowData });\r\n    setEditDialogOpen(true);\r\n  };\r\n\r\n  const handleSaveChanges = async () => {\r\n    try {\r\n      const updateResponse = await fetchLink({\r\n        address: \"masters/updateDetails\",\r\n        method: \"PUT\",\r\n        bodyData: editedData,\r\n        headers: {\r\n          Db: user?.Company_id,\r\n        },\r\n      });\r\n\r\n      if (!updateResponse.success) {\r\n        throw new Error(updateResponse.message || \"Failed to update row\");\r\n      }\r\n\r\n      setAllData((prevData) =>\r\n        prevData.map((row) =>\r\n          row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n        )\r\n      );\r\n\r\n      setLolData((prevData) =>\r\n        prevData.map((row) =>\r\n          row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n        )\r\n      );\r\n\r\n      setEditDialogOpen(false);\r\n      toast.success(\"Data updated successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error updating row:\", error);\r\n      toast.error(\"Failed to update row\");\r\n    }\r\n  };\r\n\r\n  const applyColumnChanges = async () => {\r\n    setIsApplying(true);\r\n    try {\r\n      const updatedSettings = columnSettings.map((col) => {\r\n        const dropdownCol = columnDropDown.find((dc) => dc.Id === col.Id);\r\n        return dropdownCol\r\n          ? {\r\n              ...col,\r\n              Position: dropdownCol.Position,\r\n              Alias_Name: dropdownCol.Alias_Name,\r\n            }\r\n          : col;\r\n      });\r\n\r\n      const positionMap = {};\r\n      const duplicatePositions = new Set();\r\n\r\n      updatedSettings.forEach((col) => {\r\n        if (positionMap[col.Position]) {\r\n          duplicatePositions.add(col.Position);\r\n        }\r\n        positionMap[col.Position] = true;\r\n      });\r\n\r\n      if (duplicatePositions.size > 0) {\r\n        const positionsList = Array.from(duplicatePositions).join(\", \");\r\n        toast.error(`Duplicate positions found: ${positionsList}`);\r\n        return;\r\n      }\r\n\r\n      setColumnSettings(updatedSettings);\r\n      setOriginalColumnSettings(updatedSettings);\r\n\r\n      const updateResponse = await fetchLink({\r\n        address: \"masters/updateColumnChanges\",\r\n        method: \"PUT\",\r\n        bodyData: {\r\n          columns: updatedSettings.map((col) => ({\r\n            id: col.Id,\r\n            status: col.status,\r\n            position: col.Position,\r\n            alias_name: col.Alias_Name,\r\n            column_name: col.ColumnName,\r\n          })),\r\n          company_id: parseData?.companyId,\r\n        },\r\n      });\r\n\r\n      if (!updateResponse.success) {\r\n        throw new Error(\r\n          updateResponse.message || \"Failed to update column statuses\"\r\n        );\r\n      }\r\n\r\n      const visibleColumns = updatedSettings\r\n        .filter((col) => col.status === 1)\r\n        .sort((a, b) => a.Position - b.Position)\r\n        .map((col) => ({\r\n          header: col.Alias_Name || col.ColumnName,\r\n          accessor: col.ColumnName,\r\n          position: col.Position,\r\n        }));\r\n\r\n      setColumns(visibleColumns);\r\n\r\n      if (allData.length > 0) {\r\n        const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n        const filteredData = allData.map((row) => {\r\n          const filteredRow = {};\r\n          allowedKeys.forEach((key) => {\r\n            filteredRow[key] = row[key] || \"\";\r\n          });\r\n          return filteredRow;\r\n        });\r\n        setLolData(filteredData);\r\n      }\r\n\r\n      setDialogOpen(false);\r\n      toast.success(\"Changes Saved\");\r\n    } catch (error) {\r\n      console.error(\"Error updating column statuses:\", error);\r\n      toast.error(\r\n        error.message || \"Failed to update columns. Please try again.\"\r\n      );\r\n    } finally {\r\n      setIsApplying(false);\r\n    }\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSelectedFile(null);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      alert(\"File size exceeds 5MB\");\r\n      return;\r\n    }\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const uploadExcelFile = async (file) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"company_id\", parseData?.Company_id);\r\n      formData.append(\"Created_By\", parseData?.UserId);\r\n      formData.append(\"isRetailer\", \"1\");\r\n\r\n      console.log(\"FormData contents:\");\r\n      for (let [key, value] of formData.entries()) {\r\n        console.log(key, value instanceof File ? `File: ${value.name}` : value);\r\n      }\r\n      const response = await fetch(`${api}masters/uploadExcel`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {\r\n          Db: user?.Company_id,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || \"Upload failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      setIsLoading(false);\r\n      return result;\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(\"Upload Error:\", {\r\n        message: error.message,\r\n        stack: error.stack,\r\n        time: new Date().toISOString(),\r\n      });\r\n      throw new Error(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const exportSelectedRowsToExcel = (columns, selectedRows) => {\r\n    try {\r\n      if (!Array.isArray(columns) || !Array.isArray(selectedRows)) {\r\n        throw new Error(\r\n          \"Invalid data: columns and selectedRows must be arrays\"\r\n        );\r\n      }\r\n\r\n      const filteredColumns = columns.filter(\r\n        (col) =>\r\n          col.accessor !== \"Auto_Id\" && col.accessor !== \"Ledger_Tally_Id\"\r\n      );\r\n\r\n      const headers = filteredColumns.map((col) => {\r\n        if (typeof col.header !== \"string\") {\r\n          console.warn(\"Missing or invalid header for column:\", col);\r\n          return \"UNNAMED_COLUMN\";\r\n        }\r\n        return col.header;\r\n      });\r\n\r\n      const rowData = selectedRows.map((row) =>\r\n        filteredColumns.map((col) => row[col.accessor] ?? \"\")\r\n      );\r\n\r\n      const excelData = [headers, ...rowData];\r\n\r\n      const ws = XLSX.utils.aoa_to_sheet(excelData);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws, \"SelectedData\");\r\n\r\n      const timestamp = new Date().toISOString().slice(0, 10);\r\n      XLSX.writeFile(wb, `selected_data_${timestamp}.xlsx`);\r\n    } catch (error) {\r\n      console.error(\"Excel export failed:\", error);\r\n      alert(`Export failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFile) return;\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      await uploadExcelFile(selectedFile);\r\n      handleClose();\r\n      setData((prev) => !prev);\r\n      toast.success(\"File uploaded successfully\");\r\n    } catch (error) {\r\n      toast.error(`Upload failed: ${error.message}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetToDefaults = () => {\r\n    setColumnSettings([...originalColumnSettings]);\r\n    setColumnDropDown([...originalColumnSettings]);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const getPageSizeOptions = () => {\r\n    const baseOptions = [5, 10, 15, 30, 60, 120, 240];\r\n    const maxOption = Math.max(...baseOptions);\r\n\r\n    if (lolData.length > maxOption) {\r\n      return [...baseOptions];\r\n    }\r\n    return baseOptions;\r\n  };\r\n\r\n  const handleSearchChange = (columnName, value) => {\r\n    setSearchValues((prev) => ({\r\n      ...prev,\r\n      [columnName]: value,\r\n    }));\r\n  };\r\n\r\n  const applySearch = () => {\r\n    setAppliedFilters({ ...searchValues });\r\n    setPage(0);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setSearchValues({});\r\n    setAppliedFilters({});\r\n    setGlobalSearch(\"\");\r\n    setPage(0);\r\n  };\r\n\r\n  const requestSort = (key) => {\r\n    let direction = \"asc\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n      direction = \"desc\";\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const filteredData = useMemo(() => {\r\n    let filterableData = [...allData];\r\n\r\n    if (globalSearch) {\r\n      const searchTerms = globalSearch\r\n        .split(\",\")\r\n        .map((term) => term.trim().toLowerCase())\r\n        .filter(Boolean);\r\n\r\n      filterableData = filterableData.filter((row) =>\r\n        searchTerms.some((term) =>\r\n          Object.values(row).some((val) =>\r\n            String(val).toLowerCase().includes(term)\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    filterableData = filterableData.filter((row) =>\r\n      Object.keys(appliedFilters).every((key) => {\r\n        if (!appliedFilters[key]) return true;\r\n        return String(row[key])\r\n          .toLowerCase()\r\n          .includes(String(appliedFilters[key]).toLowerCase());\r\n      })\r\n    );\r\n\r\n    if (sortConfig.key) {\r\n      filterableData.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === \"asc\" ? -1 : 1;\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === \"asc\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return filterableData;\r\n  }, [allData, globalSearch, appliedFilters, sortConfig]);\r\n\r\n  const renderTableHeader = () => (\r\n    <TableHead>\r\n      <TableRow>\r\n        <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          S.No\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          CheckBox\r\n        </StyledTableCell>\r\n        <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n          Actions\r\n        </StyledTableCell>\r\n\r\n        {columns.map((col) => (\r\n          <StyledTableCell key={col.accessor} align=\"center\">\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              {col.header}\r\n              <Tooltip\r\n                title={`Sort ${\r\n                  sortConfig.key === col.accessor\r\n                    ? sortConfig.direction === \"asc\"\r\n                      ? \"Descending\"\r\n                      : \"Ascending\"\r\n                    : \"Ascending\"\r\n                }`}\r\n              >\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={() => requestSort(col.accessor)}\r\n                  color={\r\n                    sortConfig.key === col.accessor ? \"primary\" : \"default\"\r\n                  }\r\n                >\r\n                  {sortConfig.key === col.accessor ? (\r\n                    sortConfig.direction === \"asc\" ? (\r\n                      <AscIcon />\r\n                    ) : (\r\n                      <DescIcon />\r\n                    )\r\n                  ) : (\r\n                    <FilterIcon />\r\n                  )}\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            <TextField\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Filter...\"\r\n              value={searchValues[col.accessor] || \"\"}\r\n              onChange={(e) => handleSearchChange(col.accessor, e.target.value)}\r\n              sx={{ width: \"100%\", mt: 1 }}\r\n              InputProps={{\r\n                endAdornment: searchValues[col.accessor] && (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleSearchChange(col.accessor, \"\")}\r\n                    >\r\n                      <ClearIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </StyledTableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n\r\n  {\r\n    isLoading && (\r\n      <Box sx={{ mt: 2, textAlign: \"center\" }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Processing your file, please wait...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const handleCheckboxChange = (row) => {\r\n    setSelectedRows((prevSelected) => {\r\n      const isSelected = prevSelected.some(\r\n        (selectedRow) => selectedRow.Ledger_Tally_Id === row.Ledger_Tally_Id\r\n      );\r\n      return isSelected\r\n        ? prevSelected.filter(\r\n            (selectedRow) => selectedRow.Ledger_Tally_Id !== row.Ledger_Tally_Id\r\n          )\r\n        : [...prevSelected, row];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        p: 3,\r\n        backgroundColor: \"white\",\r\n        borderRadius: \"8px\",\r\n        boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          mb: 3,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\">LOL List</Typography>\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n          {selectedRows.length > 0 && (\r\n            <Chip\r\n              label={`SELECTED ROWS : ${selectedRows.length} `}\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              sx={{ mr: 2 }}\r\n            />\r\n          )}\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            placeholder=\"Search...\"\r\n            value={globalSearch}\r\n            onChange={(e) => setGlobalSearch(e.target.value)}\r\n            sx={{ width: 300, mr: 2 }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n              endAdornment: globalSearch && (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton size=\"small\" onClick={() => setGlobalSearch(\"\")}>\r\n                    <ClearIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          <Tooltip title=\"Column Settings\">\r\n            <IconButton onClick={() => setDialogOpen(true)}>\r\n              <SettingsIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SearchIcon />}\r\n            onClick={applySearch}\r\n            disabled={Object.keys(searchValues).length === 0}\r\n            sx={{ ml: 2 }}\r\n          >\r\n            Apply Filters\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<ClearIcon />}\r\n            onClick={clearSearch}\r\n            disabled={Object.keys(appliedFilters).length === 0 && !globalSearch}\r\n            sx={{ ml: 1 }}\r\n          >\r\n            Clear All\r\n          </Button>\r\n          <MenuItem\r\n            onClick={() => exportSelectedRowsToExcel(columns, selectedRows)}\r\n          >\r\n            <DownloadIcon fontSize=\"small\" sx={{ mr: 1 }} /> Download{\" \"}\r\n          </MenuItem>\r\n          <MenuItem onClick={handleClickOpen}>\r\n            <FileUploadIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n            Upload\r\n          </MenuItem>\r\n\r\n          <Dialog open={open} fullWidth>\r\n            <DialogTitle>Upload Excel File</DialogTitle>\r\n            <DialogContent>\r\n              <Box\r\n                sx={{ display: \"flex\", alignItems: \"center\", gap: 2, mt: 2 }}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  component=\"label\"\r\n                  //   startIcon={<CloudUploadIcon />}\r\n                >\r\n                  Browse\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".xls,.xlsx\"\r\n                    hidden\r\n                    onChange={handleFileChange}\r\n                  />\r\n                </Button>\r\n                <Typography>\r\n                  {selectedFile ? selectedFile.name : \"No file selected\"}\r\n                </Typography>\r\n              </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose}>Cancel</Button>\r\n              <Button\r\n                onClick={handleUpload}\r\n                variant=\"contained\"\r\n                disabled={!selectedFile || isLoading}\r\n                startIcon={\r\n                  isLoading ? (\r\n                    <CircularProgress size={20} color=\"inherit\" />\r\n                  ) : null\r\n                }\r\n              >\r\n                {isLoading ? \"Uploading...\" : \"Upload\"}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Dialog\r\n        open={dialogOpen}\r\n        onClose={() => setDialogOpen(false)}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Column Settings</DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"row\">\r\n            {columnDropDown\r\n              .sort((a, b) => a.Position - b.Position)\r\n              .map((column) => (\r\n                <div className=\"col-lg-4 col-md-6 p-2\" key={column.Id}>\r\n                  <Card className=\"p-2\">\r\n                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                      <Switch\r\n                        checked={getColumnStatus(column.Id)}\r\n                        onChange={(e) =>\r\n                          handleColumnToggle(column.Id, e.target.checked)\r\n                        }\r\n                        disabled={column.Position <= 5}\r\n                        color={column.Position <= 5 ? \"default\" : \"primary\"}\r\n                      />\r\n                      <div>{column?.ColumnName}</div>\r\n\r\n                      <div className=\"d-flex align-items-center gap-2\">\r\n                        <TextField\r\n                          type=\"number\"\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          value={column.Position ?? 0}\r\n                          onChange={(e) =>\r\n                            handlePositionChange(column.Id, e.target.value)\r\n                          }\r\n                          sx={{ width: \"70px\" }}\r\n                          inputProps={{\r\n                            min: 1,\r\n                            readOnly: PROTECTED_COLUMNS.includes(\r\n                              column.ColumnName\r\n                            ),\r\n                          }}\r\n                          disabled={PROTECTED_COLUMNS.includes(\r\n                            column.ColumnName\r\n                          )}\r\n                        />\r\n\r\n                        <TextField\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          value={column.Alias_Name ?? \"\"}\r\n                          onChange={(e) =>\r\n                            handleAliasChange(column.Id, e.target.value)\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Card>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={resetToDefaults} variant=\"outlined\">\r\n            Reset\r\n          </Button>\r\n          <Button onClick={() => setDialogOpen(false)} color=\"error\">\r\n            Close\r\n          </Button>\r\n          <Button\r\n            onClick={applyColumnChanges}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isApplying}\r\n          >\r\n            {isApplying ? \"Applying...\" : \"Apply\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        open={editDialogOpen}\r\n        onClose={() => setEditDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Edit Row</DialogTitle>\r\n\r\n        <div\r\n          className=\"container-fluid\"\r\n          style={{ maxHeight: \"80vh\", overflow: \"auto\" }}\r\n        >\r\n          <div className=\"row g-3\">\r\n            {columns.map((col) => (\r\n              <div key={col.accessor} className=\"col-12 col-sm-6 col-md-4\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"form-label\">{col.header}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control form-control-lg\"\r\n                    value={editedData[col.accessor] || \"\"}\r\n                    onChange={(e) =>\r\n                      setEditedData({\r\n                        ...editedData,\r\n                        [col.accessor]: e.target.value,\r\n                      })\r\n                    }\r\n                    disabled={\r\n                      col.accessor === \"Auto_Id\" ||\r\n                      col.accessor === \"Ledger_Tally_Id\" ||\r\n                      col.accessor === \"Ledger_Name\"\r\n                    }\r\n                    style={{\r\n                      padding: \"1rem 1rem\",\r\n                      fontSize: \"1rem\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => setEditDialogOpen(false)}\r\n            variant=\"outlined\"\r\n            startIcon={<CancelIcon />}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSaveChanges}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<SaveIcon />}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {columns.length > 0 && allData.length > 0 ? (\r\n        <Paper elevation={0} sx={{ border: \"1px solid #e0e0e0\" }}>\r\n          <TableContainer>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"ledger table\"\r\n              sx={{ minWidth: 650 }}\r\n            >\r\n              {renderTableHeader()}\r\n              <TableBody>\r\n                {filteredData\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, idx) => (\r\n                    <StyledTableRow key={idx}>\r\n                      <StyledTableCell align=\"center\">\r\n                        {page * rowsPerPage + idx + 1}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell>\r\n                        <IconButton>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedRows.some(\r\n                              (selectedRow) =>\r\n                                selectedRow.Ledger_Tally_Id ===\r\n                                row.Ledger_Tally_Id\r\n                            )}\r\n                            onChange={() => handleCheckboxChange(row)}\r\n                            onFocus={(e) => e.target.blur()}\r\n                            style={{\r\n                              transform: \"scale(1.5)\",\r\n                              width: \"14px\",\r\n                              height: \"20px\",\r\n                            }}\r\n                          />\r\n                        </IconButton>\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"center\">\r\n                        <Tooltip title=\"Edit\">\r\n                          <IconButton\r\n                            onClick={() => handleEditClick(row)}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            sx={{\r\n                              \"&:hover\": {\r\n                                backgroundColor: \"rgba(25, 118, 210, 0.08)\",\r\n                                transform: \"scale(1.1)\",\r\n                              },\r\n                              transition: \"transform 0.2s\",\r\n                            }}\r\n                          >\r\n                            <EditIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </StyledTableCell>\r\n                      {columns.map((col) => (\r\n                        <StyledTableCell\r\n                          key={`${idx}-${col.accessor}`}\r\n                          align=\"center\"\r\n                        >\r\n                          {row[col.accessor]}\r\n                        </StyledTableCell>\r\n                      ))}\r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <PaginationContainer>\r\n            <TablePagination\r\n              component=\"div\"\r\n              count={filteredData.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              rowsPerPageOptions={[]}\r\n              sx={{\r\n                \"& .MuiTablePagination-toolbar\": {\r\n                  padding: 0,\r\n                  minHeight: \"auto\",\r\n                },\r\n                \"& .MuiTablePagination-spacer\": {\r\n                  display: \"none\",\r\n                },\r\n                \"& .MuiTablePagination-actions\": {\r\n                  marginLeft: \"16px\",\r\n                },\r\n              }}\r\n            />\r\n            <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\r\n              <InputLabel>Rows per page</InputLabel>\r\n              <Select\r\n                value={rowsPerPage}\r\n                onChange={handleChangeRowsPerPage}\r\n                label=\"Rows per page\"\r\n              >\r\n                {getPageSizeOptions().map((option) => (\r\n                  <MenuItem key={option} value={option}>\r\n                    {option}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </PaginationContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Typography>Loading...</Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Lollist;\r\n"],"names":["StyledTableCell","styled","TableCell","_ref","theme","concat","tableCellClasses","head","backgroundColor","color","fontWeight","borderRight","body","fontSize","padding","StyledTableRow","TableRow","_ref2","palette","action","hover","selected","PaginationContainer","display","justifyContent","alignItems","gap","borderTop","PROTECTED_COLUMNS","lolData","setLolData","useState","columns","setColumns","page","setPage","rowsPerPage","setRowsPerPage","columnSettings","setColumnSettings","dialogOpen","setDialogOpen","originalColumnSettings","setOriginalColumnSettings","columnDropDown","setColumnDropDown","allData","setAllData","isApplying","setIsApplying","searchValues","setSearchValues","appliedFilters","setAppliedFilters","globalSearch","setGlobalSearch","sortConfig","setSortConfig","key","direction","editDialogOpen","setEditDialogOpen","editedData","setEditedData","user","getSessionUser","parseData","JSON","parse","localStorage","getItem","open","setOpen","selectedFile","setSelectedFile","isLoading","setIsLoading","data","setData","selectedRows","setSelectedRows","useEffect","async","dropData","fetchLink","address","companyId","success","error","console","fetchColumnData","columnRes","Array","isArray","sortedColumns","sort","a","b","Position","visibleColumns","filter","col","status","map","header","Alias_Name","ColumnName","accessor","position","dataRes","allowedKeys","filteredData","row","filteredRow","forEach","fetchData","getColumnStatus","columnId","column","find","Id","handleClose","handleSearchChange","columnName","value","prev","_objectSpread","useMemo","filterableData","searchTerms","split","term","trim","toLowerCase","Boolean","some","Object","values","val","String","includes","keys","every","Box","Typography","_jsxs","sx","p","borderRadius","boxShadow","children","mb","_jsx","variant","length","Chip","label","size","mr","TextField","placeholder","onChange","e","target","width","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onClick","ClearIcon","Tooltip","title","SettingsIcon","Button","startIcon","applySearch","disabled","ml","clearSearch","MenuItem","exportSelectedRowsToExcel","Error","filteredColumns","excelData","warn","_row$col$accessor","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","timestamp","Date","toISOString","slice","alert","message","DownloadIcon","handleClickOpen","FileUploadIcon","Dialog","fullWidth","DialogTitle","DialogContent","mt","component","type","accept","hidden","event","file","files","name","DialogActions","formData","FormData","append","Company_id","UserId","log","entries","File","response","fetch","api","method","headers","Db","ok","errorData","json","catch","result","stack","time","uploadExcelFile","toast","CircularProgress","onClose","maxWidth","className","_column$Position","_column$Alias_Name","Card","Switch","checked","handleColumnToggle","isChecked","updatedSettings","newColumn","handlePositionChange","newPosition","positionValue","parseInt","isNaN","inputProps","min","readOnly","handleAliasChange","newAlias","resetToDefaults","dropdownCol","dc","positionMap","duplicatePositions","Set","add","positionsList","from","join","updateResponse","bodyData","id","alias_name","column_name","company_id","style","maxHeight","overflow","CancelIcon","prevData","Auto_Id","SaveIcon","Paper","elevation","border","TableContainer","Table","stickyHeader","minWidth","TableHead","align","requestSort","AscIcon","DescIcon","FilterIcon","TableBody","idx","selectedRow","Ledger_Tally_Id","prevSelected","handleCheckboxChange","onFocus","blur","transform","height","handleEditClick","rowData","transition","EditIcon","TablePagination","count","onPageChange","handleChangePage","newPage","rowsPerPageOptions","minHeight","marginLeft","FormControl","InputLabel","Select","getPageSizeOptions","baseOptions","maxOption","Math","max","option"],"sourceRoot":""}
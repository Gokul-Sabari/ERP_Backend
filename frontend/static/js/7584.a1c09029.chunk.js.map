{"version":3,"file":"static/js/7584.a1c09029.chunk.js","mappings":"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","sources":["Pages/Purchase/purchaseInvoices.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Dialog, Tooltip, IconButton, DialogTitle, DialogContent, DialogActions } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { isEqualNumber, ISOString, isValidDate } from \"../../Components/functions\";\r\nimport InvoiceBillTemplate from \"../Sales/SalesReportComponent/newInvoiceTemplate\";\r\nimport { Add, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst PurchaseOrderList = ({ loadingOn, loadingOff }) => {\r\n    const [purchaseOrder, setPurchaseOrder] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const stateDetails = location.state;\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Cancel_status: 0\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `purchase/purchaseOrder?Fromdate=${filters?.fetchFrom}&Todate=${filters?.fetchTo}&Retailer_Id=${filters?.Retailer_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPurchaseOrder(data?.data)\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff()\r\n        })\r\n\r\n    }, [\r\n        filters?.fetchFrom, filters?.fetchTo,\r\n        filters?.Retailer_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n    ])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, fetchFrom: queryFilters.Fromdate, fetchTo: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        const Fromdate = (stateDetails?.Fromdate && isValidDate(stateDetails?.Fromdate)) ? ISOString(stateDetails?.Fromdate) : null;\r\n        const Todate = (stateDetails?.Todate && isValidDate(stateDetails?.Todate)) ? ISOString(stateDetails?.Todate) : null;\r\n        if (Fromdate && Todate) {\r\n            updateQueryString({ Fromdate, Todate });\r\n        }\r\n    }, [stateDetails])\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const navigateToPageWithState = ({ page = '', stateToTransfer = {} }) => {\r\n        navigate(page, { state: stateToTransfer });\r\n    }\r\n\r\n    const purchaseOrderColumn = [\r\n        {\r\n            Field_Name: 'Po_Inv_No',\r\n            ColumnHeader: 'Order ID',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Po_Entry_Date',\r\n            ColumnHeader: 'Date',\r\n            Fied_Data: 'date',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Retailer_Name',\r\n            ColumnHeader: 'Party',\r\n            Fied_Data: 'string',\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: 'Total_Before_Tax',\r\n            ColumnHeader: 'Before Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Tax',\r\n            ColumnHeader: 'Tax',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        {\r\n            Field_Name: 'Total_Invoice_value',\r\n            ColumnHeader: 'Invoice Value',\r\n            Fied_Data: 'number',\r\n            isVisible: 1,\r\n            align: 'center',\r\n        },\r\n        // {\r\n        //     ColumnHeader: 'Status',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => {\r\n        //         const convert = convertedStatus.find(status => status.id === Number(row?.isConverted));\r\n        //         return (\r\n        //             <span className={'py-0 fw-bold px-2 rounded-4 fa-12 ' + convert?.color ?? 'bg-secondary text-white'}>\r\n        //                 {convert?.label ?? 'Undefined'}\r\n        //             </span>\r\n        //         )\r\n        //     },\r\n        // },\r\n        {\r\n            Field_Name: 'Action',\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title='View Order'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    })\r\n                                }}\r\n                                color='primary' size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title='Edit'>\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    navigateToPageWithState({\r\n                                        page: 'create',\r\n                                        stateToTransfer: {\r\n                                            invoiceInfo: row,\r\n                                            orderInfo: row?.Products_List,\r\n                                            staffInfo: row?.Staff_List\r\n                                        }\r\n                                    })\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <Edit className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row?.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Broker</td>\r\n                            <td className=\"border p-2\">\r\n                                {row?.Staff_List?.filter(cost =>\r\n                                    cost.Involved_Emp_Type === 'Broker'\r\n                                ).map(staff => staff.Involved_Emp_Name)?.join(', ')}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Owners</td>\r\n                            <td className=\"border p-2\">\r\n                                {row?.Staff_List?.filter(cost =>\r\n                                    cost.Involved_Emp_Type === 'Owners'\r\n                                ).map(staff => staff.Involved_Emp_Name)?.join(', ')}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Others</td>\r\n                            <td className=\"border p-2\">\r\n                                <table className=\"table table-bordered m-0 fa-12\">\r\n                                    <tbody>\r\n                                        {row?.Staff_List?.filter(cost =>\r\n                                            !(cost.Involved_Emp_Type === 'Owners' || \r\n                                            cost.Involved_Emp_Type === 'Broker') \r\n                                        ).map(staff => (\r\n                                            <tr>\r\n                                                <td>{staff?.Involved_Emp_Name}</td>\r\n                                                <td>{staff?.Involved_Emp_Type}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 2) && 'Not applicable'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                dataArray={purchaseOrder}\r\n                columns={purchaseOrderColumn}\r\n                title=\"Purchase Invoices\"\r\n                // EnableSerialNumber={true}\r\n                isExpendable={true}\r\n                tableMaxHeight={550}\r\n                expandableComp={ExpendableComponent}\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                className=\"ms-2\"\r\n                                onClick={() => setDialog({ ...dialog, filters: true })}\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Button\r\n                            variant='outlined'\r\n                            startIcon={<Add />}\r\n                            onClick={() => navigateToPageWithState({ page: 'create' })}\r\n                        >\r\n                            {'Add'}\r\n                        </Button>\r\n                    </>\r\n                }\r\n            />\r\n\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={'Purchase Order'}\r\n                />\r\n            )}\r\n\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Retailer_Id, label: filters?.RetailerGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Retailer_Id: e.value, RetailerGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Created_by, label: filters?.CreatedByGet }}\r\n                                            onChange={(e) => setFilters({ ...filters, Created_by: e.value, CreatedByGet: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr> */}\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters({ ...filters, Cancel_status: Number(e.target.value) })}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr> */}\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate\r\n                            };\r\n                            updateQueryString(updatedFilters);\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseOrderList;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["defaultFilters","Fromdate","ISOString","Todate","_ref","loadingOn","loadingOff","purchaseOrder","setPurchaseOrder","useState","retailers","setRetailers","viewOrder","setViewOrder","navigate","useNavigate","location","useLocation","query","URLSearchParams","search","stateDetails","state","filters","setFilters","fetchFrom","fetchTo","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Cancel_status","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","finally","queryFilters","get","isValidDate","pre","_objectSpread","updateQueryString","newFilters","params","toString","replace","navigateToPageWithState","_ref2","page","stateToTransfer","purchaseOrderColumn","Field_Name","ColumnHeader","Fied_Data","isVisible","align","isCustomCell","Cell","_ref3","row","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","orderProducts","Products_List","color","size","Visibility","className","invoiceInfo","orderInfo","staffInfo","Staff_List","Edit","closeDialog","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref4","_row$Staff_List","_row$Staff_List$filte","_row$Staff_List2","_row$Staff_List2$filt","_row$Staff_List3","Branch_Name","Sales_Person_Name","Round_off","filter","cost","Involved_Emp_Type","map","staff","Involved_Emp_Name","join","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","Narration","ButtonArea","FilterAlt","Button","variant","startIcon","Add","Object","keys","length","InvoiceBillTemplate","download","actionOpen","clearDetails","TitleText","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","style","verticalAlign","Select","value","label","onChange","options","obj","Retailer_Name","styles","customSelectStyles","isSearchable","placeholder","type","target","DialogActions","updatedFilters","Search","createSvgIcon","d"],"sourceRoot":""}
{"version":3,"file":"static/js/3676.8178cf2f.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/SalesReportComponent/LedgerBasedTable.jsx","Pages/Sales/salesReports.jsx"],"sourcesContent":["import { Fragment, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\n\r\nconst ProductBasedSalesReport = ({ dataArray }) => {\r\n    const productColumns = ['Stock_Group', 'Item_Name_Modified', 'Y1', 'M6', 'M2', 'LM', 'Total_Qty'];\r\n    const [daysCol, setDaysCol] = useState([])\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => {\r\n            const transaction = Array.isArray(o?.StockTransaction) ? o?.StockTransaction : [];\r\n            const stkObj = transaction[0] || {}; \r\n            const DaySum = Object.fromEntries(\r\n                Object.entries(stkObj).filter(([key]) => \r\n                    !productColumns.includes(key) && !isNaN(Number(key)) \r\n                ).map(([key]) => {\r\n                    setDaysCol(pre => pre.includes(key) ? pre : [...pre, key])\r\n                    const total = transaction.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);\r\n                    return [key, total];\r\n                })\r\n            );\r\n\r\n            return {\r\n                ...o,\r\n                ...DaySum\r\n            };\r\n        });\r\n    }, [dataArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    createCol('Stock_Group', 'string'),\r\n                    createCol('Y1', 'number'),\r\n                    createCol('M6', 'number'),\r\n                    createCol('M2', 'number'),\r\n                    createCol('LM', 'number'),\r\n                    createCol('Total_Qty', 'number'),\r\n                    ...daysCol.map(day => createCol(day, 'number', `Day ${day}`))\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    const transaction = Array.isArray(row?.StockTransaction) ? row?.StockTransaction : [];\r\n                    const preDefinedCol = [\r\n                        createCol('Item_Name_Modified', 'string', 'Item'),\r\n                        createCol('Y1', 'number'),\r\n                        createCol('M6', 'number'),\r\n                        createCol('M2', 'number'),\r\n                        createCol('LM', 'number'),\r\n                        createCol('Total_Qty', 'number')\r\n                    ];\r\n                    \r\n                    const columns = Object.keys(transaction[0] || {}).filter(\r\n                        key => !productColumns.includes(key) && key !== 'Stock_Group'\r\n                    ).map(key => createCol(key, 'number'));\r\n\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={transaction}\r\n                            columns={[...preDefinedCol, ...columns]}\r\n                        />\r\n                    );\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProductBasedSalesReport;\r\n","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\r\n\r\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => ({\r\n            ...o,\r\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                Grade_Item_Group: st.Item_Name_Modified,\r\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            }))\r\n        })).map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Grade_Item_Group',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductDayBasedSalesReport;","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { isEqualNumber, checkIsNumber, filterableText, groupData, Addition, toNumber, Division } from '../../../Components/functions'\r\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBoxOutlineBlank, CheckBox, FilterAltOff, Settings, FilterAlt } from '@mui/icons-material'\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport DisplayArrayData from \"./DataSetDisplay\";\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\r\n\r\n    return (\r\n        loading\r\n            ? <h5 className=\"text-center text-primary \">Loading...</h5>\r\n            : <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\nconst LedgerBasedSalesReport = ({ dataArray, colTypes, DB, Fromdate, Todate }) => {\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n\r\n    const propsColumns = colTypes.map((col, colInd) => ({\r\n        isVisible: colInd < 10 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1\r\n    }));\r\n    \r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    const sortedCoulumns = useMemo(() => {\r\n        return [...columns].sort(\r\n            (a, b) => (\r\n                a?.OrderBy && b?.OrderBy\r\n            ) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy\r\n        )\r\n    }, [columns])\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedCoulumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [sortedCoulumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : dataArray;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        key === 'Total_Qty' ? grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ) : Division(\r\n                            grp?.groupedData?.reduce(\r\n                                (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                0\r\n                            ),\r\n                            grp.groupedData.length\r\n                        )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, dataArray, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of sortedCoulumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <FilterableTable\r\n                title=\"LOL - Sales Reports\"\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Column Visiblity'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setDialog(true)}\r\n                            >\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto m-1\"\r\n                            value={groupBy}\r\n                            onChange={e => setGroupBy(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Group By</option>\r\n                            {DisplayColumn.filter(fil => (\r\n                                filterableText(fil.Fied_Data) === \"string\"\r\n                                && fil?.Field_Name !== 'Ledger_Name'\r\n                            )).map((col, colInd) => (\r\n                                <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    groupBy ? (\r\n                        <FilterableTable\r\n                            title={row[groupBy] + ' - Ledgers'}\r\n                            dataArray={Array.isArray(row?.groupedData) ? row?.groupedData : []}\r\n                            columns={DisplayColumn}\r\n                            ExcelPrintOption\r\n                            isExpendable={true}\r\n                            expandableComp={({ row }) => (\r\n                                <LedgerDetails\r\n                                    row={row}\r\n                                    DB={DB}\r\n                                    Fromdate={Fromdate}\r\n                                    Todate={Todate}\r\n                                />\r\n                            )}\r\n                        />\r\n                    ) : (\r\n                        <LedgerDetails\r\n                            row={row}\r\n                            DB={DB}\r\n                            Fromdate={Fromdate}\r\n                            Todate={Todate}\r\n                        />\r\n                    )\r\n                )}\r\n                maxHeightOption\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\r\n                                            disabled={Boolean(o?.isDefault)}\r\n                                            onChange={e =>\r\n                                                setColumns(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )}\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setColumns(prevColumns =>\r\n                                                prevColumns.map(oo =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setColumns(propsColumns)} variant=\"outlined\">Reset</Button>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default LedgerBasedSalesReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const ledgerAndTransactionExport = (excludeDetails, transactions) => {\r\n//     const wb = XLSX.utils.book_new();\r\n\r\n//     const excludeDetailsSheet = XLSX.utils.json_to_sheet(excludeDetails);\r\n//     XLSX.utils.book_append_sheet(wb, excludeDetailsSheet, 'Sheet1');\r\n\r\n//     const transactionsSheet = XLSX.utils.json_to_sheet(transactions);\r\n//     XLSX.utils.book_append_sheet(wb, transactionsSheet, 'Sheet2');\r\n\r\n//     XLSX.writeFile(wb, 'exported_data.xlsx');\r\n// };\r\n\r\n\r\n// {\r\n//     Field_Name: \"Excel_Export\",\r\n//     Fied_Data: \"string\",\r\n//     isVisible: 1,\r\n//     OrderBy: 1,\r\n//     isCustomCell: true,\r\n//     Cell: ({ row }) => {\r\n//         const excludeDetails = Object.fromEntries(\r\n//             Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\r\n//         );\r\n//         return (\r\n//             <>\r\n//                 <IconButton\r\n//                     size=\"small\"\r\n//                     onClick={() => {\r\n//                         ledgerAndTransactionExport([excludeDetails], row.LedgerSales);\r\n//                     }}\r\n//                 >\r\n//                     <Download />\r\n//                 </IconButton>\r\n//             </>\r\n//         )\r\n//     }\r\n// },\r\n\r\n\r\n\r\n\r\n\r\n// const columnsInitialValue = [\r\n//     { Field_Name: \"Ledger_Name\", Fied_Data: \"string\", isVisible: 1, isDefault: 1, OrderBy: 4 },\r\n//     { Field_Name: \"Total_Qty\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 5 },\r\n//     { Field_Name: \"ALL_Avg_M2\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 3, ColumnHeader: 'M2' },\r\n//     { Field_Name: \"ALL_Avg_M3\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 6, ColumnHeader: 'M3' },\r\n//     { Field_Name: \"ALL_Avg_M6\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 2, ColumnHeader: 'M6' },\r\n//     { Field_Name: \"ALL_Avg_M9\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 7, ColumnHeader: 'M9' },\r\n//     { Field_Name: \"ALL_Avg_One_Year\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 1, ColumnHeader: 'Y1' },\r\n//     { Field_Name: \"Q_Pay_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Freq_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Alias\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Actual_Party_Name_with_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Name\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Location\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Nature\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Owners\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_1\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_District\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"File_No\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Payment_Mode\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A3\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A4\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M2_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M3_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M6_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M9_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Y_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Q_Pay_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Tally_Id\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null }\r\n// ].sort((a, b) => a.OrderBy - b.OrderBy);","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { DaysBetween, firstDayOfMonth, getPreviousDate, ISOString } from \"../../Components/functions\";\r\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\r\nimport ProductDayBasedSalesReport from \"./SalesReportComponent/ProductDayBasedTable\";\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport LedgerBasedSalesReport from \"./SalesReportComponent/LedgerBasedTable\";\r\n\r\nconst SalesReport = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState({\r\n        salesInfo: [],\r\n        salesItemInfo: [],\r\n    })\r\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        ReportType: 'LedgerBased',\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n            .catch(console.error);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const { dataTypeInfo } = data?.others;\r\n\r\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\r\n                    ...los,\r\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\r\n                })) : [];\r\n\r\n                setDataTypes(pre => ({ ...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n                setSalesDataOfProduct(combinedData);\r\n            } else {\r\n                setSalesDataOfProduct([])\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setSalesDataOfProduct(null);\r\n        setDataTypes({\r\n            salesInfo: [],\r\n            salesItemInfo: [],\r\n        })\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({ ...pre, filterDialog: false }))\r\n    }\r\n\r\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        {storage?.Company_Name}\r\n                    </span>\r\n                    <span>\r\n                        <select\r\n                            value={filters.ReportType}\r\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\r\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\r\n                        >\r\n                            <option value={'LedgerBased'}>Ledger Based</option>\r\n                            <option value={'ProductBased'}>Product Based</option>\r\n                            {/* <option value={'ProductDayAverage'}>Product/Day Based</option> */}\r\n                        </select>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <form onSubmit={e => { \r\n                            e.preventDefault();\r\n                            setFilters(pre => ({ ...pre, reload: !pre.reload }))\r\n                        }}>\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                                // min={firstDayOfMonth()}\r\n                                value={filters.Fromdate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            />\r\n\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5'\r\n                                value={filters.Todate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            />\r\n\r\n                            <Tooltip title='Reload Data'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"ms-2\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <Refresh />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </form>\r\n\r\n                        {/* <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip> */}\r\n                    </div>\r\n\r\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\r\n                    )}\r\n\r\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\r\n                        <LedgerBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesData}\r\n                            colTypes={dataTypes.salesInfo}\r\n                            DB={storage?.Company_id}\r\n                            Fromdate={filters?.Fromdate}\r\n                            Todate={filters?.Todate}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesDataOFProduct}\r\n                            fromDate={filters.Fromdate}\r\n                            toDate={filters.Todate}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SalesReport;"],"names":["_ref","dataArray","productColumns","daysCol","setDaysCol","useState","showData","useMemo","map","o","transaction","Array","isArray","StockTransaction","stkObj","DaySum","Object","fromEntries","entries","filter","_ref2","key","includes","isNaN","Number","_ref3","pre","total","reduce","sum","item","_jsx","Fragment","children","FilterableTable","isExpendable","columns","createCol","day","expandableComp","_ref4","row","preDefinedCol","keys","initialPageCount","tableMaxHeight","days","_Division","_Division2","_Division3","_Division4","_Division5","M2_Avg","Division","ALL_Avg_M2","getDaysInPreviousMonths","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","Billed_Avg","st","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","Field_Name","isVisible","Fied_Data","icon","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","loading","setLoading","useEffect","fetchLink","address","Ledger_Tally_Id","headers","then","success","data","others","dataTypeInfo","salesInfo","catch","e","console","error","finally","className","DisplayArrayData","colTypes","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","propsColumns","col","colInd","Column_Name","Data_Type","OrderBy","setColumns","sortedCoulumns","sort","a","b","DisplayColumn","isEqualNumber","Defult_Display","length","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_grp$groupedData","_grp$groupedData2","groupedData","acc","colmn","Addition","toNumber","applyFilters","handleFilterChange","column","value","prevFilters","type","min","max","undefined","start","end","dateValue","Date","_filters$column$Field","_item$column$Field_Na","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","placeholder","onChange","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","closeDialog","title","headerFontSizePx","bodyFontSizePx","ButtonArea","_Fragment","Tooltip","IconButton","size","onClick","Settings","FilterAltOff","FilterAlt","_col$Field_Name","ExcelPrintOption","ColumnHeader","_ref5","_ref6","maxHeightOption","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","ke","_column$Field_Name","DialogActions","Button","color","DialogTitle","i","Card","component","Paper","Switch","Boolean","isDefault","disabled","prevColumns","oo","checkIsNumber","width","variant","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","getPreviousDate","ISOString","ReportType","reload","Company_id","_data$others","combinedData","LOSAbstract","los","losDetails","Stock_Group","daysDifferent","DaysBetween","backgroundColor","Company_Name","CardContent","onSubmit","preventDefault","Refresh","LedgerBasedSalesReport","ProductBasedSalesReport","fromDate","toDate","ProductDayBasedSalesReport"],"sourceRoot":""}
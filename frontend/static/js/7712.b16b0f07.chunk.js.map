{"version":3,"file":"static/js/7712.b16b0f07.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/SalesDeliveryConvert.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    Dialog,\r\n    Tooltip,\r\n    TextField,\r\n    IconButton,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Switch,\r\n} from \"@mui/material\";\r\nimport \"../../common.css\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport {\r\n    getPreviousDate,\r\n    isEqualNumber,\r\n    ISOString,\r\n    isValidObject,\r\n} from \"../../../Components/functions\";\r\n// import NewDeliveryOrder from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { FilterAlt, Visibility } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport NewDeliveryOrder from \"../SalesReportComponent/NewDeliveryOrder\";\r\nimport InvoiceBillTemplate from \"./newInvoiceTemplate\";\r\n\r\nimport TwoWheelerIcon from \"@mui/icons-material/TwoWheeler\";\r\nimport DeliveryDetailsList from \"./DeliveryDetailsList\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SalesDeliveryConvert = ({ loadingOn, loadingOff }) => {\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [reload, setReload] = useState(false);\r\n    const [routes, setRoutes] = useState([]);\r\n    const [area, setArea] = useState([]);\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] =\r\n        useState(false);\r\n    const [godDown, setGodDown] = useState([]);\r\n    const checked = useState(true);\r\n    // const [Product_Array, setProductArray] = useState([]);\r\n\r\n    const Created_by = storage?.UserId;\r\n    const Branch_Id = storage?.BranchId;\r\n    // const Cost_Center_Type_Id = storage?.UserTypeId\r\n    const [deliveryDialogBox, setDeliveryDialogBox] = useState(false);\r\n\r\n    const handleCloseDialog = () => setDeliveryDialogBox(false);\r\n\r\n    // const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    // const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n    const [DeliveryList, setDeliveryList] = useState([]);\r\n\r\n    const initialValue = {\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: \"\",\r\n        RetailerGet: \"ALL\",\r\n        Created_by: \"\",\r\n        CreatedByGet: \"ALL\",\r\n        Sales_Person_Id: \"\",\r\n        SalsePersonGet: \"ALL\",\r\n        Cancel_status: 0,\r\n        Route_Id: \"\",\r\n        RoutesGet: \"ALL\",\r\n        Area_Id: \"\",\r\n        AreaGet: \"ALL\",\r\n    };\r\n\r\n    const [filters, setFilters] = useState(initialValue);\r\n\r\n    const [deliveryDetails, setDeliveryDetails] = useState({\r\n        Do_Date: ISOString(),\r\n        Vehicle_No: \"\",\r\n        Trip_No: \"\",\r\n        Trip_Date: ISOString(),\r\n        StartTime: \"\",\r\n        Created_by: \"\",\r\n        Delivery_Person_Id: \"\",\r\n        Delivery_Location: \"\",\r\n        Delivery_Time: \"\",\r\n        Payment_Ref_No: \"\",\r\n        Payment_Mode: \"\",\r\n        Payment_Status: \"\",\r\n        Narration: \"\",\r\n        Alter_Id: \"\",\r\n        Delivery_Status: \"\",\r\n        GoDown_Id: \"\",\r\n        GodDown_Name: \"\",\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDeliveryDetails((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleDelivery?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}&Route_Id=${filters?.Route_Id}&Area_Id=${filters?.Area_Id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSaleOrders(data?.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Sales_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        filters?.Route_Id,\r\n        filters?.Area_Id,\r\n        reload,\r\n    ]);\r\n\r\n    const handleSubmit = async () => {\r\n        // const EmployeesInvolved = {\r\n        //     Trip_ST_KM: deliveryDetails.Trip_ST_KM || \"\",\r\n        //     Branch_Id: deliveryDetails.Branch_Id || \"\",\r\n        //     Vehicle_No: deliveryDetails.Vehicle_No || \"\",\r\n        //     Trip_No: deliveryDetails.Trip_No || \"\",\r\n        //     StartTime: deliveryDetails.StartTime || \"\",\r\n        //     Delivery_Person_Id: deliveryPerson?.UserId || \"\",\r\n        //     Delivery_Location: deliveryDetails.Delivery_Location || \"\",\r\n        //     Alter_Id: deliveryDetails.Alter_Id || \"\",\r\n        //     Delivery_Status: deliveryDetails.Delivery_Status || \"\",\r\n        //     Cost_Center_Type_Id: Cost_Center_Type_Id,\r\n\r\n        // };\r\n\r\n        const tripData = {\r\n            ...deliveryDetails,\r\n            DeliveryList,\r\n\r\n            Branch_Id: Branch_Id,\r\n            Created_by: Created_by,\r\n        };\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `delivery/multipleDelivery`,\r\n                method: \"POST\",\r\n                bodyData: tripData,\r\n            });\r\n\r\n            if (!response.success) {\r\n                toast.error(response.message);\r\n                // handleCloseDialog(true);\r\n                return false;\r\n            }\r\n            toast.success(response.message);\r\n            setFilters(initialValue);\r\n            setReload((prev) => !prev);\r\n            handleCloseDialog(true);\r\n            setSelectedRows([]);\r\n        } catch (error) {\r\n            handleCloseDialog(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setRetailers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSalePerson(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUsers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `/dataEntry/godownLocationMaster`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    const filtered = data.data.filter(\r\n                        (item) => Number(item.Godown_Id) === 2\r\n                    );\r\n                    setGodDown(filtered);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        // fetchLink({\r\n        //     address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        // }).then(data => {\r\n        //     if (data.success) {\r\n        //         setDeliveryPersonList(data.data);\r\n        //     }\r\n        // }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/routes/dropdown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setRoutes(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/areas/dropdown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setArea(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        const isSelected = selectedRows.some(\r\n            (selectedRow) => selectedRow.So_Id === row.So_Id\r\n        );\r\n\r\n        if (isSelected) {\r\n            setSelectedRows(\r\n                selectedRows.filter((selectedRow) => selectedRow.So_Id !== row.So_Id)\r\n            );\r\n        } else {\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: \"checkbox\",\r\n            ColumnHeader: \"\",\r\n            isVisible: 1,\r\n            pointer: true,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const isSelected = selectedRows.some(\r\n                    (selectedRow) => selectedRow.So_Id === row.So_Id\r\n                );\r\n\r\n                return (\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleCheckboxChange(row)}\r\n                        disabled={row?.isConverted !== 0}\r\n                        onFocus={(e) => {\r\n                            e.target.blur();\r\n                        }}\r\n                        style={{\r\n                            cursor: \"pointer\",\r\n                            transform: \"scale(1.5)\",\r\n                            width: \"14px\",\r\n                            height: \"20px\",\r\n                        }}\r\n                    />\r\n                );\r\n            },\r\n        },\r\n        {\r\n            Field_Name: \"So_Id\",\r\n            ColumnHeader: \"Order ID\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"Retailer_Name\",\r\n            ColumnHeader: \"Customer\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"So_Date\",\r\n            ColumnHeader: \"Sale Order Date\",\r\n            Fied_Data: \"date\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"So_Inv_No\",\r\n            ColumnHeader: \"So_Inv_No\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: \"Total_Before_Tax\",\r\n            ColumnHeader: \"Before Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Tax\",\r\n            ColumnHeader: \"Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Invoice_value\",\r\n            ColumnHeader: \"Invoice Value\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            ColumnHeader: \"Status\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const convert = convertedStatus.find(\r\n                    (status) => status.id === Number(row?.isConverted)\r\n                );\r\n                return (\r\n                    <span\r\n                        className={\r\n                            \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                            \"bg-secondary text-white\"\r\n                        }\r\n                    >\r\n                        {convert?.label ?? \"Undefined\"}\r\n                    </span>\r\n                );\r\n            },\r\n        },\r\n\r\n        {\r\n            Field_Name: \"Action\",\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title=\"View Order\">\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    });\r\n                                }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Sales Delivery\">\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <TwoWheelerIcon className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const setTripDetails = (data) => {\r\n        if (!Array.isArray(data)) {\r\n            console.error(\"Invalid data format. Expected an array.\");\r\n            return;\r\n        }\r\n\r\n        setDeliveryDialogBox(true);\r\n\r\n        const DeliveryList = [];\r\n        const Product_Array = [];\r\n\r\n        data.forEach((item) => {\r\n            if (item) {\r\n                DeliveryList.push(item);\r\n\r\n                if (item.Products_List && Array.isArray(item.Products_List)) {\r\n                    Product_Array.push(...item.Products_List);\r\n                }\r\n            }\r\n        });\r\n\r\n        setDeliveryList(DeliveryList);\r\n\r\n        setDeliveryDetails({\r\n            DeliveryList,\r\n            Product_Array,\r\n        });\r\n    };\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && \"Inclusive\"}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && \"Exclusive\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && \"IGST\"}\r\n                                {isEqualNumber(row.IS_IGST, 0) && \"GST\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>\r\n                                {row.Narration}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen);\r\n        setOrderInfo({});\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n    };\r\n    const handleToggle = () => {\r\n        setScreen((prev) => !prev);\r\n        setIsDeliveryDetailsVisible((prev) => !prev);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">\r\n                        {screen ? \"Sale Orders\" : isValidObject(orderInfo)}\r\n                    </h6>\r\n\r\n                    <div>\r\n                        {screen && (\r\n                            <Tooltip title=\"Filters\">\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n\r\n                        {selectedRows.length > 0 && screen && (\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                onClick={() => setTripDetails(selectedRows)}\r\n                            >\r\n                                Convert To Delivery\r\n                            </Button>\r\n                        )}\r\n\r\n                        {screen && (\r\n                            <Switch\r\n                                checked={checked}\r\n                                onChange={() => {\r\n                                    //  setChecked(true);\r\n                                    setScreen(false);\r\n                                    setIsDeliveryDetailsVisible(true);\r\n                                }}\r\n                                inputProps={{ \"aria-label\": \"controlled\" }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <CardContent className=\"p-0\">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : isDeliveryDetailsVisible ? (\r\n                        <DeliveryDetailsList\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload((prev) => !prev);\r\n                                setScreen((pre) => !pre);\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            onToggle={handleToggle}\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload((prev) => !prev);\r\n                                setScreen((prev) => !prev);\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            editOn={true}\r\n                        />\r\n                        // reload={() => {\r\n                        //     setReload(pre => !pre);\r\n                        //     setScreen(pre => !pre)\r\n                        // }}\r\n                        // switchScreen={switchScreen}\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={\"Sale Order\"}\r\n                />\r\n            )}\r\n            <Dialog\r\n                open={deliveryDialogBox}\r\n                onClose={handleCloseDialog}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>Delivery Details</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <td style={{ verticalAlign: \"middle\" }}>Delivery Date <span style={{ color: \"red\" }}>*</span></td>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            type=\"date\"\r\n                            name=\"Do_Date\"\r\n                            value={deliveryDetails.Do_Date}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <div>\r\n                            <div style={{ verticalAlign: \"middle\" }}>Godown <span style={{ color: \"red\" }}>*</span></div>\r\n                            <div>\r\n                                <Select\r\n                                    value={\r\n                                        deliveryDetails?.GoDown_Id\r\n                                            ? {\r\n                                                value: deliveryDetails?.GoDown_Id,\r\n                                                label: deliveryDetails?.GodDown_Name,\r\n                                            }\r\n                                            : { value: \"\", label: \"select\", isDisabled: true }\r\n                                    }\r\n                                    onChange={(e) =>\r\n                                        setDeliveryDetails({\r\n                                            ...deliveryDetails,\r\n                                            GoDown_Id: e.value,\r\n                                            GodDown_Name: e.label,\r\n                                        })\r\n                                    }\r\n                                    options={[\r\n                                        { value: \"\", label: \"select\", isDisabled: true },\r\n                                        ...godDown.map((obj) => ({\r\n                                            value: obj?.Godown_Id,\r\n                                            label: obj?.Godown_Name,\r\n                                        })),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    menuPortalTarget={document.body}\r\n                                    menuPosition=\"fixed\"\r\n                                    menuPlacement=\"auto\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Retailer_Id,\r\n                                                label: filters?.RetailerGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Retailer_Id: e.value,\r\n                                                    RetailerGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...retailers.map((obj) => ({\r\n                                                    value: obj?.Retailer_Id,\r\n                                                    label: obj?.Retailer_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Salse Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Sales_Person_Id,\r\n                                                label: filters?.SalsePersonGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Sales_Person_Id: e.value,\r\n                                                    SalsePersonGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...salesPerson.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Created_by,\r\n                                                label: filters?.CreatedByGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Created_by: e.value,\r\n                                                    CreatedByGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...users.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Fromdate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Todate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Cancel_status: Number(e.target.value),\r\n                                                })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Routes</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Route_Id,\r\n                                                label: filters?.RoutesGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Route_Id: e.value,\r\n                                                    RoutesGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...routes.map((obj) => ({\r\n                                                    value: obj?.Route_Id,\r\n                                                    label: obj?.Route_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Route Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Area</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Area_Id,\r\n                                                label: filters?.AreaGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Area_Id: e.value,\r\n                                                    AreaGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...area.map((obj) => ({\r\n                                                    value: obj?.Area_Id,\r\n                                                    label: obj?.Area_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Area Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SalesDeliveryConvert;"],"names":["_ref","loadingOn","loadingOff","selectedRows","setSelectedRows","useState","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","reload","setReload","routes","setRoutes","area","setArea","isDeliveryDetailsVisible","setIsDeliveryDetailsVisible","godDown","setGodDown","checked","Created_by","UserId","Branch_Id","BranchId","deliveryDialogBox","setDeliveryDialogBox","handleCloseDialog","DeliveryList","setDeliveryList","initialValue","Fromdate","getPreviousDate","Todate","ISOString","Retailer_Id","RetailerGet","CreatedByGet","Sales_Person_Id","SalsePersonGet","Cancel_status","Route_Id","RoutesGet","Area_Id","AreaGet","filters","setFilters","deliveryDetails","setDeliveryDetails","Do_Date","Vehicle_No","Trip_No","Trip_Date","StartTime","Delivery_Person_Id","Delivery_Location","Delivery_Time","Payment_Ref_No","Payment_Mode","Payment_Status","Narration","Alter_Id","Delivery_Status","GoDown_Id","GodDown_Name","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","Company_id","filtered","filter","item","Number","Godown_Id","saleOrderColumn","Field_Name","ColumnHeader","isVisible","pointer","isCustomCell","Cell","_ref2","row","isSelected","some","selectedRow","So_Id","_jsx","type","onChange","handleCheckboxChange","disabled","isConverted","onFocus","target","blur","style","cursor","transform","width","height","Fied_Data","align","_ref3","_ref4","_convert$label","convert","convertedStatus","find","status","id","className","color","children","label","_ref5","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","orderProducts","Products_List","size","Visibility","switchScreen","_objectSpread","TwoWheelerIcon","closeDialog","Card","isValidObject","FilterAlt","length","Button","variant","Array","isArray","Product_Array","forEach","push","setTripDetails","Switch","inputProps","CardContent","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref6","Branch_Name","Sales_Person_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","DeliveryDetailsList","editValues","prev","pre","onToggle","handleToggle","NewDeliveryOrder","editOn","Object","keys","InvoiceBillTemplate","download","actionOpen","clearDetails","TitleText","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","verticalAlign","TextField","name","value","InputLabelProps","shrink","Select","isDisabled","options","map","obj","Godown_Name","styles","customSelectStyles","isSearchable","menuPortalTarget","document","body","menuPosition","menuPlacement","DialogActions","async","tripData","response","method","bodyData","toast","message","Retailer_Name","placeholder","Name","Route_Name","Area_Name"],"sourceRoot":""}
{"version":3,"file":"static/js/4676.83792bc3.chunk.js","mappings":"+MAGaA,EAAoB,CAC7BC,MAAO,CACHC,MAAO,CACHC,MAAO,OACPC,gBAAiB,gBAIzBC,KAAM,CACFH,MAAO,CACHE,gBAAiB,gBAGzBE,UAAW,CACPJ,MAAO,CACHE,gBAAiB,YACjBG,MAAO,QACPC,SAAU,UAMTC,EAAqB,CAM9BC,KAAMA,CAACC,EAAUC,KAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfF,GAAQ,IACXG,OAAQ,OAEZC,WAAYC,IAAIH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUG,GAAI,IAAEF,OAAQ,OACxCG,aAAeD,IAAIH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZG,GAAI,IACPZ,gBAAiB,UACjBG,MAAO,OACPW,WAAY,OACZV,SAAU,OACVW,QAAS,WACTC,aAAc,iBACdC,cAAe,cAEnBC,OAAQA,CAACN,EAAMJ,KAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbG,GAAI,IACPZ,gBAAiBQ,EAAMW,WACjB,UACAX,EAAMY,UACN,UACA,QACNjB,MAAOK,EAAMW,WAAa,QAAU,OACpCJ,QAAS,eAmBJM,EAAW,CACpB,CACIC,GAAI,EACJC,SAAU,UACVC,QAAS,OACTC,MAAO,OACP1B,MAAO,KAEX,CACIuB,GAAI,EACJC,SAAU,YAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,cAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,iBAEd,CACID,GAAI,EACJC,SAAU,gBAEd,CACID,GAAI,EACJC,SAAU,WAILG,EAAiB,CAC1B,CACIC,SAAU,EACVC,KAAM,kBACNC,SAAU,8BACVC,QAAS,iGACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIV,SAAU,EACVC,KAAM,oBACNC,SAAU,GACVC,QAAS,4JACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,eACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIV,SAAU,EACVC,KAAM,kBACNC,SAAU,GACVC,QAAS,4HACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,e,iOCu8Bd,QAlkCA,SAAoBC,GAA6B,IAA5B,UAAEC,EAAS,WAAEC,GAAYF,EAC1C,MAAMG,EAAe,CACjBC,UAAU,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAC9CC,QAAQ,IAAIH,MAAOC,cAAcC,MAAM,KAAK,GAC5CE,MAAO,IACPC,KAAM,OAGJC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,UAIzCC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAG9BC,EAAoBC,IAAyBF,EAAAA,EAAAA,WAAS,IAItDG,EAAQC,IAAaJ,EAAAA,EAAAA,UAASf,IAC9BoB,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,KAErC,WAAEO,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAC5BC,EAAuB,OAAVH,QAAU,IAAVA,OAAU,EAAVA,EAAYG,YAExBC,EAAqBC,IAA0BZ,EAAAA,EAAAA,UAAS,QACxDa,EAAiBC,IAAsBd,EAAAA,EAAAA,WAAS,IAEhDe,EAAUC,IAAehB,EAAAA,EAAAA,WAC5B,IAAIb,MAAOC,cAAcC,MAAM,KAAK,KAEjC4B,EAAQC,IAAalB,EAAAA,EAAAA,WAAS,IAAIb,MAAOC,cAAcC,MAAM,KAAK,KAClE8B,EAAUC,IAAepB,EAAAA,EAAAA,UAAS,KAClCqB,EAASC,IAActB,EAAAA,EAAAA,UAAS,OAChCuB,EAAkBC,IAAuBxB,EAAAA,EAAAA,UAAS,KAClDyB,EAAWC,IAAgB1B,EAAAA,EAAAA,UAAS,OACpC2B,EAAaC,IAAkB5B,EAAAA,EAAAA,UAAS,KACxC6B,EAAoBC,IAAyB9B,EAAAA,EAAAA,UAAS,OACtD+B,EAAQC,IAAahC,EAAAA,EAAAA,UAAS,KAC9BiC,EAAgBC,KAAqBlC,EAAAA,EAAAA,UAAS,KAC9CmC,GAAOC,KAAYpC,EAAAA,EAAAA,UAAS,KAC5BqC,GAAkBC,KAAuBtC,EAAAA,EAAAA,UAAS,OAClDuC,GAAUC,KAAexC,EAAAA,EAAAA,UAAS,KAClCyC,GAAeC,KAAoB1C,EAAAA,EAAAA,WAAS,IAC5C2C,GAAaC,KAAkB5C,EAAAA,EAAAA,UAAS,KACxC6C,GAAkBC,KAAuB9C,EAAAA,EAAAA,UAAS,OAClD+C,GAAQC,KAAahD,EAAAA,EAAAA,UAAS,KAC9BiD,GAAcC,KAAmBlD,EAAAA,EAAAA,UAAS,KAC1CmD,GAAeC,KAAoBpD,EAAAA,EAAAA,UAAS,CAAET,MAAO,KAAMC,KAAM,MAExE6D,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAoB,OAAP7D,QAAO,IAAPA,OAAO,EAAPA,EAAS8D,WACtBC,EAAgB,OAAP/D,QAAO,IAAPA,OAAO,EAAPA,EAASgE,OAClBC,EAAmB,OAAPjE,QAAO,IAAPA,OAAO,EAAPA,EAASkE,YAE3BC,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,8CAADuF,OAAgDH,GACvDI,QAAS,CACLC,cAAc,UAADF,OAAYjE,aAAaC,QAAQ,sBAGjDmE,MAAMC,IACH,GAAIA,EAAKC,QAAS,CACd,IAAIC,EAAoB,GACxB,MAAMC,EAAcH,EAAKA,KAAKI,KAAKC,IAAI,CACnCC,MAAOD,EAAKb,OACZe,MAAOF,EAAK9E,SAEhB4C,GAASgC,GAEkB,IAAvBK,OAAOnB,IACgB,IAAvBmB,OAAOnB,IACgB,IAAvBmB,OAAO/D,IAEPyD,EAAoBF,EAAKA,KACzB7D,GAAWsE,IAAIzH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWyH,GAAI,IAAEnF,MAAO,EAAGC,KAAM,UAChDU,GAAsB,GACtBU,EAAuB,SAEvBuD,EAAoBF,EAAKA,KAAK9D,QACzBwE,GAAaA,EAASlB,SAAWD,IAEtCpD,GAAWsE,IAAIzH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACRyH,GAAI,IACPnF,MAAOiE,EACPhE,KAAa,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAASD,SAEnBU,GAAsB,GACtBU,EAA8B,OAAPnB,QAAO,IAAPA,OAAO,EAAPA,EAASD,OAGpCc,EAAa6D,GACbjB,GAAgBiB,EACpB,KAEHS,OAAOC,GAAMC,QAAQC,MAAM,4BAA6BF,IAAG,GACjE,CACQ,OAAPpF,QAAO,IAAPA,OAAO,EAAPA,EAAS8D,WACF,OAAP9D,QAAO,IAAPA,OAAO,EAAPA,EAASgE,OACF,OAAPhE,QAAO,IAAPA,OAAO,EAAPA,EAASkE,WACF,OAAPlE,QAAO,IAAPA,OAAO,EAAPA,EAASD,KACTM,KAOJuD,EAAAA,EAAAA,YAAU,MACNO,EAAAA,EAAAA,GAAU,CAAEtF,QAAQ,+BAAiC0F,MAAMC,IACnDA,EAAKC,SACL1C,EAAoByC,EACxB,GACF,GACH,KAEHZ,EAAAA,EAAAA,YAAU,KACN,MAAM2B,EAAwB,OAAPvF,QAAO,IAAPA,OAAO,EAAPA,EAASgE,QAEhCG,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,8BAADuF,OAAgCmB,GACvClB,QAAS,CACLC,cAAc,UAADF,OAAYjE,aAAaC,QAAQ,sBAGjDmE,MAAMC,IACCA,EAAKC,SACLtB,GAAeqB,EAAKA,KACxB,IAEHW,OAAOC,GAAMC,QAAQC,MAAM,8BAA+BF,IAAG,GACnE,CAACpC,GAAe3C,KAEnBuD,EAAAA,EAAAA,YAAU,KACN,MAAMK,EAAmB,OAAPjE,QAAO,IAAPA,OAAO,EAAPA,EAASkE,YAE3BC,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,uCAADuF,OAAyCH,GAChDI,QAAS,CACLC,cAAc,UAADF,OAAYjE,aAAaC,QAAQ,sBAGjDmE,MAAMC,IACH,GAAIA,EAAKC,SACDD,EAAKgB,QAAUhB,EAAKgB,OAAOC,WAAY,CACvC,MAAMC,EAAclB,EAAKgB,OAAOC,WAAWb,KAAKe,IAAI,CAChDb,MAAOa,EAAKb,MACZC,MAAOY,EAAKZ,UAEhB5C,EAAeuD,EACnB,CACJ,IAEHP,OAAOC,GAAMC,QAAQC,MAAM,8BAA+BF,IAAG,GACnE,CAAQ,OAAPpF,QAAO,IAAPA,OAAO,EAAPA,EAASkE,WAAY7D,IAEzB,MAAMuF,GAAmBA,CAACC,EAAMf,KACf,SAATe,GACAtE,EAAYuD,GACZgB,GAAchB,EAAOtD,EAAQI,KAE7BH,EAAUqD,GACVgB,GAAcxE,EAAUwD,EAAOlD,GACnC,EAEEmE,GAAuBjB,IACzBjD,EAAWiD,GACXgB,GAAcxE,EAAUE,EAAQsD,EAAM,EAGpCkB,GAAYA,KACdrC,GAAiB,CAAE7D,MAAO,GAAIC,KAAM,KACpCwB,GAAY,IAAI7B,MAAOC,cAAcC,MAAM,KAAK,IAChD6B,GAAU,IAAI/B,MAAOC,cAAcC,MAAM,KAAK,IAC9CiC,EAAW,QACXF,EAAY,GACZM,EAAa,MACbI,EAAsB,MACtBQ,GAAoB,MACpBN,EAAU,IACVE,GAAkB,GAAG,GAqBzBmB,EAAAA,EAAAA,YAAU,KAlBaqC,MACnB,MAAMpC,EAAoB,OAAP7D,QAAO,IAAPA,OAAO,EAAPA,EAAS8D,WACtByB,GAAuB,OAAN7E,QAAM,IAANA,OAAM,EAANA,EAAQZ,SAAgB,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAASgE,SAEjDG,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,wBAADuF,OAA0BmB,EAAc,gBAAAnB,OAAeP,GAC9DQ,QAAS,CACLC,cAAc,UAADF,OAAYjE,aAAaC,QAAQ,sBAGjDmE,MAAMC,IACCA,EAAKC,SACL1B,GAAYyB,EAAKA,KACrB,IAEHW,OAAOC,GAAMC,QAAQC,MAAM,8BAA+BF,IAAG,EAIlEa,EAAgB,GACjB,CAAQ,OAAPjG,QAAO,IAAPA,OAAO,EAAPA,EAASkE,WAAY7D,IAEzB,MAAMyF,GAAgBA,CAACI,EAAMC,EAAIC,KAC7B,MAAMC,EAAQ,IAAI3G,KAAKwG,GACjBI,EAAM,IAAI5G,KAAKyG,GAIrB,GAFgBE,EAAME,iBAAmBD,EAAIC,eAIrC5E,EADe,SAAfyE,EACY,EAEA,QAEb,CACH,MAAMI,EAAWC,KAAKC,IAAIJ,EAAMD,GAC1BM,EAAWF,KAAKG,MAAMJ,EAAQ,OAA4B,EAChE7E,EAAYgF,EAChB,GA6HJ,OA5EA/C,EAAAA,EAAAA,YAAU,KACN,MAAM2B,EAAmC,OAAZ,OAAN7E,QAAM,IAANA,OAAM,EAANA,EAAQZ,OAAgB,GAAW,OAANY,QAAM,IAANA,OAAM,EAANA,EAAQZ,MACtDwB,EAAiB,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQjB,SACnB+B,EAAe,OAANd,QAAM,IAANA,OAAM,EAANA,EAAQb,OAElByB,GAAaE,IAElB2C,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,wBAADuF,OAA0BmB,EAAc,cAAAnB,OAAa9C,EAAQ,YAAA8C,OAAW5C,GAC/E6C,QAAS,CACLC,cAAc,UAADF,OAAYjE,aAAaC,QAAQ,sBAGjDmE,MAAMC,IACCA,EAAKC,SACL1B,GAAYyB,EAAKA,MAAQ,GAC7B,IAEHW,OAAOC,GAAMC,QAAQC,MAAM,6BAA8BF,IAAG,GAClE,CAAO,OAAN1E,QAAM,IAANA,OAAM,EAANA,EAAQZ,MAAa,OAANY,QAAM,IAANA,OAAM,EAANA,EAAQjB,SAAgB,OAANiB,QAAM,IAANA,OAAM,EAANA,EAAQb,OAAQQ,KAErDuD,EAAAA,EAAAA,YAAU,KACFlC,GAAY,GACZG,EAAW,OACf,GACD,CAACH,KAoDAmF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAiDIC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,UACDF,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAACC,GAAI,CAAEC,UAAW,QAASL,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,sFAAqFN,UAChGC,EAAAA,EAAAA,KAAA,MAAIK,UAAU,QAAON,SAAC,oBAG1BF,EAAAA,EAAAA,MAAA,OACIQ,UAAU,OACVxK,MAAO,CACHyK,QAAS,OACTC,eAAgB,gBAChBC,SAAU,OACVC,WAAY,YACdV,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEyK,QAAS,OAAQE,SAAU,OAAQE,KAAM,GAAIX,SAAA,EACvDF,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEC,MAAO,QAAS6K,YAAa,QAASZ,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,cACPC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACHP,UAAU,QACVQ,gBAAgB,eAChB/C,MAAO,CAAEA,MAAa,OAANpE,QAAM,IAANA,OAAM,EAANA,EAAQZ,MAAOiF,MAAa,OAANrE,QAAM,IAANA,OAAM,EAANA,EAAQX,MAC9C+H,SAAW1C,GACPzE,GAASnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIkD,GAAM,IAAEZ,MAAOsF,EAAEN,MAAO/E,KAAMqF,EAAEL,SAEnDgD,QAAS,CACL,CAAEjD,MAAO,EAAGC,MAAO,UAChBnE,EAAUgE,KAAKoD,IAAG,CACjBlD,MAAU,OAAHkD,QAAG,IAAHA,OAAG,EAAHA,EAAKhE,OACZe,MAAU,OAAHiD,QAAG,IAAHA,OAAG,EAAHA,EAAKjI,UAGpBkI,cAAc,EACdC,WAAY1H,EACZ2H,OAAQ/K,EAAAA,GACRgL,YAAalH,QAIrB2F,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEC,MAAO,QAAS6K,YAAa,QAASZ,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,eACPC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLiC,SAAW1C,GACPzE,GAASnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIkD,GAAM,IAAEjB,SAAU2F,EAAEiD,OAAOvD,SAE9CA,MAAa,OAANpE,QAAM,IAANA,OAAM,EAANA,EAAQjB,SACf4H,UAAU,qBAIlBR,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEC,MAAO,QAAS6K,YAAa,QAASZ,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,aACPC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLiC,SAAW1C,GACPzE,GAASnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIkD,GAAM,IAAEb,OAAQuF,EAAEiD,OAAOvD,SAE5CA,MAAa,OAANpE,QAAM,IAANA,OAAM,EAANA,EAAQb,OACfwH,UAAU,wBAKtBR,EAAAA,EAAAA,MAAA,OACIhK,MAAO,CAAEyK,QAAS,OAAQG,WAAY,WAAYa,IAAK,QAASvB,SAAA,EAEhEF,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEC,MAAO,SAAUiK,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAOnK,MAAO,CAAE0L,WAAY,UAAWxB,SAAC,WACxCC,EAAAA,EAAAA,KAAA,UAAQK,UAAU,wBAAwBmB,QAzWnDC,KACfpH,GAAmB,EAAK,EAwW8D0F,SAAC,cAInEC,EAAAA,EAAAA,KAAA,UACIK,UAAU,uBACVmB,QAASA,KAEDvF,IADAD,GAIJ,EACF+D,SAED/D,GAAgB,OAAS,kBAKrCA,IACGgE,EAAAA,EAAAA,KAAC0B,EAAAA,GAAe,CACZC,UAAWzF,GACX0F,QAAS,CACL,CACIC,cAAc,EACdC,KAAMC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OAAKC,EAAIC,UAAY,IAAI,EACvCC,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMQ,IAAA,IAAC,IAAEN,GAAKM,EAAA,OAAKN,EAAIvJ,SAASG,MAAM,KAAK,EAAE,EAC7CsJ,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,OACXxL,WAAY,UAIxB,CACIgL,cAAc,EACdC,KAAMS,IAAA,IAAC,IAAEP,GAAKO,EAAA,OAAKP,EAAInJ,OAAOD,MAAM,KAAK,EAAE,EAC3CsJ,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,OACXxL,WAAY,UAIxB,CACIgL,cAAc,EACdC,KAAMU,IAAA,IAAC,IAAER,GAAKQ,EAAA,OAAKR,EAAIS,WAAa,IAAI,EACxCP,aAAc,aACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMY,IAAA,IAAC,IAAEV,GAAKU,EAAA,OAAKV,EAAIW,UAAY,IAAI,EACvCT,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMc,IAAA,IAAC,IAAEZ,GAAKY,EAAA,OAAKZ,EAAIa,SAAW,IAAI,EACtCX,aAAc,UACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMgB,IAAA,IAAC,IAAEd,GAAKc,EAAA,OAAKd,EAAIe,YAAc,IAAI,EACzCb,aAAc,aACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMkB,IAAA,IAAC,IAAEhB,GAAKgB,EAAA,OAAKhB,EAAIiB,QAAU,IAAI,EACrCf,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMoB,IAAA,IAAC,IAAElB,GAAKkB,EAAA,OAAKlB,EAAImB,iBAAmB,IAAI,EAC9CjB,aAAc,kBACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMsB,IAAA,IAAC,IAAEpB,GAAKoB,EAAA,OAAKpB,EAAIqB,cAAgB,IAAI,EAC3CnB,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMwB,IAAA,IAAC,IAAEtB,GAAKsB,EAAA,OAAKtB,EAAIuB,QAAU,IAAI,EACrCrB,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdK,aAAc,UACdC,UAAW,EACXrM,MAAO,MACPgM,KAAM0B,IAAA,IAAC,IAAExB,GAAKwB,EAAA,OACVxD,EAAAA,EAAAA,KAAA,UACIK,UAAU,iCACVmB,QAASA,IA7V7BQ,KAAS,IAADyB,EAAAC,EAAAC,EACxBtH,GAAoB2F,GAOpBrF,GAAiB,CACb7D,MAAOkF,OAAOgE,EAAI4B,SAClB7K,KAAMiJ,EAAIC,WAGd1H,EAAwB,QAAbkJ,EAACzB,EAAIvJ,gBAAQ,IAAAgL,OAAA,EAAZA,EAAc7K,MAAM,KAAK,IACrC6B,EAAoB,QAAXiJ,EAAC1B,EAAInJ,cAAM,IAAA6K,OAAA,EAAVA,EAAY9K,MAAM,KAAK,IACjCiC,EAAWmH,EAAIa,SACflI,EAAYqH,EAAIW,UAEhB,MAAMkB,EAAwC,QAAxBF,EAAG7I,EAAiB0C,YAAI,IAAAmG,OAAA,EAArBA,EAAuBG,MAC3CC,IAAE,IAAAC,EAAAC,EAAA,OAAU,QAALD,EAAAD,EAAGG,UAAE,IAAAF,OAAA,EAALA,EAAOG,eAA+B,QAArBF,EAAKjC,EAAIoC,oBAAY,IAAAH,OAAA,EAAhBA,EAAkBE,WAAU,IAE9DlJ,EAAa4I,GAAoB,MAEjC,MAAMQ,EAAoBnJ,EAAY4I,MACjCQ,GAAMA,EAAEvG,QAAUiE,EAAIe,aAE3B1H,EAAsBgJ,GAAqB,MAE3C,MAAME,EAAkB7I,GAAMoI,MACzBU,GAAMA,EAAE1G,QAAUE,OAAOgE,EAAIyC,WAAaD,EAAEN,KAAOlG,OAAOgE,EAAIyC,YAEnElI,GAAUyF,EAAIuB,QAEd1H,GACI0I,GAAmB,CACfzG,MAAOE,OAAOgE,EAAIyC,UAClB1G,MAAOiE,EAAI0C,eAInBnJ,EAAUyG,EAAIiB,QACdxH,GAAkBuG,EAAImB,iBACtB9I,GAAmB,EAAK,EAmT2BsK,CAAW3C,GAAKjC,SAClC,QAEQ,EAEbqC,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,aAK3BuC,oBAAkB,EAClBC,SAAS,QACTC,mBAAmB,KAGvB9E,EAAAA,EAAAA,KAAC0B,EAAAA,GAAe,CACZC,UAAW7F,GACX8F,QAAS,CACL,CACIC,cAAc,EACdC,KAAMiD,IAAA,IAAC,IAAE/C,GAAK+C,EAAA,OAAK/C,EAAIC,UAAY,IAAI,EACvCC,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMkD,IAAA,IAAC,IAAEhD,GAAKgD,EAAA,OAAKhD,EAAIvJ,SAASG,MAAM,KAAK,EAAE,EAC7CsJ,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,OACXxL,WAAY,UAIxB,CACIgL,cAAc,EACdC,KAAMmD,IAAA,IAAC,IAAEjD,GAAKiD,EAAA,OAAKjD,EAAInJ,OAAOD,MAAM,KAAK,EAAE,EAC3CsJ,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,OACXxL,WAAY,UAIxB,CACIgL,cAAc,EACdC,KAAMoD,IAAA,IAAC,IAAElD,GAAKkD,EAAA,OAAKlD,EAAIS,WAAa,IAAI,EACxCP,aAAc,aACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMqD,IAAA,IAAC,IAAEnD,GAAKmD,EAAA,OAAKnD,EAAIW,UAAY,IAAI,EACvCT,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMsD,IAAA,IAAC,IAAEpD,GAAKoD,EAAA,OAAKpD,EAAIa,SAAW,IAAI,EACtCX,aAAc,UACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMuD,IAAA,IAAC,IAAErD,GAAKqD,EAAA,OAAKrD,EAAIe,YAAc,IAAI,EACzCb,aAAc,aACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMwD,IAAA,IAAC,IAAEtD,GAAKsD,EAAA,OAAKtD,EAAIiB,QAAU,IAAI,EACrCf,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAMyD,IAAA,IAAC,IAAEvD,GAAKuD,EAAA,OAAKvD,EAAImB,iBAAmB,IAAI,EAC9CjB,aAAc,kBACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAM0D,IAAA,IAAC,IAAExD,GAAKwD,EAAA,OAAKxD,EAAIqB,cAAgB,IAAI,EAC3CnB,aAAc,WACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,UAInB,CACI2L,cAAc,EACdC,KAAM2D,IAAA,IAAC,IAAEzD,GAAKyD,EAAA,OAAKzD,EAAIuB,QAAU,IAAI,EACrCrB,aAAc,SACdC,UAAW,EACXrM,MAAO,MACPsM,UAAW,CACPjC,GAAI,CACArJ,QAAS,OACTuL,UAAW,SACXnM,MAAO,WAKvB0O,oBAAkB,EAClBC,SAAS,QACTC,mBAAmB,UAMnCjF,EAAAA,EAAAA,MAAC6F,EAAAA,EAAM,CACHC,KAAMvL,EACNwL,QAASA,KACLvL,GAAmB,GACnB2E,KACA3C,GAAoB,KAAK,EAE7BwJ,WAAS,EACTC,SAAS,KAAI/F,SAAA,EAEbC,EAAAA,EAAAA,KAAC+F,EAAAA,EAAW,CAAAhG,SACP3D,GAAmB,eAAiB,sBAGzC4D,EAAAA,EAAAA,KAACgG,EAAAA,EAAa,CAAAjG,UACVC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,wBAAuBN,UAClCC,EAAAA,EAAAA,KAAA,SAAOK,UAAU,QAAON,UACpBF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gBAEXC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACH9C,MACIpB,GAAc5D,MACR,CACEgF,MAAOpB,GAAc5D,MACrBiF,MAAOrB,GAAc3D,MAEvB,KAEV+H,SAAW1C,GACPzB,GAAiB,CAAE7D,MAAOsF,EAAEN,MAAO/E,KAAMqF,EAAEL,QAE/CgD,QAASnH,EAAUgE,KAAKoD,IAAG,CACvBlD,MAAOkD,EAAIhE,OACXe,MAAOiD,EAAIjI,iBAK3B8G,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLwB,UAAU,WACVvC,MAAOxD,EACPwG,SAAW1C,GAAMQ,GAAiB,OAAQR,EAAEiD,OAAOvD,eAI/D+B,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,QACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLwB,UAAU,WACVvC,MAAOtD,EACPsG,SAAW1C,GAAMQ,GAAiB,KAAMR,EAAEiD,OAAOvD,eAI7D+B,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIF,EAAAA,EAAAA,MAAA,OAAKhK,MAAO,CAAEyK,QAAS,OAAQgB,IAAK,QAASvB,SAAA,EACzCF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,QACLlH,KAAK,UACLmG,MAAM,KACNmI,QAAqB,OAAZrL,EACTkG,SAAUA,IAAM/B,GAAoB,MACpCmH,SAAUxL,GAAY,IACvB,IAAI,SAGXmF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,QACLlH,KAAK,UACLmG,MAAM,KACNmI,QAAqB,OAAZrL,EACTkG,SAAUA,IAAM/B,GAAoB,MACpCmH,SAAUxL,GAAY,IACvB,IAAI,SAGXmF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,QACLlH,KAAK,UACLmG,MAAM,OACNmI,QAAqB,SAAZrL,EACTkG,SAAUA,IAAM/B,GAAoB,UACrC,IAAI,mBAMvBc,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACIK,UAAU,WACVvC,MAAOpD,EACPwL,UAAQ,EACR9E,YAAY,qBAKxBvB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,gBACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACH9C,MACI9C,EACM,CAAE8C,MAAO9C,EAAUkJ,GAAInG,MAAO/C,EAAUyH,WACxC,KAEV3B,SAAWsF,IACPnL,EAAa,CACTiJ,GAAIkC,EAAetI,MACnB2E,UAAW2D,EAAerI,OAC5B,EAENgD,QACIsF,MAAMC,QAAQxL,EAAiB0C,MACzB1C,EAAiB0C,KAAKI,KAAKmG,IAAE,CAC3BjG,MAAOiG,EAAGG,GACVnG,MAAOgG,EAAGtB,cAEZ,GAEVtB,OAAQ/K,EAAAA,GACR6K,cAAc,EACdG,YAAY,qBAKxBvB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,gBACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACH9C,MACsB,OAAlB1C,QAAkB,IAAlBA,GAAAA,EAAoB2C,MAAQ3C,EAAqB,KAErD0F,SAAWsF,IACP/K,EAAsB+K,EAAe,EAEzCrF,QAAS7F,EACTiG,OAAQ/K,EAAAA,GACR6K,cAAc,EACdG,YAAY,4BAKxBvB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,cACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACHO,OAAQ/K,EAAAA,GACRmQ,iBAAkBC,SAASC,KAC3BxF,cAAc,EACdG,YAAY,kBACZL,QAASrF,GACToC,MAAOlC,GACPkF,SAAWsF,GACPvK,GAAoBuK,WAMpCvG,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,YACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLwB,UAAU,WACVvC,MAAOxC,EACPwF,SAAW1C,GAAM7C,EAAU6C,EAAEiD,OAAOvD,eAIhDkC,EAAAA,EAAAA,KAAA,MAAAD,SACK3D,KACGyD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,YACxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACH9C,MACIxB,GAAS,CAAEwB,MAAOxB,GAAQyB,MAAOzB,IAAW,KAEhDwE,SAAWsF,IACP7J,GAAU6J,EAAetI,MAAM,EAEnCiD,QAAS,CACL,CAAEjD,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,WAAYC,MAAO,aAEhCoD,OAAQ/K,EAAAA,GACR6K,cAAc,EACdG,YAAY,0BAMhCpB,EAAAA,EAAAA,KAAA,MAAAD,SACK3D,KACGyD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAInK,MAAO,CAAEsQ,cAAe,UAAWpG,SAAC,qBAGxCC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACInB,KAAK,OACLwB,UAAU,WACVvC,MAAOtC,EACPsF,SAAW1C,GAAM3C,GAAkB2C,EAAEiD,OAAOvD,0BAWhF+B,EAAAA,EAAAA,MAAC6G,EAAAA,EAAa,CAAA3G,SAAA,EACVC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAM,CACHnF,QAASA,KACLnH,GAAmB,GACnB2E,KACA3C,GAAoB,KAAK,EAC3B0D,SACL,YAIDC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAM,CAACnF,QA31BPoF,KACb,IACI,MAAMC,IAA2B,OAAhBzK,SAAgB,IAAhBA,KAAAA,GAAkB8H,IAE7BuC,EAAO,CACT7C,QAAS5F,OAAOtB,GAAc5D,OAC9BL,SAAU6B,EACVzB,OAAQ2B,EACRqI,QAASjI,EACT+H,SAAUmE,WAAWpM,GACrB0J,aAAcpG,OAAgB,OAAThD,QAAS,IAATA,OAAS,EAATA,EAAWkJ,IAChCnB,YAA8B,OAAlB3H,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB2C,QAAS,GACzC0G,SAAUzG,QAAuB,OAAhBpC,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkC,SAAyB,OAAhBlC,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBsI,KAC9DjB,OAAQ3H,EACRyL,WAAY/N,EAAiB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASgE,OAAS,KACxCgK,YAAahO,EAAiB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASgE,OAAS,KAEzCuG,OAAQjH,GACR6G,gBAAiB3H,GAGjBqL,IACAJ,EAAKvC,GAAKlG,OAAO5B,GAAiB8H,MAGtC/G,EAAAA,EAAAA,GAAU,CACNtF,QAAQ,gBACRoP,OAAQJ,EAAS,MAAQ,OACzBK,SAAUT,IAETlJ,MAAMC,IACCA,EAAKC,SACLuB,KACA3E,GAAmB,GACnBf,GAAWD,GACXgD,GAAoB,OAEpB8K,EAAAA,GAAM7I,MAAMd,EAAK4J,QACrB,IAEHjJ,OAAOC,GAAMC,QAAQC,MAAMF,IACpC,CAAE,MAAOA,GACLC,QAAQC,MAAM,mBAAoBF,EACtC,GAgzBsC2B,SAAC,kBAK/C,C,0ICtlCO,SAASsH,EAA2BC,GACzC,OAAOC,EAAAA,EAAAA,IAAqB,iBAAkBD,EAChD,EAC2BE,EAAAA,EAAAA,GAAuB,iBAAkB,CAAC,S,eCDrE,MAAMC,EAAY,CAAC,YAAa,aAkB1BC,GAAkBC,EAAAA,EAAAA,IAAO,MAAO,CACpChQ,KAAM,iBACN2P,KAAM,OACNM,kBAAmBA,CAACC,EAAO1G,IAAWA,EAAO2G,MAHvBH,EAIrB,KACM,CACL7Q,QAAS,GACT,eAAgB,CACdiR,cAAe,QAoDrB,EAhDiCC,EAAAA,YAAiB,SAAqBC,EAASC,GAC9E,MAAML,GAAQM,EAAAA,EAAAA,GAAgB,CAC5BN,MAAOI,EACPtQ,KAAM,oBAEF,UACF0I,EAAS,UACT+H,EAAY,OACVP,EACJQ,GAAQC,EAAAA,EAAAA,GAA8BT,EAAOJ,GACzCc,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGX,EAAO,CACrCO,cAEIK,EAlCkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZZ,KAAM,CAAC,SAEoBT,EAA4BoB,EAAQ,EA2BjDE,CAAkBJ,GAClC,OAAoBvI,EAAAA,EAAAA,KAAK0H,GAAiBc,EAAAA,EAAAA,GAAS,CACjDI,GAAIR,EACJ/H,WAAWwI,EAAAA,EAAAA,GAAKJ,EAAQX,KAAMzH,GAC9BkI,WAAYA,EACZL,IAAKA,GACJG,GACL,G","sources":["Components/tablecolumn.js","Pages/Masters/LeaveMaster.jsx","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n            ? '#E2ECF9'\r\n            : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    // Autocomplete,\r\n    // TextField,\r\n} from \"@mui/material\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n// import { Search, Refresh, Tune } from \"@mui/icons-material\";\r\nimport { useContext } from \"react\";\r\nfunction LeaveMaster({ loadingOn, loadingOff }) {\r\n    const initialValue = {\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        EmpId: \"0\",\r\n        Name: \"ALL\",\r\n    };\r\n\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    // const navigate = useNavigate();\r\n    // const location = useLocation();\r\n    // const stateDetails = location.state;\r\n    const [reload, setReload] = useState(false);\r\n    // const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n    const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n    // const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n\r\n    // const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const [filter, setFilter] = useState(initialValue);\r\n    const [employees, setEmployees] = useState([]);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n    const Add_Rights = contextObj?.Add_Rights;\r\n\r\n    const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n    const [openDialogApply, setopenDialogApply] = useState(false);\r\n\r\n    const [fromDate, setFromDate] = useState(\r\n        new Date().toISOString().split(\"T\")[0]\r\n    );\r\n    const [toDate, setToDate] = useState(new Date().toISOString().split(\"T\")[0]);\r\n    const [noOfDays, setNoOfDays] = useState(0.5);\r\n    const [session, setSession] = useState(\"FN\");\r\n    const [leaveTypeOptions, setLeaveTypeOptions] = useState([]);\r\n    const [leaveType, setLeaveType] = useState(null);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n    const [reason, setReason] = useState(\"\");\r\n    const [approverReason, setApproverReason] = useState(\"\");\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedInCharge, setSelectedInCharge] = useState(null);\r\n    const [userData, setUserData] = useState([]);\r\n    const [approveDialog, setApproveDialog] = useState(false);\r\n    const [approveData, setApproveData] = useState([]);\r\n    const [selectedEditData, setSelectedEditData] = useState(null);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [employeeList, setEmployeeList] = useState([]);\r\n    const [employeeApply, setEmployeeApply] = useState({ EmpId: null, Name: \"\" });\r\n\r\n    useEffect(() => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const userId = storage?.UserId;\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    let filteredEmployees = [];\r\n                    const userOptions = data.data.map((user) => ({\r\n                        value: user.UserId,\r\n                        label: user.Name,\r\n                    }));\r\n                    setUsers(userOptions);\r\n                    if (\r\n                        Number(userTypeId) === 1 ||\r\n                        Number(userTypeId) === 0 ||\r\n                        Number(Add_Rights) === 1\r\n                    ) {\r\n                        filteredEmployees = data.data;\r\n                        setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n                        setIsDropdownDisabled(false);\r\n                        setDropdownPlaceholder(\"ALL\");\r\n                    } else {\r\n                        filteredEmployees = data.data.filter(\r\n                            (employee) => employee.UserId === userId\r\n                        );\r\n                        setFilter((prev) => ({\r\n                            ...prev,\r\n                            EmpId: userId,\r\n                            Name: storage?.Name,\r\n                        }));\r\n                        setIsDropdownDisabled(true);\r\n                        setDropdownPlaceholder(storage?.Name);\r\n                    }\r\n\r\n                    setEmployees(filteredEmployees);\r\n                    setEmployeeList(filteredEmployees);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching employees:\", e));\r\n    }, [\r\n        storage?.UserTypeId,\r\n        storage?.UserId,\r\n        storage?.Company_id,\r\n        storage?.Name,\r\n        reload,\r\n    ]);\r\n\r\n    const applyLeave = () => {\r\n        setopenDialogApply(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({ address: `masters/leaveType/dropDown` }).then((data) => {\r\n            if (data.success) {\r\n                setLeaveTypeOptions(data);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const selectedUserId = storage?.UserId;\r\n\r\n        fetchLink({\r\n            address: `masters/approveData?userId=${selectedUserId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setApproveData(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching departments:\", e));\r\n    }, [approveDialog, reload]);\r\n\r\n    useEffect(() => {\r\n        const companyId = storage?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `empAttendance/department?Company_id=${companyId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    if (data.others && data.others.department) {\r\n                        const deptOptions = data.others.department.map((dept) => ({\r\n                            value: dept.value,\r\n                            label: dept.label,\r\n                        }));\r\n                        setDepartments(deptOptions);\r\n                    }\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching departments:\", e));\r\n    }, [storage?.Company_id, reload]);\r\n\r\n    const handleDateChange = (type, value) => {\r\n        if (type === \"from\") {\r\n            setFromDate(value);\r\n            calculateDays(value, toDate, session);\r\n        } else {\r\n            setToDate(value);\r\n            calculateDays(fromDate, value, session);\r\n        }\r\n    };\r\n    const handleSessionChange = (value) => {\r\n        setSession(value);\r\n        calculateDays(fromDate, toDate, value);\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setEmployeeApply({ EmpId: \"\", Name: \"\" });\r\n        setFromDate(new Date().toISOString().split(\"T\")[0]);\r\n        setToDate(new Date().toISOString().split(\"T\")[0]);\r\n        setSession(\"Full\");\r\n        setNoOfDays(1);\r\n        setLeaveType(null);\r\n        setSelectedDepartment(null);\r\n        setSelectedInCharge(null);\r\n        setReason(\"\");\r\n        setApproverReason(\"\");\r\n    };\r\n\r\n    const fetchLeaveList = () => {\r\n        const userTypeId = storage?.UserTypeId;\r\n        const selectedUserId = filter?.EmpId || storage?.UserId;\r\n\r\n        fetchLink({\r\n            address: `masters/leave?UserId=${selectedUserId}&UserTypeId=${userTypeId}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUserData(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching departments:\", e));\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLeaveList();\r\n    }, [storage?.Company_id, reload]);\r\n\r\n    const calculateDays = (from, to, sessionVal) => {\r\n        const start = new Date(from);\r\n        const end = new Date(to);\r\n\r\n        const sameDay = start.toDateString() === end.toDateString();\r\n\r\n        if (sameDay) {\r\n            if (sessionVal === \"Full\") {\r\n                setNoOfDays(1);\r\n            } else {\r\n                setNoOfDays(0.5);\r\n            }\r\n        } else {\r\n            const diffTime = Math.abs(end - start);\r\n            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;\r\n            setNoOfDays(diffDays);\r\n        }\r\n    };\r\n\r\n    const onsubmit = () => {\r\n        try {\r\n            const isEdit = !!selectedEditData?.Id;\r\n\r\n            const body = {\r\n                User_Id: Number(employeeApply.EmpId),\r\n                FromDate: fromDate,\r\n                ToDate: toDate,\r\n                Session: session,\r\n                NoOfDays: parseFloat(noOfDays),\r\n                LeaveType_Id: Number(leaveType?.Id),\r\n                Department: selectedDepartment?.label || \"\",\r\n                InCharge: Number(selectedInCharge?.value || selectedInCharge?.Id),\r\n                Reason: reason,\r\n                Created_By: storage ? storage?.UserId : null,\r\n                Approved_By: storage ? storage?.UserId : null,\r\n\r\n                Status: status,\r\n                Approver_Reason: approverReason,\r\n            };\r\n\r\n            if (isEdit) {\r\n                body.Id = Number(selectedEditData.Id);\r\n            }\r\n\r\n            fetchLink({\r\n                address: `masters/leave`,\r\n                method: isEdit ? \"PUT\" : \"POST\",\r\n                bodyData: body,\r\n            })\r\n                .then((data) => {\r\n                    if (data.success) {\r\n                        resetForm();\r\n                        setopenDialogApply(false);\r\n                        setReload(!reload);\r\n                        setSelectedEditData(null);\r\n                    } else {\r\n                        toast.error(data.message);\r\n                    }\r\n                })\r\n                .catch((e) => console.error(e));\r\n        } catch (e) {\r\n            console.error(\"Failed to submit\", e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const selectedUserId = filter?.EmpId === \"0\" ? \"\" : filter?.EmpId;\r\n        const fromDate = filter?.FromDate;\r\n        const toDate = filter?.ToDate;\r\n\r\n        if (!fromDate || !toDate) return;\r\n\r\n        fetchLink({\r\n            address: `masters/leave?UserId=${selectedUserId}&FromDate=${fromDate}&ToDate=${toDate}`,\r\n            headers: {\r\n                Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUserData(data.data || []);\r\n                }\r\n            })\r\n            .catch((e) => console.error(\"Error fetching leave data:\", e));\r\n    }, [filter?.EmpId, filter?.FromDate, filter?.ToDate, reload]);\r\n\r\n    useEffect(() => {\r\n        if (noOfDays >= 1) {\r\n            setSession(\"Full\");\r\n        }\r\n    }, [noOfDays]);\r\n\r\n    const listingData = () => {\r\n        setApproveDialog(true);\r\n    };\r\n\r\n    const handleEdit = (row) => {\r\n        setSelectedEditData(row);\r\n\r\n        // const matchedEmployee = employees.find(\r\n        //   (emp) =>\r\n        //     emp.UserId == row.User_Id || emp.Id == row.User_Id\r\n        // );\r\n\r\n        setEmployeeApply({\r\n            EmpId: Number(row.User_Id),\r\n            Name: row.UserName,\r\n        });\r\n\r\n        setFromDate(row.FromDate?.split(\"T\")[0]);\r\n        setToDate(row.ToDate?.split(\"T\")[0]);\r\n        setSession(row.Session);\r\n        setNoOfDays(row.NoOfDays);\r\n\r\n        const matchedLeaveType = leaveTypeOptions.data?.find(\r\n            (lt) => lt.Id?.toString() === row.LeaveType_Id?.toString()\r\n        );\r\n        setLeaveType(matchedLeaveType || null);\r\n\r\n        const matchedDepartment = departments.find(\r\n            (d) => d.label === row.Department\r\n        );\r\n        setSelectedDepartment(matchedDepartment || null);\r\n\r\n        const matchedInCharge = users.find(\r\n            (u) => u.value === Number(row.InCharge) || u.Id === Number(row.InCharge)\r\n        );\r\n        setStatus(row.Status);\r\n\r\n        setSelectedInCharge(\r\n            matchedInCharge || {\r\n                value: Number(row.InCharge),\r\n                label: row.InChargeName,\r\n            }\r\n        );\r\n\r\n        setReason(row.Reason);\r\n        setApproverReason(row.Approver_Reason);\r\n        setopenDialogApply(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* <Dialog\r\n        open={addEmployeeDialogOpen}\r\n        maxWidth=\"md\"\r\n        PaperProps={{\r\n          style: { width: \"500px\", height: \"500px\" },\r\n        }}\r\n      >\r\n        <DialogTitle>Add Employee</DialogTitle>\r\n        <DialogContent>\r\n          <Autocomplete\r\n            multiple\r\n            options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n            getOptionLabel={(option) => option.Name}\r\n            isOptionEqualToValue={(option, value) =>\r\n              option.UserId === value.UserId\r\n            }\r\n            onChange={(event, value) => {\r\n              if (value.some((selected) => selected.UserId === \"all\")) {\r\n                setSelectedEmployees(dropdownEmployees);\r\n              } else {\r\n                const uniqueValues = value.filter(\r\n                  (val, index, self) =>\r\n                    index === self.findIndex((t) => t.UserId === val.UserId)\r\n                );\r\n                setSelectedEmployees(uniqueValues);\r\n              }\r\n            }}\r\n            value={\r\n              selectedEmployees.some((user) => user.UserId === \"all\")\r\n                ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                : selectedEmployees\r\n            }\r\n            renderInput={(params) => (\r\n              <TextField {...params} placeholder=\"Employees\" />\r\n            )}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outlined\"\r\n            onClick={() => setSelectedEmployees([])}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <span></span>\r\n        </DialogActions>\r\n      </Dialog> */}\r\n            <Card>\r\n                <CardContent sx={{ minHeight: \"50vh\" }}>\r\n                    <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                        <h6 className=\"fa-18\">Leave Master</h6>\r\n                    </div>\r\n\r\n                    <div\r\n                        className=\"mb-3\"\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                            flexWrap: \"wrap\",\r\n                            alignItems: \"flex-end\",\r\n                        }}\r\n                    >\r\n                        <div style={{ display: \"flex\", flexWrap: \"wrap\", flex: 1 }}>\r\n                            <div style={{ width: \"200px\", marginRight: \"10px\" }}>\r\n                                <label>Employee</label>\r\n                                <Select\r\n                                    className=\"w-100\"\r\n                                    classNamePrefix=\"react-select\"\r\n                                    value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                                    onChange={(e) =>\r\n                                        setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n                                    }\r\n                                    options={[\r\n                                        { value: 0, label: \"ALL\" },\r\n                                        ...employees.map((obj) => ({\r\n                                            value: obj?.UserId,\r\n                                            label: obj?.Name,\r\n                                        })),\r\n                                    ]}\r\n                                    isSearchable={true}\r\n                                    isDisabled={isDropdownDisabled}\r\n                                    styles={customSelectStyles}\r\n                                    placeholder={dropdownPlaceholder}\r\n                                />\r\n                            </div>\r\n\r\n                            <div style={{ width: \"140px\", marginRight: \"10px\" }}>\r\n                                <label>From Date</label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    onChange={(e) =>\r\n                                        setFilter({ ...filter, FromDate: e.target.value })\r\n                                    }\r\n                                    value={filter?.FromDate}\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div style={{ width: \"140px\", marginRight: \"10px\" }}>\r\n                                <label>To Date</label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    onChange={(e) =>\r\n                                        setFilter({ ...filter, ToDate: e.target.value })\r\n                                    }\r\n                                    value={filter?.ToDate}\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\", gap: \"10px\" }}\r\n                        >\r\n                            <div style={{ width: \"100px\" }}>\r\n                                <label style={{ visibility: \"hidden\" }}>Apply</label>\r\n                                <button className=\"btn btn-primary w-100\" onClick={applyLeave}>\r\n                                    Apply\r\n                                </button>\r\n                            </div>\r\n                            <button\r\n                                className=\"btn btn-primary w-50\"\r\n                                onClick={() => {\r\n                                    if (approveDialog) {\r\n                                        setApproveDialog(false);\r\n                                    } else {\r\n                                        listingData();\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {approveDialog ? \"Home\" : \"Approve\"}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {approveDialog ? (\r\n                        <FilterableTable\r\n                            dataArray={approveData}\r\n                            columns={[\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.UserName || \"--\",\r\n                                    ColumnHeader: \"UserName\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.FromDate.split(\"T\")[0],\r\n                                    ColumnHeader: \"FromDate\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"left\",\r\n                                            fontWeight: \"bold\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.ToDate.split(\"T\")[0],\r\n                                    ColumnHeader: \"ToDate\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"left\",\r\n                                            fontWeight: \"bold\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.LeaveType || \"--\",\r\n                                    ColumnHeader: \"Leave Type\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.NoOfDays || \"--\",\r\n                                    ColumnHeader: \"NoOfDays\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Session || \"--\",\r\n                                    ColumnHeader: \"Session\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Department || \"--\",\r\n                                    ColumnHeader: \"Department\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Reason || \"--\",\r\n                                    ColumnHeader: \"Reason\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Approver_Reason || \"--\",\r\n                                    ColumnHeader: \"Approver_Reason\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.ApproverName || \"--\",\r\n                                    ColumnHeader: \"Approver\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Status || \"--\",\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    ColumnHeader: \"Actions\",\r\n                                    isVisible: 1,\r\n                                    width: \"10%\",\r\n                                    Cell: ({ row }) => (\r\n                                        <button\r\n                                            className=\"btn btn-sm btn-outline-primary\"\r\n                                            onClick={() => handleEdit(row)}\r\n                                        >\r\n                                            Edit\r\n                                        </button>\r\n                                    ),\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            EnableSerialNumber\r\n                            CellSize=\"small\"\r\n                            disablePagination={false}\r\n                        />\r\n                    ) : (\r\n                        <FilterableTable\r\n                            dataArray={userData}\r\n                            columns={[\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.UserName || \"--\",\r\n                                    ColumnHeader: \"UserName\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.FromDate.split(\"T\")[0],\r\n                                    ColumnHeader: \"FromDate\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"left\",\r\n                                            fontWeight: \"bold\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.ToDate.split(\"T\")[0],\r\n                                    ColumnHeader: \"ToDate\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"left\",\r\n                                            fontWeight: \"bold\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.LeaveType || \"--\",\r\n                                    ColumnHeader: \"Leave Type\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.NoOfDays || \"--\",\r\n                                    ColumnHeader: \"NoOfDays\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Session || \"--\",\r\n                                    ColumnHeader: \"Session\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Department || \"--\",\r\n                                    ColumnHeader: \"Department\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Reason || \"--\",\r\n                                    ColumnHeader: \"Reason\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Approver_Reason || \"--\",\r\n                                    ColumnHeader: \"Approver_Reason\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.ApproverName || \"--\",\r\n                                    ColumnHeader: \"Approver\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Status || \"--\",\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    width: \"20%\",\r\n                                    CellProps: {\r\n                                        sx: {\r\n                                            padding: \"10px\",\r\n                                            textAlign: \"center\",\r\n                                            color: \"gray\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                            EnableSerialNumber\r\n                            CellSize=\"small\"\r\n                            disablePagination={false}\r\n                        />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={openDialogApply}\r\n                onClose={() => {\r\n                    setopenDialogApply(false);\r\n                    resetForm();\r\n                    setSelectedEditData(null);\r\n                }}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>\r\n                    {selectedEditData ? \"Approve Form\" : \"Leave Apply Form\"}\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <label>Employee</label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={\r\n                                                employeeApply.EmpId\r\n                                                    ? {\r\n                                                        value: employeeApply.EmpId,\r\n                                                        label: employeeApply.Name,\r\n                                                    }\r\n                                                    : null\r\n                                            }\r\n                                            onChange={(e) =>\r\n                                                setEmployeeApply({ EmpId: e.value, Name: e.label })\r\n                                            }\r\n                                            options={employees.map((obj) => ({\r\n                                                value: obj.UserId,\r\n                                                label: obj.Name,\r\n                                            }))}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={fromDate}\r\n                                            onChange={(e) => handleDateChange(\"from\", e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={toDate}\r\n                                            onChange={(e) => handleDateChange(\"to\", e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Session</td>\r\n                                    <td>\r\n                                        <div style={{ display: \"flex\", gap: \"1rem\" }}>\r\n                                            <label>\r\n                                                <input\r\n                                                    type=\"radio\"\r\n                                                    name=\"session\"\r\n                                                    value=\"FN\"\r\n                                                    checked={session === \"FN\"}\r\n                                                    onChange={() => handleSessionChange(\"FN\")}\r\n                                                    disabled={noOfDays >= 1}\r\n                                                />{\" \"}\r\n                                                FN\r\n                                            </label>\r\n                                            <label>\r\n                                                <input\r\n                                                    type=\"radio\"\r\n                                                    name=\"session\"\r\n                                                    value=\"AN\"\r\n                                                    checked={session === \"AN\"}\r\n                                                    onChange={() => handleSessionChange(\"AN\")}\r\n                                                    disabled={noOfDays >= 1}\r\n                                                />{\" \"}\r\n                                                AN\r\n                                            </label>\r\n                                            <label>\r\n                                                <input\r\n                                                    type=\"radio\"\r\n                                                    name=\"session\"\r\n                                                    value=\"Full\"\r\n                                                    checked={session === \"Full\"}\r\n                                                    onChange={() => handleSessionChange(\"Full\")}\r\n                                                />{\" \"}\r\n                                                Full\r\n                                            </label>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>No of Days</td>\r\n                                    <td>\r\n                                        <input\r\n                                            className=\"cus-inpt\"\r\n                                            value={noOfDays}\r\n                                            disabled\r\n                                            placeholder=\"No of Days\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Leave Type</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={\r\n                                                leaveType\r\n                                                    ? { value: leaveType.Id, label: leaveType.LeaveType }\r\n                                                    : null\r\n                                            }\r\n                                            onChange={(selectedOption) => {\r\n                                                setLeaveType({\r\n                                                    Id: selectedOption.value,\r\n                                                    LeaveType: selectedOption.label,\r\n                                                });\r\n                                            }}\r\n                                            options={\r\n                                                Array.isArray(leaveTypeOptions.data)\r\n                                                    ? leaveTypeOptions.data.map((lt) => ({\r\n                                                        value: lt.Id,\r\n                                                        label: lt.LeaveType,\r\n                                                    }))\r\n                                                    : []\r\n                                            }\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Leave Type\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Department</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={\r\n                                                selectedDepartment?.label ? selectedDepartment : null\r\n                                            }\r\n                                            onChange={(selectedOption) => {\r\n                                                setSelectedDepartment(selectedOption);\r\n                                            }}\r\n                                            options={departments}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select Department\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>InCharge</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            styles={customSelectStyles}\r\n                                            menuPortalTarget={document.body}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select InCharge\"\r\n                                            options={users}\r\n                                            value={selectedInCharge}\r\n                                            onChange={(selectedOption) =>\r\n                                                setSelectedInCharge(selectedOption)\r\n                                            }\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Reason</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={reason}\r\n                                            onChange={(e) => setReason(e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    {selectedEditData && (\r\n                                        <>\r\n                                            <td style={{ verticalAlign: \"middle\" }}>Status</td>\r\n                                            <td>\r\n                                                <Select\r\n                                                    value={\r\n                                                        status ? { value: status, label: status } : null\r\n                                                    }\r\n                                                    onChange={(selectedOption) => {\r\n                                                        setStatus(selectedOption.value);\r\n                                                    }}\r\n                                                    options={[\r\n                                                        { value: \"Pending\", label: \"Pending\" },\r\n                                                        { value: \"Approved\", label: \"Approved\" },\r\n                                                        { value: \"Rejected\", label: \"Rejected\" },\r\n                                                    ]}\r\n                                                    styles={customSelectStyles}\r\n                                                    isSearchable={false}\r\n                                                    placeholder=\"Select Status\"\r\n                                                />\r\n                                            </td>\r\n                                        </>\r\n                                    )}\r\n                                </tr>\r\n                                <tr>\r\n                                    {selectedEditData && (\r\n                                        <>\r\n                                            <td style={{ verticalAlign: \"middle\" }}>\r\n                                                Approver Reason\r\n                                            </td>\r\n                                            <td>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"cus-inpt\"\r\n                                                    value={approverReason}\r\n                                                    onChange={(e) => setApproverReason(e.target.value)}\r\n                                                />\r\n                                            </td>\r\n                                        </>\r\n                                    )}\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setopenDialogApply(false);\r\n                            resetForm();\r\n                            setSelectedEditData(null);\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    <Button onClick={onsubmit}>Apply</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LeaveMaster;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","_ref","loadingOn","loadingOff","initialValue","FromDate","Date","toISOString","split","ToDate","EmpId","Name","storage","JSON","parse","localStorage","getItem","reload","setReload","useState","isDropdownDisabled","setIsDropdownDisabled","filter","setFilter","employees","setEmployees","contextObj","useContext","MyContext","Add_Rights","dropdownPlaceholder","setDropdownPlaceholder","openDialogApply","setopenDialogApply","fromDate","setFromDate","toDate","setToDate","noOfDays","setNoOfDays","session","setSession","leaveTypeOptions","setLeaveTypeOptions","leaveType","setLeaveType","departments","setDepartments","selectedDepartment","setSelectedDepartment","reason","setReason","approverReason","setApproverReason","users","setUsers","selectedInCharge","setSelectedInCharge","userData","setUserData","approveDialog","setApproveDialog","approveData","setApproveData","selectedEditData","setSelectedEditData","status","setStatus","employeeList","setEmployeeList","employeeApply","setEmployeeApply","useEffect","userTypeId","UserTypeId","userId","UserId","companyId","Company_id","fetchLink","concat","headers","Authorization","then","data","success","filteredEmployees","userOptions","map","user","value","label","Number","prev","employee","catch","e","console","error","selectedUserId","others","department","deptOptions","dept","handleDateChange","type","calculateDays","handleSessionChange","resetForm","fetchLeaveList","from","to","sessionVal","start","end","toDateString","diffTime","Math","abs","diffDays","floor","_jsxs","_Fragment","children","_jsx","Card","CardContent","sx","minHeight","className","display","justifyContent","flexWrap","alignItems","flex","marginRight","Select","classNamePrefix","onChange","options","obj","isSearchable","isDisabled","styles","placeholder","target","gap","visibility","onClick","applyLeave","FilterableTable","dataArray","columns","isCustomCell","Cell","_ref2","row","UserName","ColumnHeader","isVisible","CellProps","textAlign","_ref3","_ref4","_ref5","LeaveType","_ref6","NoOfDays","_ref7","Session","_ref8","Department","_ref9","Reason","_ref10","Approver_Reason","_ref11","ApproverName","_ref12","Status","_ref13","_row$FromDate","_row$ToDate","_leaveTypeOptions$dat","User_Id","matchedLeaveType","find","lt","_lt$Id","_row$LeaveType_Id","Id","toString","LeaveType_Id","matchedDepartment","d","matchedInCharge","u","InCharge","InChargeName","handleEdit","EnableSerialNumber","CellSize","disablePagination","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","checked","disabled","verticalAlign","selectedOption","Array","isArray","menuPortalTarget","document","body","DialogActions","Button","onsubmit","isEdit","parseFloat","Created_By","Approved_By","method","bodyData","toast","message","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
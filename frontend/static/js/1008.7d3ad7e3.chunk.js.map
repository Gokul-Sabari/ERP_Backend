{"version":3,"file":"static/js/1008.7d3ad7e3.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Dashboard/chartComp.jsx","Pages/Dashboard/erp/SOA.jsx","Pages/Attendance/attendanceComp.jsx","Pages/Dashboard/managementDashboard.jsx","Pages/Dashboard/staffInvolvedCostCenter.jsx","Pages/Dashboard/commonDashboard.jsx","Pages/Dashboard/tallyLastSyncedTime.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const formatString = (val, dataType) => {\r\n        switch (dataType) {\r\n            case 'number':\r\n                return val ? NumberFormat(val) : val;\r\n            case 'date':\r\n                return val ? LocalDate(val) : val;\r\n            case 'time':\r\n                return val ? LocalTime(val) : val;\r\n            case 'string':\r\n                return val;\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr '\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name) \r\n                                                    ? ' fw-bold border-end border-top p-2 appFont ' \r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align \r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class \r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst PieChartComp = ({ TasksArray }) => {\r\n    const [chartData, setChartData] = useState(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n    const [totalTime, setTotalTime] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (TasksArray.length > 0) {\r\n            const totalDuration = TasksArray.reduce((acc, task) => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                return acc + (end - start);\r\n            }, 0);\r\n\r\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\r\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\r\n            const totalTime = lastTaskEnd - firstTaskStart;\r\n            const freeTime = totalTime - totalDuration;\r\n\r\n            const totalSeconds = Math.floor(totalTime / 1000);\r\n            const hours = Math.floor(totalSeconds / 3600);\r\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n            const seconds = totalSeconds % 60;\r\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\r\n\r\n            const taskData = TasksArray.map(task => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                const duration = end - start;\r\n                return {\r\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\r\n                    duration,\r\n                    backgroundColor: getRandomColor()\r\n                };\r\n            });\r\n\r\n            const chartData = {\r\n                labels: taskData.map(task => task.label),\r\n                datasets: [{\r\n                    data: taskData.map(task => task.duration),\r\n                    backgroundColor: taskData.map(task => task.backgroundColor),\r\n                    borderColor: 'rgba(255, 255, 255, 1)',\r\n                    borderWidth: 1\r\n                }]\r\n            };\r\n\r\n            chartData.labels.push('Free Time');\r\n            chartData.datasets[0].data.push(freeTime);\r\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\r\n\r\n            setChartData(chartData);\r\n        }\r\n    }, [TasksArray]);\r\n\r\n    useEffect(() => {\r\n        if (chartData) {\r\n            if (chartInstance) {\r\n                chartInstance.destroy();\r\n            }\r\n\r\n            const ctx = document.getElementById('empWokHours');\r\n            const newChartInstance = new Chart(ctx, {\r\n                type: 'pie',\r\n                data: chartData,\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    // const label = context.label || '';\r\n                                    const value = context.parsed || 0;\r\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                    const percentage = Math.round((value / total) * 100);\r\n                                    const minutes = Math.round(value / (1000 * 60));\r\n                                    return `${minutes} minutes (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        },\r\n                        datalabels: {\r\n                            color: '#fff',\r\n                            formatter: (value, context) => {\r\n                                const label = context.chart.data.labels[context.dataIndex];\r\n                                const value1 = context.parsed || 0;\r\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                const percentage = Math.round((value1 / total) * 100);\r\n                                return `${label}: ${value} (${percentage}%)`;\r\n                            }\r\n                        }                        \r\n                    }\r\n                }\r\n            });\r\n\r\n            setChartInstance(newChartInstance);\r\n        }\r\n    }, [chartData]);\r\n\r\n    // for Dynamic background colors\r\n    const getRandomColor = () => {\r\n        const letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    return TasksArray.length > 0 ? (\r\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\r\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\r\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\r\n        </div>\r\n    ) : (\r\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\r\n    )\r\n};\r\n\r\nexport default PieChartComp;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { LaunchOutlined } from '@mui/icons-material'\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { utils as XLSXUtils, writeFile as writeXLSX } from 'xlsx';\r\nimport logo from '../ic_launcher.png';\r\nimport { fetchLink } from '../../../Components/fetchComponent'\r\n\r\n\r\nconst SOAComp = () => {\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [isCustomer, setIsCustomer] = useState(false)\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const UserId = parseData?.UserId;\r\n    // const token = parseData?.Autheticate_Id;\r\n    const [total, setTotal] = useState(0)\r\n    const [dialog, setDialog] = useState(false)\r\n    const [SOA, setSOA] = useState([])\r\n    const [clickedRow, setClickedRow] = useState({})\r\n    const today = new Date();\r\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 2);\r\n\r\n    const [selectedRange, setSelectedRange] = useState({\r\n        from: firstDayOfMonth.toISOString().split('T')[0],\r\n        to: new Date().toISOString().split('T')[0],\r\n    });\r\n\r\n    const imageSource = logo\r\n    const [closingBalance, setClosingBalance] = useState({ debit: 0, credit: 0 });\r\n    const printRef = useRef()\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `userModule/customer/getBalance?UserId=${UserId}`\r\n        }).then(data => {\r\n            if (data.status === 'Success') {\r\n                setDataArray(data.data)\r\n                let temp = 0;\r\n                data.data?.forEach(obj => {\r\n                    temp += Number(obj.Bal_Amount)\r\n                })\r\n                setTotal(temp)\r\n            }\r\n            if (data?.isCustomer) {\r\n                setIsCustomer(true)\r\n            } else {\r\n                setIsCustomer(false)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n    const getInfo = (prop, mode) => {\r\n        let rowData;\r\n        if (mode && mode === 1) {\r\n            rowData = clickedRow;\r\n        } else {\r\n            rowData = prop\r\n        }\r\n        setClickedRow(rowData)\r\n        setDialog(true);\r\n        fetchLink({\r\n            address: `userModule/customer/StatementOfAccound?Cust_Id=${rowData?.Cust_Id}&Acc_Id=${rowData?.tally_id}&Company_Id=${rowData?.Company_Id}&Fromdate=${selectedRange?.from}&Todate=${selectedRange?.to}`\r\n        }).then(data => {\r\n            setSOA(data.data)\r\n            let bal = { debit: 0, credit: 0 }\r\n            data?.data?.forEach(obj => {\r\n                bal.debit += Number(obj.Debit_Amt)\r\n                bal.credit += Number(obj.Credit_Amt)\r\n            })\r\n            setClosingBalance(bal)\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setDialog(false);\r\n        setSOA([]);\r\n        setClickedRow({});\r\n        setSelectedRange({\r\n            from: firstDayOfMonth.toISOString().split('T')[0],\r\n            to: new Date().toISOString().split('T')[0],\r\n        })\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const generateExcel = (data) => {\r\n        const worksheet = XLSXUtils.json_to_sheet(data);\r\n        const workbook = XLSXUtils.book_new();\r\n        XLSXUtils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n        writeXLSX(workbook, `erpsmt_SOA_${new Date().toLocaleDateString('en-IN', {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit'\r\n        })}.xlsx`);\r\n    }\r\n\r\n    return isCustomer ? (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header py-3 bg-white\" >\r\n                    <p className=\"mb-0 fw-bold\" >\r\n                        <span>Balance of {parseData?.Name}</span>\r\n                        <span className={total > 0 ? 'text-primary' : 'text-danger'}> &nbsp;( {total.toLocaleString('en-IN') + (total < 0 ? ' CR' : ' DR')} )</span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"card-body p-0 table-responsive\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ fontSize: '13px' }}>S.No</th>\r\n                                <th style={{ fontSize: '13px' }}> - </th>\r\n                                <th style={{ fontSize: '13px' }}>Company</th>\r\n                                <th style={{ fontSize: '13px' }}>Ledger</th>\r\n                                <th style={{ fontSize: '13px' }}>Balance</th>\r\n                                <th style={{ fontSize: '13px' }}>Dr/Cr</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {dataArray.map((o, i) => (\r\n                                <tr key={i}>\r\n                                    <td style={{ fontSize: '13px' }}>{i + 1}</td>\r\n                                    <td style={{ fontSize: '13px' }}>\r\n                                        <button\r\n                                            className=\"icon-btn\"\r\n                                            onClick={() => { getInfo(o) }}>\r\n                                            <LaunchOutlined sx={{ fontSize: 'inherit' }} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.Company_Name}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.ledger_name}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.Bal_Amount?.toLocaleString('en-IN')}</td>\r\n                                    <td style={{ fontSize: '13px' }}>{o?.CR_DR}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={handleClose}\r\n                fullScreen\r\n                fullWidth>\r\n                <DialogTitle className=\"border-bottom text-primary d-flex align-items-center fa-18\">\r\n                    <span className=\"flex-grow-1\">Transaction Report of {clickedRow?.Customer_name}</span>\r\n                    <Button\r\n                        className=\"fw-bold\"\r\n                        onClick={handlePrint} >\r\n                        PDF\r\n                    </Button>\r\n                    <Button\r\n                        className=\"ms-1 fw-bold\"\r\n                        onClick={() => {\r\n                            const transformedData = SOA.map((o, i) => ({\r\n                                Sno: i + 1,\r\n                                Date: new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\r\n                                    day: '2-digit',\r\n                                    month: '2-digit',\r\n                                    year: 'numeric',\r\n                                }),\r\n                                Purticular: o?.Ledger_Desc,\r\n                                InvoiceNo: o?.invoice_no,\r\n                                Debit: Boolean(Number(o.Debit_Amt)) ? o.Debit_Amt.toLocaleString('en-IN') : '',\r\n                                Credit: Boolean(Number(o.Credit_Amt)) ? o.Credit_Amt.toLocaleString('en-IN') : '',\r\n                                Company: o?.Company_Name,\r\n                                Ledger: o?.Ledger_Name,\r\n                                Mobile_Number: o?.Mobile_no\r\n                            }));\r\n                            generateExcel(transformedData);\r\n                        }}\r\n                    >\r\n                        excel\r\n                    </Button>\r\n                </DialogTitle>\r\n                <DialogContent className=\"rounded-2 shadow m-4 mb-2 p-0\" >\r\n                    <div className=\"row align-content-center\">\r\n                        <div className=\"col-lg-1\">\r\n                            <img src={imageSource} alt=\"Company Logo\" className=\"smtlogo\" />\r\n                        </div>\r\n                        <div className=\"col-lg-4 p-2 ps-3\">\r\n                            <table className=\"table border-0\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Company</td>\r\n                                        <td className=\"border-0\">{clickedRow?.Company_Name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Ledger Name</td>\r\n                                        <td className=\"border-0\">{clickedRow?.ledger_name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Contact Person</td>\r\n                                        <td className=\"border-0\">{SOA[0]?.Contact_Person}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Mobile</td>\r\n                                        <td className=\"border-0\">{SOA[0]?.Mobile_no}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                        <div className=\"col-lg-4 p-2\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Opening Balnce</td>\r\n                                        <td className=\"border-0 text-primary\">{\r\n                                            SOA[0]?.Debit_Amt > 0\r\n                                                ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\r\n                                                : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\r\n                                        }\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">Closing Balance</td>\r\n                                        <td className=\"border-0 text-primary\">{\r\n                                            (closingBalance?.debit - closingBalance?.credit) < 0\r\n                                                ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\r\n                                                : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\r\n                                        }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-lg-3 p-2\">\r\n                            <table className=\"table border-0\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">From :</td>\r\n                                        <td className=\"p-0 border-0\">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                className=\"form-control w-auto ms-2\"\r\n                                                onChange={(e) => setSelectedRange({ ...selectedRange, from: e.target.value })}\r\n                                                value={selectedRange.from} />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\">To :</td>\r\n                                        <td className=\"p-0 border-0\">\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                className=\"form-control w-auto ms-2\"\r\n                                                onChange={(e) => {\r\n                                                    if (selectedRange.from && selectedRange.from <= e.target.value) {\r\n                                                        setSelectedRange({ ...selectedRange, to: e.target.value });\r\n                                                    } else {\r\n                                                        window.alert('Invald Date Range')\r\n                                                    }\r\n                                                }}\r\n                                                value={selectedRange.to}\r\n                                                disabled={!selectedRange.from} />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0\"></td>\r\n                                        <td className=\"border-0\">\r\n                                            <button\r\n                                                className=\"btn text-white\"\r\n                                                style={{ backgroundColor: 'rgb(66, 34, 225)' }}\r\n                                                onClick={() => { getInfo('', 1) }}>Search</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"p-2 table-responsive\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"fa-13 tble-hed-stick\">-</th>\r\n                                    <th className=\"fa-13 tble-hed-stick\">Date</th>\r\n                                    <th className=\"fa-13 tble-hed-stick\">Particulars</th>\r\n                                    <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\r\n                                    <th className=\"fa-13 tble-hed-stick\">Dr</th>\r\n                                    <th className=\"fa-13 tble-hed-stick\">Cr</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {SOA.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className=\"fa-13 bg-light\">{i + 1}</td>\r\n                                        <td className=\"fa-13 bg-light\">\r\n                                            {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\r\n                                                day: '2-digit',\r\n                                                month: '2-digit',\r\n                                                year: 'numeric',\r\n                                            })}\r\n                                        </td>\r\n                                        <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\r\n                                        <td className=\"fa-13\">{o.invoice_no}</td>\r\n                                        <td className=\"fa-13\">{o.Debit_Amt.toLocaleString('en-IN')}</td>\r\n                                        <td className=\"fa-13 bg-light\">{o.Credit_Amt.toLocaleString('en-IN')}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* printable div */}\r\n                    <div className=\"d-none\">\r\n                        <div className=\"d-block px-5 py-2\" ref={printRef}>\r\n                            <img src={imageSource} alt=\"smtlogo\" className=\"smtlogo\" />\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Company</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.Company_Name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Ledger Name</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{clickedRow?.ledger_name}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Contact Person</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Contact_Person}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Mobile</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{SOA[0]?.Mobile_no}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">From</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.from}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">To</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">{selectedRange.to}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Opening Balance</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">\r\n                                            {\r\n                                                SOA[0]?.Debit_Amt > 0\r\n                                                    ? SOA[0]?.Debit_Amt.toLocaleString('en-IN') + ' DR'\r\n                                                    : SOA[0]?.Credit_Amt.toLocaleString('en-IN') + ' CR'\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border-0 fa-14\">Closing Balance</td>\r\n                                        <td className=\"border-0 fa-14 fw-bold\">\r\n                                            {\r\n                                                (closingBalance?.debit - closingBalance?.credit) < 0\r\n                                                    ? (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + \" CR\"\r\n                                                    : (closingBalance?.debit - closingBalance?.credit).toLocaleString('en-IN') + ' DR'\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <div className=\"p-2 table-responsive\">\r\n                                <table className=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"fa-13 tble-hed-stick\">-</th>\r\n                                            <th className=\"fa-13 tble-hed-stick\">Date</th>\r\n                                            <th className=\"fa-13 tble-hed-stick\">Particulars</th>\r\n                                            <th className=\"fa-13 tble-hed-stick\">Invoice No</th>\r\n                                            <th className=\"fa-13 tble-hed-stick\">Dr</th>\r\n                                            <th className=\"fa-13 tble-hed-stick\">Cr</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {SOA.map((o, i) => (\r\n                                            <tr key={i}>\r\n                                                <td className=\"fa-13 bg-light\">{i + 1}</td>\r\n                                                <td className=\"fa-13 bg-light\">\r\n                                                    {new Date(o?.Ledger_Date).toLocaleDateString('en-IN', {\r\n                                                        day: '2-digit',\r\n                                                        month: '2-digit',\r\n                                                        year: 'numeric',\r\n                                                    })}\r\n                                                </td>\r\n                                                <td className=\"fa-13 bg-light\">{o.Ledger_Desc}</td>\r\n                                                <td className=\"fa-13\">{o.invoice_no}</td>\r\n                                                <td className=\"fa-13\">{Boolean(Number(o.Debit_Amt)) && o.Debit_Amt.toLocaleString('en-IN')}</td>\r\n                                                <td className=\"fa-13 bg-light\">{Boolean(Number(o.Credit_Amt)) && o.Credit_Amt.toLocaleString('en-IN')}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} variant='contained' color='error'>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    ) : <></>\r\n}\r\n\r\nexport default SOAComp;","import { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, DialogActions } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\";\r\nimport { LocalDate, LocalTime } from \"../../Components/functions\";\r\nimport { toast } from \"react-toastify\";\r\nimport { fetchLink } from '../../Components/fetchComponent'\r\n\r\nconst AttendanceComp = () => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const initialValue = {\r\n        Latitude: null,\r\n        Longitude: null,\r\n        error: null,\r\n        UserId: storage.UserId,\r\n        Description: '',\r\n        dialog: false\r\n    }\r\n    const [lastAttendance, setLastAttendance] = useState({});\r\n    const [reload, setReload] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        setLastAttendance({})\r\n        fetchLink({\r\n            address: `empAttendance/attendance?UserId=${storage?.UserId}`,\r\n        }).then(data => {\r\n            if (data?.success && data?.data?.length > 0) {\r\n                setLastAttendance(data?.data[0])\r\n            }\r\n        }).catch(e => console.error(e))            \r\n    }, [storage?.UserId, reload])\r\n\r\n    const getLocation = async () => {\r\n\r\n        try {\r\n\r\n            const position = await new Promise((resolve, reject) => {\r\n                navigator.geolocation.getCurrentPosition(resolve, reject);\r\n            });\r\n\r\n            const { latitude, longitude } = position.coords;\r\n\r\n            setInputValue(pre => ({\r\n                ...pre,\r\n                Latitude: latitude,\r\n                Longitude: longitude,\r\n                error: null\r\n            }));\r\n\r\n            return true;\r\n\r\n        } catch (error) {\r\n            if (error.code === error.PERMISSION_DENIED) {\r\n                setInputValue(pre => ({\r\n                    ...pre,\r\n                    Latitude: null,\r\n                    Longitude: null,\r\n                    error: 'Location access denied'\r\n                }));\r\n\r\n                toast.warn('Allow Location Access');\r\n            } else {\r\n                setInputValue(pre => ({\r\n                    ...pre,\r\n                    Latitude: null,\r\n                    Longitude: null,\r\n                    error: error.message\r\n                }));\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const StartDay = () => {\r\n        getLocation().then(hasLocationAccess => {\r\n            if (hasLocationAccess) {\r\n                if (inputValue?.Latitude && inputValue?.Longitude) {\r\n                    fetchLink({\r\n                        address: `empAttendance/attendance`,\r\n                        method: 'POST',\r\n                        bodyData: {\r\n                            UserId: inputValue?.UserId,\r\n                            Latitude: inputValue?.Latitude,\r\n                            Longitude: inputValue?.Longitude\r\n                        }\r\n                    }).then(data => {\r\n                        setReload(!reload)\r\n                        if (data.success) {\r\n                            toast.success(data.message)\r\n                        } else {\r\n                            toast.error(data.message)\r\n                        }\r\n                    })\r\n                } else {\r\n                    toast.warn('Please Retry')\r\n                }\r\n            } else {\r\n                toast.error('There is a problem in get location')\r\n            }\r\n        });\r\n    };\r\n\r\n    const EndDay = () => {\r\n        fetchLink({\r\n            address: `empAttendance/attendance`,\r\n            method: 'PUT',\r\n            bodyData: {\r\n                Id: lastAttendance?.Id,\r\n                Description: inputValue?.Description\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReload(!reload)\r\n                toast.success(data.message);\r\n                resetValues()\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        })\r\n    }\r\n\r\n    const resetValues = () => {\r\n        setInputValue(initialValue)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"col-xl-4    col-lg-6 col-md-6\">\r\n                <div className=\"d-flex justify-content-between align-items-center p-3 border-bottom\">\r\n                    <h5 className=\"mb-0\">Attendance</h5>\r\n                    <Button\r\n                        variant='outlined'\r\n                        onClick={StartDay}\r\n                        disabled={Boolean(lastAttendance?.Active_Status)}\r\n                    >\r\n                        START Day\r\n                    </Button>\r\n                </div>\r\n                {Boolean(lastAttendance?.Active_Status) && (\r\n                    <>\r\n                        <CardContent >\r\n                            <div className=\"fw-bold text-muted\">\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <span>Start Date</span><br />\r\n                                    <span>{lastAttendance?.Start_Date ? LocalDate(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\r\n                                </div>\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <span>In Time</span>\r\n                                    <span>{lastAttendance?.Start_Date ? LocalTime(lastAttendance?.Start_Date) : ' --:--:-- '}</span>\r\n                                </div>\r\n                            </div>\r\n                        </CardContent>\r\n                        <div className=\"border-top p-3 d-flex justify-content-end\">\r\n                            <Button variant='outlined' onClick={() => setInputValue(pre => ({ ...pre, dialog: true }))}>End Day</Button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={inputValue?.dialog}\r\n                onClose={resetValues}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle>Cloase Attendance</DialogTitle>\r\n                <DialogContent>\r\n                    <label className=\"mb-3\">Work Summary</label>\r\n                    <textarea \r\n                        value={inputValue?.Description}\r\n                        className=\"cus-inpt\"\r\n                        rows={5}\r\n                        onChange={e => setInputValue(pre => ({ ...pre, Description: e.target.value}))}\r\n                        placeholder=\"Narrate the today's work summary\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetValues}>Cancel</Button>\r\n                    <Button variant='outlined' onClick={EndDay}>Confirm</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AttendanceComp;","import { useEffect, useState } from \"react\"\r\nimport { checkIsNumber, groupData, ISOString, NumberFormat } from \"../../Components/functions\";\r\nimport { ShoppingCart } from \"@mui/icons-material\";\r\nimport { LuArrowUpWideNarrow } from \"react-icons/lu\";\r\nimport { HiOutlineCurrencyRupee } from \"react-icons/hi\";\r\nimport { IoReceiptOutline } from \"react-icons/io5\";\r\nimport { BsCartPlus } from \"react-icons/bs\";\r\nimport { PiHandCoinsFill } from \"react-icons/pi\";\r\nimport { FaCubesStacked } from \"react-icons/fa6\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport FilterableTable, { createCol } from '../../Components/filterableTable2';\r\nimport LastSynedTime from \"./tallyLastSyncedTime\";\r\n\r\nconst getIcons = (str) => {\r\n    const iconArr = [\r\n        {\r\n            str: 'SALES',\r\n            icon: <LuArrowUpWideNarrow style={{ fontSize: '80px' }} />,\r\n        },\r\n        {\r\n            str: 'PURCHASE',\r\n            icon: <ShoppingCart style={{ fontSize: '80px' }} />,\r\n        },\r\n        {\r\n            str: 'RECEIPT',\r\n            icon: <IoReceiptOutline style={{ fontSize: '80px' }} />,\r\n        },\r\n        {\r\n            str: 'PAYMENT',\r\n            icon: <HiOutlineCurrencyRupee style={{ fontSize: '80px' }} />,\r\n        },\r\n        {\r\n            str: 'EXPENCES',\r\n            icon: <PiHandCoinsFill style={{ fontSize: '80px' }} />\r\n        },\r\n        {\r\n            str: 'PURCHASE ORDER',\r\n            icon: <BsCartPlus style={{ fontSize: '80px' }} />,\r\n        },\r\n        {\r\n            str: 'STOCK VALUE',\r\n            icon: <FaCubesStacked style={{ fontSize: '70px' }} />,\r\n        },\r\n    ]\r\n\r\n    return iconArr.find(o => str === o.str)?.icon || <></>\r\n}\r\n\r\nconst CardComp = ({ title, icon, firstVal, secondVal, classCount, onClick }) => {\r\n    return (\r\n        <>\r\n            <div className={`col-xxl-3 col-lg-4 col-md-6 col-sm-12 p-2`}>\r\n                <div onClick={onClick} className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\r\n                    <div className=\"flex-grow-1 p-3\">\r\n                        <h5 >{title}</h5>\r\n                        <h3 className=\"fa-16 text-end pe-3\">\r\n                            <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\r\n                            {secondVal && '(' + secondVal + ')'}\r\n                        </h3>\r\n                    </div>\r\n                    {icon}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ManagementDashboard = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const UserAccess = Number(storage?.UserTypeId) === 2 || Number(storage?.UserTypeId) === 0 || Number(storage?.UserTypeId) === 1;\r\n\r\n    const [mangementReport, setMangementReport] = useState([]);\r\n    const [secRow, setSecRow] = useState([]);\r\n    const [theredRow, setTheredRow] = useState([]);\r\n\r\n    const [popUpDetails, setPopUpDetails] = useState({\r\n        salesDetails: [],\r\n        erpPurchaseCount: 0,\r\n        erpPurchaseAmount: 0,\r\n        tallyPurchaseCount: 0,\r\n        tallyPurchaseAmount: 0,\r\n        morePurchaseInfo: [],\r\n    });\r\n\r\n    const [popUpDialogs, setPopUpDialogs] = useState({\r\n        salesDetails: false,\r\n        purchaseDetails: false,\r\n        purchaseMoreDetails: false,\r\n    })\r\n\r\n    const [filter, setFilter] = useState({\r\n        date: ISOString(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (UserAccess && storage.Company_id) {\r\n            fetchLink({\r\n                address: `dashboard/erp/dashboardData?Fromdate=${filter?.date}&Company_Id=${storage.Company_id}`\r\n            })\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        setMangementReport(data?.data[0])\r\n                        setSecRow(data?.data[1])\r\n                        setTheredRow(data?.data[2]);\r\n                    }\r\n                })\r\n                .catch(e => console.error(e))\r\n        }\r\n    }, [UserAccess, filter.date]);\r\n\r\n    useEffect(() => {\r\n        if (UserAccess) {\r\n            fetchLink({\r\n                address: `dashboard/salesInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\r\n                headers: {\r\n                    'Db': storage?.Company_id\r\n                }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setPopUpDetails(pre => ({\r\n                        ...pre,\r\n                        salesDetails: data.data ?? []\r\n                    }));\r\n                } else {\r\n                    setPopUpDetails(pre => ({ ...pre, salesDetails: [] }));\r\n                }\r\n            }).catch(e => console.error(e))\r\n\r\n            fetchLink({\r\n                address: `dashboard/purchaseInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\r\n                method: 'GET',\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    const tallyInfo = data.data[0][0] || {};\r\n                    const erpInfo = data.data[1][0] || {};\r\n                    setPopUpDetails(pre => ({\r\n                        ...pre,\r\n                        erpPurchaseCount: checkIsNumber(erpInfo?.Purchase_Count) ? erpInfo?.Purchase_Count : 0,\r\n                        erpPurchaseAmount: checkIsNumber(erpInfo?.Purchase_Amount) ? erpInfo?.Purchase_Amount : 0,\r\n                        tallyPurchaseCount: checkIsNumber(tallyInfo?.Tally_Purchase_Count) ? tallyInfo?.Tally_Purchase_Count : 0,\r\n                        tallyPurchaseAmount: checkIsNumber(tallyInfo?.Tally_Purchase_Amount) ? tallyInfo?.Tally_Purchase_Amount : 0,\r\n                    }));\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filter.date]);\r\n\r\n    const closeDialog = () => {\r\n        setPopUpDialogs(pre => Object.fromEntries(\r\n            Object.entries(pre).map(([key, value]) => [key, false])\r\n        ));\r\n        setPopUpDetails(pre => ({ ...pre, morePurchaseInfo: [] }))\r\n    }\r\n\r\n    const fetchMorePurchaseDetails = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `dashboard/purchaseInfo/moreInfo?Fromdate=${filter?.date}&Todate=${filter?.date}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPopUpDetails(pre => ({\r\n                    ...pre,\r\n                    morePurchaseInfo: data.data ?? []\r\n                }));\r\n                setPopUpDialogs(pre => ({ ...pre, purchaseMoreDetails: true }));\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    const salesDetailsGrouped = groupData(popUpDetails?.salesDetails, 'Party_Group');\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"date\"\r\n                className=\"cus-inpt w-auto m-1\"\r\n                value={filter.date}\r\n                onChange={e => setFilter(pre => ({ ...pre, date: e.target.value }))}\r\n            />\r\n            <LastSynedTime />\r\n\r\n            <div className=\"p-1 row\">\r\n                {theredRow?.map((o, i) => (\r\n                    <CardComp\r\n                        key={i}\r\n                        icon={getIcons('STOCK VALUE')}\r\n                        title={'STOCK VALUE'}\r\n                        classCount={16}\r\n                        firstVal={o?.Stock_Value ? NumberFormat(parseInt(o?.Stock_Value)) : 0}\r\n                    />\r\n                ))}\r\n                {mangementReport?.map((o, i) => (\r\n                    <CardComp\r\n                        key={i}\r\n                        title={o?.Trans_Type}\r\n                        onClick={() => {\r\n                            switch (o?.Trans_Type) {\r\n                                case 'SALES':\r\n                                    setPopUpDialogs(pre => ({ ...pre, salesDetails: true }));\r\n                                    break;\r\n                                case 'PURCHASE':\r\n                                    setPopUpDialogs(pre => ({ ...pre, purchaseDetails: true }));\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }}\r\n                        icon={o?.Trans_Type ? getIcons(o?.Trans_Type) : undefined}\r\n                        classCount={i + 7}\r\n                        firstVal={o?.Trans_Amount ? NumberFormat(parseInt(o?.Trans_Amount)) : 0}\r\n                        secondVal={o?.Trans_Count ? NumberFormat(o?.Trans_Count) : 0}\r\n                    />\r\n                ))}\r\n                {secRow?.map((o, i) => (\r\n                    <CardComp\r\n                        key={i}\r\n                        title={'EXPENCES'}\r\n                        icon={getIcons('EXPENCES')}\r\n                        classCount={19}\r\n                        firstVal={o?.Total_Cost_Vlaue ? NumberFormat(o?.Total_Cost_Vlaue) : 0}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <Dialog\r\n                open={popUpDialogs.salesDetails}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h4 className='d-flex justify-content-between flex-wrap'>\r\n                            <span>Sales Details</span>\r\n                            <span>\r\n                                {NumberFormat(\r\n                                    popUpDetails?.salesDetails?.reduce((sum, item) => sum += Number(item?.Amount), 0)\r\n                                )}\r\n                            </span>\r\n                        </h4>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <FilterableTable\r\n                        dataArray={salesDetailsGrouped}\r\n                        columns={[\r\n                            {\r\n                                Field_Name: 'Party_Group',\r\n                                Fied_Data: 'string',\r\n                                isVisible: 1,\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                ColumnHeader: 'Total Amount',\r\n                                Cell: ({ row }) => NumberFormat(row?.groupedData?.reduce((acc, item) => acc + Number(item?.Amount), 0)),\r\n                                isVisible: 1,\r\n                            },\r\n                        ]}\r\n                        disablePagination={true}\r\n                        EnableSerialNumber\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (\r\n                            <FilterableTable\r\n                                dataArray={row?.groupedData ?? []}\r\n                                columns={[\r\n                                    {\r\n                                        Field_Name: 'Payment_Mode',\r\n                                        Fied_Data: 'string',\r\n                                        isVisible: 1,\r\n                                    },\r\n                                    {\r\n                                        Field_Name: 'Amount',\r\n                                        Fied_Data: 'number',\r\n                                        isVisible: 1,\r\n                                    },\r\n                                ]}\r\n                                disablePagination={true}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setPopUpDialogs(pre => ({ ...pre, salesDetails: false }))}></Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={popUpDialogs.purchaseDetails}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h4 className='d-flex flex-wrap'>\r\n                            <span className=\"flex-grow-1\">Purchase Details</span>\r\n                        </h4>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <table className=\"table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 text-center fw-bold\" colSpan={2}>ERP</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 \">Count</td>\r\n                                <td className=\"fa-14 border p-2 \">{NumberFormat(popUpDetails.erpPurchaseCount)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 \">Amount</td>\r\n                                <td className=\"fa-14 border p-2 \">{NumberFormat(popUpDetails.erpPurchaseAmount)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 text-center fw-bold\" colSpan={2}>Tally</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 \">Count</td>\r\n                                <td className=\"fa-14 border p-2 \">{NumberFormat(popUpDetails.tallyPurchaseCount)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"fa-14 border p-2 \">Amount</td>\r\n                                <td className=\"fa-14 border p-2 \">{NumberFormat(popUpDetails.tallyPurchaseAmount)}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={fetchMorePurchaseDetails}\r\n                    >View More</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={popUpDialogs.purchaseMoreDetails}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='lg'\r\n            >\r\n                <DialogContent>\r\n                    <FilterableTable \r\n                        dataArray={popUpDetails?.morePurchaseInfo || []}\r\n                        title=\"Purchase Details\"\r\n                        columns={[\r\n                            createCol('invoice_no', 'string', 'Invoice No'),\r\n                            createCol('reference_no', 'string', 'Ref No'),\r\n                            createCol('invoice_date', 'date', 'Date'),\r\n                            createCol('ledger_name', 'string', 'Ledger Name'),\r\n                            createCol('voucher_name', 'string', 'Voucher Name'),\r\n                            createCol('total_invoice_value', 'number', 'Invoice Value'),\r\n                        ]}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManagementDashboard;","import { Addition, checkIsNumber, getSessionUser, ISOString, isValidDate } from \"../../Components/functions\";\r\nimport { useState, useEffect } from 'react'\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { Card, CardContent } from \"@mui/material\";\r\n\r\nconst StaffInvolvedCostCenterDetails = ({ loadingOn, loadingOff, reqDate = ISOString() }) => {\r\n    const { user } = getSessionUser()\r\n    const [staffData, setStaffData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        fetchReqDate: reqDate\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isValidDate(filters.fetchReqDate) && checkIsNumber(user.UserId)) {\r\n            setStaffData([])\r\n            if (loadingOn) loadingOn();\r\n            fetchLink({\r\n                address: `dataEntry/costCenter/report/employee?userid=${user.UserId}&reqDate=${filters.fetchReqDate}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setStaffData(data.data)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }, [filters.fetchReqDate, user.UserId])\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"d-flex flex-wrap align-items-center border-bottom px-3 py-2\">\r\n                    <span className=\"flex-grow-1 fa-16\">ERP Activity</span>\r\n                    <input\r\n                        type=\"date\"\r\n                        value={filters.fetchReqDate}\r\n                        onChange={e => setFilters(pre => ({ ...pre, fetchReqDate: e.target.value }))}\r\n                        className=\"cus-inpt w-auto p-2\"\r\n                    />\r\n                </div>\r\n                <div className=\"d-flex flex-wrap align-items-center px-3 py-2 fa-15\">\r\n\r\n                    <Card className=\"mx-2\" style={{ minWidth: 200}}>\r\n                        <CardContent className=\"d-flex flex-column align-items-center\">\r\n                            <h4>\r\n                                {staffData.reduce((sTacc, staff) => Addition(sTacc, staff.StockJournalTotal), 0)}\r\n                            </h4>\r\n                            <h6>Stock Handled KGs</h6>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                    <Card className=\"mx-2\" style={{ minWidth: 200}}>\r\n                        <CardContent className=\"d-flex flex-column align-items-center\">\r\n                            <h4>\r\n                                {staffData.reduce((sTacc, staff) => Addition(sTacc, staff?.Stock_Journals?.length), 0)}\r\n                            </h4>\r\n                            <h6>Movement Activity</h6>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                    <Card className=\"mx-2\" style={{ minWidth: 200}}>\r\n                        <CardContent className=\"d-flex flex-column align-items-center\">\r\n                            <h4>\r\n                                {staffData.reduce((sTacc, staff) => Addition(sTacc, staff.TripSheetTotal), 0)}\r\n                            </h4>\r\n                            <h6>Trip Sheet KGs</h6>\r\n                        </CardContent>\r\n                    </Card>\r\n                    \r\n                    <Card className=\"mx-2\" style={{ minWidth: 200}}>\r\n                        <CardContent className=\"d-flex flex-column align-items-center\">\r\n                            <h4>\r\n                                {staffData.reduce((sTacc, staff) => Addition(sTacc, staff?.Trip_Sheet?.length), 0)}\r\n                            </h4>\r\n                            <h6>Total Trips</h6>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StaffInvolvedCostCenterDetails;","import { useEffect, useState } from \"react\"\r\nimport { CiCalendarDate } from \"react-icons/ci\";\r\nimport { CgSandClock } from \"react-icons/cg\";\r\nimport { HiUsers } from \"react-icons/hi2\";\r\nimport { RxLapTimer } from \"react-icons/rx\";\r\nimport { TbTargetArrow } from \"react-icons/tb\";\r\nimport { BiTask } from \"react-icons/bi\";\r\nimport PieChartComp from \"./chartComp\";\r\nimport { Card, CardHeader, CardContent, Paper, FormControlLabel, Switch } from '@mui/material'\r\nimport SOAComp from \"./erp/SOA\";\r\nimport AttendanceComp from \"../Attendance/attendanceComp\";\r\nimport ManagementDashboard from \"./managementDashboard\";\r\nimport { fetchLink } from '../../Components/fetchComponent'\r\nimport { ISOString } from \"../../Components/functions\";\r\nimport StaffInvolvedCostCenterDetails from \"./staffInvolvedCostCenter\";\r\n\r\nconst CommonDashboard = ({ loadingOn, loadingOff }) => {\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [dashboardData, setDashboardData] = useState({});\r\n    const [workedDetais, setWorkedDetais] = useState([]);\r\n    const [myTasks, setMyTasks] = useState([]);\r\n    const [tallyDetails, setTallyDetails] = useState([]);\r\n    const isAdmin = Number(parseData?.UserTypeId) === 0 || Number(parseData?.UserTypeId) === 1\r\n    const isMangement = Number(parseData?.UserTypeId) === 2\r\n    const isEmp = Number(parseData?.UserTypeId) === 6 || Number(parseData?.UserTypeId) === 3;\r\n    const isCustomer = Number(parseData?.UserTypeId) === 4 || Number(parseData?.UserTypeId) === 5;\r\n    const [dispTask, setDispTask] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (isAdmin || isEmp || isMangement) {\r\n            fetchLink({\r\n                address: `dashboard/dashboardData?UserType=${parseData?.UserTypeId}&Emp_Id=${parseData?.UserId}`\r\n            })\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        setDashboardData(data.data[0]);\r\n                    } else {\r\n                        setDashboardData({});\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    console.error(e);\r\n                });\r\n        }\r\n    }, [parseData?.UserId, parseData?.UserTypeId, isAdmin, isMangement, isEmp]);\r\n\r\n    useEffect(() => {\r\n        if (isEmp) {\r\n            fetchLink({\r\n                address: `dashboard/getTallyData?UserId=${parseData?.UserId}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setTallyDetails(data.data);\r\n                } else {\r\n                    setTallyDetails([])\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [isEmp])\r\n\r\n    useEffect(() => {\r\n        if (isEmp) {\r\n            fetchLink({\r\n                address: `taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${ISOString()}&to=${ISOString()}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setWorkedDetais(data.data);\r\n                } else {\r\n                    setTallyDetails([])\r\n                }\r\n            }).catch(e => console.error(e))\r\n\r\n            fetchLink({\r\n                address: `taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${ISOString()}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    data.data.sort((a, b) => {\r\n                        const [aHours, aMinutes] = a?.Sch_Time.split(':').map(Number);\r\n                        const [bHours, bMinutes] = b?.Sch_Time.split(':').map(Number);\r\n                        if (aHours !== bHours) {\r\n                            return aHours - bHours;\r\n                        }\r\n                        return aMinutes - bMinutes;\r\n                    });\r\n                    setMyTasks(data.data);\r\n                } else {\r\n                    setMyTasks([])\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [isEmp, parseData?.UserId])\r\n\r\n    const CardComp = ({ title, icon, firstVal, secondVal, classCount }) => {\r\n        return (\r\n            <>\r\n                <div className={`${(isAdmin || isMangement) && 'col-xxl-3'} col-lg-4 col-md-6 col-sm-12 p-2`}>\r\n                    <div className={\"coloredDiv d-flex align-items-center text-light cus-shadow coloredDiv\" + classCount}>\r\n                        <div className=\"flex-grow-1 p-3\">\r\n                            <h5 className=\"text-uppercase\">{title}</h5>\r\n                            <h3 className=\"fa-16 text-end pe-3\">\r\n                                <span style={{ fontSize: '30px' }}>{firstVal ? firstVal : 0} </span>\r\n                                {secondVal && '/' + secondVal}\r\n                            </h3>\r\n                        </div>\r\n                        {icon}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const minFormat = (val) => {\r\n        const hour = Math.floor(Number(val) / 60);\r\n        const minutes = Number(val) % 60;\r\n        const formatHour = hour < 10 ? '0' + hour : hour;\r\n        const formatMinute = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n        return (formatHour && formatMinute) ? formatHour + ':' + formatMinute : '00:00';\r\n    }\r\n\r\n    const statusColor = (id) => {\r\n        const numId = Number(id);\r\n        const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\r\n        return color[numId]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isCustomer && <SOAComp />}\r\n\r\n            {(isMangement || isAdmin) && <ManagementDashboard />}\r\n\r\n            {(isAdmin || isMangement) && (\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={dispTask}\r\n                            onChange={e => setDispTask(e.target.checked)}\r\n                        />\r\n                    }\r\n                    label=\"Show Task Management\"\r\n                    className=\" fw-bold text-primary\"\r\n                />\r\n            )}\r\n\r\n            <div className=\"px-1\">\r\n                {((isAdmin || isMangement) && dispTask) && (\r\n                    <div className=\"row\">\r\n                        <CardComp\r\n                            title={'Projects'}\r\n                            icon={<TbTargetArrow style={{ fontSize: '80px' }} />}\r\n                            firstVal={dashboardData?.ActiveProjects}\r\n                            secondVal={dashboardData?.AllProjects}\r\n                            classCount={'1'}\r\n                        />\r\n                        <CardComp\r\n                            title={'Schedule'}\r\n                            icon={<CiCalendarDate style={{ fontSize: '80px' }} />}\r\n                            firstVal={dashboardData?.ActiveSchedule}\r\n                            secondVal={dashboardData?.AllSchedule}\r\n                            classCount={'2'}\r\n                        />\r\n                        <CardComp\r\n                            title={'Completed Tasks'}\r\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\r\n                            firstVal={dashboardData?.TaskCompleted}\r\n                            // secondVal={dashboardData?.TaskAssigned}\r\n                            classCount={'3'}\r\n                        />\r\n                        <CardComp\r\n                            title={'Employee'}\r\n                            icon={<HiUsers style={{ fontSize: '80px' }} />}\r\n                            firstVal={dashboardData?.EmployeeCounts}\r\n                            secondVal={Number(dashboardData?.EmployeeCounts) + dashboardData?.OtherUsers}\r\n                            classCount={'4'}\r\n                        />\r\n                        <CardComp\r\n                            title={'Worked Hours'}\r\n                            icon={<RxLapTimer style={{ fontSize: '80px' }} />}\r\n                            firstVal={minFormat(dashboardData?.TotalMinutes)}\r\n                            classCount={'5'}\r\n                        />\r\n                        <CardComp\r\n                            title={'Today Tasks'}\r\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\r\n                            firstVal={dashboardData?.TodayTaskCompleted}\r\n                            secondVal={dashboardData?.TodayTasks}\r\n                            classCount={'6'}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {isEmp && (\r\n                    <div className=\"row\">\r\n                        <CardComp\r\n                            title={'Completed Tasks'}\r\n                            firstVal={dashboardData?.TaskCompleted}\r\n                            secondVal={dashboardData?.TotalTasks}\r\n                            icon={<BiTask style={{ fontSize: '80px' }} />}\r\n                            classCount={'1'} />\r\n                        <CardComp\r\n                            title={'Today Tasks'}\r\n                            firstVal={dashboardData?.TodayTaskCompleted}\r\n                            secondVal={dashboardData?.TodayTasks}\r\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\r\n                            classCount={'2'} />\r\n                        <CardComp\r\n                            title={'Total Work Hours'}\r\n                            firstVal={minFormat(dashboardData?.WorkedMinutes)}\r\n                            icon={<CgSandClock style={{ fontSize: '80px' }} />}\r\n                            classCount={'3'} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <br />\r\n\r\n            {isEmp && <AttendanceComp />}\r\n\r\n            <br />\r\n\r\n            {(isEmp && workedDetais.length > 0) && (\r\n                <>\r\n                    <Card>\r\n                        <CardContent sx={{ pb: 2 }}>\r\n                            <h5>Today Activity</h5>\r\n                            <PieChartComp TasksArray={workedDetais} />\r\n                            <br />\r\n                        </CardContent>\r\n                    </Card>\r\n                    <br />\r\n                </>\r\n            )}\r\n\r\n            <StaffInvolvedCostCenterDetails loadingOn={loadingOn} loadingOff={loadingOff} />\r\n\r\n            {(isEmp && myTasks.length > 0) && (\r\n                <Card>\r\n                    <CardHeader title={'Today Tasks:' + myTasks.length} sx={{ pb: 0 }} />\r\n                    <CardContent>\r\n\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table mb-1 \">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-13 border\">SNo</th>\r\n                                        <th className=\"fa-13 border\">Task</th>\r\n                                        <th className=\"fa-13 border\">Timer Based</th>\r\n                                        <th className=\"fa-13 border\">Schedule</th>\r\n                                        <th className=\"fa-13 border\">Duration</th>\r\n                                        <th className=\"fa-13 border\">Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {myTasks.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"fa-13 border\">{i + 1}</td>\r\n                                            <td className=\"fa-13 border\">{o?.Task_Name}</td>\r\n                                            <td className=\"fa-13 border text-center\">\r\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\r\n                                                    {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\r\n                                                </span>\r\n                                            </td>\r\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Time} - {o?.EN_Time}</td>\r\n                                            <td className=\"fa-13 border text-center\">{o?.Sch_Period}</td>\r\n                                            <td className=\"fa-13 border text-center\">\r\n                                                <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Id ? 3 : 1)}`}>\r\n                                                    {o?.Work_Id ? 'Completed' : 'Pending'}\r\n                                                </span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            )}\r\n\r\n            <br />\r\n\r\n            {(isEmp && tallyDetails?.length > 0) && (\r\n                <Card component={Paper}>\r\n                    <CardHeader title=\"Tally Entries\" sx={{ pb: 0 }} />\r\n                    <CardContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-13 border\">Sno</th>\r\n                                        <th className=\"fa-13 border\">Particulars</th>\r\n                                        <th className=\"fa-13 border\">Value</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {tallyDetails?.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"fa-13 border\">{i + 1}</td>\r\n                                            <td className=\"fa-13 border\">{o?.Particulars}</td>\r\n                                            <td className=\"fa-13 border\">{o?.Tally_Count}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CommonDashboard","import { useEffect, useState } from \"react\";\r\nimport { UTCDateWithTime } from \"../../Components/functions\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\nconst LastSynedTime = () => {\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const isAdmin = Number(parseData?.UserTypeId) === 0 || Number(parseData?.UserTypeId) === 1;\r\n    const [lastSyncedTime, setLastSynedTime] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (isAdmin) {\r\n            fetchLink({\r\n                address: `dashboard/lastSyncedTime`,\r\n                headers: {\r\n                    'Db': parseData?.Company_id\r\n                }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    const dateTime = data?.data[0]?.Last_Sync_Date_Time ? new Date(data?.data[0]?.Last_Sync_Date_Time) : null;\r\n                    setLastSynedTime(dateTime)\r\n                }\r\n            })\r\n        }\r\n    }, [isAdmin, parseData?.Company_id])\r\n\r\n    return (\r\n        <>\r\n            <span className=\"fa-14 px-2 py-1 bg-white rounded border\"> Sync: {lastSyncedTime ? UTCDateWithTime(lastSyncedTime) : '-'}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LastSynedTime;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","TasksArray","chartData","setChartData","chartInstance","setChartInstance","totalTime","setTotalTime","useEffect","totalDuration","reduce","acc","task","start","Date","toISOString","split","Start_Time","End_Time","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","padStart","taskData","duration","label","Task_Name","getRandomColor","labels","datasets","borderColor","borderWidth","push","destroy","ctx","document","getElementById","newChartInstance","Chart","options","responsive","plugins","tooltip","callbacks","context","parsed","total","dataset","curr","percentage","round","datalabels","formatter","chart","dataIndex","value1","random","style","id","width","height","SOAComp","_SOA$","_SOA$2","_SOA$3","_SOA$4","_SOA$5","_SOA$6","_SOA$7","_SOA$8","_SOA$9","_SOA$10","parseData","JSON","parse","localStorage","getItem","isCustomer","setIsCustomer","setDataArray","UserId","setTotal","dialog","setDialog","SOA","setSOA","clickedRow","setClickedRow","today","firstDayOfMonth","getFullYear","getMonth","selectedRange","setSelectedRange","to","imageSource","logo","closingBalance","setClosingBalance","debit","credit","printRef","useRef","fetchLink","address","then","status","_data$data","temp","obj","Bal_Amount","catch","getInfo","prop","mode","_rowData","_rowData2","_rowData3","rowData","Cust_Id","tally_id","Company_Id","_data$data2","bal","Debit_Amt","Credit_Amt","handlePrint","useReactToPrint","content","current","Name","toLocaleString","_o$Bal_Amount","LaunchOutlined","Company_Name","ledger_name","CR_DR","Dialog","fullScreen","fullWidth","DialogTitle","Customer_name","Button","XLSXUtils","writeXLSX","toLocaleDateString","day","month","year","hour","minute","second","generateExcel","Ledger_Date","Purticular","Ledger_Desc","InvoiceNo","invoice_no","Debit","Credit","Company","Ledger","Ledger_Name","Mobile_Number","Mobile_no","DialogContent","src","alt","Contact_Person","onChange","window","alert","ref","DialogActions","variant","AttendanceComp","storage","initialValue","Latitude","Longitude","Description","lastAttendance","setLastAttendance","reload","setReload","inputValue","setInputValue","success","resetValues","StartDay","async","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","code","PERMISSION_DENIED","toast","warn","message","getLocation","hasLocationAccess","method","bodyData","Active_Status","CardContent","Start_Date","maxWidth","placeholder","EndDay","Id","getIcons","str","_iconArr$find","LuArrowUpWideNarrow","ShoppingCart","IoReceiptOutline","HiOutlineCurrencyRupee","PiHandCoinsFill","BsCartPlus","FaCubesStacked","CardComp","firstVal","secondVal","classCount","_popUpDetails$salesDe","loadingOn","loadingOff","UserAccess","UserTypeId","mangementReport","setMangementReport","secRow","setSecRow","theredRow","setTheredRow","popUpDetails","setPopUpDetails","salesDetails","erpPurchaseCount","erpPurchaseAmount","tallyPurchaseCount","tallyPurchaseAmount","morePurchaseInfo","popUpDialogs","setPopUpDialogs","purchaseDetails","purchaseMoreDetails","setFilter","date","ISOString","Company_id","tallyInfo","erpInfo","checkIsNumber","Purchase_Count","Purchase_Amount","Tally_Purchase_Count","Tally_Purchase_Amount","closeDialog","fromEntries","salesDetailsGrouped","groupData","LastSynedTime","Stock_Value","Trans_Type","Trans_Amount","Trans_Count","Total_Cost_Vlaue","sum","item","Amount","_row$groupedData","groupedData","_ref5","_row$groupedData2","fetchMorePurchaseDetails","finally","reqDate","user","getSessionUser","staffData","setStaffData","filters","setFilters","fetchReqDate","isValidDate","minWidth","sTacc","staff","Addition","StockJournalTotal","_staff$Stock_Journals","Stock_Journals","TripSheetTotal","_staff$Trip_Sheet","Trip_Sheet","dashboardData","setDashboardData","workedDetais","setWorkedDetais","myTasks","setMyTasks","tallyDetails","setTallyDetails","isAdmin","isMangement","isEmp","dispTask","setDispTask","aHours","aMinutes","Sch_Time","bHours","bMinutes","minFormat","formatHour","formatMinute","statusColor","ManagementDashboard","FormControlLabel","control","Switch","checked","TbTargetArrow","ActiveProjects","AllProjects","CiCalendarDate","ActiveSchedule","AllSchedule","BiTask","TaskCompleted","HiUsers","EmployeeCounts","OtherUsers","RxLapTimer","TotalMinutes","CgSandClock","TodayTaskCompleted","TodayTasks","TotalTasks","WorkedMinutes","pb","PieChartComp","StaffInvolvedCostCenterDetails","CardHeader","Timer_Based","EN_Time","Sch_Period","Work_Id","Particulars","Tally_Count","lastSyncedTime","setLastSynedTime","_data$data$","_data$data$2","dateTime","Last_Sync_Date_Time","UTCDateWithTime"],"sourceRoot":""}
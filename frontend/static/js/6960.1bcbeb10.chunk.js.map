{"version":3,"file":"static/js/6960.1bcbeb10.chunk.js","mappings":"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","sources":["Pages/Purchase/variable.js","Pages/Purchase/purchaseInvoiceManagement.jsx"],"sourcesContent":["import { ISOString, isValidJSON } from \"../../Components/functions\";\r\n\r\nconst user = localStorage.getItem('user');\r\nconst storage = isValidJSON(user) ? JSON.parse(user) : {};\r\n\r\nexport const initialInvoiceValue = {\r\n    PIN_Id: '',\r\n    Po_Inv_No: '',\r\n    Branch_Id: '',\r\n    Voucher_Type: 0,\r\n    Ref_Po_Inv_No: '',\r\n    Po_Inv_Date: ISOString(),\r\n    Po_Entry_Date: ISOString(),\r\n    Retailer_Id: '',\r\n    Retailer_Name: '',\r\n    GST_Inclusive: 2,\r\n    IS_IGST: 0,\r\n    Narration: '',\r\n    isConverted: '',\r\n    CSGT_Total: 0,\r\n    SGST_Total: 0,\r\n    IGST_Total: 0,\r\n    Round_off: 0,\r\n    Total_Before_Tax: 0,\r\n    Total_Tax: 0,\r\n    Total_Invoice_value: 0,\r\n    Cancel_status: 0,\r\n    Stock_Item_Ledger_Name: '',\r\n    Created_by: storage.UserId,\r\n    Altered_by: storage.UserId,\r\n    Created_on: '',\r\n    Alterd_on: '',\r\n    Trans_Type: '',\r\n    Alter_Id: '',\r\n    Approved_By: '',\r\n    Approve_Status: '',\r\n}\r\n\r\nexport const itemsRowDetails = {\r\n    Trip_Id: '',\r\n    Trip_Item_SNo: '',\r\n    POI_St_Id: '',\r\n    DeliveryId: '',\r\n    OrderId: '',\r\n    PIN_Id: '',\r\n    Po_Inv_Date: '',\r\n    S_No: '',\r\n    Location_Id: '',\r\n    Item_Id: '',\r\n    Item_Name: '',\r\n    Bill_Qty: 0,\r\n    Act_Qty: 0,\r\n    Item_Rate: 0,\r\n    Bill_Alt_Qty: 0,\r\n    Free_Qty: 0,\r\n    Unit_Id: '',\r\n    Unit_Name: '',\r\n    Batch_No: '',\r\n    Taxable_Rate: 0,\r\n    Amount: 0,\r\n    Total_Qty: 0,\r\n    Taxble: 0,\r\n    HSN_Code: '',\r\n    Taxable_Amount: 0,\r\n    Tax_Rate: 0,\r\n    Cgst: 0,\r\n    Cgst_Amo: 0,\r\n    Sgst: 0,\r\n    Sgst_Amo: 0,\r\n    Igst: 0,\r\n    Igst_Amo: 0,\r\n    Final_Amo: 0,\r\n    Created_on: '',\r\n}\r\n\r\nexport const staffRowDetails = {\r\n    Id: '',\r\n    PIN_Id: '',\r\n    Involved_Emp_Id: '',\r\n    Involved_Emp_Name: 'select',\r\n    Cost_Center_Type_Id: '',\r\n}","import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { Button, Card, CardContent, Dialog, DialogContent, DialogTitle, IconButton, Switch } from \"@mui/material\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { Add, Delete } from \"@mui/icons-material\";\r\nimport { Addition, checkIsNumber, Division, filterableText, getUniqueData, isEqualNumber, ISOString, isValidJSON, isValidObject, Multiplication, NumberFormat, numberToWords, onlynumAndNegative, RoundNumber } from \"../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { calculateGSTDetails } from '../../Components/taxCalculator';\r\nimport { initialInvoiceValue, itemsRowDetails, staffRowDetails } from \"./variable\";\r\nimport AddItemToSaleOrderCart from \"../Sales/SaleOrder/addItemToCart\";\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst dialogs = {\r\n    addProductDialog: false,\r\n    selectArrivalDialog: false\r\n}\r\n\r\nconst PurchaseInvoiceManagement = ({ loadingOn, loadingOff }) => {\r\n    const location = useLocation();\r\n    const navigation = useNavigate();\r\n    const stateDetails = location.state;\r\n\r\n    const [invoiceDetails, setInvoiceDetails] = useState(initialInvoiceValue);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n    const [StaffArray, setStaffArray] = useState([]);\r\n\r\n    const [deliveryDetails, setDeliveryDetails] = useState([]);\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n    const isInclusive = isEqualNumber(invoiceDetails?.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceDetails?.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceDetails?.IS_IGST, 1);\r\n\r\n    const [dialog, setDialog] = useState(dialogs);\r\n    const [manualInvoice, setManualInvoice] = useState(false)\r\n\r\n    const [baseData, setBaseData] = useState({\r\n        retailers: [],\r\n        branch: [],\r\n        uom: [],\r\n        products: [],\r\n        voucherType: [],\r\n        stockItemLedgerName: [],\r\n        godown: [],\r\n        staff: [],\r\n        staffType: [],\r\n        brand: [],\r\n    });\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        return selectedItems.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0);\r\n    }, [selectedItems, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    const taxSplitUp = useMemo(() => {\r\n        if (!selectedItems || selectedItems.length === 0) return {};\r\n\r\n        let totalTaxable = 0;\r\n        let totalTax = 0;\r\n\r\n        selectedItems.forEach(item => {\r\n            const Amount = RoundNumber(item?.Amount || 0);\r\n\r\n            if (isNotTaxableBill) {\r\n                totalTaxable = Addition(totalTaxable, Amount);\r\n                return;\r\n            }\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n\r\n            totalTaxable = Addition(totalTaxable, parseFloat(taxInfo.without_tax));\r\n            totalTax = Addition(totalTax, parseFloat(taxInfo.tax_amount));\r\n        });\r\n\r\n        const totalWithTax = Addition(totalTaxable, totalTax);\r\n        const roundedTotal = Math.round(totalWithTax);\r\n        const roundOff = RoundNumber(roundedTotal - totalWithTax);\r\n\r\n        const cgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const sgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const igst = isEqualNumber(IS_IGST, 1) ? RoundNumber(totalTax) : 0;\r\n\r\n        return {\r\n            totalTaxable: RoundNumber(totalTaxable),\r\n            totalTax: RoundNumber(totalTax),\r\n            cgst,\r\n            sgst,\r\n            igst,\r\n            roundOff,\r\n            invoiceTotal: roundedTotal\r\n        };\r\n\r\n    }, [selectedItems, baseData.products, IS_IGST, isNotTaxableBill, isInclusive]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                if (loadingOn) loadingOn();\r\n\r\n                const [\r\n                    retailerResponse,\r\n                    branchResponse,\r\n                    uomResponse,\r\n                    productsResponse,\r\n                    voucherTypeResponse,\r\n                    stockItemLedgerNameResponse,\r\n                    godownLocationsResponse,\r\n                    staffResponse,\r\n                    staffCategory\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/retailers/dropDown` }),\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `purchase/stockItemLedgerName?type=PURCHASE` }),\r\n                    fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                ]);\r\n\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n                    (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n                );\r\n                const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    retailers: retailersData,\r\n                    branch: branchData,\r\n                    uom: uomData,\r\n                    products: productsData,\r\n                    voucherType: voucherType,\r\n                    stockItemLedgerName: stockItemLedgerName,\r\n                    godown: godownLocations,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n                }));\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            } finally {\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(stateDetails) &&\r\n            Array.isArray(stateDetails?.orderInfo) &&\r\n            Array.isArray(stateDetails?.staffInfo) &&\r\n            isValidObject(stateDetails?.invoiceInfo)\r\n        ) {\r\n            const { invoiceInfo, orderInfo, staffInfo } = stateDetails;\r\n            searchFromArrival(invoiceInfo.Retailer_Id);\r\n            setInvoiceDetails(\r\n                Object.fromEntries(\r\n                    Object.entries(initialInvoiceValue).map(([key, value]) => {\r\n                        if (key === 'Po_Inv_Date') return [key, invoiceInfo[key] ? ISOString(invoiceInfo[key]) : value]\r\n                        if (key === 'Po_Entry_Date') return [key, invoiceInfo[key] ? ISOString(invoiceInfo[key]) : value]\r\n                        return [key, invoiceInfo[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setSelectedItems(\r\n                orderInfo.map(item => Object.fromEntries(\r\n                    Object.entries(itemsRowDetails).map(([key, value]) => {\r\n                        if (key === 'Item_Name') return [key, item['Product_Name'] || value]\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setStaffArray(\r\n                staffInfo.map(item => Object.fromEntries(\r\n                    Object.entries(staffRowDetails).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setManualInvoice(invoiceInfo.isFromPurchaseOrder)\r\n        }\r\n    }, [stateDetails])\r\n\r\n    const searchFromArrival = (vendor) => {\r\n        if (checkIsNumber(vendor)) {\r\n            if (loadingOn) loadingOn();\r\n            // setSelectedItems([]);\r\n            setDeliveryDetails([]);\r\n            fetchLink({\r\n                address: `dataEntry/purchaseOrderEntry/delivery/partyBased?VendorId=${vendor}`\r\n            }).then(data => {\r\n                if (data.success) setDeliveryDetails(data.data)\r\n            }).catch(e => console.error(e)).finally(() => {\r\n                if (loadingOff) loadingOff()\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeItems = (itemDetail, deleteOption) => {\r\n        setSelectedItems((prev) => {\r\n            const preItems = prev.filter(o => !(\r\n                isEqualNumber(o?.OrderId, itemDetail?.OrderId)\r\n                && isEqualNumber(o?.Item_Id, itemDetail?.ItemId)\r\n                && isEqualNumber(o?.DeliveryId, itemDetail?.Trip_Item_SNo)\r\n            ));\r\n            if (deleteOption) {\r\n                return preItems;\r\n            } else {\r\n                const currentOrders = deliveryDetails.filter(item => (\r\n                    isEqualNumber(item.OrderId, itemDetail.OrderId)\r\n                    && isEqualNumber(itemDetail?.ItemId, item?.ItemId)\r\n                    && isEqualNumber(itemDetail?.Trip_Item_SNo, item?.Trip_Item_SNo)\r\n                ));\r\n\r\n                const notInStaffList = [...new Map(\r\n                    currentOrders.flatMap(ordr => ordr.EmployeesInvolved)\r\n                        .filter(staff => !StaffArray.some(arrObj => isEqualNumber(arrObj.Involved_Emp_Id, staff.EmployeeId)))\r\n                        .map(staff => [staff.EmployeeId, staff])\r\n                ).values()];\r\n\r\n                if (notInStaffList.length > 0) {\r\n                    setStaffArray(prevStaffArray => [\r\n                        ...prevStaffArray,\r\n                        ...notInStaffList.map(staff => Object.fromEntries(\r\n                            Object.entries(staffRowDetails).map(([key, value]) => {\r\n                                switch (key) {\r\n                                    case 'Involved_Emp_Id': return [key, staff?.EmployeeId];\r\n                                    case 'Involved_Emp_Name': return [key, staff?.EmployeeName];\r\n                                    case 'Cost_Center_Type_Id': return [key, staff?.CostType];\r\n                                    default: return [key, value];\r\n                                }\r\n                            })\r\n                        ))\r\n                    ]);\r\n                }\r\n\r\n                const reStruc = currentOrders.map(item => {\r\n                    const productDetails = findProductDetails(baseData.products, item.ItemId);\r\n                    const gstPercentage = IS_IGST ? productDetails.Igst_P : productDetails.Gst_P;\r\n                    const isTaxable = gstPercentage > 0;\r\n\r\n                    const Bill_Qty = parseFloat(item.Weight) ?? 0;\r\n                    const Item_Rate = RoundNumber(item.BilledRate) ?? 0;\r\n                    const Amount = Multiplication(Bill_Qty, Item_Rate);\r\n\r\n                    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                    const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                    const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                    const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                    const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                    const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                    const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                    return Object.fromEntries(\r\n                        Object.entries(itemsRowDetails).map(([key, value]) => {\r\n                            switch (key) {\r\n                                case 'DeliveryId': return [key, Number(item?.Trip_Item_SNo)]\r\n                                case 'OrderId': return [key, Number(item?.OrderId)]\r\n                                case 'Po_Inv_Date': return [key, invoiceDetails?.Po_Inv_Date]\r\n                                case 'Location_Id': return [key, Number(item?.LocationId) ?? '']\r\n                                case 'Item_Id': return [key, Number(item?.ItemId)]\r\n                                case 'Item_Name': return [key, Number(productDetails?.Product_Name)]\r\n                                case 'Bill_Qty': return [key, item?.pendingInvoiceWeight]\r\n                                case 'Act_Qty': return [key, Bill_Qty]\r\n                                case 'Item_Rate': return [key, Item_Rate]\r\n                                case 'Bill_Alt_Qty': return [key, Number(item?.Quantity)]\r\n                                case 'Batch_No': return [key, item?.BatchLocation]\r\n                                case 'Amount': return [key, Amount]\r\n                                case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                                case 'Total_Qty': return [key, Bill_Qty]\r\n                                case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                                case 'HSN_Code': return [key, productDetails.HSN_Code]\r\n                                case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                                case 'Tax_Rate': return [key, gstPercentage]\r\n                                case 'Cgst':\r\n                                case 'Sgst': return [key, cgstPer ?? 0]\r\n                                case 'Cgst_Amo':\r\n                                case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                                case 'Igst': return [key, igstPer ?? 0]\r\n                                case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                                case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                                default: return [key, value]\r\n                            }\r\n                        })\r\n                    )\r\n\r\n                });\r\n                return preItems.concat(reStruc);\r\n            }\r\n        });\r\n    };\r\n\r\n    const closeDialogs = () => {\r\n        setDialog(dialogs);\r\n    }\r\n\r\n    const changeSelectedObjects = (row, key, value) => {\r\n        setSelectedItems((prev) => {\r\n            return prev.map(item => {\r\n                if (item.DeliveryId === row.DeliveryId) {\r\n                    switch (key) {\r\n                        case 'Bill_Qty': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Bill_Qty: updatedValue };\r\n                            if (item.Item_Rate) {\r\n                                newItem.Amount = Multiplication(item.Item_Rate, updatedValue);\r\n                            } else if (item.Amount) {\r\n                                newItem.Item_Rate = Division(item.Amount, updatedValue);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        case 'Item_Rate': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Item_Rate: updatedValue };\r\n                            if (item.Bill_Qty) {\r\n                                newItem.Amount = Multiplication(updatedValue, item.Bill_Qty);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        case 'Amount': {\r\n                            const updatedValue = parseFloat(value || 0);\r\n                            const newItem = { ...item, Amount: updatedValue };\r\n                            if (item.Bill_Qty) {\r\n                                newItem.Item_Rate = Division(updatedValue, item.Bill_Qty);\r\n                            }\r\n                            return newItem;\r\n                        }\r\n                        default:\r\n                            return { ...item, [key]: value };\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n\r\n    const postOrder = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: 'purchase/purchaseOrder',\r\n            method: checkIsNumber(invoiceDetails?.PIN_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                Product_Array: selectedItems,\r\n                StaffArray: StaffArray,\r\n                ...invoiceDetails\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data?.message || 'Saved');\r\n                setSelectedItems([]);\r\n                setInvoiceDetails(initialInvoiceValue);\r\n                setDeliveryDetails([]);\r\n                setStaffArray([]);\r\n                if ((Array.isArray(stateDetails?.orderInfo) || isValidObject(stateDetails?.invoiceInfo)) && window.history.length > 1) {\r\n                    navigation(-1);\r\n                } else {\r\n                    navigation(location.pathname, { replace: true, state: null });\r\n                }\r\n            } else {\r\n                toast.error(data?.message || 'Request Failed')\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AddItemToSaleOrderCart\r\n                orderProducts={selectedItems}\r\n                setOrderProducts={setSelectedItems}\r\n                open={dialog.addProductDialog}\r\n                onClose={() => {\r\n                    setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                godowns={baseData.godown}\r\n                GST_Inclusive={isInclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={itemsRowDetails}\r\n                stockInGodown={[]}\r\n            />\r\n\r\n            <form onSubmit={e => {\r\n                e.preventDefault();\r\n                postOrder();\r\n            }}>\r\n                <Card>\r\n\r\n                    <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n                        <span className=\"flex-grow-1 fa-16 fw-bold\">Purchase Invoice Creation</span>\r\n                        <span>\r\n\r\n                            <label htmlFor=\"\">Manual Invoice</label>\r\n                            <Switch\r\n                                checked={manualInvoice}\r\n                                onChange={e => {\r\n                                    setManualInvoice(e.target.checked);\r\n                                    setSelectedItems([])\r\n                                }}\r\n                            />\r\n\r\n                            <Button type='button' onClick={() => {\r\n                                if ((Array.isArray(stateDetails?.orderInfo) || isValidObject(stateDetails?.invoiceInfo)) && window.history.length > 1) {\r\n                                    navigation(-1);\r\n                                } else {\r\n                                    navigation('/erp/purchase/invoice');\r\n                                }\r\n                            }}>Cancel</Button>\r\n\r\n                            <Button type='submit' variant=\"contained\">submit</Button>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <CardContent>\r\n\r\n                        <div className=\"row\">\r\n                            {/* staff info */}\r\n                            <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                                <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                    <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                                        <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            type=\"button\"\r\n                                            onClick={() => setStaffArray([...StaffArray, { ...staffRowDetails }])}\r\n                                        >Add</Button>\r\n                                    </div>\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th className=\"fa-13\">Sno</th>\r\n                                                <th className=\"fa-13\">Staff Name</th>\r\n                                                <th className=\"fa-13\">Category</th>\r\n                                                <th className=\"fa-13\">#</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {StaffArray.map((row, index) => (\r\n                                                <tr key={index}>\r\n                                                    <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                                                    <td className='fa-13 w-100 p-0'>\r\n                                                        <Select\r\n                                                            value={{\r\n                                                                value: row?.Involved_Emp_Id,\r\n                                                                label: row?.Involved_Emp_Name,\r\n                                                            }}\r\n                                                            onChange={e => setStaffArray((prev) => {\r\n                                                                return prev.map((item, ind) => {\r\n                                                                    if (isEqualNumber(ind, index)) {\r\n                                                                        const staff = baseData.staff.find(c => isEqualNumber(c.Cost_Center_Id, e.value))\r\n                                                                        return {\r\n                                                                            ...item,\r\n                                                                            Cost_Center_Type_Id:\r\n                                                                                checkIsNumber(item.Cost_Center_Type_Id)\r\n                                                                                    ? Number(item.Cost_Center_Type_Id)\r\n                                                                                    : checkIsNumber(staff.User_Type)\r\n                                                                                        ? Number(staff.User_Type)\r\n                                                                                        : 0,\r\n                                                                            Involved_Emp_Id: Number(e.value),\r\n                                                                            Involved_Emp_Name: e.label\r\n                                                                        }\r\n                                                                    }\r\n                                                                    return item;\r\n                                                                });\r\n                                                            })}\r\n                                                            options={\r\n                                                                [...baseData.staff.filter(fil => (\r\n                                                                    !StaffArray.some(st => (\r\n                                                                        isEqualNumber(st.Involved_Emp_Id, fil.Cost_Center_Id)\r\n                                                                    ))\r\n                                                                ))].map(st => ({\r\n                                                                    value: st.Cost_Center_Id,\r\n                                                                    label: st.Cost_Center_Name\r\n                                                                }))\r\n                                                            }\r\n                                                            styles={customSelectStyles}\r\n                                                            isSearchable={true}\r\n                                                            placeholder={\"Select Staff\"}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                                        <select\r\n                                                            value={row?.Cost_Center_Type_Id}\r\n                                                            onChange={e => setStaffArray((prev) => {\r\n                                                                return prev.map((item, ind) => {\r\n                                                                    if (isEqualNumber(ind, index)) {\r\n                                                                        return {\r\n                                                                            ...item,\r\n                                                                            Cost_Center_Type_Id: e.target.value\r\n                                                                        }\r\n                                                                    }\r\n                                                                    return item;\r\n                                                                });\r\n                                                            })}\r\n                                                            className=\"cus-inpt p-2 border-0\"\r\n                                                        >\r\n                                                            <option value=\"\">Select</option>\r\n                                                            {baseData.staffType.map((st, sti) =>\r\n                                                                <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                                            )}\r\n                                                        </select>\r\n                                                    </td>\r\n                                                    <td className='fa-13 vctr p-0'>\r\n                                                        <IconButton\r\n                                                            onClick={() => {\r\n                                                                setStaffArray(prev => {\r\n                                                                    return prev.filter((_, filIndex) => index !== filIndex);\r\n                                                                });\r\n                                                            }}\r\n                                                            size='small'\r\n                                                        >\r\n                                                            <Delete color='error' />\r\n                                                        </IconButton>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* general info */}\r\n                            <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                                <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-sm-8 p-2\">\r\n                                            <label className='fa-13'>Vendor</label>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: invoiceDetails?.Retailer_Id,\r\n                                                    label: invoiceDetails?.Retailer_Name\r\n                                                }}\r\n                                                onChange={e => {\r\n                                                    setInvoiceDetails(pre => ({\r\n                                                        ...pre,\r\n                                                        Retailer_Id: e.value,\r\n                                                        Retailer_Name: e.label\r\n                                                    }));\r\n                                                    setSelectedItems([]);\r\n                                                    searchFromArrival(e.value)\r\n                                                }}\r\n                                                options={[\r\n                                                    { value: '', label: 'Search', isDisabled: true },\r\n                                                    ...baseData.retailers.map(obj => ({\r\n                                                        value: obj?.Retailer_Id,\r\n                                                        label: obj?.Retailer_Name\r\n                                                    }))\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                placeholder={\"Select Vendor\"}\r\n                                                maxMenuHeight={300}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-sm-4 p-2\">\r\n                                            <label className='fa-13'>Voucher Type</label>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: invoiceDetails.Voucher_Type,\r\n                                                    label: baseData.voucherType.find(v => isEqualNumber(v.Vocher_Type_Id, invoiceDetails.Voucher_Type))?.Voucher_Type\r\n                                                }}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Voucher_Type: e.value }))}\r\n                                                options={[\r\n                                                    { value: '', label: 'Search', isDisabled: true },\r\n                                                    ...baseData.voucherType.filter(\r\n                                                        fil => filterableText(fil.Type) === filterableText('PURCHASE')\r\n                                                    ).map(obj => ({\r\n                                                        value: obj?.Vocher_Type_Id,\r\n                                                        label: obj?.Voucher_Type\r\n                                                    }))\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable={true}\r\n                                                required={true}\r\n                                                placeholder={\"Select Voucher Type\"}\r\n                                                maxMenuHeight={300}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Branch <RequiredStar /></label>\r\n                                            <select\r\n                                                className={inputStyle}\r\n                                                value={invoiceDetails?.Branch_Id}\r\n                                                required\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                                            >\r\n                                                <option value=\"\">select</option>\r\n                                                {baseData.branch.map((o, i) => (\r\n                                                    <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Entry Date <RequiredStar /></label>\r\n                                            <input\r\n                                                value={invoiceDetails?.Po_Entry_Date}\r\n                                                type=\"date\"\r\n                                                required\r\n                                                className={inputStyle}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Po_Entry_Date: e.target.value }))}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Bill Date <RequiredStar /></label>\r\n                                            <input\r\n                                                value={invoiceDetails?.Po_Inv_Date}\r\n                                                type=\"date\"\r\n                                                required\r\n                                                className={inputStyle}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Po_Inv_Date: e.target.value }))}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Ref Number</label>\r\n                                            <input\r\n                                                value={invoiceDetails?.Ref_Po_Inv_No}\r\n                                                className={inputStyle}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Ref_Po_Inv_No: e.target.value }))}\r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>GST Type <RequiredStar /></label>\r\n                                            <select\r\n                                                className={inputStyle}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                                                value={invoiceDetails.GST_Inclusive}\r\n                                                required\r\n                                            >\r\n                                                <option value={1}>Inclusive Tax</option>\r\n                                                <option value={0}>Exclusive Tax</option>\r\n                                                <option value={2}>Not Taxable</option>\r\n                                            </select>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Tax Type</label>\r\n                                            <select\r\n                                                className={inputStyle}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                                                value={invoiceDetails.IS_IGST}\r\n                                            >\r\n                                                <option value='0'>GST</option>\r\n                                                <option value='1'>IGST</option>\r\n                                            </select>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-sm-6 p-2\">\r\n                                            <label className='fa-13'>Stock Item Ledger Name</label>\r\n                                            <Select\r\n                                                value={{ value: invoiceDetails.Stock_Item_Ledger_Name, label: invoiceDetails.Stock_Item_Ledger_Name }}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Stock_Item_Ledger_Name: e.label }))}\r\n                                                options={[\r\n                                                    { value: '', label: 'Search', isDisabled: true },\r\n                                                    ...baseData.stockItemLedgerName.map(obj => ({\r\n                                                        value: obj?.Stock_Item_Ledger_Name,\r\n                                                        label: obj?.Stock_Item_Ledger_Name\r\n                                                    }))\r\n                                                ]}\r\n                                                styles={customSelectStyles}\r\n                                                required={true}\r\n                                                isSearchable={true}\r\n                                                placeholder={\"Select\"}\r\n                                                maxMenuHeight={300}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                    <label className='fa-13'>Narration</label>\r\n                                    <textarea\r\n                                        className=\"cus-inpt fa-14\"\r\n                                        rows={2}\r\n                                        value={invoiceDetails.Narration}\r\n                                        onChange={e => setInvoiceDetails(pre => ({ ...pre, Narration: e.target.value }))}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* product info */}\r\n                        <div className=\"table-responsive\">\r\n                            <div className=\"d-flex p-2 justify-content-end\">\r\n\r\n                                <Button type=\"button\" onClick={() => setSelectedItems([])}>clear selected</Button>\r\n                                \r\n                                {manualInvoice ? (\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            setSelectedProductToEdit(null);\r\n                                            setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                        }}\r\n                                        sx={{ ml: 1 }}\r\n                                        variant='outlined'\r\n                                        type=\"button\"\r\n                                        startIcon={<Add />}\r\n                                        disabled={!checkIsNumber(invoiceDetails.Retailer_Id)}\r\n                                    >Add Product</Button>\r\n                                ) : (\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        className='ms-2'\r\n                                        type=\"button\"\r\n                                        onClick={() => setDialog(pre => ({ ...pre, selectArrivalDialog: true }))}\r\n                                        startIcon={<Add />}\r\n                                        disabled={!checkIsNumber(invoiceDetails.Retailer_Id)}\r\n                                    >Add Products</Button>\r\n                                )}\r\n\r\n                            </div>\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className={tdStyle}>SNo</td>\r\n                                        <td className={tdStyle}>Item</td>\r\n                                        <td className={tdStyle}>Rate</td>\r\n                                        <td className={tdStyle}>Bill Quantity</td>\r\n                                        <td className={tdStyle}>Acl Quantity</td>\r\n                                        <td className={tdStyle}>Unit</td>\r\n                                        <td className={tdStyle}>Amount</td>\r\n                                        <td className={tdStyle}>Godown Location</td>\r\n                                        <td className={tdStyle}>Batch</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {selectedItems.map((row, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className={tdStyle}>{i + 1}</td>\r\n                                            {/* <td className={tdStyle}>{findProductDetails(baseData.products, row.Item_Id)?.Product_Name ?? 'Not found'}</td> */}\r\n                                            <td className={tdStyle}>{row.Item_Name ?? 'Not found'}</td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Item_Rate ? row?.Item_Rate : ''}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Item_Rate', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Bill_Qty ? row?.Bill_Qty : ''}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Bill_Qty', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Act_Qty ?? ''}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Act_Qty', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <select\r\n                                                    value={row?.Unit_Id}\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => {\r\n                                                        const selectedIndex = e.target.selectedIndex;\r\n                                                        const label = e.target.options[selectedIndex].text;\r\n                                                        const value = e.target.value;\r\n                                                        changeSelectedObjects(row, 'Unit_Id', value);\r\n                                                        changeSelectedObjects(row, 'Unit_Name', label);\r\n                                                    }}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">select</option>\r\n                                                    {baseData.uom.map((o, i) => (\r\n                                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Amount ? row?.Amount : ''}\r\n                                                    type=\"number\"\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Amount', e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <select\r\n                                                    value={row?.Location_Id}\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Location_Id', e.target.value)}\r\n                                                >\r\n                                                    <option value=\"\">select</option>\r\n                                                    {baseData.godown.map((o, i) => (\r\n                                                        <option value={o?.Godown_Id} key={i}>{o?.Godown_Name}</option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </td>\r\n                                            <td className={tdStyle}>\r\n                                                <input\r\n                                                    value={row?.Batch_No}\r\n                                                    className={inputStyle}\r\n                                                    onChange={e => changeSelectedObjects(row, 'Batch_No', e.target.value)}\r\n                                                />\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\" rowSpan={isEqualNumber(invoiceDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                        </td>\r\n                                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {/* {NumberFormat(totalValueBeforeTax.TotalValue)} */}\r\n                                            {taxSplitUp.totalTaxable}\r\n                                        </td>\r\n                                    </tr>\r\n                                    {!IS_IGST ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">CGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {taxSplitUp.cgst}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">SGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {taxSplitUp.sgst}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">IGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {taxSplitUp.igst}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Round Off</td>\r\n                                        <td className=\"border p-2\">\r\n                                            <input\r\n                                                value={invoiceDetails.Round_off}\r\n                                                defaultValue={taxSplitUp.roundOff}\r\n                                                style={{ minWidth: '200px', maxWidth: '350px' }}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                onInput={onlynumAndNegative}\r\n                                                onChange={e => setInvoiceDetails(pre => ({ ...pre, Round_off: e.target.value }))}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Total</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                    </CardContent>\r\n\r\n                </Card>\r\n            </form>\r\n\r\n            <Dialog\r\n                open={dialog.selectArrivalDialog}\r\n                onClose={closeDialogs}\r\n                fullScreen\r\n            >\r\n                <DialogTitle className='d-flex flex-wrap align-items-center '>\r\n                    <span className=\"flex-grow-1\">Select Purchase Order</span>\r\n                    <span>\r\n                        <Button onClick={closeDialogs} type=\"button\" className='me-2'>close</Button>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <FilterableTable\r\n                        dataArray={deliveryDetails}\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: '#',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n\r\n                                    return (\r\n                                        <div>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none pointer\"\r\n                                                style={{ padding: '0.7em' }}\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedItems.findIndex(o => isEqualNumber(o?.DeliveryId, row?.Trip_Item_SNo)) !== -1}\r\n                                                onChange={() => {\r\n                                                    if (selectedItems.findIndex(o => isEqualNumber(o?.DeliveryId, row?.Trip_Item_SNo)) !== -1) changeItems(row, true)\r\n                                                    else changeItems(row)\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            },\r\n                            createCol('ArrivalDate', 'date'),\r\n                            createCol('ItemName', 'string'),\r\n                            createCol('BilledRate', 'string'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Weight',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    row?.Weight ?? 0\r\n                                ) + ' ' + row?.Units\r\n                            },\r\n                            createCol('pendingInvoiceWeight', 'number', 'Pending Tonnage'),\r\n                            createCol('Quantity', 'number'),\r\n                            createCol('PO_ID', 'string'),\r\n                            createCol('Location', 'string'),\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        title={`Arrival Details of ${baseData.retailers?.find(ven =>\r\n                            isEqualNumber(ven?.Retailer_Id, invoiceDetails?.Retailer_Id)\r\n                        )?.Retailer_Name ?? 'Not available'}`}\r\n                        maxHeightOption\r\n                    />\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseInvoiceManagement;"],"names":["user","localStorage","getItem","storage","isValidJSON","JSON","parse","initialInvoiceValue","PIN_Id","Po_Inv_No","Branch_Id","Voucher_Type","Ref_Po_Inv_No","Po_Inv_Date","ISOString","Po_Entry_Date","Retailer_Id","Retailer_Name","GST_Inclusive","IS_IGST","Narration","isConverted","CSGT_Total","SGST_Total","IGST_Total","Round_off","Total_Before_Tax","Total_Tax","Total_Invoice_value","Cancel_status","Stock_Item_Ledger_Name","Created_by","UserId","Altered_by","Created_on","Alterd_on","Trans_Type","Alter_Id","Approved_By","Approve_Status","itemsRowDetails","Trip_Id","Trip_Item_SNo","POI_St_Id","DeliveryId","OrderId","S_No","Location_Id","Item_Id","Item_Name","Bill_Qty","Act_Qty","Item_Rate","Bill_Alt_Qty","Free_Qty","Unit_Id","Unit_Name","Batch_No","Taxable_Rate","Amount","Total_Qty","Taxble","HSN_Code","Taxable_Amount","Tax_Rate","Cgst","Cgst_Amo","Sgst","Sgst_Amo","Igst","Igst_Amo","Final_Amo","staffRowDetails","Id","Involved_Emp_Id","Involved_Emp_Name","Cost_Center_Type_Id","findProductDetails","_arr$find","productid","arguments","length","undefined","find","obj","isEqualNumber","Product_Id","dialogs","addProductDialog","selectArrivalDialog","_ref","_baseData$voucherType","_baseData$retailers$f","_baseData$retailers","_baseData$retailers$f2","loadingOn","loadingOff","location","useLocation","navigation","useNavigate","stateDetails","state","invoiceDetails","setInvoiceDetails","useState","selectedItems","setSelectedItems","StaffArray","setStaffArray","deliveryDetails","setDeliveryDetails","selectedProductToEdit","setSelectedProductToEdit","tdStyle","inputStyle","isInclusive","isNotTaxableBill","dialog","setDialog","manualInvoice","setManualInvoice","baseData","setBaseData","retailers","branch","uom","products","voucherType","stockItemLedgerName","godown","staff","staffType","brand","useMemo","reduce","acc","item","RoundNumber","Addition","product","gstPercentage","Igst_P","Gst_P","calculateGSTDetails","with_tax","taxSplitUp","totalTaxable","totalTax","forEach","taxInfo","parseFloat","without_tax","tax_amount","totalWithTax","roundedTotal","Math","round","roundOff","cgst","sgst","igst","invoiceTotal","useEffect","async","retailerResponse","branchResponse","uomResponse","productsResponse","voucherTypeResponse","stockItemLedgerNameResponse","godownLocationsResponse","staffResponse","staffCategory","Promise","all","fetchLink","address","retailersData","success","data","sort","a","b","String","localeCompare","branchData","BranchName","uomData","Units","productsData","Product_Name","godownLocations","Godown_Name","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","pre","getUniqueData","e","console","error","fetchData","isValidObject","Array","isArray","orderInfo","staffInfo","invoiceInfo","searchFromArrival","Object","fromEntries","entries","map","_ref2","_invoiceInfo$key","key","value","_ref3","_item$key","_ref4","_item$key2","isFromPurchaseOrder","vendor","checkIsNumber","then","catch","finally","changeItems","itemDetail","deleteOption","prev","preItems","filter","o","ItemId","currentOrders","notInStaffList","Map","flatMap","ordr","EmployeesInvolved","some","arrObj","EmployeeId","values","prevStaffArray","_ref5","EmployeeName","CostType","reStruc","_parseFloat","_RoundNumber","productDetails","isTaxable","Weight","BilledRate","Multiplication","taxType","itemRateGst","gstInfo","cgstPer","cgst_per","igstPer","igst_per","cgst_amount","igst_amount","_ref6","_Number","Number","LocationId","pendingInvoiceWeight","Quantity","BatchLocation","base_amount","concat","closeDialogs","changeSelectedObjects","row","updatedValue","newItem","Division","_jsxs","_Fragment","children","_jsx","AddItemToSaleOrderCart","orderProducts","setOrderProducts","open","onClose","brands","godowns","editValues","initialValue","stockInGodown","onSubmit","preventDefault","method","bodyData","Product_Array","toast","message","window","history","pathname","replace","Card","className","htmlFor","Switch","checked","onChange","target","Button","type","onClick","variant","CardContent","style","minHeight","height","color","index","Select","label","ind","c","Cost_Center_Id","User_Type","options","fil","st","styles","customSelectStyles","isSearchable","placeholder","maxWidth","minWidth","sti","Cost_Category_Id","IconButton","_","filIndex","size","Delete","isDisabled","maxMenuHeight","v","Vocher_Type_Id","filterableText","Type","required","RequiredStar","i","BranchId","rows","sx","ml","startIcon","Add","disabled","_row$Item_Name","_row$Act_Qty","selectedIndex","text","Godown_Id","rowSpan","numberToWords","parseInt","defaultValue","onInput","onlynumAndNegative","NumberFormat","Dialog","fullScreen","DialogTitle","DialogContent","FilterableTable","dataArray","columns","isVisible","ColumnHeader","isCustomCell","Cell","_ref7","padding","findIndex","createCol","_ref8","_row$Weight","EnableSerialNumber","disablePagination","title","ven","maxHeightOption"],"sourceRoot":""}
{"version":3,"file":"static/js/1620.f5401c17.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Attendance/defaultLeave.jsx","Pages/Attendance/fingerPrintAttendance.jsx","../node_modules/@mui/icons-material/Close.js","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/utils/createChainedFunction.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/requirePropFactory/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/unsupportedProp/unsupportedProp.js","../node_modules/@mui/material/utils/index.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport { toast } from \"react-toastify\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { moment } from \"moment\";\r\nimport { Edit } from \"@mui/icons-material\";\r\nconst LeaveCalendar = ({\r\n  currentView,\r\n  onViewChange\r\n}) => {\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n  const [monthlyLeaves, setMonthlyLeaves] = useState([]);\r\n  const [filter, setFilter] = useState({\r\n    FromDate: new Date().toISOString().split(\"T\")[0],\r\n    Description: \"\",\r\n    display: 2,\r\n    Created_By: \"\",\r\n  });\r\n  const [description, setDesctiption] = useState(\"\");\r\n  const [addDialog, setAddDialog] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [calendarViewDate, setCalendarViewDate] = useState(new Date());\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editIndex, setEditIndex] = useState(null);\r\n  const formatDate = (dateStr) => {\r\n    const d = new Date(dateStr);\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const year = d.getFullYear();\r\n    return `${day}-${month}-${year}`;\r\n  };\r\n  const localData = localStorage.getItem(\"user\");\r\n  const parseData = JSON.parse(localData);\r\n  const fetchLeaves = async () => {\r\n    try {\r\n      const res = await fetchLink({ address: `masters/defaultLeave` });\r\n      if (res.success) {\r\n        setAttendanceData(res.data);\r\n\r\n        const currentMonth = calendarViewDate.getMonth();\r\n        const currentYear = calendarViewDate.getFullYear();\r\n\r\n        const filtered = res.data.filter((item) => {\r\n          const itemDate = new Date(item.Date);\r\n          return (\r\n            itemDate.getMonth() === currentMonth &&\r\n            itemDate.getFullYear() === currentYear\r\n          );\r\n        });\r\n\r\n        setMonthlyLeaves(filtered);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLeaves();\r\n  }, []);\r\n  const closeDialg = () => {\r\n    setAddDialog(false);\r\n    setFilter({});\r\n    setDesctiption(\"\");\r\n    setEditMode(false);\r\n    setEditIndex(null);\r\n  };\r\n\r\n  const onsubmit = ({ filter, description }) => {\r\n    const User_Id = parseData?.UserId;\r\n    const bodyData = {\r\n      FromDate: filter?.FromDate,\r\n      Description: description,\r\n      Created_By: User_Id,\r\n    };\r\n\r\n    fetchLink({\r\n      address: `masters/addLeave`,\r\n      method: \"POST\",\r\n      bodyData,\r\n    })\r\n      .then((data) => {\r\n        if (!data.success) {\r\n          toast.error(data.message);\r\n        } else {\r\n          toast.success(\"Leave added successfully\");\r\n          setAddDialog(false);\r\n          setFilter({\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            Description: \"\",\r\n            display: 2,\r\n            Created_By: 1,\r\n          });\r\n          setDesctiption(\"\");\r\n          fetchLeaves();\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const onUpdate = async ({ index, filter, description, id, Modified_By }) => {\r\n    const updatedList = [...attendanceData];\r\n    const User_Id = Number(parseData?.UserId);\r\n\r\n    const bodyData = {\r\n      Id: id,\r\n      FromDate: filter?.FromDate,\r\n      Description: description,\r\n      Modified_By: User_Id || Modified_By,\r\n    };\r\n\r\n    try {\r\n      const data = await fetchLink({\r\n        address: \"masters/defaultLeave\",\r\n        method: \"PUT\",\r\n        bodyData: bodyData,\r\n      });\r\n\r\n      if (data.success) {\r\n        updatedList[index] = {\r\n          ...updatedList[index],\r\n          Date: filter.FromDate,\r\n          Description: description,\r\n        };\r\n\r\n        setAttendanceData(updatedList);\r\n\r\n        const currentMonth = calendarViewDate.getMonth();\r\n        const currentYear = calendarViewDate.getFullYear();\r\n\r\n        const filtered = updatedList.filter((item) => {\r\n          const itemDate = new Date(item.Date);\r\n          return (\r\n            itemDate.getMonth() === currentMonth &&\r\n            itemDate.getFullYear() === currentYear\r\n          );\r\n        });\r\n\r\n        setMonthlyLeaves(filtered);\r\n        closeDialg();\r\n        toast.success(\"Leave updated successfully\");\r\n      } else {\r\n        toast.error(data.message || \"Failed to update\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating leave:\", error);\r\n      toast.error(\"Update failed: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const formatForInputDate = (dateString) => {\r\n    const d = new Date(dateString);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column\">\r\n      <Card>\r\n        <CardContent sx={{ minHeight: \"50vh\" }}>\r\n          <div className=\"d-flex align-items-center mb-3\">\r\n            {[\"default\", \"employee\", \"department\", \"defaultLeave\"].map(\r\n              (view) => (\r\n                <Button\r\n                  key={view}\r\n                  size=\"small mx-2\"\r\n                  variant=\"outlined\"\r\n                  onClick={() => onViewChange(view)}\r\n                  disabled={currentView === view}\r\n                >\r\n                  {view === \"defaultLeave\"\r\n                    ? \"Defined Leave\"\r\n                    : view.charAt(0).toUpperCase() + view.slice(1)}\r\n                </Button>\r\n              )\r\n            )}\r\n          </div>\r\n          <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n            <h6 className=\"fa-18\">Leave Details</h6>\r\n            <div>\r\n              <select\r\n                className=\"cus-inpt w-auto\"\r\n                value={filter?.display}\r\n                disabled\r\n                onChange={(e) =>\r\n                  setFilter((pre) => ({\r\n                    ...pre,\r\n                    display: Number(e.target.value),\r\n                  }))\r\n                }\r\n              >\r\n                <option disabled value={2}>\r\n                  Calendar\r\n                </option>\r\n                {/* <option value={1}>Table</option> */}\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-5 mb-3\">\r\n              <div className=\"card shadow-sm\">\r\n                <div className=\"card-header\">\r\n                  <h6 className=\"mb-0\">Month Leave List</h6>\r\n                </div>\r\n                <div\r\n                  className=\"card-body\"\r\n                  style={{ maxHeight: \"800px\", overflowY: \"auto\" }}\r\n                >\r\n                  {monthlyLeaves.length === 0 ? (\r\n                    <p>No data</p>\r\n                  ) : (\r\n                    monthlyLeaves.map((item, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\"mb-2 border-bottom pb-2 position-relative\"\r\n                      >\r\n                        <small>{item.Description}</small>\r\n                        <br />\r\n                        <small>Date: {formatDate(item.Date)}</small>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-lg-8 col-md-7\">\r\n              <FullCalendar\r\n                plugins={[\r\n                  timeGridPlugin,\r\n                  listPlugin,\r\n                  dayGridPlugin,\r\n                  interactionPlugin,\r\n                ]}\r\n                initialView=\"dayGridMonth\"\r\n                initialDate={new Date()}\r\n                events={attendanceData.map((o) => ({\r\n                  title: ` ${o?.Description}`,\r\n                start: new Date(o?.Date).toISOString().split(\"T\")[0],\r\n                  objectData: o,\r\n                }))}\r\n                headerToolbar={{\r\n                  left: \"prev next\",\r\n                  center: \"title\",\r\n                  right: \"dayGridMonth\",\r\n                }}\r\n                // slotDuration={\"00:30:00\"}\r\n                // slotMinTime={\"08:00:00\"}\r\n                // slotMaxTime={\"22:00:00\"}\r\n                showNonCurrentDates={false}\r\n                editable={false}\r\n                selectable\r\n                selectMirror\r\n                height={800}\r\n                eventClick={(eventInfo) => {\r\n                  const leave = eventInfo.event.extendedProps.objectData;\r\n                  const date = leave?.Date;\r\n\r\n                  const index = attendanceData.findIndex(\r\n                    (item) =>\r\n                      item.Date === date &&\r\n                      item.Description === leave.Description\r\n                  );\r\n\r\n                  setEditMode(true);\r\n                  setEditIndex(index);\r\n                  setFilter({ FromDate: date });\r\n                  setDesctiption(leave.Description);\r\n                  setAddDialog(true);\r\n                }}\r\n                dateClick={(info) => {\r\n                  setSelectedDate(info.dateStr);\r\n                  setFilter({ ...filter, FromDate: info.dateStr });\r\n                  setAddDialog(true);\r\n                }}\r\n                datesSet={(date) => {\r\n                  const viewDate = new Date(date.start);\r\n                  setCalendarViewDate(viewDate);\r\n\r\n                  const currentMonth = viewDate.getMonth();\r\n                  const currentYear = viewDate.getFullYear();\r\n\r\n                  const filtered = attendanceData.filter((item) => {\r\n                    const itemDate = new Date(item.Date);\r\n                    \r\n                    return (\r\n                      itemDate.getMonth() === currentMonth &&\r\n                      itemDate.getFullYear() === currentYear\r\n                    );\r\n                  });\r\n\r\n                  setMonthlyLeaves(filtered);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Dialog open={addDialog} onClose={closeDialg} fullWidth maxWidth=\"sm\">\r\n        <DialogTitle className=\"d-flex justify-content-between\">\r\n          <span> {editMode ? \"UPDATE\" : \"ADD\"}</span>\r\n          <IconButton onClick={closeDialg}>\r\n            <Close sx={{ color: \"black\" }} />\r\n          </IconButton>\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <div className=\"table-responsive pb-4\">\r\n            <table className=\"table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>From</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"cus-inpt\"\r\n                      value={formatForInputDate(filter?.FromDate || \"\")}\r\n                      onChange={(e) =>\r\n                        setFilter({ ...filter, FromDate: e.target.value })\r\n                      }\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Description</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"cus-inpt\"\r\n                      value={description}\r\n                      onChange={(e) => setDesctiption(e.target.value)}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={closeDialg}>Cancel</Button>\r\n\r\n          <Button\r\n            onClick={() => {\r\n              if (editMode) {\r\n            \r\n                const currentRow = attendanceData[editIndex];\r\n                const id = currentRow?.SNo;\r\n                const User_Id = parseData?.UserId;\r\n                onUpdate({\r\n                  index: editIndex,\r\n                  filter,\r\n                  description,\r\n                  id,\r\n                  User_Id,\r\n                });\r\n              } else {\r\n                onsubmit({ filter, description });\r\n              }\r\n            }}\r\n          >\r\n            {editMode ? \"UPDATE\" : \"ADD\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaveCalendar;\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//     Dialog,\r\n//     IconButton,\r\n//     DialogTitle,\r\n//     DialogContent,\r\n//     DialogActions,\r\n// } from \"@mui/material\";\r\n// import Select from \"react-select\";\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { ISOString, isValidDate } from \"../../Components/functions\";\r\n// // import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\n// import { Search, Refresh } from \"@mui/icons-material\";\r\n// // import { convertedStatus } from \"../convertedStatus\";\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n// import FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import {\r\n//     Card,\r\n//     CardContent,\r\n//     Button,\r\n//     Chip,\r\n//     Autocomplete,\r\n//     TextField,\r\n// } from \"@mui/material\";\r\n// import { useContext } from \"react\";\r\n// import { toast } from \"react-toastify\";\r\n// import * as XLSX from \"xlsx\";\r\n// const useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\n// const AttendanceNewScreen = ({ loadingOn, loadingOff }) => {\r\n//     const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//     const stateDetails = location.state;\r\n\r\n//     const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n//     const getCurrentMonthYear = () => {\r\n//         const date = new Date();\r\n//         const year = date.getFullYear();\r\n//         const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n//         return `${year}-${month}`;\r\n//     };\r\n\r\n//     const initialValue = {\r\n//         From: getCurrentMonthYear(),\r\n//         To: getCurrentMonthYear(),\r\n//         EmpId: \"0\",\r\n//         Name: \"ALL\",\r\n//     };\r\n//     const query = useQuery();\r\n\r\n//     const defaultFilters = {\r\n//         From: getCurrentMonthYear(),\r\n//         To: getCurrentMonthYear(),\r\n//     };\r\n\r\n//     const [saleOrders, setSaleOrders] = useState([]);\r\n//     const [viewMode, setViewMode] = useState(\"default\");\r\n//     const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n//     const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n//     const [reload, setReload] = useState(false);\r\n//     const [attendanceData, setAttendanceData] = useState([]);\r\n//     const [loading, setLoading] = useState(true);\r\n\r\n//     const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n//     const [employees, setEmployees] = useState([]);\r\n//     const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n//     const userTypeId = storage?.UserTypeId;\r\n//     const parseData = storage;\r\n//     const { contextObj } = useContext(MyContext);\r\n\r\n//     const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n//     const [filter, setFilter] = useState(initialValue);\r\n//     const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n//     useEffect(() => {\r\n//         const timer = setTimeout(() => {\r\n//             setDebouncedFilter(filter);\r\n//         }, 500);\r\n\r\n//         return () => clearTimeout(timer);\r\n//     }, [filter]);\r\n\r\n//     useEffect(() => {\r\n//         const { From, EmpId } = debouncedFilter;\r\n//         if (From && (EmpId || EmpId === 0)) {\r\n//             fetchAttendanceData(From, EmpId);\r\n//             fetchDropdownEmployees();\r\n//         }\r\n//     }, [debouncedFilter]);\r\n\r\n//     const getDaysInMonth = (monthYear) => {\r\n//         if (!monthYear) return 0;\r\n\r\n//         const [year, month] = monthYear.split(\"-\");\r\n\r\n//         return new Date(year, month, 0).getDate();\r\n//     };\r\n\r\n//     const [filters, setFilters] = useState({\r\n//         FromDate: new Date().toISOString().split(\"T\")[0],\r\n//         ToDate: new Date().toISOString().split(\"T\")[0],\r\n//         Cancel_status: 0,\r\n//     });\r\n\r\n//     const toggleExpand = (department) => {\r\n//         if (expandedDepartment === department) {\r\n//             setExpandedDepartment(null);\r\n//         } else {\r\n//             setExpandedDepartment(department);\r\n//         }\r\n//     };\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n//     const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n//     const Add_Rights = contextObj?.Add_Rights;\r\n\r\n//     useEffect(() => {\r\n//         if (loadingOn) loadingOn();\r\n\r\n//         const today = new Date().toISOString().split(\"T\")[0];\r\n//         const fromDate = filters.FromDate || today;\r\n//         const toDate = filters.ToDate || today;\r\n\r\n//         fetchLink({\r\n//             address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     setSaleOrders(data?.data);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(e))\r\n//             .finally(() => {\r\n//                 if (loadingOff) loadingOff();\r\n//             });\r\n//     }, [reload]);\r\n\r\n//     const handleFromChange = (e) => {\r\n//         const getDaysInMonth = (monthYear) => {\r\n//             if (!monthYear) return 0;\r\n\r\n//             const [year, month] = monthYear.split(\"-\");\r\n\r\n//             return new Date(year, month, 0).getDate();\r\n//         };\r\n//         const selectedMonth = e.target.value;\r\n//         const [year, month] = selectedMonth.split(\"-\");\r\n//         const startDate = `${year}-${month}-01`;\r\n//         const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//         const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//         setFilter({\r\n//             From: startDate,\r\n//             To: endDate,\r\n//             EmpId: filter.EmpId || 0,\r\n//             Name: filter?.Name,\r\n//         });\r\n//     };\r\n\r\n//     const handleSummaryDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 const overallData = response.data;\r\n//                 const getWorkingDays = (fromDate, endDate) => {\r\n//                     const allDays = [];\r\n//                     const currentDate = new Date(fromDate);\r\n//                     const endDateObj = new Date(endDate);\r\n//                     let sundayCount = 0;\r\n\r\n//                     while (currentDate <= endDateObj) {\r\n//                         const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n//                         allDays.push(dateStr);\r\n\r\n//                         if (currentDate.getDay() === 0) {\r\n//                             sundayCount++;\r\n//                         }\r\n\r\n//                         currentDate.setDate(currentDate.getDate() + 1);\r\n//                     }\r\n\r\n//                     if (allDays.length === 0) {\r\n//                         allDays.push(\"No days in this range\");\r\n//                     }\r\n\r\n//                     return {\r\n//                         days: allDays,\r\n//                         sundayCount,\r\n//                         totalDays: allDays.length,\r\n//                     };\r\n//                 };\r\n\r\n//                 const {\r\n//                     days: dateRange,\r\n//                     sundayCount,\r\n//                     totalDays,\r\n//                 } = getWorkingDays(startDate, endDate);\r\n\r\n//                 let totalWorkingDaysSummary = 0;\r\n//                 let totalLeaveDaysSummary = 0;\r\n\r\n//                 const summaryData = overallData.map((row) => {\r\n//                     const punchDetails = row.AttendanceDetails\r\n//                         ? JSON.parse(row.AttendanceDetails)\r\n//                         : [];\r\n//                     let totalWorkingDays = 0;\r\n//                     let totalLeaveDays = 0;\r\n\r\n//                     dateRange.forEach((date) => {\r\n//                         if (Array.isArray(punchDetails)) {\r\n//                             const detail = punchDetails.find(\r\n//                                 (detail) => detail.Date === date\r\n//                             );\r\n\r\n//                             const isSunday = new Date(date).getDay() === 0;\r\n\r\n//                             if (isSunday) {\r\n//                                 return;\r\n//                             }\r\n\r\n//                             if (detail) {\r\n//                                 if (detail.AttendanceStatus === \"P\") {\r\n//                                     totalWorkingDays++;\r\n//                                 } else if (\r\n//                                     detail.AttendanceStatus === \"A\" ||\r\n//                                     detail.AttendanceStatus === \"H\"\r\n//                                 ) {\r\n//                                     totalLeaveDays++;\r\n//                                 }\r\n//                             } else {\r\n//                                 totalLeaveDays++;\r\n//                             }\r\n//                         }\r\n//                     });\r\n\r\n//                     totalWorkingDaysSummary += totalWorkingDays;\r\n//                     totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n//                     return {\r\n//                         EmployeeName: row.Name,\r\n//                         EmployeeID: row.EmployeeID,\r\n//                         Month: `${month}-${year}`,\r\n//                         Branch: row.Branch,\r\n//                         NumberOfSundays: sundayCount,\r\n//                         NumberOfDaysInMonth: totalDays,\r\n//                         TotalWorkingDays: totalWorkingDays,\r\n//                         TotalLeaveDays: totalLeaveDays,\r\n//                     };\r\n//                 });\r\n\r\n//                 const exportData = summaryData.map((item) => ({\r\n//                     EmployeeName: item.EmployeeName,\r\n//                     EmployeeID: item.EmployeeID,\r\n//                     Month: item.Month,\r\n//                     Branch: item.Branch,\r\n//                     NumberOfSundays: item.NumberOfSundays,\r\n//                     NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n//                     TotalWorkingDays: item.TotalWorkingDays,\r\n//                     TotalLeaveDays: item.TotalLeaveDays,\r\n//                 }));\r\n\r\n//                 const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n//                 const headers = [\r\n//                     \"EmployeeName\",\r\n//                     \"EmployeeID\",\r\n//                     \"Month\",\r\n//                     \"Branch\",\r\n//                     \"NumberOfSundays\",\r\n//                     \"NumberOfDaysInMonth\",\r\n//                     \"TotalWorkingDays\",\r\n//                     \"TotalLeaveDays\",\r\n//                 ];\r\n\r\n//                 XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n//                 const wb = XLSX.utils.book_new();\r\n//                 XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n//                 XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error downloading overall report:\", error);\r\n//         }\r\n//     };\r\n//     const handleDownload = () => {\r\n//         const maxPunches = 4;\r\n\r\n//         const exportData = attendanceData.map((row) => {\r\n//             const punchDetails = row.AttendanceDetails\r\n//                 ? row.AttendanceDetails.split(\",\").filter((p) => p.trim() !== \"\")\r\n//                 : [];\r\n\r\n//             let attendanceStatus = row.AttendanceStatus;\r\n\r\n//             if (!attendanceStatus) {\r\n//                 attendanceStatus = punchDetails.length === 0 ? \"A\" : \"P\";\r\n//             }\r\n\r\n//             const punchColumns = {};\r\n//             for (let i = 0; i < maxPunches; i++) {\r\n//                 punchColumns[`Punch${i + 1}`] = punchDetails[i]\r\n//                     ? punchDetails[i].trim()\r\n//                     : \"--\";\r\n//             }\r\n\r\n//             return {\r\n//                 Employee: row.username || row.Employee,\r\n//                 \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//                 \"Attendance Status\": attendanceStatus,\r\n//                 ...punchColumns,\r\n//             };\r\n//         });\r\n\r\n//         const columnsOrder = [\r\n//             \"Employee\",\r\n//             \"Log Date\",\r\n//             \"Attendance Status\",\r\n//             \"Punch1\",\r\n//             \"Punch2\",\r\n//             \"Punch3\",\r\n//             \"Punch4\",\r\n//         ];\r\n\r\n//         const reorderedData = exportData.map((row) =>\r\n//             columnsOrder.reduce((acc, col) => {\r\n//                 acc[col] = row[col] || \"--\";\r\n//                 return acc;\r\n//             }, {})\r\n//         );\r\n\r\n//         const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n//         const wb = XLSX.utils.book_new();\r\n//         XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n//         XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n//     };\r\n\r\n//     const MAX_PUNCHES = 6;\r\n\r\n//     function formatToAmPm(timeString) {\r\n//         if (!timeString) return \"--\";\r\n//         const [hourStr, minuteStr] = timeString.split(\":\");\r\n//         if (!hourStr || !minuteStr) return \"--\";\r\n\r\n//         let hour = parseInt(hourStr, 10);\r\n//         const minute = minuteStr;\r\n//         const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n//         hour = hour % 12 || 12;\r\n\r\n//         return `${hour.toString().padStart(2, \"0\")}:${minute} ${ampm}`;\r\n//     }\r\n\r\n//     const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n//         isCustomCell: true,\r\n//         ColumnHeader: `Punch ${index + 1}`,\r\n//         isVisible: 1,\r\n//         width: \"13%\",\r\n//         CellProps: {\r\n//             sx: {\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"center\",\r\n//                 alignItems: \"center\",\r\n//                 padding: \"10px\",\r\n//             },\r\n//         },\r\n//         Cell: ({ row }) => {\r\n//             const punches = row.AttendanceDetails\r\n//                 ? row.AttendanceDetails.split(\",\")\r\n//                     .map((p) => p.trim())\r\n//                     .filter((p) => p !== \"\")\r\n//                 : [];\r\n\r\n//             const punch = punches[index] || \"--\";\r\n//             const rawTime = punch.split(\":in(\")[0];\r\n//             const formattedTime = punch !== \"--\" ? formatToAmPm(rawTime) : \"--\";\r\n\r\n//             return formattedTime !== \"--\" ? (\r\n//                 <Chip\r\n//                     label={formattedTime}\r\n//                     variant=\"outlined\"\r\n//                     size=\"small\"\r\n//                     sx={{ color: \"green\", margin: \"2px\" }}\r\n//                 />\r\n//             ) : (\r\n//                 <div style={{ color: \"gray\" }}>--</div>\r\n//             );\r\n//         },\r\n//     }));\r\n\r\n//     const formatAttendanceDate = (logDateTime) => {\r\n//         if (!logDateTime) return \"--\";\r\n//         const [date] = logDateTime.split(\"T\");\r\n//         return `${date} `;\r\n//     };\r\n\r\n//     const handleOverallDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const [attendanceRes, leaveRes] = await Promise.all([\r\n//                 fetchLink({\r\n//                     address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//                 }),\r\n//                 fetchLink({\r\n//                     address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n//                 }),\r\n//             ]);\r\n\r\n//             if (!attendanceRes.success) throw new Error(\"Attendance data failed\");\r\n\r\n//             const leaveMap = {};\r\n//             (leaveRes?.data || []).forEach((leave) => {\r\n//                 if (leave.Status?.toUpperCase() !== \"APPROVED\") return;\r\n\r\n//                 const userId = leave.User_Id;\r\n//                 if (!userId) return;\r\n\r\n//                 const parseDate = (dateStr) => {\r\n//                     try {\r\n//                         return new Date(\r\n//                             dateStr.includes(\"T\") ? dateStr.split(\"T\")[0] : dateStr\r\n//                         );\r\n//                     } catch {\r\n//                         return null;\r\n//                     }\r\n//                 };\r\n\r\n//                 const leaveStart = parseDate(leave.FromDate);\r\n//                 const leaveEnd = parseDate(leave.ToDate);\r\n//                 if (!leaveStart || !leaveEnd) return;\r\n\r\n//                 let current = new Date(leaveStart);\r\n//                 while (current <= leaveEnd) {\r\n//                     const dateStr = current.toISOString().split(\"T\")[0];\r\n//                     if (!leaveMap[userId]) leaveMap[userId] = {};\r\n//                     leaveMap[userId][dateStr] = true;\r\n//                     current.setDate(current.getDate() + 1);\r\n//                 }\r\n//             });\r\n\r\n//             const { days: dateRange } = getDateRange(startDate, endDate);\r\n//             const exportData = attendanceRes.data.map((emp) => {\r\n//                 const attendanceDetails = tryParseJSON(emp.AttendanceDetails) || [];\r\n//                 const dailyStatus = {};\r\n//                 let presentCount = 0;\r\n\r\n//                 const attendanceLookup = {};\r\n//                 attendanceDetails.forEach((record) => {\r\n//                     if (record?.Date) {\r\n//                         attendanceLookup[record.Date] = {\r\n//                             status: record.AttendanceStatus,\r\n//                             hasPunch: record.Punch1 !== \"[]\",\r\n//                         };\r\n//                     }\r\n//                 });\r\n\r\n//                 dateRange.forEach((date, index) => {\r\n//                     const dayNum = index + 1;\r\n//                     const dayKey = `Day ${dayNum}`;\r\n//                     const isSunday = new Date(date).getDay() === 0;\r\n//                     const userId = emp.User_Mgt_Id;\r\n//                     const attendanceRecord = attendanceLookup[date];\r\n//                     const attendanceStatus = attendanceRecord?.status;\r\n//                     const hasPunch = attendanceRecord?.hasPunch;\r\n\r\n//                     if (isSunday) {\r\n//                         dailyStatus[dayKey] = \"H\";\r\n//                     } else if (userId && leaveMap[userId]?.[date]) {\r\n//                         dailyStatus[dayKey] = \"L\";\r\n//                     } else if (attendanceStatus === \"L\") {\r\n//                         dailyStatus[dayKey] = \"L\";\r\n//                     } else if (attendanceStatus === \"P\") {\r\n//                         dailyStatus[dayKey] = hasPunch ? \"P\" : \"A\";\r\n//                         if (hasPunch) presentCount++;\r\n//                     } else if (attendanceStatus === \"H\") {\r\n//                         dailyStatus[dayKey] = \"H\";\r\n//                     } else {\r\n//                         dailyStatus[dayKey] = \"A\";\r\n//                     }\r\n//                 });\r\n\r\n//                 return {\r\n//                     EmployeeName: emp.username || emp.Name,\r\n//                     TotalPresent: presentCount,\r\n//                     ...dailyStatus,\r\n//                 };\r\n//             });\r\n\r\n//             const headers = [\r\n//                 \"EmployeeName\",\r\n//                 \"TotalPresent\",\r\n//                 ...dateRange.map((_, i) => `Day ${i + 1}`),\r\n//             ];\r\n//             const ws = XLSX.utils.json_to_sheet(exportData);\r\n//             XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n//             const wb = XLSX.utils.book_new();\r\n//             XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n//             XLSX.writeFile(wb, `Attendance_Report_${month}_${year}.xlsx`);\r\n//         } catch (error) {\r\n//             console.error(\"Download failed:\", error);\r\n//             toast.error(\"Failed to generate report\");\r\n//         }\r\n//     };\r\n\r\n//     function getDateRange(start, end) {\r\n//         const dates = [];\r\n//         const current = new Date(start);\r\n//         const endDate = new Date(end);\r\n\r\n//         while (current <= endDate) {\r\n//             dates.push(current.toISOString().split(\"T\")[0]);\r\n//             current.setDate(current.getDate() + 1);\r\n//         }\r\n\r\n//         return { days: dates, count: dates.length };\r\n//     }\r\n\r\n//     function tryParseJSON(jsonString) {\r\n//         try {\r\n//             return jsonString ? JSON.parse(jsonString) : [];\r\n//         } catch {\r\n//             return [];\r\n//         }\r\n//     }\r\n\r\n//     const handleOverallWithPunch = async () => {\r\n//         try {\r\n//             const maxPunches = 6;\r\n\r\n//             const firstLogDate = attendanceData[0]?.LogDate;\r\n//             if (!firstLogDate) {\r\n//                 toast.error(\"No attendance data found\");\r\n//                 return;\r\n//             }\r\n\r\n//             const dateObj = new Date(firstLogDate);\r\n//             const year = dateObj.getFullYear();\r\n//             const month = dateObj.getMonth() + 1;\r\n//             const startDate = `${year}-${month.toString().padStart(2, \"0\")}-01`;\r\n//             const endDate = new Date(year, month, 0).toISOString().split(\"T\")[0];\r\n\r\n//             const leaveResponse = await fetchLink({\r\n//                 address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n//             const leaveData = leaveResponse?.success ? leaveResponse.data : [];\r\n\r\n//             const leaveMap = {};\r\n//             leaveData.forEach((leave) => {\r\n//                 // Case-insensitive status check\r\n//                 if (leave.Status?.toLowerCase() !== \"approved\") return;\r\n\r\n//                 const userId = String(leave.User_Id);\r\n//                 if (!userId) return;\r\n\r\n//                 const parseDate = (dateStr) => {\r\n//                     const parts = dateStr.split(/[-/]/);\r\n//                     if (parts.length === 3) {\r\n//                         if (parts[2].length === 4) {\r\n//                             return parts[0].length === 2\r\n//                                 ? new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)\r\n//                                 : new Date(`${parts[2]}-${parts[0]}-${parts[1]}`);\r\n//                         }\r\n\r\n//                         return new Date(dateStr);\r\n//                     }\r\n//                     return new Date(dateStr);\r\n//                 };\r\n\r\n//                 const leaveStart = parseDate(leave.FromDate);\r\n//                 const leaveEnd = parseDate(leave.ToDate);\r\n\r\n//                 let currentDate = new Date(leaveStart);\r\n\r\n//                 while (currentDate <= leaveEnd) {\r\n//                     const dateStr = currentDate.toISOString().split(\"T\")[0];\r\n//                     if (!leaveMap[userId]) leaveMap[userId] = {};\r\n\r\n//                     if (currentDate.getDay() !== 0) {\r\n//                         leaveMap[userId][dateStr] = \"L\";\r\n//                     }\r\n//                     currentDate.setDate(currentDate.getDate() + 1);\r\n//                 }\r\n//             });\r\n\r\n//             const filteredAttendanceData = attendanceData.filter((row) =>\r\n//                 selectedEmployees.some(\r\n//                     (user) =>\r\n//                         String(user.UserId) === String(row.User_Mgt_Id) ||\r\n//                         user.UserId === \"ALL\"\r\n//                 )\r\n//             );\r\n\r\n//             const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n//                 acc[row.username] = acc[row.username] || [];\r\n//                 acc[row.username].push(row);\r\n//                 return acc;\r\n//             }, {});\r\n\r\n//             if (Object.keys(groupedData).length === 0) {\r\n//                 toast.error(\"No attendance data found\");\r\n//                 return;\r\n//             }\r\n\r\n//             const wb = XLSX.utils.book_new();\r\n\r\n//             Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n//                 const exportData = userAttendance.map((row) => {\r\n//                     const logDate = new Date(row.LogDate);\r\n//                     const dateStr = logDate.toISOString().split(\"T\")[0];\r\n//                     const isSunday = logDate.getDay() === 0;\r\n\r\n//                     const userId = String(row.User_Mgt_Id);\r\n//                     const hasApprovedLeave = leaveMap[userId]?.[dateStr] === \"L\";\r\n\r\n//                     let attendanceStatus;\r\n//                     if (isSunday) {\r\n//                         attendanceStatus = \"H\";\r\n//                     } else if (hasApprovedLeave) {\r\n//                         attendanceStatus = \"L\";\r\n//                     } else {\r\n//                         const punches =\r\n//                             row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n//                         attendanceStatus = punches.some((p) => p && p !== \"--\") ? \"P\" : \"A\";\r\n//                     }\r\n\r\n//                     const punchColumns = {};\r\n//                     const punches =\r\n//                         row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n//                     for (let i = 0; i < maxPunches; i++) {\r\n//                         punchColumns[`Punch ${i + 1}`] = punches[i] || \"--\";\r\n//                     }\r\n\r\n//                     return {\r\n//                         Employee: username,\r\n//                         \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//                         \"Attendance Status\": attendanceStatus,\r\n//                         ...punchColumns,\r\n//                     };\r\n//                 });\r\n\r\n//                 const columnsOrder = [\r\n//                     \"Employee\",\r\n//                     \"Log Date\",\r\n//                     \"Attendance Status\",\r\n//                     ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n//                 ];\r\n\r\n//                 const reorderedData = exportData.map((row) =>\r\n//                     columnsOrder.reduce((acc, col) => {\r\n//                         acc[col] = row[col] || \"--\";\r\n//                         return acc;\r\n//                     }, {})\r\n//                 );\r\n\r\n//                 XLSX.utils.book_append_sheet(\r\n//                     wb,\r\n//                     XLSX.utils.json_to_sheet(reorderedData),\r\n//                     username.slice(0, 31)\r\n//                 );\r\n//             });\r\n\r\n//             const fileName = `Attendance_Report_${new Date().toLocaleString(\r\n//                 \"default\",\r\n//                 { month: \"long\" }\r\n//             )}_${year}.xlsx`;\r\n//             XLSX.writeFile(wb, fileName);\r\n//         } catch (error) {\r\n//             console.error(\"Error generating report:\", error);\r\n//             toast.error(\"Failed to generate report\");\r\n//         }\r\n//     };\r\n//     const fetchDropdownEmployees = async () => {\r\n//         setLoading(true);\r\n//         try {\r\n//             const data = await fetchLink({\r\n//                 address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n//             });\r\n//             if (data.success) {\r\n//                 setDropdownEmployees(data.data);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             toast.error(\"Failed to fetch employees for dropdown\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e));\r\n//     }, [\r\n//         storage?.UserTypeId,\r\n//         storage?.UserId,\r\n//         storage?.Company_id,\r\n//         storage?.Name,\r\n//         reload,\r\n//     ]);\r\n\r\n//     const fetchAttendanceData = async (From, EmpId) => {\r\n//         try {\r\n//             const userTypeId = storage?.UserTypeId;\r\n//             const [year, month] = From.split(\"-\");\r\n\r\n//             const startDate = `${year}-${month}-01`;\r\n\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//                 },\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 setAttendanceData(response.data);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(\"Error fetching attendance data:\", e);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const queryFilters = {\r\n//             FromDate:\r\n//                 query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n//                     ? query.get(\"FromDate\")\r\n//                     : defaultFilters.Fromdate,\r\n//             ToDate:\r\n//                 query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n//                     ? query.get(\"ToDate\")\r\n//                     : defaultFilters.Todate,\r\n//         };\r\n//         setFilters((pre) => ({\r\n//             ...pre,\r\n//             FromDate: queryFilters.FromDate,\r\n//             ToDate: queryFilters.ToDate,\r\n//         }));\r\n//     }, [location.search]);\r\n\r\n//     useEffect(() => {\r\n//         const FromDate =\r\n//             stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n//                 ? ISOString(stateDetails?.FromDate)\r\n//                 : null;\r\n//         const ToDate =\r\n//             stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n//                 ? ISOString(stateDetails?.ToDate)\r\n//                 : null;\r\n//         if (FromDate && ToDate) {\r\n//             updateQueryString({ FromDate, ToDate });\r\n//             setFilters((pre) => ({\r\n//                 ...pre,\r\n//                 FromDate: ISOString(stateDetails.FromDate),\r\n//                 ToDate: stateDetails.ToDate,\r\n//             }));\r\n//             setReload((pre) => !pre);\r\n//         }\r\n//     }, [stateDetails]);\r\n\r\n//     const updateQueryString = (newFilters) => {\r\n//         const params = new URLSearchParams(newFilters);\r\n//         navigate(`?${params.toString()}`, { replace: true });\r\n//     };\r\n\r\n//     const handleAddEmployeeClose = () => {\r\n//         setAddEmployeeDialogOpen(false);\r\n//     };\r\n\r\n//     const data = () => setViewMode(\"employee\");\r\n//     const dataDepartment = () => setViewMode(\"department\");\r\n//     // const dashboard=()=>setViewMode('default')\r\n\r\n//     const dashboard = () => {\r\n//         setFilters((prev) => ({\r\n//             ...prev,\r\n//             FromDate: prev.FromDate || new Date().toISOString().split(\"T\")[0],\r\n//             ToDate: prev.ToDate || new Date().toISOString().split(\"T\")[0],\r\n//         }));\r\n//         setViewMode(\"default\");\r\n//     };\r\n\r\n//     const ExpendableComponent = ({ row }) => {\r\n//         const departments =\r\n//             typeof row.DepartmentWiseCounts === \"string\"\r\n//                 ? JSON.parse(row.DepartmentWiseCounts)\r\n//                 : row.DepartmentWiseCounts;\r\n\r\n//         return (\r\n//             <table\r\n//                 style={{\r\n//                     width: \"100%\",\r\n//                     borderCollapse: \"collapse\",\r\n//                     marginTop: \"10px\",\r\n//                 }}\r\n//             >\r\n//                 <thead>\r\n//                     <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Department Name\r\n//                         </th>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Total Employees\r\n//                         </th>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Present Today\r\n//                         </th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {departments && departments.length > 0 ? (\r\n//                         departments.map((data, index) => (\r\n//                             <tr key={index} onClick={() => toggleExpand(data.Department)}>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     {data?.Department || \"-\"}\r\n//                                 </td>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//                                         <span\r\n//                                             style={{\r\n//                                                 fontSize: \"1.25rem\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                                 marginRight: \"100px\", // Increased from 15px to 100px\r\n//                                                 minWidth: \"60px\", // Ensures consistent spacing\r\n//                                             }}\r\n//                                         >\r\n//                                             {data?.TotalEmployees || \"-\"}\r\n//                                         </span>\r\n//                                         <span style={{ fontSize: \"1rem\" }}>\r\n//                                             Male / Female: {data?.TotalMaleEmployees || \"0\"} /{\" \"}\r\n//                                             {data?.TotalFemaleEmployees || \"0\"}\r\n//                                         </span>\r\n//                                     </div>\r\n//                                 </td>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//                                         <span\r\n//                                             style={{\r\n//                                                 fontSize: \"1.25rem\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                                 marginRight: \"100px\", // Increased from 15px to 100px\r\n//                                                 minWidth: \"60px\", // Ensures consistent spacing\r\n//                                             }}\r\n//                                         >\r\n//                                             {data?.TotalPresentToday || \"-\"}\r\n//                                         </span>\r\n//                                         <span style={{ fontSize: \"1rem\" }}>\r\n//                                             Male / Female: {data?.TotalMalePresentToday || \"0\"} /{\" \"}\r\n//                                             {data?.TotalFemalePresentToday || \"0\"}\r\n//                                         </span>\r\n//                                     </div>\r\n//                                 </td>\r\n//                             </tr>\r\n//                         ))\r\n//                     ) : (\r\n//                         <tr>\r\n//                             <td colSpan=\"3\" style={{ padding: \"8px\" }}>\r\n//                                 No Departments Available\r\n//                             </td>\r\n//                         </tr>\r\n//                     )}\r\n//                 </tbody>\r\n//             </table>\r\n//         );\r\n//     };\r\n\r\n//     const handleRefresh = () => {\r\n//         if (loadingOn) loadingOn();\r\n\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e))\r\n//             .finally(() => {\r\n//                 if (loadingOff) loadingOff();\r\n//                 setReload((prev) => !prev);\r\n//             });\r\n//     };\r\n\r\n//     const handleRefreshData = () => {\r\n//         window.location.reload();\r\n//     };\r\n\r\n//     const ExpendableComponent1 = ({ row }) => {\r\n//         let departments = [];\r\n//         let monthlyAttendance = [];\r\n\r\n//         try {\r\n//             departments =\r\n//                 typeof row.Employees === \"string\"\r\n//                     ? JSON.parse(row.Employees)\r\n//                     : row.Employees || [];\r\n\r\n//             monthlyAttendance =\r\n//                 typeof row.MonthlyAverageAttendance === \"string\"\r\n//                     ? JSON.parse(row.MonthlyAverageAttendance)\r\n//                     : row.MonthlyAverageAttendance || [];\r\n//         } catch (err) {\r\n//             departments = [];\r\n//             monthlyAttendance = [];\r\n//         }\r\n\r\n//         const currentYear = new Date().getFullYear();\r\n\r\n//         const monthList = [\r\n//             { name: \"January\", number: 1 },\r\n//             { name: \"February\", number: 2 },\r\n//             { name: \"March\", number: 3 },\r\n//             { name: \"April\", number: 4 },\r\n//             { name: \"May\", number: 5 },\r\n//             { name: \"June\", number: 6 },\r\n//             { name: \"July\", number: 7 },\r\n//             { name: \"August\", number: 8 },\r\n//             { name: \"September\", number: 9 },\r\n//             { name: \"October\", number: 10 },\r\n//             { name: \"November\", number: 11 },\r\n//             { name: \"December\", number: 12 },\r\n//         ];\r\n\r\n//         const attendanceMap = new Map();\r\n//         monthlyAttendance.forEach((item) => {\r\n//             const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n//             attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n//         });\r\n\r\n//         return (\r\n//             <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n//                 <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n//                     <table\r\n//                         style={{\r\n//                             width: \"60%\",\r\n//                             borderCollapse: \"collapse\",\r\n//                             border: \"1px solid #ccc\",\r\n//                         }}\r\n//                     >\r\n//                         <thead>\r\n//                             <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n//                                 <th\r\n//                                     style={{\r\n//                                         border: \"1px solid #ccc\",\r\n//                                         padding: \"5px\",\r\n//                                         textAlign: \"left\",\r\n//                                     }}\r\n//                                 >\r\n//                                     Emp_Name\r\n//                                 </th>\r\n//                                 <th\r\n//                                     style={{\r\n//                                         border: \"1px solid #ccc\",\r\n//                                         padding: \"8px\",\r\n//                                         textAlign: \"left\",\r\n//                                     }}\r\n//                                 >\r\n//                                     Sex\r\n//                                 </th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                             {departments && departments.length > 0 ? (\r\n//                                 departments.map((data, index) => (\r\n//                                     <tr key={index}>\r\n//                                         <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                             {data?.Emp_Name || \"-\"}\r\n//                                         </td>\r\n//                                         <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                             {data?.Sex || \"-\"}\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 ))\r\n//                             ) : (\r\n//                                 <tr>\r\n//                                     <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n//                                         No Employees Available\r\n//                                     </td>\r\n//                                 </tr>\r\n//                             )}\r\n//                         </tbody>\r\n//                     </table>\r\n\r\n//                     <div\r\n//                         style={{\r\n//                             flex: \"1\",\r\n//                             border: \"1px solid #ddd\",\r\n//                             borderRadius: \"5px\",\r\n//                             padding: \"10px\",\r\n//                             overflowX: \"auto\",\r\n//                             whiteSpace: \"nowrap\",\r\n//                         }}\r\n//                     >\r\n//                         <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n//                         <div\r\n//                             style={{\r\n//                                 display: \"flex\",\r\n//                                 gap: \"10px\",\r\n//                             }}\r\n//                         >\r\n//                             {monthList.map((month) => {\r\n//                                 const key = `${month.number}-${currentYear}`;\r\n//                                 const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n//                                 return (\r\n//                                     <div\r\n//                                         key={month.number}\r\n//                                         style={{\r\n//                                             minWidth: \"100px\",\r\n//                                             padding: \"8px\",\r\n//                                             backgroundColor: \"#f0f0f0\",\r\n//                                             color: \"black\",\r\n//                                             borderRadius: \"4px\",\r\n//                                             textAlign: \"center\",\r\n//                                             userSelect: \"none\",\r\n//                                         }}\r\n//                                     >\r\n//                                         <div style={{ fontWeight: \"bold\" }}>\r\n//                                             {month.name} {currentYear}\r\n//                                         </div>\r\n//                                         <div\r\n//                                             style={{\r\n//                                                 marginTop: \"6px\",\r\n//                                                 fontSize: \"14px\",\r\n//                                                 color: \"#555\",\r\n//                                             }}\r\n//                                         >\r\n//                                             {uniqueEmployeeDays}\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 );\r\n//                             })}\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e));\r\n//     }, [\r\n//         storage?.UserTypeId,\r\n//         storage?.UserId,\r\n//         storage?.Company_id,\r\n//         storage?.Name,\r\n//     ]);\r\n\r\n//     useEffect(() => {\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `empAttendance/department?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     if (data.others && data.others.department) {\r\n//                         const deptOptions = data.others.department.map((dept) => ({\r\n//                             value: dept.value,\r\n//                             label: dept.label,\r\n//                         }));\r\n//                         setDepartments(deptOptions);\r\n//                     }\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching departments:\", e));\r\n//     }, [storage?.Company_id, reload]);\r\n\r\n//     const handleDepartmentChange = (selected) => {\r\n//         setSelectedDepartment(selected);\r\n\r\n//         setEmployees([]);\r\n//         setSelectedEmployee(null);\r\n\r\n//         if (selected) {\r\n//             fetchLink({\r\n//                 address: `empAttendance/employeesByDepartment`,\r\n//                 method: \"POST\",\r\n//                 bodyData: { department: selected.value },\r\n//             })\r\n//                 .then((data) => {\r\n//                     if (data.success && data.others?.employees) {\r\n//                         const employeeOptions = data.others.employees.map((emp) => ({\r\n//                             value: emp.id || emp.value || emp.Emp_Id,\r\n//                             label: emp.name || emp.label || emp.Emp_Name,\r\n//                         }));\r\n\r\n//                         setEmployees(employeeOptions);\r\n//                     } else {\r\n//                         setEmployees([]);\r\n//                     }\r\n//                 })\r\n//                 .catch((e) => {\r\n//                     console.error(\"Error fetching employees:\", e);\r\n//                     setEmployees([]);\r\n//                 });\r\n//         } else {\r\n//             setEmployees([]);\r\n//         }\r\n//     };\r\n\r\n//     const departmentWiseCounts = React.useMemo(() => {\r\n//         if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n//         try {\r\n//             const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n//             return Array.isArray(parsed) ? parsed : [];\r\n//         } catch (err) {\r\n//             console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n//             return [];\r\n//         }\r\n//     }, [saleOrders]);\r\n\r\n//     const filteredData = React.useMemo(() => {\r\n//         if (!departmentWiseCounts || !departmentWiseCounts.length) return [];\r\n\r\n//         const filteredDepartments = departmentWiseCounts.filter((item) => {\r\n//             return selectedDepartment\r\n//                 ? item.Department === selectedDepartment.label\r\n//                 : true;\r\n//         });\r\n\r\n//         return filteredDepartments.map((dept) => {\r\n//             const employeeList = dept.employees || dept.Employees || [];\r\n\r\n//             const filteredEmployees = selectedEmployee\r\n//                 ? employeeList.filter((emp) => {\r\n//                     if (!emp.Emp_Name) return false;\r\n//                     return (\r\n//                         emp.Emp_Name.trim().toLowerCase() ===\r\n//                         selectedEmployee.label.trim().toLowerCase()\r\n//                     );\r\n//                 })\r\n//                 : employeeList;\r\n\r\n//             return {\r\n//                 ...dept,\r\n//                 Employees: filteredEmployees,\r\n//             };\r\n//         });\r\n//     }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n//     return (\r\n//         <>\r\n//             {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n//                 <>\r\n//                     {viewMode === \"default\" && (\r\n//                         <FilterableTable\r\n//                             title={\r\n//                                 <div className=\"d-flex align-items-center\">\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         disabled\r\n//                                         onClick={() => dashboard()}\r\n//                                     >\r\n//                                         Dashboard\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => data()}\r\n//                                     >\r\n//                                         Employee\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => dataDepartment()}\r\n//                                     >\r\n//                                         Department\r\n//                                     </Button>\r\n\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <label>From Date</label>\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={(e) =>\r\n//                                                 setFilters({ ...filters, FromDate: e.target.value })\r\n//                                             }\r\n//                                             value={filters?.FromDate}\r\n//                                             className=\"cus-inpt w-auto p-1\"\r\n//                                         />\r\n//                                     </div>\r\n\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <label>To Date</label>\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={(e) =>\r\n//                                                 setFilters({ ...filters, ToDate: e.target.value })\r\n//                                             }\r\n//                                             value={filters?.ToDate}\r\n//                                             className=\"cus-inpt w-auto p-1\"\r\n//                                         />\r\n//                                     </div>\r\n\r\n//                                     <div className=\"p-1\">\r\n//                                         <IconButton\r\n//                                             onClick={() => setReload(!reload)}\r\n//                                             variant=\"outlined\"\r\n//                                             size=\"small\"\r\n//                                         >\r\n//                                             <Search />\r\n//                                         </IconButton>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                             dataArray={saleOrders}\r\n//                             EnableSerialNumber\r\n//                             columns={[\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: \"Tot.Emp\",\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         const total = row?.TotalEmployees ?? 0;\r\n//                                         const male = row?.TotalMaleEmployees ?? 0;\r\n//                                         const female = row?.TotalFemaleEmployees ?? 0;\r\n//                                         return (\r\n//                                             <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n//                                                 <div>{total}</div>\r\n//                                                 <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n//                                                     Male / Female: {male} / {female}\r\n//                                                 </div>\r\n//                                             </div>\r\n//                                         );\r\n//                                     },\r\n//                                 },\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: \"Tot.Pre.Today\",\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         const total = row?.TotalPresentToday ?? 0;\r\n//                                         const male = row?.TotalMalePresentToday ?? 0;\r\n//                                         const female = row?.TotalFemalePresentToday ?? 0;\r\n//                                         return (\r\n//                                             <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n//                                                 <div>{total}</div>\r\n//                                                 <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n//                                                     Male / Female: {male} / {female}\r\n//                                                 </div>\r\n//                                             </div>\r\n//                                         );\r\n//                                     },\r\n//                                 },\r\n//                             ]}\r\n//                             isExpendable={true}\r\n//                             tableMaxHeight={550}\r\n//                             expandableComp={ExpendableComponent}\r\n//                         />\r\n//                     )}\r\n\r\n//                     {viewMode === \"employee\" && (\r\n//                         <>\r\n//                             <Dialog\r\n//                                 open={addEmployeeDialogOpen}\r\n//                                 maxWidth=\"md\"\r\n//                                 PaperProps={{\r\n//                                     style: { width: \"500px\", height: \"500px\" },\r\n//                                 }}\r\n//                             >\r\n//                                 <DialogTitle>Add Employee</DialogTitle>\r\n//                                 <DialogContent>\r\n//                                     <Autocomplete\r\n//                                         multiple\r\n//                                         options={[\r\n//                                             { UserId: \"all\", Name: \"ALL\" },\r\n//                                             ...dropdownEmployees,\r\n//                                         ]}\r\n//                                         getOptionLabel={(option) => option.Name}\r\n//                                         isOptionEqualToValue={(option, value) =>\r\n//                                             option.UserId === value.UserId\r\n//                                         }\r\n//                                         onChange={(event, value) => {\r\n//                                             if (value.some((selected) => selected.UserId === \"all\")) {\r\n//                                                 setSelectedEmployees(dropdownEmployees);\r\n//                                             } else {\r\n//                                                 const uniqueValues = value.filter(\r\n//                                                     (val, index, self) =>\r\n//                                                         index ===\r\n//                                                         self.findIndex((t) => t.UserId === val.UserId)\r\n//                                                 );\r\n//                                                 setSelectedEmployees(uniqueValues);\r\n//                                             }\r\n//                                         }}\r\n//                                         value={\r\n//                                             selectedEmployees.some((user) => user.UserId === \"all\")\r\n//                                                 ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n//                                                 : selectedEmployees\r\n//                                         }\r\n//                                         renderInput={(params) => (\r\n//                                             <TextField {...params} placeholder=\"Employees\" />\r\n//                                         )}\r\n//                                     />\r\n//                                 </DialogContent>\r\n//                                 <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n//                                     <Button\r\n//                                         type=\"button\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => setSelectedEmployees([])}\r\n//                                     >\r\n//                                         Clear\r\n//                                     </Button>\r\n//                                     <span>\r\n//                                         <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n//                                         <Button onClick={handleOverallWithPunch}>Download</Button>\r\n//                                     </span>\r\n//                                 </DialogActions>\r\n//                             </Dialog>\r\n//                             <Card>\r\n//                                 <CardContent sx={{ minHeight: \"50vh\" }}>\r\n//                                     <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n//                                         <h6 className=\"fa-18\">\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 onClick={() => dashboard()}\r\n//                                             >\r\n//                                                 Dashboard\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 disabled\r\n//                                                 onClick={() => data()}\r\n//                                             >\r\n//                                                 EMPLOYEE\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 onClick={() => dataDepartment()}\r\n//                                             >\r\n//                                                 Department\r\n//                                             </Button>\r\n//                                         </h6>\r\n\r\n//                                         <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                             <Button\r\n//                                                 onClick={handleDownload}\r\n//                                                 variant=\"contained\"\r\n//                                                 disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n//                                             >\r\n//                                                 Individual Report\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 onClick={() => {\r\n//                                                     handleOverallDownload(filter?.From, filter?.To);\r\n//                                                 }}\r\n//                                             >\r\n//                                                 Monthly Report\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 onClick={() => {\r\n//                                                     setAddEmployeeDialogOpen(true);\r\n//                                                 }}\r\n//                                             >\r\n//                                                 Cummulative Monthly Report\r\n//                                             </Button>\r\n//                                             <Button onClick={handleSummaryDownload}>Summary</Button>\r\n//                                         </div>\r\n//                                     </div>\r\n\r\n//                                     <div className=\"px-2 row mb-4\">\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Employee</label>\r\n//                                             <Select\r\n//                                                 value={{ value: filter?.EmpId, label: filter?.Name }}\r\n//                                                 onChange={(e) =>\r\n//                                                     setFilter({\r\n//                                                         ...filter,\r\n//                                                         EmpId: e.value,\r\n//                                                         Name: e.label,\r\n//                                                     })\r\n//                                                 }\r\n//                                                 options={[\r\n//                                                     { value: 0, label: `ALL` },\r\n//                                                     ...employees.map((obj) => ({\r\n//                                                         value: obj?.UserId,\r\n//                                                         label: obj?.Name,\r\n//                                                     })),\r\n//                                                 ]}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 isSearchable={true}\r\n//                                                 placeholder={dropdownPlaceholder}\r\n//                                             />\r\n//                                         </div>\r\n\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>From</label>\r\n//                                             <input\r\n//                                                 type=\"month\"\r\n//                                                 className=\"cus-inpt\"\r\n//                                                 value={filter?.From?.slice(0, 7)}\r\n//                                                 onChange={handleFromChange}\r\n//                                             />\r\n//                                         </div>\r\n//                                         <div className=\"col-auto p-2 d-flex align-items-center\">\r\n//                                             <button\r\n//                                                 className=\"btn btn-link ms-2 p-0 mt-3\"\r\n//                                                 onClick={handleRefresh}\r\n//                                                 title=\"Refresh Departments & Employees\"\r\n//                                             >\r\n//                                                 <Refresh fontSize=\"medium\" />\r\n//                                             </button>\r\n//                                         </div>\r\n//                                     </div>\r\n\r\n//                                     <FilterableTable\r\n//                                         dataArray={attendanceData}\r\n//                                         columns={[\r\n//                                             {\r\n//                                                 isCustomCell: true,\r\n//                                                 Cell: ({ row }) => row.username,\r\n//                                                 ColumnHeader: \"Employee\",\r\n//                                                 isVisible: 1,\r\n//                                                 width: \"20%\",\r\n//                                                 CellProps: {\r\n//                                                     sx: {\r\n//                                                         padding: \"10px\",\r\n//                                                         textAlign: \"left\",\r\n//                                                         fontWeight: \"bold\",\r\n//                                                     },\r\n//                                                 },\r\n//                                             },\r\n//                                             {\r\n//                                                 isCustomCell: true,\r\n//                                                 Cell: ({ row }) =>\r\n//                                                     formatAttendanceDate(row.LogDate || \"--\"),\r\n//                                                 ColumnHeader: \"Log Date\",\r\n//                                                 isVisible: 1,\r\n//                                                 width: \"20%\",\r\n//                                                 CellProps: {\r\n//                                                     sx: {\r\n//                                                         padding: \"10px\",\r\n//                                                         textAlign: \"center\",\r\n//                                                         color: \"gray\",\r\n//                                                     },\r\n//                                                 },\r\n//                                             },\r\n//                                             ...punchColumns,\r\n//                                         ]}\r\n//                                         EnableSerialNumber\r\n//                                         CellSize=\"small\"\r\n//                                         disablePagination={false}\r\n//                                     />\r\n//                                 </CardContent>\r\n//                             </Card>\r\n//                         </>\r\n//                     )}\r\n\r\n//                     {viewMode === \"department\" && (\r\n//                         <FilterableTable\r\n//                             title={\r\n//                                 <div className=\"d-flex flex-column\">\r\n//                                     <div className=\"d-flex align-items-center mb-3\">\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             onClick={() => dashboard()}\r\n//                                         >\r\n//                                             Dashboard\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             onClick={() => data()}\r\n//                                         >\r\n//                                             Employee\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             disabled\r\n//                                             onClick={() => dataDepartment()}\r\n//                                         >\r\n//                                             Department\r\n//                                         </Button>\r\n//                                     </div>\r\n\r\n//                                     <div className=\"row align-items-end\">\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Department</label>\r\n//                                             <Select\r\n//                                                 options={departments}\r\n//                                                 isSearchable\r\n//                                                 placeholder=\"ALL\"\r\n//                                                 value={selectedDepartment}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 onChange={handleDepartmentChange}\r\n//                                             />\r\n//                                         </div>\r\n\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Employee</label>\r\n//                                             <Select\r\n//                                                 options={employees}\r\n//                                                 isSearchable\r\n//                                                 placeholder=\"ALL\"\r\n//                                                 value={selectedEmployee}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 onChange={setSelectedEmployee}\r\n//                                                 isDisabled={!selectedDepartment}\r\n//                                             />\r\n//                                         </div>\r\n//                                         <div className=\"col-auto p-2 d-flex align-items-center\">\r\n//                                             <button\r\n//                                                 className=\"btn btn-link ms-2 p-0 mb-2\"\r\n//                                                 onClick={handleRefreshData}\r\n//                                                 style={{ minWidth: \"24px\" }}\r\n//                                                 title=\"Refresh Departments & Employees\"\r\n//                                             >\r\n//                                                 <Refresh fontSize=\"small\" />\r\n//                                             </button>\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                             dataArray={filteredData}\r\n//                             EnableSerialNumber\r\n//                             columns={[\r\n//                                 createCol(\"Department\", \"string\", \"Department\"),\r\n//                                 createCol(\r\n//                                     \"TotalMaleEmployees\",\r\n//                                     \"number\",\r\n//                                     \"Total Male Employees\"\r\n//                                 ),\r\n//                                 createCol(\r\n//                                     \"TotalFemaleEmployees\",\r\n//                                     \"number\",\r\n//                                     \"Total Female Employees\"\r\n//                                 ),\r\n//                                 createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n//                                 createCol(\r\n//                                     \"TotalMalePresentToday\",\r\n//                                     \"number\",\r\n//                                     \"Total Male Present Today\"\r\n//                                 ),\r\n//                                 createCol(\r\n//                                     \"TotalFemalePresentToday\",\r\n//                                     \"number\",\r\n//                                     \"Total Female Present Today\"\r\n//                                 ),\r\n//                                 createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n//                             ]}\r\n//                             isExpendable={true}\r\n//                             tableMaxHeight={550}\r\n//                             expandableComp={ExpendableComponent1}\r\n//                         />\r\n//                     )}\r\n//                 </>\r\n//             ) : (\r\n//                 <>\r\n//                     <Dialog\r\n//                         open={addEmployeeDialogOpen}\r\n//                         maxWidth=\"md\"\r\n//                         PaperProps={{\r\n//                             style: { width: \"500px\", height: \"500px\" },\r\n//                         }}\r\n//                     >\r\n//                         <DialogTitle>Add Employee</DialogTitle>\r\n//                         <DialogContent>\r\n//                             <Autocomplete\r\n//                                 multiple\r\n//                                 options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n//                                 getOptionLabel={(option) => option.Name}\r\n//                                 isOptionEqualToValue={(option, value) =>\r\n//                                     option.UserId === value.UserId\r\n//                                 }\r\n//                                 value={\r\n//                                     selectedEmployees.some((user) => user.UserId === \"all\")\r\n//                                         ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n//                                         : selectedEmployees\r\n//                                 }\r\n//                                 onChange={(event, value) => {\r\n//                                     if (value.some((selected) => selected.UserId === \"all\")) {\r\n//                                         setSelectedEmployees(dropdownEmployees);\r\n//                                     } else {\r\n//                                         const uniqueValues = value.filter(\r\n//                                             (val, index, self) =>\r\n//                                                 index === self.findIndex((t) => t.UserId === val.UserId)\r\n//                                         );\r\n//                                         setSelectedEmployees(uniqueValues);\r\n//                                     }\r\n//                                 }}\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} placeholder=\"Employees\" />\r\n//                                 )}\r\n//                             />\r\n//                         </DialogContent>\r\n//                         <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n//                             <Button\r\n//                                 variant=\"outlined\"\r\n//                                 onClick={() => setSelectedEmployees([])}\r\n//                             >\r\n//                                 Clear\r\n//                             </Button>\r\n//                             <span>\r\n//                                 <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n//                                 <Button onClick={handleOverallWithPunch}>Download</Button>\r\n//                             </span>\r\n//                         </DialogActions>\r\n//                     </Dialog>\r\n\r\n//                     <Card>\r\n//                         <CardContent sx={{ minHeight: \"50vh\" }}>\r\n//                             <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n//                                 <h6 className=\"fa-18\">\r\n//                                     <Button size=\"small\" variant=\"outlined\" className=\"mx-2\">\r\n//                                         EMPLOYEE\r\n//                                     </Button>\r\n//                                 </h6>\r\n\r\n//                                 {(userTypeId === 1 || userTypeId === 0) && (\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <Button\r\n//                                             onClick={handleDownload}\r\n//                                             variant=\"contained\"\r\n//                                             disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n//                                         >\r\n//                                             Individual Report\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             onClick={() =>\r\n//                                                 handleOverallDownload(filter?.From, filter?.To)\r\n//                                             }\r\n//                                         >\r\n//                                             Monthly Report\r\n//                                         </Button>\r\n//                                         <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n//                                             Cumulative Monthly Report\r\n//                                         </Button>\r\n//                                         <Button onClick={handleSummaryDownload}>Summary</Button>\r\n//                                     </div>\r\n//                                 )}\r\n//                             </div>\r\n\r\n//                             <div className=\"px-2 row mb-4\">\r\n//                                 <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                     <label>Employee</label>\r\n//                                     <Select\r\n//                                         value={{ value: filter?.EmpId, label: filter?.Name }}\r\n//                                         onChange={(e) =>\r\n//                                             setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n//                                         }\r\n//                                         options={[\r\n//                                             { value: 0, label: \"ALL\" },\r\n//                                             ...employees.map((obj) => ({\r\n//                                                 value: obj.UserId,\r\n//                                                 label: obj.Name,\r\n//                                             })),\r\n//                                         ]}\r\n//                                         styles={customSelectStyles}\r\n//                                         isSearchable\r\n//                                         placeholder={dropdownPlaceholder}\r\n//                                         isDisabled={isDropdownDisabled}\r\n//                                     />\r\n//                                 </div>\r\n\r\n//                                 <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                     <label>From</label>\r\n//                                     <input\r\n//                                         type=\"month\"\r\n//                                         className=\"cus-inpt\"\r\n//                                         value={filter?.From?.slice(0, 7)}\r\n//                                         onChange={handleFromChange}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n\r\n//                             <FilterableTable\r\n//                                 dataArray={attendanceData}\r\n//                                 columns={[\r\n//                                     {\r\n//                                         isCustomCell: true,\r\n//                                         Cell: ({ row }) => row.username,\r\n//                                         ColumnHeader: \"Employee\",\r\n//                                         isVisible: 1,\r\n//                                         width: \"20%\",\r\n//                                         CellProps: {\r\n//                                             sx: {\r\n//                                                 padding: \"10px\",\r\n//                                                 textAlign: \"left\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                             },\r\n//                                         },\r\n//                                     },\r\n//                                     {\r\n//                                         isCustomCell: true,\r\n//                                         Cell: ({ row }) =>\r\n//                                             formatAttendanceDate(row.LogDate || \"--\"),\r\n//                                         ColumnHeader: \"Log Date\",\r\n//                                         isVisible: 1,\r\n//                                         width: \"20%\",\r\n//                                         CellProps: {\r\n//                                             sx: {\r\n//                                                 padding: \"10px\",\r\n//                                                 textAlign: \"center\",\r\n//                                                 color: \"gray\",\r\n//                                             },\r\n//                                         },\r\n//                                     },\r\n//                                     ...punchColumns,\r\n//                                 ]}\r\n//                                 EnableSerialNumber\r\n//                                 CellSize=\"small\"\r\n//                                 disablePagination={false}\r\n//                             />\r\n//                         </CardContent>\r\n//                     </Card>\r\n//                 </>\r\n//             )}\r\n//         </>\r\n//     );\r\n// };\r\n// export default AttendanceNewScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  IconButton,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { ISOString, isValidDate } from \"../../Components/functions\";\r\n// import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Search, Refresh } from \"@mui/icons-material\";\r\n// import { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Chip,\r\n  Autocomplete,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as XLSX from \"xlsx\";\r\nimport DefaultLeave from \"./defaultLeave\";\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst AttendanceNewScreen = ({ loadingOn, loadingOff }) => {\r\n  const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const stateDetails = location.state;\r\n\r\n  const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n  const getCurrentMonthYear = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    return `${year}-${month}`;\r\n  };\r\n\r\n  const initialValue = {\r\n    From: getCurrentMonthYear(),\r\n    To: getCurrentMonthYear(),\r\n    EmpId: \"0\",\r\n    Name: \"ALL\",\r\n  };\r\n  const query = useQuery();\r\n\r\n  const defaultFilters = {\r\n    From: getCurrentMonthYear(),\r\n    To: getCurrentMonthYear(),\r\n  };\r\n\r\n  const [saleOrders, setSaleOrders] = useState([]);\r\n  const [viewMode, setViewMode] = useState(\"default\");\r\n  const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n  const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n  const [reload, setReload] = useState(false);\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n  const userTypeId = storage?.UserTypeId;\r\n  const parseData = storage;\r\n  const { contextObj } = useContext(MyContext);\r\n\r\n  const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n  const [filter, setFilter] = useState(initialValue);\r\n  const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setDebouncedFilter(filter);\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const { From, EmpId } = debouncedFilter;\r\n    if (From && (EmpId || EmpId === 0)) {\r\n      fetchAttendanceData(From, EmpId);\r\n      fetchDropdownEmployees();\r\n    }\r\n  }, [debouncedFilter]);\r\n\r\n  const getDaysInMonth = (monthYear) => {\r\n    if (!monthYear) return 0;\r\n\r\n    const [year, month] = monthYear.split(\"-\");\r\n\r\n    return new Date(year, month, 0).getDate();\r\n  };\r\n\r\n  const [filters, setFilters] = useState({\r\n    FromDate: new Date().toISOString().split(\"T\")[0],\r\n    ToDate: new Date().toISOString().split(\"T\")[0],\r\n    Cancel_status: 0,\r\n  });\r\n\r\n  const toggleExpand = (department) => {\r\n    if (expandedDepartment === department) {\r\n      setExpandedDepartment(null);\r\n    } else {\r\n      setExpandedDepartment(department);\r\n    }\r\n  };\r\n  const [departments, setDepartments] = useState([]);\r\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n  const Add_Rights = contextObj?.Add_Rights;\r\n\r\n  useEffect(() => {\r\n    if (loadingOn) loadingOn();\r\n\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const fromDate = filters.FromDate || today;\r\n    const toDate = filters.ToDate || today;\r\n\r\n    fetchLink({\r\n      address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          setSaleOrders(data?.data);\r\n        }\r\n      })\r\n      .catch((e) => console.error(e))\r\n      .finally(() => {\r\n        if (loadingOff) loadingOff();\r\n      });\r\n  }, [reload]);\r\n\r\n  const handleFromChange = (e) => {\r\n    const getDaysInMonth = (monthYear) => {\r\n      if (!monthYear) return 0;\r\n\r\n      const [year, month] = monthYear.split(\"-\");\r\n\r\n      return new Date(year, month, 0).getDate();\r\n    };\r\n    const selectedMonth = e.target.value;\r\n    const [year, month] = selectedMonth.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    setFilter({\r\n      From: startDate,\r\n      To: endDate,\r\n      EmpId: filter.EmpId || 0,\r\n      Name: filter?.Name,\r\n    });\r\n  };\r\n\r\nconst handleSummaryDownload = async () => {\r\n  try {\r\n    const fromDate = filter.From;\r\n    const [year, month] = fromDate.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    const response = await fetchLink({\r\n      address: `userModule/employeeActivity/summary?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n\r\n    if (response.success) {\r\n      const overallData = response.data;\r\n\r\n      // Build all dates in month\r\n      const getDateRange = (from, to) => {\r\n        const allDates = [];\r\n        const start = new Date(from);\r\n        const end = new Date(to);\r\n        let sundayCount = 0;\r\n\r\n        while (start <= end) {\r\n          const dateStr = start.toISOString().split(\"T\")[0];\r\n          allDates.push(dateStr);\r\n          if (start.getDay() === 0) sundayCount++; // Sunday\r\n          start.setDate(start.getDate() + 1);\r\n        }\r\n\r\n        return {\r\n          days: allDates,\r\n          sundayCount,\r\n          totalDays: allDates.length,\r\n        };\r\n      };\r\n\r\n      const { days: dateRange, sundayCount, totalDays } = getDateRange(startDate, endDate);\r\n\r\nconst summaryData = overallData.map((row) => {\r\n  const punchDetails = Array.isArray(row.AttendanceDetails)\r\n    ? row.AttendanceDetails\r\n    : row.AttendanceDetails\r\n    ? JSON.parse(row.AttendanceDetails)\r\n    : [];\r\n\r\n  let totalPresent = 0;\r\n  let companyHoliday = 0;\r\n\r\n  const workingDays = dateRange.filter(date => new Date(date).getDay() !== 0); // exclude Sundays\r\n\r\n  workingDays.forEach(date => {\r\n    const dayRecord = punchDetails.find(p => p.Date.startsWith(date));\r\n    if (dayRecord) {\r\n      if (dayRecord.AttendanceStatus === \"P\") {\r\n        totalPresent++;\r\n      } else if (dayRecord.AttendanceStatus === \"H\") {\r\n        companyHoliday++;\r\n      }\r\n    }\r\n  });\r\n\r\n  const approvedLeave = row.ApprovedLeave || 0;\r\n  const pendingLeave = row.PendingLeave || 0;\r\n  const totalWorkingDays = workingDays.length;\r\n\r\n  const totalAbsent =\r\n    totalWorkingDays - (totalPresent + approvedLeave + companyHoliday);\r\n\r\n  return {\r\n    Name: row.Name,\r\n    TotalPresent: totalPresent,\r\n    ApprovedLeave: approvedLeave,\r\n    PendingLeave: pendingLeave,\r\n    CompanyHoliday: companyHoliday,\r\n    TotalAbsent: totalAbsent < 0 ? 0 : totalAbsent,\r\n    NumberOfSundays: sundayCount,\r\n  };\r\n});\r\n\r\n// Create Excel Sheet\r\nconst ws = XLSX.utils.json_to_sheet(summaryData);\r\n\r\nconst headers = [\r\n  \"Name\",\r\n  \"TotalPresent\",\r\n  \"ApprovedLeave\",\r\n  \"PendingLeave\",\r\n  \"CompanyHoliday\",\r\n  \"TotalAbsent\",\r\n  \"NumberOfSundays\",\r\n];\r\n\r\n// Add headers to the top\r\nXLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n// Create workbook and download\r\nconst wb = XLSX.utils.book_new();\r\nXLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary\");\r\n\r\nXLSX.writeFile(wb, `Attendance_Summary_${month}_${year}.xlsx`);\r\n\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error downloading attendance summary:\", error);\r\n    toast.error(\"Failed to generate summary report\");\r\n  }\r\n};\r\n\r\n\r\n\r\n// const handleSummaryDownload = async () => {\r\n//   try {\r\n//     const fromDate = filter.From;\r\n//     const [year, month] = fromDate.split(\"-\");\r\n//     const startDate = `${year}-${month}-01`;\r\n//     const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//     const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//     // Fetch all required data\r\n//     const [attendanceRes, leaveRes, defaultLeaveRes] = await Promise.all([\r\n//       fetchLink({ address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//       fetchLink({ address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//       fetchLink({ address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//     ]);\r\n\r\n//     if (!attendanceRes.success) {\r\n//       toast.error(\"Failed to fetch attendance data\");\r\n//       return;\r\n//     }\r\n\r\n//     const overallData = attendanceRes.data;\r\n//     const allLeaves = leaveRes?.data ? leaveRes.data : [];\r\n//     const defaultLeaves = defaultLeaveRes?.success ? defaultLeaveRes.data : [];\r\n\r\n// const approvedLeaveMap = {};\r\n// const pendingLeaveMap = {};\r\n\r\n// allLeaves.forEach(leave => {\r\n//   const userId = String(leave.User_Id);\r\n//   if (!userId) return;\r\n\r\n//   const status = leave.Status?.toLowerCase();\r\n//   const from = new Date(leave.FromDate);\r\n//   const to = new Date(leave.ToDate);\r\n\r\n//   let current = new Date(from);\r\n//   while (current <= to) {\r\n//     const dateStr = current.toISOString().split(\"T\")[0];\r\n\r\n//     if (status === \"approved\") {\r\n//       if (!approvedLeaveMap[userId]) approvedLeaveMap[userId] = {};\r\n//       approvedLeaveMap[userId][dateStr] = true;\r\n//       console.log(`✅ Approved leave set -> User: ${userId}, Date: ${dateStr}`);\r\n//     } else {\r\n//       if (!pendingLeaveMap[userId]) pendingLeaveMap[userId] = {};\r\n//       pendingLeaveMap[userId][dateStr] = true;\r\n//       console.log(`🕒 Pending leave set -> User: ${userId}, Date: ${dateStr}`);\r\n//     }\r\n\r\n//     current.setDate(current.getDate() + 1);\r\n//   }\r\n// });\r\n\r\n\r\n\r\n//     const defaultLeaveDates = new Set(\r\n//       defaultLeaves.map(d => d.Date?.split(\"T\")[0]).filter(Boolean)\r\n//     );\r\n\r\n//     const getDateRange = (start, end) => {\r\n//       const dates = [];\r\n//       let current = new Date(start);\r\n//       const endDate = new Date(end);\r\n      \r\n//       while (current <= endDate) {\r\n//         dates.push(current.toISOString().split(\"T\")[0]);\r\n//         current.setDate(current.getDate() + 1);\r\n//       }\r\n//       return dates;\r\n//     };\r\n\r\n//     const dateRange = getDateRange(startDate, endDate);\r\n//     const totalWorkingDays = dateRange.filter(date => new Date(date).getDay() !== 0).length;\r\n\r\n//     const summaryData = overallData.map((employee) => {\r\n//       const punchDetails = employee.AttendanceDetails ? JSON.parse(employee.AttendanceDetails) : [];\r\n//       const userId = String(employee.EmployeeID);\r\n      \r\n//       let totalPresent = 0;\r\n//       let totalApprovedLeave = 0;\r\n//       let totalPendingLeave = 0;\r\n//       let totalSundays = 0;\r\n//       let totalDefaultLeave = 0;\r\n//       let totalUnmarkedDays = 0;\r\n\r\n//  dateRange.forEach(date => {\r\n//   const dateObj = new Date(date);\r\n//   const dateStr = dateObj.toISOString().split(\"T\")[0];\r\n//   const isSunday = dateObj.getDay() === 0;\r\n//   const isDefaultLeave = defaultLeaveDates.has(dateStr);\r\n//   const attendanceRecord = punchDetails.find(d => d.Date === dateStr);\r\n\r\n//   const isApprovedLeave = approvedLeaveMap[userId]?.[dateStr] === true;\r\n//   const isPendingLeave = pendingLeaveMap[userId]?.[dateStr] === true;\r\n\r\n//   console.log(`📅 ${dateStr} - User ${String(userId)} | Approved: ${isApprovedLeave} | Pending: ${isPendingLeave}`);\r\n\r\n//   if (isSunday) {\r\n//     totalSundays++;\r\n//     if (attendanceRecord?.AttendanceStatus === \"P\") totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isDefaultLeave) {\r\n//     totalDefaultLeave++;\r\n//     if (attendanceRecord?.AttendanceStatus === \"P\") totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isApprovedLeave) {\r\n//     totalApprovedLeave++;\r\n//     totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isPendingLeave) {\r\n//     totalPendingLeave++;\r\n//     return;\r\n//   }\r\n\r\n//   if (attendanceRecord) {\r\n//     if (attendanceRecord.AttendanceStatus === \"P\") {\r\n//       totalPresent++;\r\n//     } else {\r\n//       totalUnmarkedDays++;\r\n//     }\r\n//   } else {\r\n//     totalUnmarkedDays++;\r\n//   }\r\n// });\r\n\r\n\r\n\r\n//       return {\r\n//         EmployeeName: employee.Name,\r\n//         EmployeeID: employee.EmployeeID,\r\n//         Month: `${month}-${year}`,\r\n//         Branch: employee.Branch,\r\n//         TotalWorkingDays: totalWorkingDays,\r\n//         TotalSundays: totalSundays,\r\n//         TotalDefaultLeave: totalDefaultLeave,\r\n//         TotalPresent: totalPresent,\r\n//         TotalApprovedLeave: totalApprovedLeave,\r\n//         TotalPendingLeave: totalPendingLeave,\r\n//         TotalUnmarkedDays: totalUnmarkedDays,\r\n//       };\r\n//     });\r\n\r\n//     const exportData = summaryData.map(item => ({\r\n//       \"Employee Name\": item.EmployeeName,\r\n//       \"Employee ID\": item.EmployeeID,\r\n//       \"Month\": item.Month,\r\n//       \"Branch\": item.Branch,\r\n//       \"Total Working Days\": item.TotalWorkingDays,\r\n//       \"Sundays\": item.TotalSundays,\r\n//       \"Company Holidays\": item.TotalDefaultLeave,\r\n//       \"Present Days\": item.TotalPresent,\r\n//       \"Approved Leave Days\": item.TotalApprovedLeave,\r\n//       \"Pending Leave Days\": item.TotalPendingLeave,\r\n//       \"Absent Days\": item.TotalUnmarkedDays,\r\n//     }));\r\n\r\n//     const ws = XLSX.utils.json_to_sheet(exportData);\r\n//     const wb = XLSX.utils.book_new();\r\n//     XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary\");\r\n//     XLSX.writeFile(wb, `Attendance_Summary_${month}_${year}.xlsx`);\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error downloading summary report:\", error);\r\n//     toast.error(\"Failed to generate attendance report\");\r\n//   }\r\n// };\r\n\r\n  const handleDownload = () => {\r\n    const maxPunches = 4;\r\n\r\n    const exportData = attendanceData.map((row) => {\r\n      const punchDetails = row.AttendanceDetails\r\n        ? row.AttendanceDetails.split(\",\").filter((p) => p.trim() !== \"\")\r\n        : [];\r\n\r\n      let attendanceStatus = row.AttendanceStatus;\r\n\r\n      if (!attendanceStatus) {\r\n        attendanceStatus = punchDetails.length === 0 ? \"A\" : \"P\";\r\n      }\r\n\r\n      const punchColumns = {};\r\n      for (let i = 0; i < maxPunches; i++) {\r\n        punchColumns[`Punch${i + 1}`] = punchDetails[i]\r\n          ? punchDetails[i].trim()\r\n          : \"--\";\r\n      }\r\n\r\n      return {\r\n        Employee: row.username || row.Employee,\r\n        \"Log Date\": formatAttendanceDate(row.LogDate),\r\n        \"Attendance Status\": attendanceStatus,\r\n        ...punchColumns,\r\n      };\r\n    });\r\n\r\n    const columnsOrder = [\r\n      \"Employee\",\r\n      \"Log Date\",\r\n      \"Attendance Status\",\r\n      \"Punch1\",\r\n      \"Punch2\",\r\n      \"Punch3\",\r\n      \"Punch4\",\r\n      \"Punch5\",\r\n      \"Punch6\"\r\n    ];\r\n\r\n    const reorderedData = exportData.map((row) =>\r\n      columnsOrder.reduce((acc, col) => {\r\n        acc[col] = row[col] || \"--\";\r\n        return acc;\r\n      }, {})\r\n    );\r\n\r\n    const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n    XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n  };\r\n\r\n  const MAX_PUNCHES = 6;\r\n\r\n  function formatToAmPm(timeString) {\r\n    if (!timeString) return \"--\";\r\n    const [hourStr, minuteStr] = timeString.split(\":\");\r\n    if (!hourStr || !minuteStr) return \"--\";\r\n\r\n    let hour = parseInt(hourStr, 10);\r\n    const minute = minuteStr;\r\n    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n    hour = hour % 12 || 12;\r\n\r\n    return `${hour.toString().padStart(2, \"0\")}:${minute} ${ampm}`;\r\n  }\r\n\r\n  const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n    isCustomCell: true,\r\n    ColumnHeader: `Punch ${index + 1}`,\r\n    isVisible: 1,\r\n    width: \"13%\",\r\n    CellProps: {\r\n      sx: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        padding: \"10px\",\r\n      },\r\n    },\r\n    Cell: ({ row }) => {\r\n      const punches = row.AttendanceDetails\r\n        ? row.AttendanceDetails.split(\",\")\r\n            .map((p) => p.trim())\r\n            .filter((p) => p !== \"\")\r\n        : [];\r\n\r\n      const punch = punches[index] || \"--\";\r\n      const rawTime = punch.split(\":in(\")[0];\r\n      const formattedTime = punch !== \"--\" ? formatToAmPm(rawTime) : \"--\";\r\n\r\n      return formattedTime !== \"--\" ? (\r\n        <Chip\r\n          label={formattedTime}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          sx={{ color: \"green\", margin: \"2px\" }}\r\n        />\r\n      ) : (\r\n        <div style={{ color: \"gray\" }}>--</div>\r\n      );\r\n    },\r\n  }));\r\n\r\n  const formatAttendanceDate = (logDateTime) => {\r\n    if (!logDateTime) return \"--\";\r\n    const [date] = logDateTime.split(\"T\");\r\n    return `${date} `;\r\n  };\r\n\r\n\r\n  \r\nconst handleOverallDownload = async () => {\r\n  try {\r\n    const fromDate = filter.From;\r\n    const [year, month] = fromDate.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    const [attendanceRes, leaveRes, defaultLeaveRes] = await Promise.all([\r\n      fetchLink({\r\n        address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n      fetchLink({\r\n        address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n      fetchLink({\r\n        address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n    ]);\r\n\r\n    if (!attendanceRes.success) throw new Error(\"Attendance data failed\");\r\n\r\n    const leaveMap = {};\r\n    const defaultLeaveDates = new Set();\r\n\r\n \r\n    (leaveRes?.data || []).forEach((leave) => {\r\n      if (leave.Status?.toUpperCase() !== \"APPROVED\") return;\r\n\r\n      const userId = leave.User_Id;\r\n      if (!userId) return;\r\n\r\n      let current = new Date(leave.FromDate);\r\n      const leaveEnd = new Date(leave.ToDate);\r\n\r\n      while (current <= leaveEnd) {\r\n        const dateStr = current.toISOString().split(\"T\")[0];\r\n        if (!leaveMap[userId]) leaveMap[userId] = {};\r\n        leaveMap[userId][dateStr] = true;\r\n        current.setDate(current.getDate() + 1);\r\n      }\r\n    });\r\n\r\n    (defaultLeaveRes?.data || []).forEach((defaultLeave) => {\r\n      const dateStr = new Date(defaultLeave.Date).toISOString().split(\"T\")[0];\r\n      defaultLeaveDates.add(dateStr);\r\n    });\r\n\r\n    const { days: dateRange } = getDateRange(startDate, endDate);\r\n    const exportData = attendanceRes.data.map((emp) => {\r\n      const attendanceDetails = tryParseJSON(emp.AttendanceDetails) || [];\r\n      const dailyStatus = {};\r\n      let presentCount = 0;\r\n\r\n       const attendanceLookup = {};\r\n      attendanceDetails.forEach((record) => {\r\n        const dateStr = new Date(record.Date).toISOString().split(\"T\")[0];\r\n        attendanceLookup[dateStr] = {\r\n          status: record.AttendanceStatus,\r\n          hasPunch: record.Punch1 !== \"[]\",\r\n        };\r\n      });\r\n\r\n      dateRange.forEach((date, index) => {\r\n        const dayKey = `Day ${index + 1}`;\r\n        const userId = emp.User_Mgt_Id;\r\n        const dateStr = new Date(date).toISOString().split(\"T\")[0];\r\n        const isSunday = new Date(date).getDay() === 0;\r\n\r\n        const attendanceRecord = attendanceLookup[dateStr];\r\n        const attendanceStatus = attendanceRecord?.status;\r\n        const hasPunch = attendanceRecord?.hasPunch;\r\n        if (defaultLeaveDates.has(dateStr)) {\r\n          if (attendanceStatus === \"P\" && hasPunch) {\r\n            dailyStatus[dayKey] = \"P\";\r\n            presentCount++;\r\n          } else {\r\n            dailyStatus[dayKey] = \"DL\";\r\n          }\r\n        } else if (isSunday) {\r\n          dailyStatus[dayKey] = \"H\";\r\n        } else if (leaveMap[userId]?.[dateStr]) {\r\n          dailyStatus[dayKey] = \"L\";\r\n        } else if (attendanceStatus === \"L\") {\r\n          dailyStatus[dayKey] = \"L\";\r\n        } else if (attendanceStatus === \"P\") {\r\n          dailyStatus[dayKey] = hasPunch ? \"P\" : \"A\";\r\n          if (hasPunch) presentCount++;\r\n        } else if (attendanceStatus === \"H\") {\r\n          dailyStatus[dayKey] = \"H\";\r\n        } else {\r\n          dailyStatus[dayKey] = \"A\";\r\n        }\r\n      });\r\n\r\n      return {\r\n        EmployeeName: emp.username || emp.Name,\r\n        TotalPresent: presentCount,\r\n        ...dailyStatus,\r\n      };\r\n    });\r\n\r\n    const headers = [\r\n      \"EmployeeName\",\r\n      \"TotalPresent\",\r\n      ...dateRange.map((_, i) => `Day ${i + 1}`),\r\n    ];\r\n    const ws = XLSX.utils.json_to_sheet(exportData);\r\n    XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n    XLSX.writeFile(wb, `Attendance_Report_${month}_${year}.xlsx`);\r\n  } catch (error) {\r\n    console.error(\"Download failed:\", error);\r\n    toast.error(\"Failed to generate report\");\r\n  }\r\n};\r\n\r\n  \r\n  \r\n  function getDateRange(start, end) {\r\n    const dates = [];\r\n    const current = new Date(start);\r\n    const endDate = new Date(end);\r\n\r\n    while (current <= endDate) {\r\n      dates.push(current.toISOString().split(\"T\")[0]);\r\n      current.setDate(current.getDate() + 1);\r\n    }\r\n\r\n    return { days: dates, count: dates.length };\r\n  }\r\n\r\n  function tryParseJSON(jsonString) {\r\n    try {\r\n      return jsonString ? JSON.parse(jsonString) : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\nconst handleOverallWithPunch = async () => {\r\n  try {\r\n    const maxPunches = 6;\r\n\r\n\r\n    const firstLogDate = attendanceData[0]?.LogDate;\r\n    if (!firstLogDate) {\r\n      toast.error(\"No attendance data found\");\r\n      return;\r\n    }\r\n\r\n    const dateObj = new Date(firstLogDate);\r\n    const year = dateObj.getFullYear();\r\n    const month = dateObj.getMonth() + 1;\r\n    const startDate = `${year}-${month.toString().padStart(2, \"0\")}-01`;\r\n    const endDate = new Date(year, month, 0).toISOString().split(\"T\")[0];\r\n\r\n  \r\n    const defaultLeaveResponse = await fetchLink({\r\n      address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n  \r\n    const defaultLeaveData = defaultLeaveResponse?.success ? defaultLeaveResponse.data : [];\r\n  const defaultLeaveDates = new Set(\r\n  defaultLeaveData\r\n    .map(leave => leave.Date ? leave.Date.split('T')[0] : null)\r\n    .filter(date => date !== null)\r\n);\r\n  \r\n    const leaveResponse = await fetchLink({\r\n      address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n    const leaveData = leaveResponse.data || [];\r\n\r\n    const leaveMap = {};\r\n    leaveData.forEach((leave) => {\r\n      if (leave.Status?.toLowerCase() !== \"approved\") return;\r\n\r\n      const userId = String(leave.User_Id);\r\n      if (!userId) return;\r\n\r\n      const parseDate = (dateStr) => {\r\n        const parts = dateStr.split(/[-/]/) || [];\r\n        if (parts.length === 3) {\r\n          if (parts[2].length === 4) {\r\n            return parts[0].length === 2\r\n              ? new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)\r\n              : new Date(`${parts[2]}-${parts[0]}-${parts[1]}`);\r\n          }\r\n          return new Date(dateStr);\r\n        }\r\n        return new Date(dateStr);\r\n      };\r\n\r\n      const leaveStart = parseDate(leave.FromDate);\r\n      const leaveEnd = parseDate(leave.ToDate);\r\n\r\n      let currentDate = new Date(leaveStart);\r\n      while (currentDate <= leaveEnd) {\r\n        const dateStr = currentDate.toISOString().split(\"T\")[0];\r\n        if (!leaveMap[userId]) leaveMap[userId] = {};\r\n        \r\n        if (currentDate.getDay() !== 0) { // Skip Sundays\r\n          leaveMap[userId][dateStr] = true;\r\n        }\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n    });\r\n\r\n    // 5. Filter and group attendance data\r\n    const filteredAttendanceData = attendanceData.filter((row) =>\r\n      selectedEmployees.some(\r\n        (user) =>\r\n          String(user.UserId) === String(row.User_Mgt_Id) ||\r\n          user.UserId === \"ALL\"\r\n      )\r\n    );\r\n\r\n    const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n      acc[row.username] = acc[row.username] || [];\r\n      acc[row.username].push(row);\r\n      return acc;\r\n    }, {});\r\n\r\n    if (Object.keys(groupedData).length === 0) {\r\n      toast.error(\"No attendance data found\");\r\n      return;\r\n    }\r\n\r\n    // 6. Generate Excel sheets\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n      const exportData = userAttendance.map((row) => {\r\n        const logDate = new Date(row.LogDate);\r\n        const dateStr = logDate.toISOString().split(\"T\")[0];\r\n        const isSunday = logDate.getDay() === 0;\r\n        const userId = String(row.User_Mgt_Id);\r\n\r\n        // Attendance status priority:\r\n        // 1. Default Leave (DL)\r\n        // 2. Approved Leave (L)\r\n        // 3. Sunday (H)\r\n        // 4. Present/Absent based on punches\r\n        let attendanceStatus;\r\n        if (defaultLeaveDates.has(dateStr)) {\r\n          attendanceStatus = \"DL\";\r\n        } else if (leaveMap[userId]?.[dateStr]) {\r\n          attendanceStatus = \"L\";\r\n        } else if (isSunday) {\r\n          attendanceStatus = \"H\";\r\n        } else {\r\n          const punches = row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n          attendanceStatus = punches.some((p) => p && p !== \"--\") ? \"P\" : \"A\";\r\n        }\r\n\r\n        // Punch columns\r\n        const punchColumns = {};\r\n        const punches = row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n        for (let i = 0; i < maxPunches; i++) {\r\n          punchColumns[`Punch ${i + 1}`] = punches[i] || \"--\";\r\n        }\r\n\r\n        return {\r\n          Employee: username,\r\n          \"Log Date\": formatAttendanceDate(row.LogDate),\r\n          \"Attendance Status\": attendanceStatus,\r\n          ...punchColumns,\r\n        };\r\n      });\r\n\r\n      // Reorder columns\r\n      const columnsOrder = [\r\n        \"Employee\",\r\n        \"Log Date\",\r\n        \"Attendance Status\",\r\n        ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n      ];\r\n\r\n      const reorderedData = exportData.map((row) =>\r\n        columnsOrder.reduce((acc, col) => {\r\n          acc[col] = row[col] || \"--\";\r\n          return acc;\r\n        }, {})\r\n      );\r\n\r\n      XLSX.utils.book_append_sheet(\r\n        wb,\r\n        XLSX.utils.json_to_sheet(reorderedData),\r\n        username.slice(0, 31)\r\n      );\r\n    });\r\n\r\n    // 7. Export Excel file\r\n    const fileName = `Attendance_Report_${new Date().toLocaleString(\r\n      \"default\",\r\n      { month: \"long\" }\r\n    )}_${year}.xlsx`;\r\n    XLSX.writeFile(wb, fileName);\r\n\r\n  } catch (error) {\r\n    console.error(\"Error generating report:\", error);\r\n    toast.error(\"Failed to generate report\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  const fetchDropdownEmployees = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await fetchLink({\r\n        address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n      });\r\n      if (data.success) {\r\n        setDropdownEmployees(data.data);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      toast.error(\"Failed to fetch employees for dropdown\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e));\r\n  }, [\r\n    storage?.UserTypeId,\r\n    storage?.UserId,\r\n    storage?.Company_id,\r\n    storage?.Name,\r\n    reload,\r\n  ]);\r\n\r\n  const fetchAttendanceData = async (From, EmpId) => {\r\n    try {\r\n      const userTypeId = storage?.UserTypeId;\r\n      const [year, month] = From.split(\"-\");\r\n\r\n      const startDate = `${year}-${month}-01`;\r\n\r\n      const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n      const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n      const response = await fetchLink({\r\n        address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.success) {\r\n        setAttendanceData(response.data);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error fetching attendance data:\", e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const queryFilters = {\r\n      FromDate:\r\n        query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n          ? query.get(\"FromDate\")\r\n          : defaultFilters.Fromdate,\r\n      ToDate:\r\n        query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n          ? query.get(\"ToDate\")\r\n          : defaultFilters.Todate,\r\n    };\r\n    setFilters((pre) => ({\r\n      ...pre,\r\n      FromDate: queryFilters.FromDate,\r\n      ToDate: queryFilters.ToDate,\r\n    }));\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    const FromDate =\r\n      stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n        ? ISOString(stateDetails?.FromDate)\r\n        : null;\r\n    const ToDate =\r\n      stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n        ? ISOString(stateDetails?.ToDate)\r\n        : null;\r\n    if (FromDate && ToDate) {\r\n      updateQueryString({ FromDate, ToDate });\r\n      setFilters((pre) => ({\r\n        ...pre,\r\n        FromDate: ISOString(stateDetails.FromDate),\r\n        ToDate: stateDetails.ToDate,\r\n      }));\r\n      setReload((pre) => !pre);\r\n    }\r\n  }, [stateDetails]);\r\n\r\n  const updateQueryString = (newFilters) => {\r\n    const params = new URLSearchParams(newFilters);\r\n    navigate(`?${params.toString()}`, { replace: true });\r\n  };\r\n\r\n  const handleAddEmployeeClose = () => {\r\n    setAddEmployeeDialogOpen(false);\r\n  };\r\n\r\n  const data = () => setViewMode(\"employee\");\r\n  const dataDepartment = () => setViewMode(\"department\");\r\n  const defaultLeave = () => setViewMode(\"defaultLeave\");\r\n\r\n\r\n\r\n  const dashboard = () => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      FromDate: prev.FromDate || new Date().toISOString().split(\"T\")[0],\r\n      ToDate: prev.ToDate || new Date().toISOString().split(\"T\")[0],\r\n    }));\r\n    setViewMode(\"default\");\r\n  };\r\n\r\n  const ExpendableComponent = ({ row }) => {\r\n    const departments =\r\n      typeof row.DepartmentWiseCounts === \"string\"\r\n        ? JSON.parse(row.DepartmentWiseCounts)\r\n        : row.DepartmentWiseCounts;\r\n\r\n    return (\r\n      <table\r\n        style={{\r\n          width: \"100%\",\r\n          borderCollapse: \"collapse\",\r\n          marginTop: \"10px\",\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Department Name\r\n            </th>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Total Employees\r\n            </th>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Present Today\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {departments && departments.length > 0 ? (\r\n            departments.map((data, index) => (\r\n              <tr key={index} onClick={() => toggleExpand(data.Department)}>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  {data?.Department || \"-\"}\r\n                </td>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"1.25rem\",\r\n                        fontWeight: \"bold\",\r\n                        marginRight: \"100px\", // Increased from 15px to 100px\r\n                        minWidth: \"60px\", // Ensures consistent spacing\r\n                      }}\r\n                    >\r\n                      {data?.TotalEmployees || \"-\"}\r\n                    </span>\r\n                    <span style={{ fontSize: \"1rem\" }}>\r\n                      Male / Female: {data?.TotalMaleEmployees || \"0\"} /{\" \"}\r\n                      {data?.TotalFemaleEmployees || \"0\"}\r\n                    </span>\r\n                  </div>\r\n                </td>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"1.25rem\",\r\n                        fontWeight: \"bold\",\r\n                        marginRight: \"100px\", // Increased from 15px to 100px\r\n                        minWidth: \"60px\", // Ensures consistent spacing\r\n                      }}\r\n                    >\r\n                      {data?.TotalPresentToday || \"-\"}\r\n                    </span>\r\n                    <span style={{ fontSize: \"1rem\" }}>\r\n                      Male / Female: {data?.TotalMalePresentToday || \"0\"} /{\" \"}\r\n                      {data?.TotalFemalePresentToday || \"0\"}\r\n                    </span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\" style={{ padding: \"8px\" }}>\r\n                No Departments Available\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (loadingOn) loadingOn();\r\n\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e))\r\n      .finally(() => {\r\n        if (loadingOff) loadingOff();\r\n        setReload((prev) => !prev);\r\n      });\r\n  };\r\n\r\n  const handleRefreshData = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const ExpendableComponent1 = ({ row }) => {\r\n    let departments = [];\r\n    let monthlyAttendance = [];\r\n\r\n    try {\r\n      departments =\r\n        typeof row.Employees === \"string\"\r\n          ? JSON.parse(row.Employees)\r\n          : row.Employees || [];\r\n\r\n      monthlyAttendance =\r\n        typeof row.MonthlyAverageAttendance === \"string\"\r\n          ? JSON.parse(row.MonthlyAverageAttendance)\r\n          : row.MonthlyAverageAttendance || [];\r\n    } catch (err) {\r\n      departments = [];\r\n      monthlyAttendance = [];\r\n    }\r\n\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    const monthList = [\r\n      { name: \"January\", number: 1 },\r\n      { name: \"February\", number: 2 },\r\n      { name: \"March\", number: 3 },\r\n      { name: \"April\", number: 4 },\r\n      { name: \"May\", number: 5 },\r\n      { name: \"June\", number: 6 },\r\n      { name: \"July\", number: 7 },\r\n      { name: \"August\", number: 8 },\r\n      { name: \"September\", number: 9 },\r\n      { name: \"October\", number: 10 },\r\n      { name: \"November\", number: 11 },\r\n      { name: \"December\", number: 12 },\r\n    ];\r\n\r\n    const attendanceMap = new Map();\r\n    monthlyAttendance.forEach((item) => {\r\n      const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n      attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n    });\r\n\r\n    return (\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n        <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n          <table\r\n            style={{\r\n              width: \"20%\",\r\n              borderCollapse: \"collapse\",\r\n              border: \"1px solid #ccc\",\r\n              height:'10px'\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                <th\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    padding: \"2px\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                >\r\n                  Emp_Name\r\n                </th>\r\n                <th\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    padding: \"2px\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                >\r\n                  Sex\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {departments && departments.length > 0 ? (\r\n                departments.map((data, index) => (\r\n                  <tr key={index}>\r\n                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                      {data?.Emp_Name || \"-\"}\r\n                    </td>\r\n                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                      {data?.Sex || \"-\"}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n                    No Employees Available\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n\r\n          <div\r\n            style={{\r\n              flex: \"1\",\r\n              border: \"1px solid #ddd\",\r\n              borderRadius: \"5px\",\r\n              padding: \"10px\",\r\n              overflowX: \"auto\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                gap: \"10px\",\r\n              }}\r\n            >\r\n              {monthList.map((month) => {\r\n                const key = `${month.number}-${currentYear}`;\r\n                const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n                return (\r\n                  <div\r\n                    key={month.number}\r\n                    style={{\r\n                      minWidth: \"100px\",\r\n                      padding: \"8px\",\r\n                      backgroundColor: \"#f0f0f0\",\r\n                      color: \"black\",\r\n                      borderRadius: \"4px\",\r\n                      textAlign: \"center\",\r\n                      userSelect: \"none\",\r\n                    }}\r\n                  >\r\n                    <div style={{ fontWeight: \"bold\" }}>\r\n                      {month.name} {currentYear}\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        marginTop: \"6px\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#555\",\r\n                      }}\r\n                    >\r\n                      {uniqueEmployeeDays}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\nconst handleViewChange = (newView) => {\r\n  setViewMode(newView);\r\n};\r\n  useEffect(() => {\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e));\r\n  }, [\r\n    storage?.UserTypeId,\r\n    storage?.UserId,\r\n    storage?.Company_id,\r\n    storage?.Name,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `empAttendance/department?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          if (data.others && data.others.department) {\r\n            const deptOptions = data.others.department.map((dept) => ({\r\n              value: dept.value,\r\n              label: dept.label,\r\n            }));\r\n            setDepartments(deptOptions);\r\n          }\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching departments:\", e));\r\n  }, [storage?.Company_id, reload]);\r\n\r\n  const handleDepartmentChange = (selected) => {\r\n    setSelectedDepartment(selected);\r\n\r\n    setEmployees([]);\r\n    setSelectedEmployee(null);\r\n\r\n    if (selected) {\r\n      fetchLink({\r\n        address: `empAttendance/employeesByDepartment`,\r\n        method: \"POST\",\r\n        bodyData: { department: selected.value },\r\n      })\r\n        .then((data) => {\r\n          if (data.success && data.others?.employees) {\r\n            const employeeOptions = data.others.employees.map((emp) => ({\r\n              value: emp.id || emp.value || emp.Emp_Id,\r\n              label: emp.name || emp.label || emp.Emp_Name,\r\n            }));\r\n\r\n            setEmployees(employeeOptions);\r\n          } else {\r\n            setEmployees([]);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.error(\"Error fetching employees:\", e);\r\n          setEmployees([]);\r\n        });\r\n    } else {\r\n      setEmployees([]);\r\n    }\r\n  };\r\n\r\n  const departmentWiseCounts = React.useMemo(() => {\r\n    if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n    try {\r\n      const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n      return Array.isArray(parsed) ? parsed : [];\r\n    } catch (err) {\r\n      console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n      return [];\r\n    }\r\n  }, [saleOrders]);\r\n\r\n  const filteredData = React.useMemo(() => {\r\n    if (!departmentWiseCounts || !departmentWiseCounts.length) return [];\r\n\r\n    const filteredDepartments = departmentWiseCounts.filter((item) => {\r\n      return selectedDepartment\r\n        ? item.Department === selectedDepartment.label\r\n        : true;\r\n    });\r\n\r\n    return filteredDepartments.map((dept) => {\r\n      const employeeList = dept.employees || dept.Employees || [];\r\n\r\n      const filteredEmployees = selectedEmployee\r\n        ? employeeList.filter((emp) => {\r\n            if (!emp.Emp_Name) return false;\r\n            return (\r\n              emp.Emp_Name.trim().toLowerCase() ===\r\n              selectedEmployee.label.trim().toLowerCase()\r\n            );\r\n          })\r\n        : employeeList;\r\n\r\n      return {\r\n        ...dept,\r\n        Employees: filteredEmployees,\r\n      };\r\n    });\r\n  }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n  return (\r\n    <>\r\n      {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n        <>\r\n          {viewMode === \"default\" && (\r\n            <FilterableTable\r\n              title={\r\n                <div className=\"d-flex align-items-center\">\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    disabled\r\n                    onClick={() => dashboard()}\r\n                  >\r\n                    Dashboard\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => data()}\r\n                  >\r\n                    Employee\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => dataDepartment()}\r\n                  >\r\n                    Department\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                    Defined Leave\r\n                  </Button>\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <label>From Date</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      onChange={(e) =>\r\n                        setFilters({ ...filters, FromDate: e.target.value })\r\n                      }\r\n                      value={filters?.FromDate}\r\n                      className=\"cus-inpt w-auto p-1\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <label>To Date</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      onChange={(e) =>\r\n                        setFilters({ ...filters, ToDate: e.target.value })\r\n                      }\r\n                      value={filters?.ToDate}\r\n                      className=\"cus-inpt w-auto p-1\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"p-1\">\r\n                    <IconButton\r\n                      onClick={() => setReload(!reload)}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                    >\r\n                      <Search />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              }\r\n              dataArray={saleOrders}\r\n              EnableSerialNumber\r\n              columns={[\r\n                {\r\n                  isVisible: 1,\r\n                  ColumnHeader: \"Tot.Emp\",\r\n                  isCustomCell: true,\r\n                  Cell: ({ row }) => {\r\n                    const total = row?.TotalEmployees ?? 0;\r\n                    const male = row?.TotalMaleEmployees ?? 0;\r\n                    const female = row?.TotalFemaleEmployees ?? 0;\r\n                    return (\r\n                      <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                        <div>{total}</div>\r\n                        <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                          Male / Female: {male} / {female}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  isVisible: 1,\r\n                  ColumnHeader: \"Tot.Pre.Today\",\r\n                  isCustomCell: true,\r\n                  Cell: ({ row }) => {\r\n                    const total = row?.TotalPresentToday ?? 0;\r\n                    const male = row?.TotalMalePresentToday ?? 0;\r\n                    const female = row?.TotalFemalePresentToday ?? 0;\r\n                    return (\r\n                      <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                        <div>{total}</div>\r\n                        <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                          Male / Female: {male} / {female}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  },\r\n                },\r\n              ]}\r\n              isExpendable={true}\r\n              tableMaxHeight={550}\r\n              expandableComp={ExpendableComponent}\r\n            />\r\n          )}\r\n\r\n          {viewMode === \"employee\" && (\r\n            <>\r\n              <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                maxWidth=\"md\"\r\n                PaperProps={{\r\n                  style: { width: \"500px\", height: \"500px\" },\r\n                }}\r\n              >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                  <Autocomplete\r\n                    multiple\r\n                    options={[\r\n                      { UserId: \"all\", Name: \"ALL\" },\r\n                      ...dropdownEmployees,\r\n                    ]}\r\n                    getOptionLabel={(option) => option.Name}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option.UserId === value.UserId\r\n                    }\r\n                    onChange={(event, value) => {\r\n                      if (value.some((selected) => selected.UserId === \"all\")) {\r\n                        setSelectedEmployees(dropdownEmployees);\r\n                      } else {\r\n                        const uniqueValues = value.filter(\r\n                          (val, index, self) =>\r\n                            index ===\r\n                            self.findIndex((t) => t.UserId === val.UserId)\r\n                        );\r\n                        setSelectedEmployees(uniqueValues);\r\n                      }\r\n                    }}\r\n                    value={\r\n                      selectedEmployees.some((user) => user.UserId === \"all\")\r\n                        ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                        : selectedEmployees\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField {...params} placeholder=\"Employees\" />\r\n                    )}\r\n                  />\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => setSelectedEmployees([])}\r\n                  >\r\n                    Clear\r\n                  </Button>\r\n                  <span>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                  </span>\r\n                </DialogActions>\r\n              </Dialog>\r\n              <Card>\r\n                <CardContent sx={{ minHeight: \"50vh\" }}>\r\n                  <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                    <h6 className=\"fa-18\">\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => dashboard()}\r\n                      >\r\n                        Dashboard\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        disabled\r\n                        onClick={() => data()}\r\n                      >\r\n                        EMPLOYEE\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => dataDepartment()}\r\n                      >\r\n                        Department\r\n                      </Button>\r\n                       <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                        Defined Leave\r\n                  </Button>\r\n                    </h6>\r\n\r\n                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                      <Button\r\n                        onClick={handleDownload}\r\n                        variant=\"contained\"\r\n                        disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                      >\r\n                        Individual Report\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          handleOverallDownload(filter?.From, filter?.To);\r\n                        }}\r\n                      >\r\n                        Monthly Report\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          setAddEmployeeDialogOpen(true);\r\n                        }}\r\n                      >\r\n                        Cummulative Report\r\n                      </Button>\r\n                      <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"px-2 row mb-4\">\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Employee</label>\r\n                      <Select\r\n                        value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                        onChange={(e) =>\r\n                          setFilter({\r\n                            ...filter,\r\n                            EmpId: e.value,\r\n                            Name: e.label,\r\n                          })\r\n                        }\r\n                        options={[\r\n                          { value: 0, label: `ALL` },\r\n                          ...employees.map((obj) => ({\r\n                            value: obj?.UserId,\r\n                            label: obj?.Name,\r\n                          })),\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={dropdownPlaceholder}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>From</label>\r\n                      <input\r\n                        type=\"month\"\r\n                        className=\"cus-inpt\"\r\n                        value={filter?.From?.slice(0, 7)}\r\n                        onChange={handleFromChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                      <button\r\n                        className=\"btn btn-link ms-2 p-0 mt-3\"\r\n                        onClick={handleRefresh}\r\n                        title=\"Refresh Departments & Employees\"\r\n                      >\r\n                        <Refresh fontSize=\"medium\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <FilterableTable\r\n                    dataArray={attendanceData}\r\n                    columns={[\r\n                      {\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => row.username,\r\n                        ColumnHeader: \"Employee\",\r\n                        isVisible: 1,\r\n                        width: \"20%\",\r\n                        CellProps: {\r\n                          sx: {\r\n                            padding: \"10px\",\r\n                            textAlign: \"left\",\r\n                            fontWeight: \"bold\",\r\n                          },\r\n                        },\r\n                      },\r\n                      {\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) =>\r\n                          formatAttendanceDate(row.LogDate || \"--\"),\r\n                        ColumnHeader: \"Log Date\",\r\n                        isVisible: 1,\r\n                        width: \"20%\",\r\n                        CellProps: {\r\n                          sx: {\r\n                            padding: \"10px\",\r\n                            textAlign: \"center\",\r\n                            color: \"gray\",\r\n                          },\r\n                        },\r\n                      },\r\n                      ...punchColumns,\r\n                    ]}\r\n                    EnableSerialNumber\r\n                    CellSize=\"small\"\r\n                    disablePagination={false}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n            </>\r\n          )}\r\n\r\n          {viewMode === \"department\" && (\r\n            <FilterableTable\r\n              title={\r\n                <div className=\"d-flex flex-column\">\r\n                  <div className=\"d-flex align-items-center mb-3\">\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      onClick={() => dashboard()}\r\n                    >\r\n                      Dashboard\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      onClick={() => data()}\r\n                    >\r\n                      Employee\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      disabled\r\n                      onClick={() => dataDepartment()}\r\n                    >\r\n                      Department\r\n                    </Button>\r\n                     <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                      Defined Leave\r\n                  </Button>\r\n                  </div>\r\n\r\n                  <div className=\"row align-items-end\">\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Department</label>\r\n                      <Select\r\n                        options={departments}\r\n                        isSearchable\r\n                        placeholder=\"ALL\"\r\n                        value={selectedDepartment}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleDepartmentChange}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Employee</label>\r\n                      <Select\r\n                        options={employees}\r\n                        isSearchable\r\n                        placeholder=\"ALL\"\r\n                        value={selectedEmployee}\r\n                        styles={customSelectStyles}\r\n                        onChange={setSelectedEmployee}\r\n                        isDisabled={!selectedDepartment}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                      <button\r\n                        className=\"btn btn-link ms-2 p-0 mb-2\"\r\n                        onClick={handleRefreshData}\r\n                        style={{ minWidth: \"24px\" }}\r\n                        title=\"Refresh Departments & Employees\"\r\n                      >\r\n                        <Refresh fontSize=\"small\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              }\r\n              dataArray={filteredData}\r\n              EnableSerialNumber\r\n              columns={[\r\n                createCol(\"Department\", \"string\", \"Department\"),\r\n                createCol(\r\n                  \"TotalMaleEmployees\",\r\n                  \"number\",\r\n                  \"Total Male Employees\"\r\n                ),\r\n                createCol(\r\n                  \"TotalFemaleEmployees\",\r\n                  \"number\",\r\n                  \"Total Female Employees\"\r\n                ),\r\n                createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n                createCol(\r\n                  \"TotalMalePresentToday\",\r\n                  \"number\",\r\n                  \"Total Male Present Today\"\r\n                ),\r\n                createCol(\r\n                  \"TotalFemalePresentToday\",\r\n                  \"number\",\r\n                  \"Total Female Present Today\"\r\n                ),\r\n                createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n              ]}\r\n              isExpendable={true}\r\n              tableMaxHeight={550}\r\n              expandableComp={ExpendableComponent1}\r\n            />\r\n          )}\r\n\r\n         {viewMode === \"defaultLeave\" && (\r\n  <DefaultLeave\r\n    currentView={viewMode}\r\n    onViewChange={handleViewChange}\r\n    departments={departments}\r\n    selectedDepartment={selectedDepartment}\r\n    handleDepartmentChange={handleDepartmentChange}\r\n    employees={employees}\r\n    selectedEmployee={selectedEmployee}\r\n    setSelectedEmployee={setSelectedEmployee}\r\n    handleRefreshData={handleRefreshData}\r\n  />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Dialog\r\n            open={addEmployeeDialogOpen}\r\n            maxWidth=\"md\"\r\n            PaperProps={{\r\n              style: { width: \"500px\", height: \"500px\" },\r\n            }}\r\n          >\r\n            <DialogTitle>Add Employee</DialogTitle>\r\n            <DialogContent>\r\n              <Autocomplete\r\n                multiple\r\n                options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n                getOptionLabel={(option) => option.Name}\r\n                isOptionEqualToValue={(option, value) =>\r\n                  option.UserId === value.UserId\r\n                }\r\n                value={\r\n                  selectedEmployees.some((user) => user.UserId === \"all\")\r\n                    ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                    : selectedEmployees\r\n                }\r\n                onChange={(event, value) => {\r\n                  if (value.some((selected) => selected.UserId === \"all\")) {\r\n                    setSelectedEmployees(dropdownEmployees);\r\n                  } else {\r\n                    const uniqueValues = value.filter(\r\n                      (val, index, self) =>\r\n                        index === self.findIndex((t) => t.UserId === val.UserId)\r\n                    );\r\n                    setSelectedEmployees(uniqueValues);\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} placeholder=\"Employees\" />\r\n                )}\r\n              />\r\n            </DialogContent>\r\n            <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setSelectedEmployees([])}\r\n              >\r\n                Clear\r\n              </Button>\r\n              <span>\r\n                <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                <Button onClick={handleOverallWithPunch}>Download</Button>\r\n              </span>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Card>\r\n            <CardContent sx={{ minHeight: \"50vh\" }}>\r\n              <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                <h6 className=\"fa-18\">\r\n                  <Button size=\"small\" variant=\"outlined\" className=\"mx-2\">\r\n                    EMPLOYEE\r\n                  </Button>\r\n                </h6>\r\n\r\n                {(userTypeId === 1 || userTypeId === 0) && (\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <Button\r\n                      onClick={handleDownload}\r\n                      variant=\"contained\"\r\n                      disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                    >\r\n                      Individual Report\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() =>\r\n                        handleOverallDownload(filter?.From, filter?.To)\r\n                      }\r\n                    >\r\n                      Monthly Report\r\n                    </Button>\r\n                    <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n                      Cumulative Monthly Report\r\n                    </Button>\r\n                    <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"px-2 row mb-4\">\r\n                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                  <label>Employee</label>\r\n                  <Select\r\n                    value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                    onChange={(e) =>\r\n                      setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n                    }\r\n                    options={[\r\n                      { value: 0, label: \"ALL\" },\r\n                      ...employees.map((obj) => ({\r\n                        value: obj.UserId,\r\n                        label: obj.Name,\r\n                      })),\r\n                    ]}\r\n                    styles={customSelectStyles}\r\n                    isSearchable\r\n                    placeholder={dropdownPlaceholder}\r\n                    isDisabled={isDropdownDisabled}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                  <label>From</label>\r\n                  <input\r\n                    type=\"month\"\r\n                    className=\"cus-inpt\"\r\n                    value={filter?.From?.slice(0, 7)}\r\n                    onChange={handleFromChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <FilterableTable\r\n                dataArray={attendanceData}\r\n                columns={[\r\n                  {\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => row.username,\r\n                    ColumnHeader: \"Employee\",\r\n                    isVisible: 1,\r\n                    width: \"20%\",\r\n                    CellProps: {\r\n                      sx: {\r\n                        padding: \"10px\",\r\n                        textAlign: \"left\",\r\n                        fontWeight: \"bold\",\r\n                      },\r\n                    },\r\n                  },\r\n                  {\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) =>\r\n                      formatAttendanceDate(row.LogDate || \"--\"),\r\n                    ColumnHeader: \"Log Date\",\r\n                    isVisible: 1,\r\n                    width: \"20%\",\r\n                    CellProps: {\r\n                      sx: {\r\n                        padding: \"10px\",\r\n                        textAlign: \"center\",\r\n                        color: \"gray\",\r\n                      },\r\n                    },\r\n                  },\r\n                  ...punchColumns,\r\n                ]}\r\n                EnableSerialNumber\r\n                CellSize=\"small\"\r\n                disablePagination={false}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AttendanceNewScreen;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\nvar _utils = require(\"@mui/material/utils\");","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import createChainedFunction from '@mui/utils/createChainedFunction';\nexport default createChainedFunction;","import deprecatedPropType from '@mui/utils/deprecatedPropType';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n    return null;\n  };\n}","import requirePropFactory from '@mui/utils/requirePropFactory';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n    return null;\n  };\n  return requireProp;\n}","import setRef from '@mui/utils/setRef';\nexport default setRef;","import unsupportedProp from '@mui/utils/unsupportedProp';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n  const propFullNameSafe = propFullName || propName;\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n  return null;\n}","'use client';\n\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/ClassNameGenerator';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\n// TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    }\n    ClassNameGenerator.configure(generator);\n  }\n};"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","currentView","onViewChange","attendanceData","setAttendanceData","monthlyLeaves","setMonthlyLeaves","setFilter","FromDate","Date","toISOString","split","Description","display","Created_By","description","setDesctiption","addDialog","setAddDialog","selectedDate","setSelectedDate","calendarViewDate","setCalendarViewDate","editMode","setEditMode","editIndex","setEditIndex","formatDate","dateStr","d","getDate","padStart","getMonth","getFullYear","localData","localStorage","getItem","parseData","JSON","parse","fetchLeaves","async","res","fetchLink","success","currentMonth","currentYear","filtered","item","itemDate","useEffect","closeDialg","CardContent","minHeight","view","Button","charAt","toUpperCase","onChange","overflowY","FullCalendar","plugins","timeGridPlugin","listPlugin","dayGridPlugin","interactionPlugin","initialView","initialDate","events","start","objectData","headerToolbar","left","center","right","showNonCurrentDates","editable","selectable","selectMirror","height","eventClick","eventInfo","leave","extendedProps","date","findIndex","dateClick","info","datesSet","viewDate","Dialog","fullWidth","maxWidth","DialogTitle","Close","DialogContent","dateString","formatForInputDate","DialogActions","currentRow","SNo","User_Id","UserId","Modified_By","updatedList","bodyData","Id","method","toast","message","onUpdate","then","catch","onsubmit","_filter$From","_filter$From2","loadingOn","loadingOff","storage","navigate","useNavigate","location","useLocation","stateDetails","addEmployeeDialogOpen","setAddEmployeeDialogOpen","getCurrentMonthYear","toString","initialValue","From","To","EmpId","Name","query","URLSearchParams","search","defaultFilters","saleOrders","setSaleOrders","viewMode","setViewMode","expandedDepartment","setExpandedDepartment","dropdownEmployees","setDropdownEmployees","reload","setReload","loading","setLoading","isDropdownDisabled","setIsDropdownDisabled","employees","setEmployees","selectedEmployee","setSelectedEmployee","userTypeId","UserTypeId","contextObj","useContext","MyContext","dropdownPlaceholder","setDropdownPlaceholder","debouncedFilter","setDebouncedFilter","timer","setTimeout","clearTimeout","fetchAttendanceData","fetchDropdownEmployees","getDaysInMonth","monthYear","year","month","filters","setFilters","ToDate","Cancel_status","departments","setDepartments","selectedDepartment","setSelectedDepartment","selectedEmployees","setSelectedEmployees","Add_Rights","today","fromDate","toDate","finally","handleFromChange","selectedMonth","startDate","dayCount","handleSummaryDownload","endDate","response","overallData","getDateRange","to","allDates","end","sundayCount","push","getDay","setDate","days","totalDays","dateRange","summaryData","punchDetails","isArray","AttendanceDetails","totalPresent","companyHoliday","workingDays","dayRecord","p","startsWith","AttendanceStatus","approvedLeave","ApprovedLeave","pendingLeave","PendingLeave","totalAbsent","TotalPresent","CompanyHoliday","TotalAbsent","NumberOfSundays","ws","sheet_add_aoa","origin","wb","handleDownload","exportData","trim","attendanceStatus","punchColumns","Employee","username","formatAttendanceDate","LogDate","columnsOrder","reorderedData","reduce","acc","col","_","CellProps","justifyContent","alignItems","punch","rawTime","formattedTime","timeString","hourStr","minuteStr","hour","minute","ampm","formatToAmPm","Chip","label","margin","logDateTime","handleOverallDownload","attendanceRes","leaveRes","defaultLeaveRes","Promise","all","Error","leaveMap","defaultLeaveDates","_leave$Status","Status","userId","current","leaveEnd","defaultLeave","add","dates","emp","attendanceDetails","jsonString","tryParseJSON","dailyStatus","presentCount","attendanceLookup","record","status","hasPunch","Punch1","_leaveMap$userId","dayKey","User_Mgt_Id","isSunday","attendanceRecord","has","EmployeeName","handleOverallWithPunch","_attendanceData$","maxPunches","firstLogDate","dateObj","defaultLeaveResponse","defaultLeaveData","leaveData","_leave$Status2","parseDate","parts","leaveStart","currentDate","groupedData","some","user","keys","userAttendance","_leaveMap$userId2","_row$AttendanceDetail2","logDate","_row$AttendanceDetail","punches","fileName","toLocaleString","Company_id","companyId","Authorization","filteredEmployees","prev","employee","queryFilters","get","isValidDate","Fromdate","Todate","ISOString","updateQueryString","newFilters","params","handleAddEmployeeClose","dataDepartment","dashboard","handleRefreshData","window","others","department","deptOptions","dept","handleDepartmentChange","selected","_data$others","employeeOptions","Emp_Id","Emp_Name","departmentWiseCounts","React","_saleOrders$","DepartmentWiseCounts","parsed","err","filteredData","Department","employeeList","Employees","Search","_ref6","_row$TotalEmployees","_row$TotalMaleEmploye","_row$TotalFemaleEmplo","total","TotalEmployees","male","TotalMaleEmployees","female","TotalFemaleEmployees","_ref7","_row$TotalPresentToda","_row$TotalMalePresent","_row$TotalFemalePrese","TotalPresentToday","TotalMalePresentToday","TotalFemalePresentToday","borderCollapse","marginTop","border","toggleExpand","marginRight","minWidth","PaperProps","Autocomplete","multiple","options","getOptionLabel","isOptionEqualToValue","uniqueValues","self","t","renderInput","TextField","placeholder","Select","obj","styles","isSearchable","handleRefresh","Refresh","_ref8","_ref9","isDisabled","_ref5","monthlyAttendance","MonthlyAverageAttendance","attendanceMap","Map","_item$UniqueEmployeeD","MonthNumber","YearNumber","set","UniqueEmployeeDays","flexDirection","gap","Sex","flex","borderRadius","overflowX","whiteSpace","number","_attendanceMap$get","uniqueEmployeeDays","userSelect","DefaultLeave","newView","_ref10","_ref11","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","createSvgIcon","defineProperty","enumerable","_utils","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","validator","reason","componentNameInError","Component","propName","componentName","propFullName","unstable_ClassNameGenerator","configure","generator","ClassNameGenerator"],"sourceRoot":""}
{"version":3,"file":"static/js/6616.87863746.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Sales/TripMaster/tableColumns.js","Pages/Sales/TripMaster/DeliveryTripSheetAdd.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {string} [tdClass] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center', tdClass = '') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        tdClass,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass\r\n                                ? String(' ' + column?.tdClass({ row, Field_Name, index: tdIndex }) + ' ')\r\n                                : ''\r\n                        );\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`\r\n                                        border-end` \r\n                                        + horizondalalignClass \r\n                                        + verticalAlignClass \r\n                                        + tdClass(row, column.Field_Name, index)\r\n                                    }\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`\r\n                                    border-end` \r\n                                    + horizondalalignClass \r\n                                    + verticalAlignClass \r\n                                    + tdClass(row, column.Field_Name, index)\r\n                                }\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 })\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { ISOString } from \"../../../Components/functions\"\r\n\r\nexport const tripMasterDetails = {\r\n    Trip_Id: '',\r\n    Challan_No: '',\r\n    Branch_Id: '',\r\n    Trip_Date: ISOString(),\r\n    Vehicle_No: '',\r\n    StartTime: '',\r\n    EndTime: '',\r\n    Trip_No: '',\r\n    Trip_ST_KM: '',\r\n    Trip_EN_KM: '',\r\n    Trip_Tot_Kms: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n    DO_Date:ISOString(),\r\n    Delivery_Person_Id:''\r\n}\r\n\r\nexport const tripDetailsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    Batch_No: '',\r\n    Journal_no: '',\r\n    From_Location: '',\r\n    To_Location: '',\r\n    S_No: '',\r\n    Reason: '',\r\n    Product_Id: '',\r\n    HSN_Code: '',\r\n    QTY: '',\r\n    KGS: '',\r\n    GST_Inclusive: '',\r\n    IS_IGST: '',\r\n    Gst_Rate: '',\r\n    Gst_P: '',\r\n    Cgst_P: '',\r\n    Sgst_P: '',\r\n    Igst_P: '',\r\n    Taxable_Value: '',\r\n    Round_off: '',\r\n    Total_Value: '',\r\n    Trip_From: '',\r\n    Party_And_Branch_Id: '',\r\n    Transporter_Id: '',\r\n    Dispatch_Date: '',\r\n    Delivery_Date: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n}\r\n\r\nexport const tripStaffsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    Involved_Emp_Id: '',\r\n    Cost_Center_Type_Id: '',\r\n    Emp_Name: '',\r\n}","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Addition, checkIsNumber, combineDateTime, isEqualNumber, ISOString, isValidDate, isValidObject, Subraction } from \"../../../Components/functions\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Close, Delete, Search } from \"@mui/icons-material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { tripMasterDetails, tripStaffsColumns } from './tableColumns'\r\nimport { toast } from 'react-toastify'\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TripSheetGodownSearch = ({ loadingOn, loadingOff }) => {\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n\r\n    const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Retailer_Id: '',\r\n        RetailerGet: 'ALL',\r\n        Created_by: '',\r\n        CreatedByGet: 'ALL',\r\n        Sales_Person_Id: '',\r\n        SalsePersonGet: 'ALL',\r\n        Cancel_status: 0,\r\n        Route_Id: '',\r\n        RoutesGet: 'ALL',\r\n        Area_Id: '',\r\n        AreaGet: 'ALL',\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false,\r\n        addItemDialog: false,\r\n    });\r\n\r\n    const [transactionData, setTransactionData] = useState([]);\r\n\r\n    // const [products, setProducts] = useState([]);\r\n    const [costCenter, setCostCenter] = useState([]);\r\n    const [costCenterCategory, setCostCenterCategory] = useState([])\r\n    const [branch, setBranch] = useState([]);\r\n    const [tripSheetInfo, setTripSheetInfo] = useState(tripMasterDetails);\r\n    const [staffInvolvedList, setStaffInvolvedList] = useState([]);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const [\r\n                    branchResponse,\r\n                    staffResponse,\r\n                    staffCategory\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` })\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n\r\n\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n\r\n                setBranch(branchData)\r\n                setCostCenter(staffData);\r\n                setCostCenterCategory(staffCategoryData)\r\n\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSalePerson(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const extractHHMM = (timeString) => {\r\n            const date = new Date(timeString);\r\n            const hours = date.getHours();\r\n            const minutes = date.getMinutes();\r\n\r\n            return `${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}`;\r\n        };\r\n\r\n        console.log(\"Data\", stateDetails)\r\n        const productsArray = stateDetails?.Product_Array;\r\n        const employeesArray = stateDetails?.Employees_Involved;\r\n\r\n        if (\r\n            isValidObject(stateDetails)\r\n            && Array.isArray(productsArray)\r\n            && Array.isArray(employeesArray)\r\n        ) {\r\n            setTripSheetInfo((prev) => ({\r\n                ...prev,\r\n                ...Object.fromEntries(\r\n                    Object.entries(tripMasterDetails).map(([key, value]) => {\r\n                        if (key === 'Trip_Date') return [key, stateDetails[key] ? ISOString(stateDetails[key]) : value];\r\n                        if (key === 'DO_Date') return [key, stateDetails[key] ? ISOString(stateDetails[key]) : value];\r\n                        if (key === 'Branch_Id') return [key, stateDetails[key] ?? value];\r\n                        if (key === 'StartTime' || key === 'EndTime') return [key, stateDetails[key] ? extractHHMM(stateDetails[key]) : value];\r\n                        return [key, stateDetails[key] ?? value];\r\n                    })\r\n                ),\r\n                Product_Array: productsArray,\r\n            }));\r\n\r\n\r\n            setSelectedItems(productsArray)\r\n\r\n            setStaffInvolvedList(\r\n                employeesArray.map(staffData => Object.fromEntries(\r\n                    Object.entries(tripStaffsColumns).map(([key, value]) => {\r\n                        return [key, staffData[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n\r\n            const deliveryStaff = employeesArray.find(staff => Number(staff.Cost_Center_Type_Id) === 9);\r\n\r\n            if (deliveryStaff) {\r\n\r\n                setDeliveryPerson({\r\n                    UserId: deliveryStaff.Involved_Emp_Id,\r\n                    Name: deliveryStaff.Emp_Name,\r\n                });\r\n            } else {\r\n\r\n                setDeliveryPerson(null);\r\n            }\r\n        }\r\n    }, [stateDetails]);\r\n\r\n\r\n\r\n\r\n\r\n    const searchTransaction = (e) => {\r\n        e.preventDefault();\r\n        const { Fromdate, Todate, Sales_Person_Id } = filters;\r\n\r\n        if (Fromdate && Todate) {\r\n            if (loadingOn) loadingOn();\r\n            setTransactionData([]);\r\n            fetchLink({\r\n                address: `sales/saleDelivery?Fromdate=${Fromdate}&Todate=${Todate}&Sales_Person_Id=${Sales_Person_Id}`\r\n            }).then(data => {\r\n                if (data.success) setTransactionData(data.data);\r\n            }).catch(e => console.log(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeItems = (itemDetail, deleteOption) => {\r\n        if (deleteOption) {\r\n            setSelectedItems(prev => {\r\n                return prev.map(item => ({\r\n                    ...item,\r\n                    Products_List: item.Products_List.filter(product => product.Do_Id !== itemDetail.Delivery_Order_Id)\r\n                })).filter(item => item.Products_List.length > 0);\r\n            });\r\n        } else {\r\n\r\n            setSelectedItems(prev => {\r\n                const preItems = prev.filter(item =>\r\n                    !isEqualNumber(item.Do_Id, itemDetail.Delivery_Order_Id)\r\n                );\r\n\r\n                const currentOrders = transactionData.filter(item =>\r\n                    isEqualNumber(item.So_Id, itemDetail.So_Id)\r\n                );\r\n\r\n                return preItems.concat(currentOrders);\r\n            });\r\n        }\r\n    };\r\n    const resetForm = () => {\r\n        setSelectedItems([]);\r\n        setStaffInvolvedList([]);\r\n        setTripSheetInfo(tripMasterDetails);\r\n        setTransactionData([]);\r\n    }\r\n\r\n    const saveTripSheet = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderTrip`,\r\n            method: checkIsNumber(tripSheetInfo?.Trip_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                ...tripSheetInfo,\r\n                StartTime: (\r\n                    tripSheetInfo.StartTime && tripSheetInfo.Trip_Date\r\n                ) ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.StartTime) : '',\r\n                EndTime: (\r\n                    tripSheetInfo.EndTime && tripSheetInfo.Trip_Date\r\n                ) ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.EndTime) : '',\r\n                Product_Array: selectedItems,\r\n                Delivery_Person_Id: deliveryPerson?.UserId,\r\n                EmployeesInvolved: staffInvolvedList.filter(staff => checkIsNumber(staff.Involved_Emp_Id) && checkIsNumber(staff.Cost_Center_Type_Id))\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                resetForm();\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(\r\n            e => console.log(e)\r\n        ).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                                {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    const handleCostCenterChange = (e, index) => {\r\n        setStaffInvolvedList((prev) => {\r\n            const updatedList = prev.map((item, ind) => {\r\n                if (isEqualNumber(ind, index)) {\r\n                    const updatedItem = { ...item, Cost_Center_Type_Id: e.target.value };\r\n\r\n\r\n                    if (Number(updatedItem.Cost_Center_Type_Id) === 9) {\r\n\r\n                        setDeliveryPerson({\r\n                            UserId: updatedItem.Involved_Emp_Id,\r\n                            Name: updatedItem.Emp_Name,\r\n                        });\r\n                    } else if (deliveryPerson?.UserId === updatedItem.Involved_Emp_Id) {\r\n\r\n                        setDeliveryPerson(null);\r\n                    }\r\n\r\n                    return updatedItem;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            return updatedList;\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card>\r\n\r\n                <div className=\"d-flex flex-wrap align-items-center border-bottom p-2\">\r\n                    <h5 className='flex-grow-1 m-0 ps-2'>Trip Sheet Creation</h5>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={selectedItems.length === 0 || !isValidDate(tripSheetInfo.Trip_Date)}\r\n                    >Save</Button>\r\n                </div>\r\n\r\n                <CardContent style={{ minHeight: 500 }}>\r\n\r\n                    <div className=\"row \">\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                                    <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        type=\"button\"\r\n                                        onClick={() => setStaffInvolvedList([...staffInvolvedList, { ...tripStaffsColumns }])}\r\n                                    >Add</Button>\r\n                                </div>\r\n                                <table className=\"table table-bordered\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"fa-13\">Sno</th>\r\n                                            <th className=\"fa-13\">Staff Name</th>\r\n                                            <th className=\"fa-13\">Category</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {staffInvolvedList.map((row, index) => (\r\n                                            <tr key={index}>\r\n                                                <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                                                <td className='fa-13 w-100 p-0'>\r\n                                                    <Select\r\n                                                        value={{\r\n                                                            value: row?.Involved_Emp_Id,\r\n                                                            label: row?.Emp_Name\r\n                                                        }}\r\n                                                        onChange={e => {\r\n                                                            setStaffInvolvedList((prev) => {\r\n                                                                const updatedList = prev.map((item, ind) => {\r\n                                                                    if (isEqualNumber(ind, index)) {\r\n                                                                        const staff = costCenter.find(c => isEqualNumber(c.Cost_Center_Id, e.value));\r\n                                                                        const updatedItem = {\r\n                                                                            ...item,\r\n                                                                            Cost_Center_Type_Id: item.Cost_Center_Type_Id || staff.User_Type || 0,\r\n                                                                            Involved_Emp_Id: e.value,\r\n                                                                            Emp_Name: staff.Cost_Center_Name ?? ''\r\n                                                                        };\r\n\r\n\r\n                                                                        if (Number(updatedItem.Cost_Center_Type_Id) === 9) {\r\n                                                                            setDeliveryPerson({\r\n                                                                                UserId: updatedItem.Involved_Emp_Id,\r\n                                                                                Name: updatedItem.Emp_Name,\r\n                                                                            });\r\n                                                                        } else if (deliveryPerson?.UserId === updatedItem.Involved_Emp_Id) {\r\n\r\n                                                                            setDeliveryPerson(null);\r\n                                                                        }\r\n\r\n                                                                        return updatedItem;\r\n                                                                    }\r\n                                                                    return item;\r\n                                                                });\r\n\r\n                                                                return updatedList;\r\n                                                            });\r\n                                                        }}\r\n                                                        options={costCenter.filter(fil => (\r\n                                                            staffInvolvedList.findIndex(st => isEqualNumber(st.Cost_Center_Type_Id, fil.Cost_Center_Id)) === -1\r\n                                                        )).map(st => ({\r\n                                                            value: st.Cost_Center_Id,\r\n                                                            label: st.Cost_Center_Name\r\n                                                        }))}\r\n                                                        styles={customSelectStyles}\r\n                                                        isSearchable\r\n                                                        placeholder=\"Select Staff\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '110px' }}>\r\n                                                    <select\r\n                                                        value={row?.Cost_Center_Type_Id}\r\n                                                        onChange={e => handleCostCenterChange(e, index)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    >\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {costCenterCategory.map((st, sti) => (\r\n                                                            <option value={st?.Cost_Category_Id} key={sti}>\r\n                                                                {st?.Cost_Category}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Stock Journal Details */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <div className=\"row\">\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>\r\n                                            Branch <span style={{ color: \"red\" }}>*</span>\r\n                                        </label>\r\n                                        <select\r\n                                            value={tripSheetInfo.Branch_Id}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Branch_Id: e.target.value })}\r\n                                            placeholder={\"Select Branch\"}\r\n                                            className=\"cus-inpt mb-2 p-2\"\r\n                                        >\r\n                                            <option value=\"\" disabled>Select Branch</option>\r\n                                            {branch.map((br, bi) => (\r\n                                                <option key={bi} value={br.BranchId}>{br.BranchName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip_Date</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_Date}\r\n                                            type=\"date\"\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Trip_Date: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Delivery Date <span style={{ color: \"red\" }}>*</span></label>\r\n                                        <input\r\n                                            value={tripSheetInfo?.DO_Date || \"\"}\r\n                                            type=\"date\"\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Do_Date: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Vehicle No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Vehicle_No}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Vehicle_No: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-6 col-sm-12 p-2\">\r\n                                        <label>Delivery Person <span style={{ color: \"red\" }}>*</span></label>\r\n                                        <input\r\n                                            id=\"delivery-person\"\r\n                                            name=\"deliveryPerson\"\r\n                                            type=\"text\"\r\n                                            value={deliveryPerson ? deliveryPerson.Name : ''}\r\n                                            readOnly\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Delivery Person\"\r\n                                        />\r\n                                    </div>\r\n\r\n\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_No}\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Trip_No: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">Time</th>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">Distance</th>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <th className=\"fa-13 text-center\">Start </th>\r\n                                                <th className=\"fa-13 text-center\">End</th>\r\n                                                <th className=\"fa-13 text-center\">Start (Km)</th>\r\n                                                <th className=\"fa-13 text-center\">End (Km)</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n\r\n                                            <tr>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type='time'\r\n                                                        onChange={e => setTripSheetInfo(pre => ({ ...pre, StartTime: e.target.value }))}\r\n                                                        value={tripSheetInfo?.StartTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type='time'\r\n                                                        onChange={e => setTripSheetInfo(pre => ({ ...pre, EndTime: e.target.value }))}\r\n                                                        value={tripSheetInfo?.EndTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={e => setTripSheetInfo(pre => ({\r\n                                                            ...pre,\r\n                                                            Trip_ST_KM: e.target.value,\r\n                                                            Trip_Tot_Kms: Subraction(pre.Trip_EN_KM ?? 0, e.target.value ?? 0)\r\n                                                        }))}\r\n                                                        value={tripSheetInfo?.Trip_ST_KM}\r\n                                                        min={0}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={e => setTripSheetInfo(pre => ({\r\n                                                            ...pre,\r\n                                                            Trip_EN_KM: e.target.value,\r\n                                                            Trip_Tot_Kms: Subraction(e.target.value ?? 0, pre.Trip_ST_KM ?? 0)\r\n                                                        }))}\r\n                                                        value={tripSheetInfo?.Trip_EN_KM}\r\n                                                        min={Addition(tripSheetInfo?.Trip_ST_KM, 1)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <FilterableTable\r\n                        dataArray={selectedItems?.map(item => item?.Products_List).flat()}\r\n                        expandableComp={ExpendableComponent}\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button onClick={() => setFilters(prev => ({ ...prev, addItemDialog: true }))}>Add</Button>\r\n                                <Button onClick={() => setSelectedItems([])} className=\"me-2\">Clear</Button>\r\n                            </>\r\n                        }\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        // title={`Selected Items: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.length, 0) ?? 0} QTY: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.reduce((sum, product) => sum + (product.Total_Qty ?? 0), 0), 0) ?? 0}`}\r\n                        maxHeightOption\r\n                        columns={[\r\n\r\n                            createCol('Product_Name', 'string', 'Product_Name'),\r\n                            // createCol('Sales_Order_Id', 'string', 'So_Id'),\r\n                            // createCol('So_Date', 'date', 'So_Date'),\r\n                            createCol('Taxable_Rate', 'number', 'Rate'),\r\n                            createCol('Bill_Qty', 'number', 'Bill_Qty'),\r\n                            createCol('Taxable_Amount', 'string', 'Before_Tax_Amount'),\r\n                            createCol('Amount', 'number', 'Total_Invoice_value'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: '#',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <IconButton\r\n                                        variant=\"contained\"\r\n                                        color=\"error\"\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            const filteredItems = selectedItems?.map(item => {\r\n                                                return {\r\n                                                    ...item,\r\n                                                    Products_List: item.Products_List.filter(o => o[(row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\")] !== row[(row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\")])\r\n                                                };\r\n                                            }).filter(item => item.Products_List.length > 0);\r\n\r\n                                            setSelectedItems(filteredItems);\r\n                                        }}\r\n\r\n                                    >\r\n                                        <Delete className=\"fa-20\" />\r\n                                    </IconButton>\r\n                                ),\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n\r\n                </CardContent>\r\n                <div className=\"border-top p-2 text-end\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={selectedItems.length === 0 || !isValidDate(tripSheetInfo.Trip_Date)}\r\n                    >Save</Button>\r\n                </div>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={filters.addItemDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}\r\n                maxWidth='lg' fullWidth fullScreen\r\n            >\r\n                <form onSubmit={searchTransaction}>\r\n                    <DialogTitle\r\n                        className=\"d-flex align-items-center\"\r\n                    >\r\n                        <span className=\"flex-grow-1\">Add Data</span>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            type=\"submit\" className=\"me-2\"\r\n\r\n                            startIcon={<Search />}\r\n                        >Search</Button>\r\n                        <IconButton\r\n                            size=\"small\" color=\"error\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}\r\n                        ><Close /></IconButton>\r\n                    </DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-bordered\">\r\n                                <tbody>\r\n\r\n                                    <tr>\r\n                                        {/* <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                Date\r\n            </td> */}\r\n                                    </tr>\r\n\r\n\r\n                                    <tr>\r\n\r\n                                        <td className=\"fa-13 text-center\">\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                From Date\r\n                                            </td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Fromdate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                required\r\n                                                max={filters.Todate}\r\n                                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                                style={{ width: \"100%\" }}\r\n                                            />\r\n                                        </td>\r\n\r\n                                        <td className=\"fa-13 text-center\">\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                To Date\r\n                                            </td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Todate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                min={filters.Fromdate}\r\n                                                required\r\n                                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                                style={{ width: \"100%\" }}\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                Sales_Person\r\n                                            </td>\r\n                                            <select\r\n                                                value={filters?.Sales_Person_Id || \"\"}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                onChange={(e) => {\r\n                                                    const selected = salesPerson.find(sp => sp.UserId === Number(e.target.value));\r\n                                                    setFilters({\r\n                                                        ...filters,\r\n                                                        Sales_Person_Id: selected?.UserId || '',\r\n                                                        SalsePersonGet: selected?.Name || ''\r\n                                                    });\r\n                                                }}\r\n                                                style={{ width: \"100%\" }}\r\n                                            >\r\n                                                <option value=\"\">ALL</option>\r\n                                                {salesPerson.map(obj => (\r\n                                                    <option key={obj.UserId} value={obj.UserId}>\r\n                                                        {obj.Name}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n\r\n                                        </td>\r\n                                    </tr>\r\n\r\n\r\n\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n\r\n                        <FilterableTable\r\n                            dataArray={transactionData}\r\n                            disablePagination\r\n                            maxHeightOption\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: '#',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        // Check if this row is selected\r\n                                        const isChecked = selectedItems.some(o =>\r\n                                            isEqualNumber(o.So_Id, row.So_Id)\r\n                                        );\r\n\r\n                                        return (\r\n                                            <div>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none pointer\"\r\n                                                    style={{ padding: '0.7em' }}\r\n                                                    type=\"checkbox\"\r\n                                                    checked={isChecked}\r\n                                                    onChange={() => {\r\n\r\n                                                        if (isChecked) {\r\n                                                            changeItems(row, true);\r\n                                                        } else {\r\n                                                            changeItems(row);\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                },\r\n                                createCol('Retailer_Name', 'string', 'Retailer_Name'),\r\n                                createCol('Branch_Name', 'string', 'Branch_Name'),\r\n                                createCol('AreaName', 'string', 'AreaName'),\r\n                                createCol('So_Date', 'date', 'So_Date'),\r\n                                createCol('Total_Before_Tax', 'string', 'Total_Before_Tax'),\r\n                                createCol('Total_Tax', 'number', 'Total_Tax'),\r\n                                createCol('Total_Invoice_value', 'number', 'Total_Invoice_value'),\r\n                            ]}\r\n                        />\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button type=\"button\" onClick={() => setFilters(pre => ({ ...pre, addItemDialog: false }))}>close</Button>\r\n                    </DialogActions>\r\n\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TripSheetGodownSearch;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","tdClass","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdIndex","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","control","provided","state","height","background","menu","zIndex","menuPortal","base","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","tripMasterDetails","Trip_Id","Challan_No","Branch_Id","Trip_Date","ISOString","Vehicle_No","StartTime","EndTime","Trip_No","Trip_ST_KM","Trip_EN_KM","Trip_Tot_Kms","Created_By","Updated_By","DO_Date","Delivery_Person_Id","tripStaffsColumns","Id","Involved_Emp_Id","Cost_Center_Type_Id","Emp_Name","loadingOn","loadingOff","stateDetails","useLocation","deliveryPerson","setDeliveryPerson","storage","JSON","parse","localStorage","getItem","salesPerson","setSalePerson","filters","setFilters","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Sales_Person_Id","SalsePersonGet","Cancel_status","Route_Id","RoutesGet","Area_Id","AreaGet","Fromdate","Todate","search","addItemDialog","transactionData","setTransactionData","costCenter","setCostCenter","costCenterCategory","setCostCenterCategory","branch","setBranch","tripSheetInfo","setTripSheetInfo","staffInvolvedList","setStaffInvolvedList","selectedItems","setSelectedItems","useEffect","async","branchResponse","staffResponse","staffCategory","Promise","all","fetchLink","branchData","success","BranchName","localeCompare","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","fetchData","Company_id","then","catch","extractHHMM","timeString","date","Date","hours","getHours","minutes","getMinutes","productsArray","Product_Array","employeesArray","Employees_Involved","isValidObject","isArray","prev","fromEntries","_stateDetails$key","_stateDetails$key2","_staffData$key","deliveryStaff","staff","UserId","Name","changeItems","itemDetail","deleteOption","item","Products_List","product","Do_Id","Delivery_Order_Id","preItems","currentOrders","So_Id","saveTripSheet","method","checkIsNumber","bodyData","combineDateTime","EmployeesInvolved","toast","message","finally","Button","isValidDate","CardContent","minHeight","Select","label","onChange","ind","_staff$Cost_Center_Na","c","Cost_Center_Id","updatedItem","User_Type","options","fil","findIndex","st","styles","isSearchable","placeholder","maxWidth","minWidth","handleCostCenterChange","sti","Cost_Category_Id","br","bi","BranchId","Do_Date","readOnly","_pre$Trip_EN_KM","_e$target$value","Subraction","min","_e$target$value2","_pre$Trip_ST_KM","Addition","flat","Branch_Name","Sales_Person_Name","Round_off","GST_Inclusive","IS_IGST","Narration","_ref5","filteredItems","DO_St_Id","Delete","Dialog","fullWidth","fullScreen","onSubmit","preventDefault","DialogTitle","startIcon","Search","Close","DialogContent","required","max","selected","sp","obj","_ref6","isChecked","some","padding","checked","DialogActions","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
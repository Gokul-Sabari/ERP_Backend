{"version":3,"file":"static/js/7188.8c61bb20.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Receipts/collcetionModule/updateGeneralInfo.jsx","Pages/Receipts/collcetionModule/listReceipts.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\nimport { payTypeAndStatus } from \"./createReceipts\";\r\nimport { isEqualNumber, LocalDate, NumberFormat, stringCompare, Subraction, toArray, toNumber } from \"../../../Components/functions\";\r\n\r\n\r\n\r\nconst UpdateGeneralInfoDialog = ({\r\n    updateValues,\r\n    setUpdateValues,\r\n    open = false,\r\n    onClose,\r\n    update,\r\n    creditAccount = [],\r\n}) => {\r\n\r\n    const paymentStatus = payTypeAndStatus.find(val => val.type === updateValues?.collection_type)?.statusOptions || [];\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={onClose}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Update Receipt</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    update({\r\n                        ...updateValues,\r\n                        verified_by: isEqualNumber(updateValues?.verify_status, 1) ? updateValues.verified_by : null\r\n                    })\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-borderless fa-13\">\r\n                                <tbody>\r\n                                    {/* date */}\r\n                                    <tr>\r\n                                        <td>Date<RequiredStar /></td>\r\n                                        <td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                className=\"cus-inpt border p-2\"\r\n                                                value={updateValues?.collection_date}\r\n                                                onChange={e => setUpdateValues(pre => ({ ...pre, collection_date: e.target.value }))}\r\n                                                required\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* verify date */}\r\n                                    <tr>\r\n                                        <td>Verify Date</td>\r\n                                        <td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={updateValues?.bank_date ? updateValues?.bank_date : ''}\r\n                                                onChange={e => setUpdateValues(pre => ({ ...pre, bank_date: e.target.value }))}\r\n                                                className=\"cus-inpt border border p-2\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* payment type  */}\r\n                                    <tr>\r\n                                        <td>Payment Type<RequiredStar /></td>\r\n                                        <td>\r\n                                            <select\r\n                                                className=\"cus-inpt border p-2\"\r\n                                                value={updateValues?.collection_type}\r\n                                                required\r\n                                                onChange={e => setUpdateValues(pre => ({\r\n                                                    ...pre,\r\n                                                    collection_type: e.target.value,\r\n                                                    payment_status: payTypeAndStatus.find(typ => typ.type === e.target.value)?.default\r\n                                                }))}\r\n                                            >\r\n                                                <option value=\"\" disabled>Select</option>\r\n                                                <option value=\"CASH\">CASH</option>\r\n                                                <option value=\"UPI\">UPI</option>\r\n                                                <option value=\"CHEQUE\">CHEQUE</option>\r\n                                                <option value=\"BANK\">BANK</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* payment account */}\r\n                                    <tr>\r\n                                        <td>Payment Account <RequiredStar /></td>\r\n                                        <td>\r\n                                            <select\r\n                                                className=\"cus-inpt border p-2\"\r\n                                                value={updateValues?.collection_account}\r\n                                                required\r\n                                                disabled={!updateValues?.collection_type}\r\n                                                onChange={e => setUpdateValues(pre => ({\r\n                                                    ...pre,\r\n                                                    collection_account: e.target.value,\r\n                                                }))}\r\n                                            >\r\n                                                <option value=\"\" disabled>Select</option>\r\n                                                {toArray(creditAccount).filter(\r\n                                                    fil => stringCompare(updateValues.collection_type, 'CASH')\r\n                                                        ? stringCompare(fil.Type, 'CASH')\r\n                                                        : !stringCompare(fil.Type, 'CASH')\r\n                                                ).map(\r\n                                                    (o, i) => <option value={o?.Id} key={i}>{o?.Bank_Name}</option>\r\n                                                )}\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* payment status */}\r\n                                    <tr>\r\n                                        <td>Payment Status<RequiredStar /></td>\r\n                                        <td>\r\n                                            <select\r\n                                                className=\"cus-inpt border p-2\"\r\n                                                value={updateValues?.payment_status}\r\n                                                required\r\n                                                disabled={!updateValues?.collection_type}\r\n                                                onChange={e => setUpdateValues(pre => ({ ...pre, payment_status: e.target.value }))}\r\n                                            >\r\n                                                <option value=\"\" disabled>Select</option>\r\n                                                {paymentStatus.map((status, ind) => (\r\n                                                    <option value={status} key={ind}>{status}</option>\r\n                                                ))}\r\n                                                <option value=\"Canceled\">Canceled</option>\r\n                                                <option value=\"Completed\">Completed</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* verify status */}\r\n                                    <tr>\r\n                                        <td>Verify Status</td>\r\n                                        <td>\r\n                                            <select\r\n                                                value={updateValues?.verify_status}\r\n                                                onChange={e => setUpdateValues(pre => ({ ...pre, verify_status: e.target.value }))}\r\n                                                className=\"cus-inpt border border p-2\"\r\n                                            >\r\n                                                <option value={0}>Not-verified</option>\r\n                                                <option value={1}>verified</option>\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {/* narration */}\r\n                                    <tr>\r\n                                        <td>Narration</td>\r\n                                        <td>\r\n                                            <textarea\r\n                                                className=\"cus-inpt border p-2\"\r\n                                                value={updateValues?.narration}\r\n                                                onChange={e => setUpdateValues(pre => ({ ...pre, narration: e.target.value }))}\r\n                                                placeholder=\"Narration...\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <table className=\"table table-bordered fa-13\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {['Sno', 'Invoice No', 'Invoice Date', 'Invoice Value', 'Total Receipt', 'Receipt Amount'].map(\r\n                                            (receipt, receiptIndex) => (\r\n                                                <th key={receiptIndex}>{receipt}</th>\r\n                                            )\r\n                                        )}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {toArray(updateValues?.Receipts).map(\r\n                                        (receipt, receiptIndex) => {\r\n                                            const preCollectAmount = toNumber(receipt?.collected_amount);\r\n                                            return (\r\n                                                <tr key={receiptIndex}>\r\n                                                    <td>{receiptIndex + 1}</td>\r\n                                                    <td>{receipt?.Do_Inv_No}</td>\r\n                                                    <td>{LocalDate(receipt?.Do_Date)}</td>\r\n                                                    <td>{NumberFormat(receipt?.Total_Invoice_value)}</td>\r\n                                                    <td>{NumberFormat(receipt?.total_receipt_amount)}</td>\r\n                                                    <td>\r\n                                                        <input\r\n                                                            className=\"cus-inpt\"\r\n                                                            value={receipt?.collected_amount}\r\n                                                            // onInput={onlynum}\r\n                                                            type=\"number\"\r\n                                                            required\r\n                                                            max={Subraction(\r\n                                                                receipt?.Total_Invoice_value,\r\n                                                                Subraction(receipt?.total_receipt_amount, preCollectAmount)\r\n                                                            )}\r\n                                                            onChange={e => setUpdateValues(pre => {\r\n                                                                const prevReceipts = [...pre.Receipts];\r\n\r\n                                                                prevReceipts[receiptIndex].collected_amount = e.target.value;\r\n                                                                return { ...pre, Receipts: prevReceipts };\r\n                                                            })}\r\n                                                        />\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        }\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={onClose} type=\"button\">cancel</Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"outlined\"\r\n                        >update</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateGeneralInfoDialog;","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport { getSessionUser, isEqualNumber, ISOString, isValidDate, Subraction, toArray } from \"../../../Components/functions\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable, { ButtonActions, createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Delete, Edit, FilterAlt, Search } from \"@mui/icons-material\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport UpdateGeneralInfoDialog from \"./updateGeneralInfo\";\r\nimport { receiptGeneralInfo } from \"./variable\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst defaultFilterDropDown = {\r\n    voucherType: [],\r\n    retailers: [],\r\n    collectionType: [],\r\n    paymentStatus: [],\r\n    collectedBy: [],\r\n};\r\n\r\nconst ReceiptsListing = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const storage = getSessionUser().user;\r\n\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const [salesReceipts, setSalesReceipts] = useState([]);\r\n    const [drowDownValues, setDropDownValues] = useState(defaultFilterDropDown);\r\n    const [baseData, setBaseData] = useState({\r\n        creditAccount: [],\r\n    });\r\n\r\n    // const [transactionData, setTransactionData] = useState([]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        retailer_id: { value: \"\", label: \"Search by Retailer\" },\r\n        voucher_id: { value: \"\", label: \"Select by voucher\" },\r\n        collection_type: { value: \"\", label: \"Search by collection type\" },\r\n        verify_status: { value: \"\", label: \"Search by verify status\" },\r\n        payment_status: { value: \"\", label: \"Search by payment status\" },\r\n        collected_by: { value: \"\", label: \"Search by collection person\" },\r\n        verify_status: { value: \"\", label: \"Search by Verify Status\" },\r\n        filterDialog: false,\r\n        deleteDialog: false,\r\n        updateDialog: false,\r\n        refresh: false,\r\n    });\r\n\r\n    const [totalCollectionAmount, setTotalCollectionAmount] = useState(0);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [deleteId, setDeleteId] = useState(null);\r\n    const [updateValues, setUpdateValues] = useState(receiptGeneralInfo);\r\n    const [confirmDialog, setConfirmDatalog] = useState(false);\r\n\r\n    const closeDialogData = () => setConfirmDatalog(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `receipt/filterValues`,\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setDropDownValues({\r\n                    voucherType: toArray(data?.others?.voucherType),\r\n                    retailers: toArray(data?.others?.retailers),\r\n                    collectionType: toArray(data?.others?.collectionType),\r\n                    paymentStatus: toArray(data?.others?.paymentStatus),\r\n                    collectedBy: toArray(data?.others?.collectedBy),\r\n                    verifyStatus: toArray(data?.others?.verifyStatus)\r\n                });\r\n            }\r\n        }).catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `receipt/creditAccounts`,\r\n        }).then((data) => {\r\n            if (data.success)\r\n                setBaseData((pre) => ({ ...pre, creditAccount: data.data }));\r\n            else setBaseData((pre) => ({ ...pre, creditAccount: [] }));\r\n        }).catch((e) => console.error(e));\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `receipt/collectionReceipts?Fromdate=${filters?.fetchFrom}&Todate=${filters?.fetchTo}&retailer_id=${filters.retailer_id.value}&voucher_id=${filters.voucher_id.value}&collection_type=${filters.collection_type.value}&verify_status=${filters.verify_status.value}&payment_status=${filters.payment_status.value}&collected_by=${filters.collected_by.value}`,\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setSalesReceipts(data.data);\r\n                const totalCount = data.data.length;\r\n                setTotalCount(totalCount);\r\n\r\n                const totalCollection = data.data.reduce((sum, receipt) => {\r\n                    const amount = parseFloat(receipt.total_amount) || 0;\r\n                    return sum + amount;\r\n                }, 0);\r\n\r\n                setTotalCollectionAmount(totalCollection);\r\n            }\r\n        }).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        }).catch((e) => console.error(e));\r\n\r\n    }, [filters?.fetchFrom, filters?.fetchTo, filters?.refresh]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate:\r\n                query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                    ? query.get(\"Fromdate\")\r\n                    : defaultFilters.Fromdate,\r\n            Todate:\r\n                query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                    ? query.get(\"Todate\")\r\n                    : defaultFilters.Todate,\r\n        };\r\n\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            fetchFrom: queryFilters.Fromdate,\r\n            fetchTo: queryFilters.Todate,\r\n        }));\r\n\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            filterDialog: false,\r\n            deleteDialog: false,\r\n            updateDialog: false,\r\n        }));\r\n        setDeleteId(null);\r\n        setUpdateValues(receiptGeneralInfo);\r\n    };\r\n\r\n    const deleteReceipt = (id) => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `receipt/collectionReceipts`,\r\n            method: \"DELETE\",\r\n            bodyData: { collection_id: id },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(data?.message || \"Receipt deleted successfully\");\r\n                    setFilters((pre) => ({ ...pre, refresh: !pre.refresh }));\r\n                    closeDialog();\r\n                } else {\r\n                    toast.error(data?.message || \"Failed to delete Receipt\");\r\n                }\r\n            })\r\n            .catch((e) => console.error(e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    };\r\n\r\n    const updateReceipt = (receiptInfo) => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `receipt/collectionReceipts`,\r\n            method: \"PUT\",\r\n            bodyData: receiptInfo,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(data?.message || \"Changes saved\");\r\n                    closeDialog();\r\n                    setFilters((pre) => ({ ...pre, refresh: !pre.refresh }));\r\n                } else {\r\n                    toast.error(data?.message || \"Failed to save changes\");\r\n                }\r\n            })\r\n            .catch((e) => console.error(e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    };\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        const isSelected = selectedRows.some(\r\n            (selectedRow) => selectedRow.collection_id === row.collection_id\r\n        );\r\n\r\n        if (isSelected) {\r\n            setSelectedRows(\r\n                selectedRows.filter(\r\n                    (selectedRow) => selectedRow.collection_id !== row.collection_id\r\n                )\r\n            );\r\n        } else {\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n    const handleVerify = async () => {\r\n        if (!selectedRows || selectedRows.length === 0) {\r\n            toast.warning(\"Please select at least one record to verify.\");\r\n            return;\r\n        }\r\n\r\n        const collectionIds = selectedRows.map((item) => item.collection_id);\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `receipt/verifyStatus`,\r\n                method: \"PUT\",\r\n                bodyData: { collectionIdToUpdate: collectionIds },\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(data?.message || \"Collections verified successfully\");\r\n                closeDialog();\r\n                setFilters((prev) => ({ ...prev, refresh: !prev.refresh }));\r\n            } else {\r\n                toast.error(data?.message || \"Failed to verify collections\");\r\n            }\r\n        } catch (error) {\r\n\r\n            toast.error(\"Something went wrong while verifying\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Receipts\"\r\n\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            className=\"ms-2\"\r\n                            onClick={() => navigate(\"create\")}\r\n                        >\r\n                            Create Receipt\r\n                        </Button>\r\n\r\n                        <div className=\"d-flex justify-content-between align-items-center mx-2\">\r\n                            {salesReceipts.length > 0 && (\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    onClick={() => {\r\n\r\n                                        if (selectedRows.length === salesReceipts.length) {\r\n                                            setSelectedRows([]);\r\n                                        } else {\r\n                                            setSelectedRows(salesReceipts);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {selectedRows.length === salesReceipts.length\r\n                                        ? \"Unselect All\"\r\n                                        : \"Select All\"}\r\n                                </Button>\r\n                            )}\r\n\r\n\r\n                        </div>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            className=\"ms-2 mx-2\"\r\n                            onClick={() => setConfirmDatalog(true)}\r\n                            disabled={selectedRows.length === 0}\r\n                        >\r\n                            Verify\r\n                        </Button>\r\n                        <div className=\"summary-block\">\r\n                            <div>Total Count: {totalCount}</div>\r\n                            <div>\r\n                                Total Collection Amount: ₹ {totalCollectionAmount.toFixed(2)}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                dataArray={salesReceipts}\r\n                headerFontSizePx={13}\r\n                bodyFontSizePx={12}\r\n                columns={[\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: \"CheckBox\",\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const isSelected = selectedRows.some(\r\n                                (selectedRow) => selectedRow.collection_id === row.collection_id\r\n                            );\r\n\r\n                            return (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={isSelected}\r\n                                    onChange={() => handleCheckboxChange(row)}\r\n                                    disabled={row?.verify_status !== 0}\r\n                                    onFocus={(e) => {\r\n                                        e.target.blur();\r\n                                    }}\r\n                                    style={{\r\n                                        cursor: \"pointer\",\r\n                                        transform: \"scale(1.5)\",\r\n                                        width: \"14px\",\r\n                                        height: \"20px\",\r\n                                    }}\r\n                                />\r\n                            );\r\n                        },\r\n                    },\r\n                    createCol(\"collection_inv_no\", \"string\", \"Invoice\"),\r\n                    createCol(\"collection_date\", \"date\", \"Date\"),\r\n                    createCol(\"RetailerGet\", \"string\", \"Retailer\"),\r\n                    createCol(\"CollectedByGet\", \"string\", \"Received By\"),\r\n                    createCol(\"total_amount\", \"number\", \"Amount\"),\r\n                    createCol(\"collection_type\", \"string\", \"Type\"),\r\n                    createCol(\"VoucherGet\", \"string\", \"Voucher\"),\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: \"Verifyed-?\",\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const verified = isEqualNumber(row?.verify_status, 1);\r\n                            return (\r\n                                <span\r\n                                    className={\r\n                                        (verified ? \"bg-success\" : \"bg-warning\") +\r\n                                        \" text-light fa-11 px-2 py-1 rounded-3\"\r\n                                    }\r\n                                >\r\n                                    {verified ? \"Verified\" : \"Pending\"}\r\n                                </span>\r\n                            );\r\n                        },\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: \"Action\",\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const collection_id = row?.collection_id;\r\n                            return (\r\n                                <>\r\n                                    <ButtonActions\r\n                                        buttonsData={[\r\n                                            {\r\n                                                name: \"Edit\",\r\n                                                icon: <Edit className=\"fa-20\" />,\r\n                                                onclick: () => {\r\n                                                    setUpdateValues({\r\n                                                        collection_id: Number(row?.collection_id),\r\n                                                        collection_date: ISOString(row?.collection_date),\r\n                                                        bank_date: row?.bank_date\r\n                                                            ? ISOString(row?.bank_date)\r\n                                                            : \"\",\r\n                                                        collection_type: row?.collection_type || \"CASH\",\r\n                                                        collection_account: row?.collection_account || 0,\r\n                                                        verify_status: row?.verify_status,\r\n                                                        payment_status: row?.payment_status,\r\n                                                        narration: row?.narration,\r\n                                                        verified_by: storage.UserId,\r\n                                                        Receipts: toArray(row?.Receipts),\r\n                                                    });\r\n                                                    setFilters((pre) => ({ ...pre, updateDialog: true }));\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                name: \"Delete\",\r\n                                                icon: <Delete className=\"fa-20 text-danger\" />,\r\n                                                onclick: () => {\r\n                                                    setDeleteId(collection_id);\r\n                                                    setFilters((pre) => ({ ...pre, deleteDialog: true }));\r\n                                                },\r\n                                            },\r\n                                        ]}\r\n                                    />\r\n                                </>\r\n                            );\r\n                        },\r\n                    },\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <div className=\"py-2\">\r\n                        <FilterableTable\r\n                            // title=\"Receipts\"\r\n                            disablePagination\r\n                            headerFontSizePx={13}\r\n                            bodyFontSizePx={12}\r\n                            dataArray={Array.isArray(row?.Receipts) ? row?.Receipts : []}\r\n                            columns={[\r\n                                createCol(\"Do_Inv_No\", \"string\", \"Delivery Invoice Number\"),\r\n                                createCol(\"Do_Date\", \"date\", \"Delivery Date\"),\r\n                                createCol(\"collected_amount\", \"number\", \"Receipt Amount\"),\r\n                                createCol(\"total_receipt_amount\", \"number\", \"Total Receipt\"),\r\n                                createCol(\"Total_Invoice_value\", \"number\", \"Invoice Value\"),\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: \"Pending Amount\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) =>\r\n                                        Subraction(row?.bill_amount, row?.total_receipt_amount),\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <UpdateGeneralInfoDialog\r\n                update={updateReceipt}\r\n                updateValues={updateValues}\r\n                setUpdateValues={setUpdateValues}\r\n                open={filters.updateDialog}\r\n                onClose={closeDialog}\r\n                creditAccount={baseData.creditAccount}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Fromdate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Todate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Voucher</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.voucher_id}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    voucher_id: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.voucherType}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Voucher\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Retailer</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.retailer_id}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    retailer_id: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.retailers}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Retailer\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Receipt Type</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.collection_type}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    collection_type: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.collectionType}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Receipt Type\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Collected By</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.collected_by}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    collected_by: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.collectedBy}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Collection Person\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Payment Status</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.payment_status}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    payment_status: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.paymentStatus}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Payment Status\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Verify Status</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.verify_status}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({\r\n                                                    ...prev,\r\n                                                    verify_status: selectedOptions,\r\n                                                }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={drowDownValues.verifyStatus}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Verify Status\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate,\r\n                            };\r\n                            updateQueryString(updatedFilters);\r\n                            setFilters((pre) => ({ ...pre, refresh: !pre.refresh }));\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.deleteDialog}\r\n                onClose={closeDialog}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Confirmation</DialogTitle>\r\n                <DialogContent>\r\n                    Do you want to delete the receipt permanently?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>cancel</Button>\r\n                    <Button\r\n                        onClick={() => deleteReceipt(deleteId)}\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={confirmDialog} fullWidth maxWidth=\"sm\">\r\n                <DialogTitle>Confirm Action</DialogTitle>\r\n                <DialogContent>\r\n                    <div>Are you sure you want to verify this status?</div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogData}>Cancel</Button>\r\n                    <Button onClick={handleVerify} color=\"primary\" variant=\"contained\">\r\n                        Verify\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ReceiptsListing;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_payTypeAndStatus$fin","updateValues","setUpdateValues","update","creditAccount","paymentStatus","payTypeAndStatus","collection_type","statusOptions","Dialog","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","verified_by","verify_status","DialogContent","RequiredStar","collection_date","onChange","required","bank_date","_payTypeAndStatus$fin2","payment_status","typ","default","collection_account","toArray","fil","stringCompare","Type","Id","Bank_Name","status","ind","narration","placeholder","receipt","receiptIndex","Receipts","preCollectAmount","toNumber","collected_amount","Do_Inv_No","Do_Date","Total_Invoice_value","total_receipt_amount","max","Subraction","prevReceipts","DialogActions","Button","defaultFilters","Fromdate","ISOString","Todate","defaultFilterDropDown","voucherType","retailers","collectionType","collectedBy","loadingOn","loadingOff","navigate","useNavigate","location","useLocation","query","URLSearchParams","search","storage","getSessionUser","user","selectedRows","setSelectedRows","salesReceipts","setSalesReceipts","drowDownValues","setDropDownValues","baseData","setBaseData","filters","setFilters","fetchFrom","fetchTo","retailer_id","label","voucher_id","collected_by","filterDialog","deleteDialog","updateDialog","refresh","totalCollectionAmount","setTotalCollectionAmount","totalCount","setTotalCount","deleteId","setDeleteId","receiptGeneralInfo","confirmDialog","setConfirmDatalog","useEffect","fetchLink","then","_data$others","_data$others2","_data$others3","_data$others4","_data$others5","_data$others6","success","others","verifyStatus","catch","totalCollection","reduce","sum","parseFloat","total_amount","finally","queryFilters","get","isValidDate","closeDialog","FilterAlt","toFixed","some","selectedRow","collection_id","checked","handleCheckboxChange","onFocus","blur","cursor","transform","height","verified","Edit","UserId","Delete","_ref5","isArray","_ref6","bill_amount","UpdateGeneralInfoDialog","receiptInfo","method","bodyData","toast","message","Select","selectedOptions","prev","menuPortalTarget","document","options","styles","isSearchable","maxMenuHeight","newFilters","params","toString","updateQueryString","startIcon","Search","deleteReceipt","closeDialogData","async","warning","collectionIds","item","collectionIdToUpdate","createSvgIcon","d"],"sourceRoot":""}
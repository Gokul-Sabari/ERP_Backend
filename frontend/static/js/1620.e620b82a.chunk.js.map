{"version":3,"file":"static/js/1620.e620b82a.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Attendance/defaultLeave.jsx","Pages/Attendance/fingerPrintAttendance.jsx","../node_modules/@mui/icons-material/Close.js","../node_modules/@mui/icons-material/esm/Refresh.js","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/utils/createChainedFunction.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/requirePropFactory/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/unsupportedProp/unsupportedProp.js","../node_modules/@mui/material/utils/index.js"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE ORDER' },\r\n    { name: 'PURCHASE INVOICE' },\r\n    { name: 'SALE ORDER' },\r\n    { name: 'SALE INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport { toast } from \"react-toastify\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { moment } from \"moment\";\r\nimport { Edit } from \"@mui/icons-material\";\r\nconst LeaveCalendar = ({\r\n  currentView,\r\n  onViewChange\r\n}) => {\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n  const [monthlyLeaves, setMonthlyLeaves] = useState([]);\r\n  const [filter, setFilter] = useState({\r\n    FromDate: new Date().toISOString().split(\"T\")[0],\r\n    Description: \"\",\r\n    display: 2,\r\n    Created_By: \"\",\r\n  });\r\n  const [description, setDesctiption] = useState(\"\");\r\n  const [addDialog, setAddDialog] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [calendarViewDate, setCalendarViewDate] = useState(new Date());\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [editIndex, setEditIndex] = useState(null);\r\n  const formatDate = (dateStr) => {\r\n    const d = new Date(dateStr);\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const year = d.getFullYear();\r\n    return `${day}-${month}-${year}`;\r\n  };\r\n  const localData = localStorage.getItem(\"user\");\r\n  const parseData = JSON.parse(localData);\r\n  const fetchLeaves = async () => {\r\n    try {\r\n      const res = await fetchLink({ address: `masters/defaultLeave` });\r\n      if (res.success) {\r\n        setAttendanceData(res.data);\r\n\r\n        const currentMonth = calendarViewDate.getMonth();\r\n        const currentYear = calendarViewDate.getFullYear();\r\n\r\n        const filtered = res.data.filter((item) => {\r\n          const itemDate = new Date(item.Date);\r\n          return (\r\n            itemDate.getMonth() === currentMonth &&\r\n            itemDate.getFullYear() === currentYear\r\n          );\r\n        });\r\n\r\n        setMonthlyLeaves(filtered);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLeaves();\r\n  }, []);\r\n  const closeDialg = () => {\r\n    setAddDialog(false);\r\n    setFilter({});\r\n    setDesctiption(\"\");\r\n    setEditMode(false);\r\n    setEditIndex(null);\r\n  };\r\n\r\n  const onsubmit = ({ filter, description }) => {\r\n    const User_Id = parseData?.UserId;\r\n    const bodyData = {\r\n      FromDate: filter?.FromDate,\r\n      Description: description,\r\n      Created_By: User_Id,\r\n    };\r\n\r\n    fetchLink({\r\n      address: `masters/addLeave`,\r\n      method: \"POST\",\r\n      bodyData,\r\n    })\r\n      .then((data) => {\r\n        if (!data.success) {\r\n          toast.error(data.message);\r\n        } else {\r\n          toast.success(\"Leave added successfully\");\r\n          setAddDialog(false);\r\n          setFilter({\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            Description: \"\",\r\n            display: 2,\r\n            Created_By: 1,\r\n          });\r\n          setDesctiption(\"\");\r\n          fetchLeaves();\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const onUpdate = async ({ index, filter, description, id, Modified_By }) => {\r\n    const updatedList = [...attendanceData];\r\n    const User_Id = Number(parseData?.UserId);\r\n\r\n    const bodyData = {\r\n      Id: id,\r\n      FromDate: filter?.FromDate,\r\n      Description: description,\r\n      Modified_By: User_Id || Modified_By,\r\n    };\r\n\r\n    try {\r\n      const data = await fetchLink({\r\n        address: \"masters/defaultLeave\",\r\n        method: \"PUT\",\r\n        bodyData: bodyData,\r\n      });\r\n\r\n      if (data.success) {\r\n        updatedList[index] = {\r\n          ...updatedList[index],\r\n          Date: filter.FromDate,\r\n          Description: description,\r\n        };\r\n\r\n        setAttendanceData(updatedList);\r\n\r\n        const currentMonth = calendarViewDate.getMonth();\r\n        const currentYear = calendarViewDate.getFullYear();\r\n\r\n        const filtered = updatedList.filter((item) => {\r\n          const itemDate = new Date(item.Date);\r\n          return (\r\n            itemDate.getMonth() === currentMonth &&\r\n            itemDate.getFullYear() === currentYear\r\n          );\r\n        });\r\n\r\n        setMonthlyLeaves(filtered);\r\n        closeDialg();\r\n        toast.success(\"Leave updated successfully\");\r\n      } else {\r\n        toast.error(data.message || \"Failed to update\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating leave:\", error);\r\n      toast.error(\"Update failed: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const formatForInputDate = (dateString) => {\r\n    const d = new Date(dateString);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column\">\r\n      <Card>\r\n        <CardContent sx={{ minHeight: \"50vh\" }}>\r\n          <div className=\"d-flex align-items-center mb-3\">\r\n            {[\"default\", \"employee\", \"department\", \"defaultLeave\"].map(\r\n              (view) => (\r\n                <Button\r\n                  key={view}\r\n                  size=\"small mx-2\"\r\n                  variant=\"outlined\"\r\n                  onClick={() => onViewChange(view)}\r\n                  disabled={currentView === view}\r\n                >\r\n                  {view === \"defaultLeave\"\r\n                    ? \"Defined Leave\"\r\n                    : view.charAt(0).toUpperCase() + view.slice(1)}\r\n                </Button>\r\n              )\r\n            )}\r\n          </div>\r\n          <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n            <h6 className=\"fa-18\">Leave Details</h6>\r\n            <div>\r\n              <select\r\n                className=\"cus-inpt w-auto\"\r\n                value={filter?.display}\r\n                disabled\r\n                onChange={(e) =>\r\n                  setFilter((pre) => ({\r\n                    ...pre,\r\n                    display: Number(e.target.value),\r\n                  }))\r\n                }\r\n              >\r\n                <option disabled value={2}>\r\n                  Calendar\r\n                </option>\r\n                {/* <option value={1}>Table</option> */}\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-5 mb-3\">\r\n              <div className=\"card shadow-sm\">\r\n                <div className=\"card-header\">\r\n                  <h6 className=\"mb-0\">Month Leave List</h6>\r\n                </div>\r\n                <div\r\n                  className=\"card-body\"\r\n                  style={{ maxHeight: \"800px\", overflowY: \"auto\" }}\r\n                >\r\n                  {monthlyLeaves.length === 0 ? (\r\n                    <p>No data</p>\r\n                  ) : (\r\n                    monthlyLeaves.map((item, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\"mb-2 border-bottom pb-2 position-relative\"\r\n                      >\r\n                        <small>{item.Description}</small>\r\n                        <br />\r\n                        <small>Date: {formatDate(item.Date)}</small>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-lg-8 col-md-7\">\r\n              <FullCalendar\r\n                plugins={[\r\n                  timeGridPlugin,\r\n                  listPlugin,\r\n                  dayGridPlugin,\r\n                  interactionPlugin,\r\n                ]}\r\n                initialView=\"dayGridMonth\"\r\n                initialDate={new Date()}\r\n                events={attendanceData.map((o) => ({\r\n                  title: ` ${o?.Description}`,\r\n                start: new Date(o?.Date).toISOString().split(\"T\")[0],\r\n                  objectData: o,\r\n                }))}\r\n                headerToolbar={{\r\n                  left: \"prev next\",\r\n                  center: \"title\",\r\n                  right: \"dayGridMonth\",\r\n                }}\r\n                // slotDuration={\"00:30:00\"}\r\n                // slotMinTime={\"08:00:00\"}\r\n                // slotMaxTime={\"22:00:00\"}\r\n                showNonCurrentDates={false}\r\n                editable={false}\r\n                selectable\r\n                selectMirror\r\n                height={800}\r\n                eventClick={(eventInfo) => {\r\n                  const leave = eventInfo.event.extendedProps.objectData;\r\n                  const date = leave?.Date;\r\n\r\n                  const index = attendanceData.findIndex(\r\n                    (item) =>\r\n                      item.Date === date &&\r\n                      item.Description === leave.Description\r\n                  );\r\n\r\n                  setEditMode(true);\r\n                  setEditIndex(index);\r\n                  setFilter({ FromDate: date });\r\n                  setDesctiption(leave.Description);\r\n                  setAddDialog(true);\r\n                }}\r\n                dateClick={(info) => {\r\n                  setSelectedDate(info.dateStr);\r\n                  setFilter({ ...filter, FromDate: info.dateStr });\r\n                  setAddDialog(true);\r\n                }}\r\n                datesSet={(date) => {\r\n                  const viewDate = new Date(date.start);\r\n                  setCalendarViewDate(viewDate);\r\n\r\n                  const currentMonth = viewDate.getMonth();\r\n                  const currentYear = viewDate.getFullYear();\r\n\r\n                  const filtered = attendanceData.filter((item) => {\r\n                    const itemDate = new Date(item.Date);\r\n                    \r\n                    return (\r\n                      itemDate.getMonth() === currentMonth &&\r\n                      itemDate.getFullYear() === currentYear\r\n                    );\r\n                  });\r\n\r\n                  setMonthlyLeaves(filtered);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Dialog open={addDialog} onClose={closeDialg} fullWidth maxWidth=\"sm\">\r\n        <DialogTitle className=\"d-flex justify-content-between\">\r\n          <span> {editMode ? \"UPDATE\" : \"ADD\"}</span>\r\n          <IconButton onClick={closeDialg}>\r\n            <Close sx={{ color: \"black\" }} />\r\n          </IconButton>\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <div className=\"table-responsive pb-4\">\r\n            <table className=\"table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>From</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"cus-inpt\"\r\n                      value={formatForInputDate(filter?.FromDate || \"\")}\r\n                      onChange={(e) =>\r\n                        setFilter({ ...filter, FromDate: e.target.value })\r\n                      }\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Description</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"cus-inpt\"\r\n                      value={description}\r\n                      onChange={(e) => setDesctiption(e.target.value)}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={closeDialg}>Cancel</Button>\r\n\r\n          <Button\r\n            onClick={() => {\r\n              if (editMode) {\r\n            \r\n                const currentRow = attendanceData[editIndex];\r\n                const id = currentRow?.SNo;\r\n                const User_Id = parseData?.UserId;\r\n                onUpdate({\r\n                  index: editIndex,\r\n                  filter,\r\n                  description,\r\n                  id,\r\n                  User_Id,\r\n                });\r\n              } else {\r\n                onsubmit({ filter, description });\r\n              }\r\n            }}\r\n          >\r\n            {editMode ? \"UPDATE\" : \"ADD\"}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaveCalendar;\r\n","// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//     Dialog,\r\n//     IconButton,\r\n//     DialogTitle,\r\n//     DialogContent,\r\n//     DialogActions,\r\n// } from \"@mui/material\";\r\n// import Select from \"react-select\";\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { ISOString, isValidDate } from \"../../Components/functions\";\r\n// // import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\n// import { Search, Refresh } from \"@mui/icons-material\";\r\n// // import { convertedStatus } from \"../convertedStatus\";\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n// import FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import {\r\n//     Card,\r\n//     CardContent,\r\n//     Button,\r\n//     Chip,\r\n//     Autocomplete,\r\n//     TextField,\r\n// } from \"@mui/material\";\r\n// import { useContext } from \"react\";\r\n// import { toast } from \"react-toastify\";\r\n// import * as XLSX from \"xlsx\";\r\n// const useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\n// const AttendanceNewScreen = ({ loadingOn, loadingOff }) => {\r\n//     const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n//     const navigate = useNavigate();\r\n//     const location = useLocation();\r\n//     const stateDetails = location.state;\r\n\r\n//     const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n//     const getCurrentMonthYear = () => {\r\n//         const date = new Date();\r\n//         const year = date.getFullYear();\r\n//         const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n//         return `${year}-${month}`;\r\n//     };\r\n\r\n//     const initialValue = {\r\n//         From: getCurrentMonthYear(),\r\n//         To: getCurrentMonthYear(),\r\n//         EmpId: \"0\",\r\n//         Name: \"ALL\",\r\n//     };\r\n//     const query = useQuery();\r\n\r\n//     const defaultFilters = {\r\n//         From: getCurrentMonthYear(),\r\n//         To: getCurrentMonthYear(),\r\n//     };\r\n\r\n//     const [saleOrders, setSaleOrders] = useState([]);\r\n//     const [viewMode, setViewMode] = useState(\"default\");\r\n//     const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n//     const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n//     const [reload, setReload] = useState(false);\r\n//     const [attendanceData, setAttendanceData] = useState([]);\r\n//     const [loading, setLoading] = useState(true);\r\n\r\n//     const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n//     const [employees, setEmployees] = useState([]);\r\n//     const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n//     const userTypeId = storage?.UserTypeId;\r\n//     const parseData = storage;\r\n//     const { contextObj } = useContext(MyContext);\r\n\r\n//     const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n//     const [filter, setFilter] = useState(initialValue);\r\n//     const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n//     useEffect(() => {\r\n//         const timer = setTimeout(() => {\r\n//             setDebouncedFilter(filter);\r\n//         }, 500);\r\n\r\n//         return () => clearTimeout(timer);\r\n//     }, [filter]);\r\n\r\n//     useEffect(() => {\r\n//         const { From, EmpId } = debouncedFilter;\r\n//         if (From && (EmpId || EmpId === 0)) {\r\n//             fetchAttendanceData(From, EmpId);\r\n//             fetchDropdownEmployees();\r\n//         }\r\n//     }, [debouncedFilter]);\r\n\r\n//     const getDaysInMonth = (monthYear) => {\r\n//         if (!monthYear) return 0;\r\n\r\n//         const [year, month] = monthYear.split(\"-\");\r\n\r\n//         return new Date(year, month, 0).getDate();\r\n//     };\r\n\r\n//     const [filters, setFilters] = useState({\r\n//         FromDate: new Date().toISOString().split(\"T\")[0],\r\n//         ToDate: new Date().toISOString().split(\"T\")[0],\r\n//         Cancel_status: 0,\r\n//     });\r\n\r\n//     const toggleExpand = (department) => {\r\n//         if (expandedDepartment === department) {\r\n//             setExpandedDepartment(null);\r\n//         } else {\r\n//             setExpandedDepartment(department);\r\n//         }\r\n//     };\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n//     const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n//     const Add_Rights = contextObj?.Add_Rights;\r\n\r\n//     useEffect(() => {\r\n//         if (loadingOn) loadingOn();\r\n\r\n//         const today = new Date().toISOString().split(\"T\")[0];\r\n//         const fromDate = filters.FromDate || today;\r\n//         const toDate = filters.ToDate || today;\r\n\r\n//         fetchLink({\r\n//             address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     setSaleOrders(data?.data);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(e))\r\n//             .finally(() => {\r\n//                 if (loadingOff) loadingOff();\r\n//             });\r\n//     }, [reload]);\r\n\r\n//     const handleFromChange = (e) => {\r\n//         const getDaysInMonth = (monthYear) => {\r\n//             if (!monthYear) return 0;\r\n\r\n//             const [year, month] = monthYear.split(\"-\");\r\n\r\n//             return new Date(year, month, 0).getDate();\r\n//         };\r\n//         const selectedMonth = e.target.value;\r\n//         const [year, month] = selectedMonth.split(\"-\");\r\n//         const startDate = `${year}-${month}-01`;\r\n//         const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//         const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//         setFilter({\r\n//             From: startDate,\r\n//             To: endDate,\r\n//             EmpId: filter.EmpId || 0,\r\n//             Name: filter?.Name,\r\n//         });\r\n//     };\r\n\r\n//     const handleSummaryDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 const overallData = response.data;\r\n//                 const getWorkingDays = (fromDate, endDate) => {\r\n//                     const allDays = [];\r\n//                     const currentDate = new Date(fromDate);\r\n//                     const endDateObj = new Date(endDate);\r\n//                     let sundayCount = 0;\r\n\r\n//                     while (currentDate <= endDateObj) {\r\n//                         const dateStr = new Date(currentDate).toISOString().split(\"T\")[0];\r\n//                         allDays.push(dateStr);\r\n\r\n//                         if (currentDate.getDay() === 0) {\r\n//                             sundayCount++;\r\n//                         }\r\n\r\n//                         currentDate.setDate(currentDate.getDate() + 1);\r\n//                     }\r\n\r\n//                     if (allDays.length === 0) {\r\n//                         allDays.push(\"No days in this range\");\r\n//                     }\r\n\r\n//                     return {\r\n//                         days: allDays,\r\n//                         sundayCount,\r\n//                         totalDays: allDays.length,\r\n//                     };\r\n//                 };\r\n\r\n//                 const {\r\n//                     days: dateRange,\r\n//                     sundayCount,\r\n//                     totalDays,\r\n//                 } = getWorkingDays(startDate, endDate);\r\n\r\n//                 let totalWorkingDaysSummary = 0;\r\n//                 let totalLeaveDaysSummary = 0;\r\n\r\n//                 const summaryData = overallData.map((row) => {\r\n//                     const punchDetails = row.AttendanceDetails\r\n//                         ? JSON.parse(row.AttendanceDetails)\r\n//                         : [];\r\n//                     let totalWorkingDays = 0;\r\n//                     let totalLeaveDays = 0;\r\n\r\n//                     dateRange.forEach((date) => {\r\n//                         if (Array.isArray(punchDetails)) {\r\n//                             const detail = punchDetails.find(\r\n//                                 (detail) => detail.Date === date\r\n//                             );\r\n\r\n//                             const isSunday = new Date(date).getDay() === 0;\r\n\r\n//                             if (isSunday) {\r\n//                                 return;\r\n//                             }\r\n\r\n//                             if (detail) {\r\n//                                 if (detail.AttendanceStatus === \"P\") {\r\n//                                     totalWorkingDays++;\r\n//                                 } else if (\r\n//                                     detail.AttendanceStatus === \"A\" ||\r\n//                                     detail.AttendanceStatus === \"H\"\r\n//                                 ) {\r\n//                                     totalLeaveDays++;\r\n//                                 }\r\n//                             } else {\r\n//                                 totalLeaveDays++;\r\n//                             }\r\n//                         }\r\n//                     });\r\n\r\n//                     totalWorkingDaysSummary += totalWorkingDays;\r\n//                     totalLeaveDaysSummary += totalLeaveDays;\r\n\r\n//                     return {\r\n//                         EmployeeName: row.Name,\r\n//                         EmployeeID: row.EmployeeID,\r\n//                         Month: `${month}-${year}`,\r\n//                         Branch: row.Branch,\r\n//                         NumberOfSundays: sundayCount,\r\n//                         NumberOfDaysInMonth: totalDays,\r\n//                         TotalWorkingDays: totalWorkingDays,\r\n//                         TotalLeaveDays: totalLeaveDays,\r\n//                     };\r\n//                 });\r\n\r\n//                 const exportData = summaryData.map((item) => ({\r\n//                     EmployeeName: item.EmployeeName,\r\n//                     EmployeeID: item.EmployeeID,\r\n//                     Month: item.Month,\r\n//                     Branch: item.Branch,\r\n//                     NumberOfSundays: item.NumberOfSundays,\r\n//                     NumberOfDaysInMonth: item.NumberOfDaysInMonth,\r\n//                     TotalWorkingDays: item.TotalWorkingDays,\r\n//                     TotalLeaveDays: item.TotalLeaveDays,\r\n//                 }));\r\n\r\n//                 const ws = XLSX.utils.json_to_sheet(exportData);\r\n\r\n//                 const headers = [\r\n//                     \"EmployeeName\",\r\n//                     \"EmployeeID\",\r\n//                     \"Month\",\r\n//                     \"Branch\",\r\n//                     \"NumberOfSundays\",\r\n//                     \"NumberOfDaysInMonth\",\r\n//                     \"TotalWorkingDays\",\r\n//                     \"TotalLeaveDays\",\r\n//                 ];\r\n\r\n//                 XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n//                 const wb = XLSX.utils.book_new();\r\n//                 XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary Report\");\r\n\r\n//                 XLSX.writeFile(wb, \"Attendance_Summary_Report.xlsx\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error downloading overall report:\", error);\r\n//         }\r\n//     };\r\n//     const handleDownload = () => {\r\n//         const maxPunches = 4;\r\n\r\n//         const exportData = attendanceData.map((row) => {\r\n//             const punchDetails = row.AttendanceDetails\r\n//                 ? row.AttendanceDetails.split(\",\").filter((p) => p.trim() !== \"\")\r\n//                 : [];\r\n\r\n//             let attendanceStatus = row.AttendanceStatus;\r\n\r\n//             if (!attendanceStatus) {\r\n//                 attendanceStatus = punchDetails.length === 0 ? \"A\" : \"P\";\r\n//             }\r\n\r\n//             const punchColumns = {};\r\n//             for (let i = 0; i < maxPunches; i++) {\r\n//                 punchColumns[`Punch${i + 1}`] = punchDetails[i]\r\n//                     ? punchDetails[i].trim()\r\n//                     : \"--\";\r\n//             }\r\n\r\n//             return {\r\n//                 Employee: row.username || row.Employee,\r\n//                 \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//                 \"Attendance Status\": attendanceStatus,\r\n//                 ...punchColumns,\r\n//             };\r\n//         });\r\n\r\n//         const columnsOrder = [\r\n//             \"Employee\",\r\n//             \"Log Date\",\r\n//             \"Attendance Status\",\r\n//             \"Punch1\",\r\n//             \"Punch2\",\r\n//             \"Punch3\",\r\n//             \"Punch4\",\r\n//         ];\r\n\r\n//         const reorderedData = exportData.map((row) =>\r\n//             columnsOrder.reduce((acc, col) => {\r\n//                 acc[col] = row[col] || \"--\";\r\n//                 return acc;\r\n//             }, {})\r\n//         );\r\n\r\n//         const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n//         const wb = XLSX.utils.book_new();\r\n//         XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n//         XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n//     };\r\n\r\n//     const MAX_PUNCHES = 6;\r\n\r\n//     function formatToAmPm(timeString) {\r\n//         if (!timeString) return \"--\";\r\n//         const [hourStr, minuteStr] = timeString.split(\":\");\r\n//         if (!hourStr || !minuteStr) return \"--\";\r\n\r\n//         let hour = parseInt(hourStr, 10);\r\n//         const minute = minuteStr;\r\n//         const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n//         hour = hour % 12 || 12;\r\n\r\n//         return `${hour.toString().padStart(2, \"0\")}:${minute} ${ampm}`;\r\n//     }\r\n\r\n//     const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n//         isCustomCell: true,\r\n//         ColumnHeader: `Punch ${index + 1}`,\r\n//         isVisible: 1,\r\n//         width: \"13%\",\r\n//         CellProps: {\r\n//             sx: {\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"center\",\r\n//                 alignItems: \"center\",\r\n//                 padding: \"10px\",\r\n//             },\r\n//         },\r\n//         Cell: ({ row }) => {\r\n//             const punches = row.AttendanceDetails\r\n//                 ? row.AttendanceDetails.split(\",\")\r\n//                     .map((p) => p.trim())\r\n//                     .filter((p) => p !== \"\")\r\n//                 : [];\r\n\r\n//             const punch = punches[index] || \"--\";\r\n//             const rawTime = punch.split(\":in(\")[0];\r\n//             const formattedTime = punch !== \"--\" ? formatToAmPm(rawTime) : \"--\";\r\n\r\n//             return formattedTime !== \"--\" ? (\r\n//                 <Chip\r\n//                     label={formattedTime}\r\n//                     variant=\"outlined\"\r\n//                     size=\"small\"\r\n//                     sx={{ color: \"green\", margin: \"2px\" }}\r\n//                 />\r\n//             ) : (\r\n//                 <div style={{ color: \"gray\" }}>--</div>\r\n//             );\r\n//         },\r\n//     }));\r\n\r\n//     const formatAttendanceDate = (logDateTime) => {\r\n//         if (!logDateTime) return \"--\";\r\n//         const [date] = logDateTime.split(\"T\");\r\n//         return `${date} `;\r\n//     };\r\n\r\n//     const handleOverallDownload = async () => {\r\n//         try {\r\n//             const fromDate = filter.From;\r\n//             const [year, month] = fromDate.split(\"-\");\r\n//             const startDate = `${year}-${month}-01`;\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const [attendanceRes, leaveRes] = await Promise.all([\r\n//                 fetchLink({\r\n//                     address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n//                 }),\r\n//                 fetchLink({\r\n//                     address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n//                 }),\r\n//             ]);\r\n\r\n//             if (!attendanceRes.success) throw new Error(\"Attendance data failed\");\r\n\r\n//             const leaveMap = {};\r\n//             (leaveRes?.data || []).forEach((leave) => {\r\n//                 if (leave.Status?.toUpperCase() !== \"APPROVED\") return;\r\n\r\n//                 const userId = leave.User_Id;\r\n//                 if (!userId) return;\r\n\r\n//                 const parseDate = (dateStr) => {\r\n//                     try {\r\n//                         return new Date(\r\n//                             dateStr.includes(\"T\") ? dateStr.split(\"T\")[0] : dateStr\r\n//                         );\r\n//                     } catch {\r\n//                         return null;\r\n//                     }\r\n//                 };\r\n\r\n//                 const leaveStart = parseDate(leave.FromDate);\r\n//                 const leaveEnd = parseDate(leave.ToDate);\r\n//                 if (!leaveStart || !leaveEnd) return;\r\n\r\n//                 let current = new Date(leaveStart);\r\n//                 while (current <= leaveEnd) {\r\n//                     const dateStr = current.toISOString().split(\"T\")[0];\r\n//                     if (!leaveMap[userId]) leaveMap[userId] = {};\r\n//                     leaveMap[userId][dateStr] = true;\r\n//                     current.setDate(current.getDate() + 1);\r\n//                 }\r\n//             });\r\n\r\n//             const { days: dateRange } = getDateRange(startDate, endDate);\r\n//             const exportData = attendanceRes.data.map((emp) => {\r\n//                 const attendanceDetails = tryParseJSON(emp.AttendanceDetails) || [];\r\n//                 const dailyStatus = {};\r\n//                 let presentCount = 0;\r\n\r\n//                 const attendanceLookup = {};\r\n//                 attendanceDetails.forEach((record) => {\r\n//                     if (record?.Date) {\r\n//                         attendanceLookup[record.Date] = {\r\n//                             status: record.AttendanceStatus,\r\n//                             hasPunch: record.Punch1 !== \"[]\",\r\n//                         };\r\n//                     }\r\n//                 });\r\n\r\n//                 dateRange.forEach((date, index) => {\r\n//                     const dayNum = index + 1;\r\n//                     const dayKey = `Day ${dayNum}`;\r\n//                     const isSunday = new Date(date).getDay() === 0;\r\n//                     const userId = emp.User_Mgt_Id;\r\n//                     const attendanceRecord = attendanceLookup[date];\r\n//                     const attendanceStatus = attendanceRecord?.status;\r\n//                     const hasPunch = attendanceRecord?.hasPunch;\r\n\r\n//                     if (isSunday) {\r\n//                         dailyStatus[dayKey] = \"H\";\r\n//                     } else if (userId && leaveMap[userId]?.[date]) {\r\n//                         dailyStatus[dayKey] = \"L\";\r\n//                     } else if (attendanceStatus === \"L\") {\r\n//                         dailyStatus[dayKey] = \"L\";\r\n//                     } else if (attendanceStatus === \"P\") {\r\n//                         dailyStatus[dayKey] = hasPunch ? \"P\" : \"A\";\r\n//                         if (hasPunch) presentCount++;\r\n//                     } else if (attendanceStatus === \"H\") {\r\n//                         dailyStatus[dayKey] = \"H\";\r\n//                     } else {\r\n//                         dailyStatus[dayKey] = \"A\";\r\n//                     }\r\n//                 });\r\n\r\n//                 return {\r\n//                     EmployeeName: emp.username || emp.Name,\r\n//                     TotalPresent: presentCount,\r\n//                     ...dailyStatus,\r\n//                 };\r\n//             });\r\n\r\n//             const headers = [\r\n//                 \"EmployeeName\",\r\n//                 \"TotalPresent\",\r\n//                 ...dateRange.map((_, i) => `Day ${i + 1}`),\r\n//             ];\r\n//             const ws = XLSX.utils.json_to_sheet(exportData);\r\n//             XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n//             const wb = XLSX.utils.book_new();\r\n//             XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n//             XLSX.writeFile(wb, `Attendance_Report_${month}_${year}.xlsx`);\r\n//         } catch (error) {\r\n//             console.error(\"Download failed:\", error);\r\n//             toast.error(\"Failed to generate report\");\r\n//         }\r\n//     };\r\n\r\n//     function getDateRange(start, end) {\r\n//         const dates = [];\r\n//         const current = new Date(start);\r\n//         const endDate = new Date(end);\r\n\r\n//         while (current <= endDate) {\r\n//             dates.push(current.toISOString().split(\"T\")[0]);\r\n//             current.setDate(current.getDate() + 1);\r\n//         }\r\n\r\n//         return { days: dates, count: dates.length };\r\n//     }\r\n\r\n//     function tryParseJSON(jsonString) {\r\n//         try {\r\n//             return jsonString ? JSON.parse(jsonString) : [];\r\n//         } catch {\r\n//             return [];\r\n//         }\r\n//     }\r\n\r\n//     const handleOverallWithPunch = async () => {\r\n//         try {\r\n//             const maxPunches = 6;\r\n\r\n//             const firstLogDate = attendanceData[0]?.LogDate;\r\n//             if (!firstLogDate) {\r\n//                 toast.error(\"No attendance data found\");\r\n//                 return;\r\n//             }\r\n\r\n//             const dateObj = new Date(firstLogDate);\r\n//             const year = dateObj.getFullYear();\r\n//             const month = dateObj.getMonth() + 1;\r\n//             const startDate = `${year}-${month.toString().padStart(2, \"0\")}-01`;\r\n//             const endDate = new Date(year, month, 0).toISOString().split(\"T\")[0];\r\n\r\n//             const leaveResponse = await fetchLink({\r\n//                 address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n//             });\r\n//             const leaveData = leaveResponse?.success ? leaveResponse.data : [];\r\n\r\n//             const leaveMap = {};\r\n//             leaveData.forEach((leave) => {\r\n//                 // Case-insensitive status check\r\n//                 if (leave.Status?.toLowerCase() !== \"approved\") return;\r\n\r\n//                 const userId = String(leave.User_Id);\r\n//                 if (!userId) return;\r\n\r\n//                 const parseDate = (dateStr) => {\r\n//                     const parts = dateStr.split(/[-/]/);\r\n//                     if (parts.length === 3) {\r\n//                         if (parts[2].length === 4) {\r\n//                             return parts[0].length === 2\r\n//                                 ? new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)\r\n//                                 : new Date(`${parts[2]}-${parts[0]}-${parts[1]}`);\r\n//                         }\r\n\r\n//                         return new Date(dateStr);\r\n//                     }\r\n//                     return new Date(dateStr);\r\n//                 };\r\n\r\n//                 const leaveStart = parseDate(leave.FromDate);\r\n//                 const leaveEnd = parseDate(leave.ToDate);\r\n\r\n//                 let currentDate = new Date(leaveStart);\r\n\r\n//                 while (currentDate <= leaveEnd) {\r\n//                     const dateStr = currentDate.toISOString().split(\"T\")[0];\r\n//                     if (!leaveMap[userId]) leaveMap[userId] = {};\r\n\r\n//                     if (currentDate.getDay() !== 0) {\r\n//                         leaveMap[userId][dateStr] = \"L\";\r\n//                     }\r\n//                     currentDate.setDate(currentDate.getDate() + 1);\r\n//                 }\r\n//             });\r\n\r\n//             const filteredAttendanceData = attendanceData.filter((row) =>\r\n//                 selectedEmployees.some(\r\n//                     (user) =>\r\n//                         String(user.UserId) === String(row.User_Mgt_Id) ||\r\n//                         user.UserId === \"ALL\"\r\n//                 )\r\n//             );\r\n\r\n//             const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n//                 acc[row.username] = acc[row.username] || [];\r\n//                 acc[row.username].push(row);\r\n//                 return acc;\r\n//             }, {});\r\n\r\n//             if (Object.keys(groupedData).length === 0) {\r\n//                 toast.error(\"No attendance data found\");\r\n//                 return;\r\n//             }\r\n\r\n//             const wb = XLSX.utils.book_new();\r\n\r\n//             Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n//                 const exportData = userAttendance.map((row) => {\r\n//                     const logDate = new Date(row.LogDate);\r\n//                     const dateStr = logDate.toISOString().split(\"T\")[0];\r\n//                     const isSunday = logDate.getDay() === 0;\r\n\r\n//                     const userId = String(row.User_Mgt_Id);\r\n//                     const hasApprovedLeave = leaveMap[userId]?.[dateStr] === \"L\";\r\n\r\n//                     let attendanceStatus;\r\n//                     if (isSunday) {\r\n//                         attendanceStatus = \"H\";\r\n//                     } else if (hasApprovedLeave) {\r\n//                         attendanceStatus = \"L\";\r\n//                     } else {\r\n//                         const punches =\r\n//                             row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n//                         attendanceStatus = punches.some((p) => p && p !== \"--\") ? \"P\" : \"A\";\r\n//                     }\r\n\r\n//                     const punchColumns = {};\r\n//                     const punches =\r\n//                         row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n//                     for (let i = 0; i < maxPunches; i++) {\r\n//                         punchColumns[`Punch ${i + 1}`] = punches[i] || \"--\";\r\n//                     }\r\n\r\n//                     return {\r\n//                         Employee: username,\r\n//                         \"Log Date\": formatAttendanceDate(row.LogDate),\r\n//                         \"Attendance Status\": attendanceStatus,\r\n//                         ...punchColumns,\r\n//                     };\r\n//                 });\r\n\r\n//                 const columnsOrder = [\r\n//                     \"Employee\",\r\n//                     \"Log Date\",\r\n//                     \"Attendance Status\",\r\n//                     ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n//                 ];\r\n\r\n//                 const reorderedData = exportData.map((row) =>\r\n//                     columnsOrder.reduce((acc, col) => {\r\n//                         acc[col] = row[col] || \"--\";\r\n//                         return acc;\r\n//                     }, {})\r\n//                 );\r\n\r\n//                 XLSX.utils.book_append_sheet(\r\n//                     wb,\r\n//                     XLSX.utils.json_to_sheet(reorderedData),\r\n//                     username.slice(0, 31)\r\n//                 );\r\n//             });\r\n\r\n//             const fileName = `Attendance_Report_${new Date().toLocaleString(\r\n//                 \"default\",\r\n//                 { month: \"long\" }\r\n//             )}_${year}.xlsx`;\r\n//             XLSX.writeFile(wb, fileName);\r\n//         } catch (error) {\r\n//             console.error(\"Error generating report:\", error);\r\n//             toast.error(\"Failed to generate report\");\r\n//         }\r\n//     };\r\n//     const fetchDropdownEmployees = async () => {\r\n//         setLoading(true);\r\n//         try {\r\n//             const data = await fetchLink({\r\n//                 address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n//             });\r\n//             if (data.success) {\r\n//                 setDropdownEmployees(data.data);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             toast.error(\"Failed to fetch employees for dropdown\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e));\r\n//     }, [\r\n//         storage?.UserTypeId,\r\n//         storage?.UserId,\r\n//         storage?.Company_id,\r\n//         storage?.Name,\r\n//         reload,\r\n//     ]);\r\n\r\n//     const fetchAttendanceData = async (From, EmpId) => {\r\n//         try {\r\n//             const userTypeId = storage?.UserTypeId;\r\n//             const [year, month] = From.split(\"-\");\r\n\r\n//             const startDate = `${year}-${month}-01`;\r\n\r\n//             const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n//             const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//             const response = await fetchLink({\r\n//                 address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//                 },\r\n//             });\r\n\r\n//             if (response.success) {\r\n//                 setAttendanceData(response.data);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(\"Error fetching attendance data:\", e);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const queryFilters = {\r\n//             FromDate:\r\n//                 query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n//                     ? query.get(\"FromDate\")\r\n//                     : defaultFilters.Fromdate,\r\n//             ToDate:\r\n//                 query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n//                     ? query.get(\"ToDate\")\r\n//                     : defaultFilters.Todate,\r\n//         };\r\n//         setFilters((pre) => ({\r\n//             ...pre,\r\n//             FromDate: queryFilters.FromDate,\r\n//             ToDate: queryFilters.ToDate,\r\n//         }));\r\n//     }, [location.search]);\r\n\r\n//     useEffect(() => {\r\n//         const FromDate =\r\n//             stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n//                 ? ISOString(stateDetails?.FromDate)\r\n//                 : null;\r\n//         const ToDate =\r\n//             stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n//                 ? ISOString(stateDetails?.ToDate)\r\n//                 : null;\r\n//         if (FromDate && ToDate) {\r\n//             updateQueryString({ FromDate, ToDate });\r\n//             setFilters((pre) => ({\r\n//                 ...pre,\r\n//                 FromDate: ISOString(stateDetails.FromDate),\r\n//                 ToDate: stateDetails.ToDate,\r\n//             }));\r\n//             setReload((pre) => !pre);\r\n//         }\r\n//     }, [stateDetails]);\r\n\r\n//     const updateQueryString = (newFilters) => {\r\n//         const params = new URLSearchParams(newFilters);\r\n//         navigate(`?${params.toString()}`, { replace: true });\r\n//     };\r\n\r\n//     const handleAddEmployeeClose = () => {\r\n//         setAddEmployeeDialogOpen(false);\r\n//     };\r\n\r\n//     const data = () => setViewMode(\"employee\");\r\n//     const dataDepartment = () => setViewMode(\"department\");\r\n//     // const dashboard=()=>setViewMode('default')\r\n\r\n//     const dashboard = () => {\r\n//         setFilters((prev) => ({\r\n//             ...prev,\r\n//             FromDate: prev.FromDate || new Date().toISOString().split(\"T\")[0],\r\n//             ToDate: prev.ToDate || new Date().toISOString().split(\"T\")[0],\r\n//         }));\r\n//         setViewMode(\"default\");\r\n//     };\r\n\r\n//     const ExpendableComponent = ({ row }) => {\r\n//         const departments =\r\n//             typeof row.DepartmentWiseCounts === \"string\"\r\n//                 ? JSON.parse(row.DepartmentWiseCounts)\r\n//                 : row.DepartmentWiseCounts;\r\n\r\n//         return (\r\n//             <table\r\n//                 style={{\r\n//                     width: \"100%\",\r\n//                     borderCollapse: \"collapse\",\r\n//                     marginTop: \"10px\",\r\n//                 }}\r\n//             >\r\n//                 <thead>\r\n//                     <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Department Name\r\n//                         </th>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Total Employees\r\n//                         </th>\r\n//                         <th\r\n//                             style={{\r\n//                                 border: \"1px solid #ccc\",\r\n//                                 padding: \"8px\",\r\n//                                 textAlign: \"left\",\r\n//                             }}\r\n//                         >\r\n//                             Present Today\r\n//                         </th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {departments && departments.length > 0 ? (\r\n//                         departments.map((data, index) => (\r\n//                             <tr key={index} onClick={() => toggleExpand(data.Department)}>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     {data?.Department || \"-\"}\r\n//                                 </td>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//                                         <span\r\n//                                             style={{\r\n//                                                 fontSize: \"1.25rem\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                                 marginRight: \"100px\", // Increased from 15px to 100px\r\n//                                                 minWidth: \"60px\", // Ensures consistent spacing\r\n//                                             }}\r\n//                                         >\r\n//                                             {data?.TotalEmployees || \"-\"}\r\n//                                         </span>\r\n//                                         <span style={{ fontSize: \"1rem\" }}>\r\n//                                             Male / Female: {data?.TotalMaleEmployees || \"0\"} /{\" \"}\r\n//                                             {data?.TotalFemaleEmployees || \"0\"}\r\n//                                         </span>\r\n//                                     </div>\r\n//                                 </td>\r\n//                                 <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                     <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//                                         <span\r\n//                                             style={{\r\n//                                                 fontSize: \"1.25rem\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                                 marginRight: \"100px\", // Increased from 15px to 100px\r\n//                                                 minWidth: \"60px\", // Ensures consistent spacing\r\n//                                             }}\r\n//                                         >\r\n//                                             {data?.TotalPresentToday || \"-\"}\r\n//                                         </span>\r\n//                                         <span style={{ fontSize: \"1rem\" }}>\r\n//                                             Male / Female: {data?.TotalMalePresentToday || \"0\"} /{\" \"}\r\n//                                             {data?.TotalFemalePresentToday || \"0\"}\r\n//                                         </span>\r\n//                                     </div>\r\n//                                 </td>\r\n//                             </tr>\r\n//                         ))\r\n//                     ) : (\r\n//                         <tr>\r\n//                             <td colSpan=\"3\" style={{ padding: \"8px\" }}>\r\n//                                 No Departments Available\r\n//                             </td>\r\n//                         </tr>\r\n//                     )}\r\n//                 </tbody>\r\n//             </table>\r\n//         );\r\n//     };\r\n\r\n//     const handleRefresh = () => {\r\n//         if (loadingOn) loadingOn();\r\n\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e))\r\n//             .finally(() => {\r\n//                 if (loadingOff) loadingOff();\r\n//                 setReload((prev) => !prev);\r\n//             });\r\n//     };\r\n\r\n//     const handleRefreshData = () => {\r\n//         window.location.reload();\r\n//     };\r\n\r\n//     const ExpendableComponent1 = ({ row }) => {\r\n//         let departments = [];\r\n//         let monthlyAttendance = [];\r\n\r\n//         try {\r\n//             departments =\r\n//                 typeof row.Employees === \"string\"\r\n//                     ? JSON.parse(row.Employees)\r\n//                     : row.Employees || [];\r\n\r\n//             monthlyAttendance =\r\n//                 typeof row.MonthlyAverageAttendance === \"string\"\r\n//                     ? JSON.parse(row.MonthlyAverageAttendance)\r\n//                     : row.MonthlyAverageAttendance || [];\r\n//         } catch (err) {\r\n//             departments = [];\r\n//             monthlyAttendance = [];\r\n//         }\r\n\r\n//         const currentYear = new Date().getFullYear();\r\n\r\n//         const monthList = [\r\n//             { name: \"January\", number: 1 },\r\n//             { name: \"February\", number: 2 },\r\n//             { name: \"March\", number: 3 },\r\n//             { name: \"April\", number: 4 },\r\n//             { name: \"May\", number: 5 },\r\n//             { name: \"June\", number: 6 },\r\n//             { name: \"July\", number: 7 },\r\n//             { name: \"August\", number: 8 },\r\n//             { name: \"September\", number: 9 },\r\n//             { name: \"October\", number: 10 },\r\n//             { name: \"November\", number: 11 },\r\n//             { name: \"December\", number: 12 },\r\n//         ];\r\n\r\n//         const attendanceMap = new Map();\r\n//         monthlyAttendance.forEach((item) => {\r\n//             const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n//             attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n//         });\r\n\r\n//         return (\r\n//             <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n//                 <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n//                     <table\r\n//                         style={{\r\n//                             width: \"60%\",\r\n//                             borderCollapse: \"collapse\",\r\n//                             border: \"1px solid #ccc\",\r\n//                         }}\r\n//                     >\r\n//                         <thead>\r\n//                             <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n//                                 <th\r\n//                                     style={{\r\n//                                         border: \"1px solid #ccc\",\r\n//                                         padding: \"5px\",\r\n//                                         textAlign: \"left\",\r\n//                                     }}\r\n//                                 >\r\n//                                     Emp_Name\r\n//                                 </th>\r\n//                                 <th\r\n//                                     style={{\r\n//                                         border: \"1px solid #ccc\",\r\n//                                         padding: \"8px\",\r\n//                                         textAlign: \"left\",\r\n//                                     }}\r\n//                                 >\r\n//                                     Sex\r\n//                                 </th>\r\n//                             </tr>\r\n//                         </thead>\r\n//                         <tbody>\r\n//                             {departments && departments.length > 0 ? (\r\n//                                 departments.map((data, index) => (\r\n//                                     <tr key={index}>\r\n//                                         <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                             {data?.Emp_Name || \"-\"}\r\n//                                         </td>\r\n//                                         <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n//                                             {data?.Sex || \"-\"}\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 ))\r\n//                             ) : (\r\n//                                 <tr>\r\n//                                     <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n//                                         No Employees Available\r\n//                                     </td>\r\n//                                 </tr>\r\n//                             )}\r\n//                         </tbody>\r\n//                     </table>\r\n\r\n//                     <div\r\n//                         style={{\r\n//                             flex: \"1\",\r\n//                             border: \"1px solid #ddd\",\r\n//                             borderRadius: \"5px\",\r\n//                             padding: \"10px\",\r\n//                             overflowX: \"auto\",\r\n//                             whiteSpace: \"nowrap\",\r\n//                         }}\r\n//                     >\r\n//                         <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n//                         <div\r\n//                             style={{\r\n//                                 display: \"flex\",\r\n//                                 gap: \"10px\",\r\n//                             }}\r\n//                         >\r\n//                             {monthList.map((month) => {\r\n//                                 const key = `${month.number}-${currentYear}`;\r\n//                                 const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n//                                 return (\r\n//                                     <div\r\n//                                         key={month.number}\r\n//                                         style={{\r\n//                                             minWidth: \"100px\",\r\n//                                             padding: \"8px\",\r\n//                                             backgroundColor: \"#f0f0f0\",\r\n//                                             color: \"black\",\r\n//                                             borderRadius: \"4px\",\r\n//                                             textAlign: \"center\",\r\n//                                             userSelect: \"none\",\r\n//                                         }}\r\n//                                     >\r\n//                                         <div style={{ fontWeight: \"bold\" }}>\r\n//                                             {month.name} {currentYear}\r\n//                                         </div>\r\n//                                         <div\r\n//                                             style={{\r\n//                                                 marginTop: \"6px\",\r\n//                                                 fontSize: \"14px\",\r\n//                                                 color: \"#555\",\r\n//                                             }}\r\n//                                         >\r\n//                                             {uniqueEmployeeDays}\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 );\r\n//                             })}\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const userTypeId = storage?.UserTypeId;\r\n//         const userId = storage?.UserId;\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     let filteredEmployees = [];\r\n\r\n//                     if (\r\n//                         Number(userTypeId) === 1 ||\r\n//                         Number(userTypeId) === 0 ||\r\n//                         Number(Add_Rights) === 1\r\n//                     ) {\r\n//                         filteredEmployees = data.data;\r\n//                         setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n//                         setIsDropdownDisabled(false);\r\n//                         setDropdownPlaceholder(\"ALL\");\r\n//                     } else {\r\n//                         filteredEmployees = data.data.filter(\r\n//                             (employee) => employee.UserId === userId\r\n//                         );\r\n//                         setFilter((prev) => ({\r\n//                             ...prev,\r\n//                             EmpId: userId,\r\n//                             Name: storage?.Name,\r\n//                         }));\r\n//                         setIsDropdownDisabled(true);\r\n//                         setDropdownPlaceholder(storage?.Name);\r\n//                     }\r\n\r\n//                     setEmployees(filteredEmployees);\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching employees:\", e));\r\n//     }, [\r\n//         storage?.UserTypeId,\r\n//         storage?.UserId,\r\n//         storage?.Company_id,\r\n//         storage?.Name,\r\n//     ]);\r\n\r\n//     useEffect(() => {\r\n//         const companyId = storage?.Company_id;\r\n\r\n//         fetchLink({\r\n//             address: `empAttendance/department?Company_id=${companyId}`,\r\n//             headers: {\r\n//                 Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n//             },\r\n//         })\r\n//             .then((data) => {\r\n//                 if (data.success) {\r\n//                     if (data.others && data.others.department) {\r\n//                         const deptOptions = data.others.department.map((dept) => ({\r\n//                             value: dept.value,\r\n//                             label: dept.label,\r\n//                         }));\r\n//                         setDepartments(deptOptions);\r\n//                     }\r\n//                 }\r\n//             })\r\n//             .catch((e) => console.error(\"Error fetching departments:\", e));\r\n//     }, [storage?.Company_id, reload]);\r\n\r\n//     const handleDepartmentChange = (selected) => {\r\n//         setSelectedDepartment(selected);\r\n\r\n//         setEmployees([]);\r\n//         setSelectedEmployee(null);\r\n\r\n//         if (selected) {\r\n//             fetchLink({\r\n//                 address: `empAttendance/employeesByDepartment`,\r\n//                 method: \"POST\",\r\n//                 bodyData: { department: selected.value },\r\n//             })\r\n//                 .then((data) => {\r\n//                     if (data.success && data.others?.employees) {\r\n//                         const employeeOptions = data.others.employees.map((emp) => ({\r\n//                             value: emp.id || emp.value || emp.Emp_Id,\r\n//                             label: emp.name || emp.label || emp.Emp_Name,\r\n//                         }));\r\n\r\n//                         setEmployees(employeeOptions);\r\n//                     } else {\r\n//                         setEmployees([]);\r\n//                     }\r\n//                 })\r\n//                 .catch((e) => {\r\n//                     console.error(\"Error fetching employees:\", e);\r\n//                     setEmployees([]);\r\n//                 });\r\n//         } else {\r\n//             setEmployees([]);\r\n//         }\r\n//     };\r\n\r\n//     const departmentWiseCounts = React.useMemo(() => {\r\n//         if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n//         try {\r\n//             const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n//             return Array.isArray(parsed) ? parsed : [];\r\n//         } catch (err) {\r\n//             console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n//             return [];\r\n//         }\r\n//     }, [saleOrders]);\r\n\r\n//     const filteredData = React.useMemo(() => {\r\n//         if (!departmentWiseCounts || !departmentWiseCounts.length) return [];\r\n\r\n//         const filteredDepartments = departmentWiseCounts.filter((item) => {\r\n//             return selectedDepartment\r\n//                 ? item.Department === selectedDepartment.label\r\n//                 : true;\r\n//         });\r\n\r\n//         return filteredDepartments.map((dept) => {\r\n//             const employeeList = dept.employees || dept.Employees || [];\r\n\r\n//             const filteredEmployees = selectedEmployee\r\n//                 ? employeeList.filter((emp) => {\r\n//                     if (!emp.Emp_Name) return false;\r\n//                     return (\r\n//                         emp.Emp_Name.trim().toLowerCase() ===\r\n//                         selectedEmployee.label.trim().toLowerCase()\r\n//                     );\r\n//                 })\r\n//                 : employeeList;\r\n\r\n//             return {\r\n//                 ...dept,\r\n//                 Employees: filteredEmployees,\r\n//             };\r\n//         });\r\n//     }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n//     return (\r\n//         <>\r\n//             {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n//                 <>\r\n//                     {viewMode === \"default\" && (\r\n//                         <FilterableTable\r\n//                             title={\r\n//                                 <div className=\"d-flex align-items-center\">\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         disabled\r\n//                                         onClick={() => dashboard()}\r\n//                                     >\r\n//                                         Dashboard\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => data()}\r\n//                                     >\r\n//                                         Employee\r\n//                                     </Button>\r\n//                                     <Button\r\n//                                         size=\"small mx-2\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => dataDepartment()}\r\n//                                     >\r\n//                                         Department\r\n//                                     </Button>\r\n\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <label>From Date</label>\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={(e) =>\r\n//                                                 setFilters({ ...filters, FromDate: e.target.value })\r\n//                                             }\r\n//                                             value={filters?.FromDate}\r\n//                                             className=\"cus-inpt w-auto p-1\"\r\n//                                         />\r\n//                                     </div>\r\n\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <label>To Date</label>\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={(e) =>\r\n//                                                 setFilters({ ...filters, ToDate: e.target.value })\r\n//                                             }\r\n//                                             value={filters?.ToDate}\r\n//                                             className=\"cus-inpt w-auto p-1\"\r\n//                                         />\r\n//                                     </div>\r\n\r\n//                                     <div className=\"p-1\">\r\n//                                         <IconButton\r\n//                                             onClick={() => setReload(!reload)}\r\n//                                             variant=\"outlined\"\r\n//                                             size=\"small\"\r\n//                                         >\r\n//                                             <Search />\r\n//                                         </IconButton>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                             dataArray={saleOrders}\r\n//                             EnableSerialNumber\r\n//                             columns={[\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: \"Tot.Emp\",\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         const total = row?.TotalEmployees ?? 0;\r\n//                                         const male = row?.TotalMaleEmployees ?? 0;\r\n//                                         const female = row?.TotalFemaleEmployees ?? 0;\r\n//                                         return (\r\n//                                             <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n//                                                 <div>{total}</div>\r\n//                                                 <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n//                                                     Male / Female: {male} / {female}\r\n//                                                 </div>\r\n//                                             </div>\r\n//                                         );\r\n//                                     },\r\n//                                 },\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: \"Tot.Pre.Today\",\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         const total = row?.TotalPresentToday ?? 0;\r\n//                                         const male = row?.TotalMalePresentToday ?? 0;\r\n//                                         const female = row?.TotalFemalePresentToday ?? 0;\r\n//                                         return (\r\n//                                             <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n//                                                 <div>{total}</div>\r\n//                                                 <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n//                                                     Male / Female: {male} / {female}\r\n//                                                 </div>\r\n//                                             </div>\r\n//                                         );\r\n//                                     },\r\n//                                 },\r\n//                             ]}\r\n//                             isExpendable={true}\r\n//                             tableMaxHeight={550}\r\n//                             expandableComp={ExpendableComponent}\r\n//                         />\r\n//                     )}\r\n\r\n//                     {viewMode === \"employee\" && (\r\n//                         <>\r\n//                             <Dialog\r\n//                                 open={addEmployeeDialogOpen}\r\n//                                 maxWidth=\"md\"\r\n//                                 PaperProps={{\r\n//                                     style: { width: \"500px\", height: \"500px\" },\r\n//                                 }}\r\n//                             >\r\n//                                 <DialogTitle>Add Employee</DialogTitle>\r\n//                                 <DialogContent>\r\n//                                     <Autocomplete\r\n//                                         multiple\r\n//                                         options={[\r\n//                                             { UserId: \"all\", Name: \"ALL\" },\r\n//                                             ...dropdownEmployees,\r\n//                                         ]}\r\n//                                         getOptionLabel={(option) => option.Name}\r\n//                                         isOptionEqualToValue={(option, value) =>\r\n//                                             option.UserId === value.UserId\r\n//                                         }\r\n//                                         onChange={(event, value) => {\r\n//                                             if (value.some((selected) => selected.UserId === \"all\")) {\r\n//                                                 setSelectedEmployees(dropdownEmployees);\r\n//                                             } else {\r\n//                                                 const uniqueValues = value.filter(\r\n//                                                     (val, index, self) =>\r\n//                                                         index ===\r\n//                                                         self.findIndex((t) => t.UserId === val.UserId)\r\n//                                                 );\r\n//                                                 setSelectedEmployees(uniqueValues);\r\n//                                             }\r\n//                                         }}\r\n//                                         value={\r\n//                                             selectedEmployees.some((user) => user.UserId === \"all\")\r\n//                                                 ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n//                                                 : selectedEmployees\r\n//                                         }\r\n//                                         renderInput={(params) => (\r\n//                                             <TextField {...params} placeholder=\"Employees\" />\r\n//                                         )}\r\n//                                     />\r\n//                                 </DialogContent>\r\n//                                 <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n//                                     <Button\r\n//                                         type=\"button\"\r\n//                                         variant=\"outlined\"\r\n//                                         onClick={() => setSelectedEmployees([])}\r\n//                                     >\r\n//                                         Clear\r\n//                                     </Button>\r\n//                                     <span>\r\n//                                         <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n//                                         <Button onClick={handleOverallWithPunch}>Download</Button>\r\n//                                     </span>\r\n//                                 </DialogActions>\r\n//                             </Dialog>\r\n//                             <Card>\r\n//                                 <CardContent sx={{ minHeight: \"50vh\" }}>\r\n//                                     <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n//                                         <h6 className=\"fa-18\">\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 onClick={() => dashboard()}\r\n//                                             >\r\n//                                                 Dashboard\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 disabled\r\n//                                                 onClick={() => data()}\r\n//                                             >\r\n//                                                 EMPLOYEE\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 size=\"small mx-2\"\r\n//                                                 variant=\"outlined\"\r\n//                                                 onClick={() => dataDepartment()}\r\n//                                             >\r\n//                                                 Department\r\n//                                             </Button>\r\n//                                         </h6>\r\n\r\n//                                         <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                             <Button\r\n//                                                 onClick={handleDownload}\r\n//                                                 variant=\"contained\"\r\n//                                                 disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n//                                             >\r\n//                                                 Individual Report\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 onClick={() => {\r\n//                                                     handleOverallDownload(filter?.From, filter?.To);\r\n//                                                 }}\r\n//                                             >\r\n//                                                 Monthly Report\r\n//                                             </Button>\r\n//                                             <Button\r\n//                                                 onClick={() => {\r\n//                                                     setAddEmployeeDialogOpen(true);\r\n//                                                 }}\r\n//                                             >\r\n//                                                 Cummulative Monthly Report\r\n//                                             </Button>\r\n//                                             <Button onClick={handleSummaryDownload}>Summary</Button>\r\n//                                         </div>\r\n//                                     </div>\r\n\r\n//                                     <div className=\"px-2 row mb-4\">\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Employee</label>\r\n//                                             <Select\r\n//                                                 value={{ value: filter?.EmpId, label: filter?.Name }}\r\n//                                                 onChange={(e) =>\r\n//                                                     setFilter({\r\n//                                                         ...filter,\r\n//                                                         EmpId: e.value,\r\n//                                                         Name: e.label,\r\n//                                                     })\r\n//                                                 }\r\n//                                                 options={[\r\n//                                                     { value: 0, label: `ALL` },\r\n//                                                     ...employees.map((obj) => ({\r\n//                                                         value: obj?.UserId,\r\n//                                                         label: obj?.Name,\r\n//                                                     })),\r\n//                                                 ]}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 isSearchable={true}\r\n//                                                 placeholder={dropdownPlaceholder}\r\n//                                             />\r\n//                                         </div>\r\n\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>From</label>\r\n//                                             <input\r\n//                                                 type=\"month\"\r\n//                                                 className=\"cus-inpt\"\r\n//                                                 value={filter?.From?.slice(0, 7)}\r\n//                                                 onChange={handleFromChange}\r\n//                                             />\r\n//                                         </div>\r\n//                                         <div className=\"col-auto p-2 d-flex align-items-center\">\r\n//                                             <button\r\n//                                                 className=\"btn btn-link ms-2 p-0 mt-3\"\r\n//                                                 onClick={handleRefresh}\r\n//                                                 title=\"Refresh Departments & Employees\"\r\n//                                             >\r\n//                                                 <Refresh fontSize=\"medium\" />\r\n//                                             </button>\r\n//                                         </div>\r\n//                                     </div>\r\n\r\n//                                     <FilterableTable\r\n//                                         dataArray={attendanceData}\r\n//                                         columns={[\r\n//                                             {\r\n//                                                 isCustomCell: true,\r\n//                                                 Cell: ({ row }) => row.username,\r\n//                                                 ColumnHeader: \"Employee\",\r\n//                                                 isVisible: 1,\r\n//                                                 width: \"20%\",\r\n//                                                 CellProps: {\r\n//                                                     sx: {\r\n//                                                         padding: \"10px\",\r\n//                                                         textAlign: \"left\",\r\n//                                                         fontWeight: \"bold\",\r\n//                                                     },\r\n//                                                 },\r\n//                                             },\r\n//                                             {\r\n//                                                 isCustomCell: true,\r\n//                                                 Cell: ({ row }) =>\r\n//                                                     formatAttendanceDate(row.LogDate || \"--\"),\r\n//                                                 ColumnHeader: \"Log Date\",\r\n//                                                 isVisible: 1,\r\n//                                                 width: \"20%\",\r\n//                                                 CellProps: {\r\n//                                                     sx: {\r\n//                                                         padding: \"10px\",\r\n//                                                         textAlign: \"center\",\r\n//                                                         color: \"gray\",\r\n//                                                     },\r\n//                                                 },\r\n//                                             },\r\n//                                             ...punchColumns,\r\n//                                         ]}\r\n//                                         EnableSerialNumber\r\n//                                         CellSize=\"small\"\r\n//                                         disablePagination={false}\r\n//                                     />\r\n//                                 </CardContent>\r\n//                             </Card>\r\n//                         </>\r\n//                     )}\r\n\r\n//                     {viewMode === \"department\" && (\r\n//                         <FilterableTable\r\n//                             title={\r\n//                                 <div className=\"d-flex flex-column\">\r\n//                                     <div className=\"d-flex align-items-center mb-3\">\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             onClick={() => dashboard()}\r\n//                                         >\r\n//                                             Dashboard\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             onClick={() => data()}\r\n//                                         >\r\n//                                             Employee\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             size=\"small mx-2\"\r\n//                                             variant=\"outlined\"\r\n//                                             disabled\r\n//                                             onClick={() => dataDepartment()}\r\n//                                         >\r\n//                                             Department\r\n//                                         </Button>\r\n//                                     </div>\r\n\r\n//                                     <div className=\"row align-items-end\">\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Department</label>\r\n//                                             <Select\r\n//                                                 options={departments}\r\n//                                                 isSearchable\r\n//                                                 placeholder=\"ALL\"\r\n//                                                 value={selectedDepartment}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 onChange={handleDepartmentChange}\r\n//                                             />\r\n//                                         </div>\r\n\r\n//                                         <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                             <label>Employee</label>\r\n//                                             <Select\r\n//                                                 options={employees}\r\n//                                                 isSearchable\r\n//                                                 placeholder=\"ALL\"\r\n//                                                 value={selectedEmployee}\r\n//                                                 styles={customSelectStyles}\r\n//                                                 onChange={setSelectedEmployee}\r\n//                                                 isDisabled={!selectedDepartment}\r\n//                                             />\r\n//                                         </div>\r\n//                                         <div className=\"col-auto p-2 d-flex align-items-center\">\r\n//                                             <button\r\n//                                                 className=\"btn btn-link ms-2 p-0 mb-2\"\r\n//                                                 onClick={handleRefreshData}\r\n//                                                 style={{ minWidth: \"24px\" }}\r\n//                                                 title=\"Refresh Departments & Employees\"\r\n//                                             >\r\n//                                                 <Refresh fontSize=\"small\" />\r\n//                                             </button>\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             }\r\n//                             dataArray={filteredData}\r\n//                             EnableSerialNumber\r\n//                             columns={[\r\n//                                 createCol(\"Department\", \"string\", \"Department\"),\r\n//                                 createCol(\r\n//                                     \"TotalMaleEmployees\",\r\n//                                     \"number\",\r\n//                                     \"Total Male Employees\"\r\n//                                 ),\r\n//                                 createCol(\r\n//                                     \"TotalFemaleEmployees\",\r\n//                                     \"number\",\r\n//                                     \"Total Female Employees\"\r\n//                                 ),\r\n//                                 createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n//                                 createCol(\r\n//                                     \"TotalMalePresentToday\",\r\n//                                     \"number\",\r\n//                                     \"Total Male Present Today\"\r\n//                                 ),\r\n//                                 createCol(\r\n//                                     \"TotalFemalePresentToday\",\r\n//                                     \"number\",\r\n//                                     \"Total Female Present Today\"\r\n//                                 ),\r\n//                                 createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n//                             ]}\r\n//                             isExpendable={true}\r\n//                             tableMaxHeight={550}\r\n//                             expandableComp={ExpendableComponent1}\r\n//                         />\r\n//                     )}\r\n//                 </>\r\n//             ) : (\r\n//                 <>\r\n//                     <Dialog\r\n//                         open={addEmployeeDialogOpen}\r\n//                         maxWidth=\"md\"\r\n//                         PaperProps={{\r\n//                             style: { width: \"500px\", height: \"500px\" },\r\n//                         }}\r\n//                     >\r\n//                         <DialogTitle>Add Employee</DialogTitle>\r\n//                         <DialogContent>\r\n//                             <Autocomplete\r\n//                                 multiple\r\n//                                 options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n//                                 getOptionLabel={(option) => option.Name}\r\n//                                 isOptionEqualToValue={(option, value) =>\r\n//                                     option.UserId === value.UserId\r\n//                                 }\r\n//                                 value={\r\n//                                     selectedEmployees.some((user) => user.UserId === \"all\")\r\n//                                         ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n//                                         : selectedEmployees\r\n//                                 }\r\n//                                 onChange={(event, value) => {\r\n//                                     if (value.some((selected) => selected.UserId === \"all\")) {\r\n//                                         setSelectedEmployees(dropdownEmployees);\r\n//                                     } else {\r\n//                                         const uniqueValues = value.filter(\r\n//                                             (val, index, self) =>\r\n//                                                 index === self.findIndex((t) => t.UserId === val.UserId)\r\n//                                         );\r\n//                                         setSelectedEmployees(uniqueValues);\r\n//                                     }\r\n//                                 }}\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} placeholder=\"Employees\" />\r\n//                                 )}\r\n//                             />\r\n//                         </DialogContent>\r\n//                         <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n//                             <Button\r\n//                                 variant=\"outlined\"\r\n//                                 onClick={() => setSelectedEmployees([])}\r\n//                             >\r\n//                                 Clear\r\n//                             </Button>\r\n//                             <span>\r\n//                                 <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n//                                 <Button onClick={handleOverallWithPunch}>Download</Button>\r\n//                             </span>\r\n//                         </DialogActions>\r\n//                     </Dialog>\r\n\r\n//                     <Card>\r\n//                         <CardContent sx={{ minHeight: \"50vh\" }}>\r\n//                             <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n//                                 <h6 className=\"fa-18\">\r\n//                                     <Button size=\"small\" variant=\"outlined\" className=\"mx-2\">\r\n//                                         EMPLOYEE\r\n//                                     </Button>\r\n//                                 </h6>\r\n\r\n//                                 {(userTypeId === 1 || userTypeId === 0) && (\r\n//                                     <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n//                                         <Button\r\n//                                             onClick={handleDownload}\r\n//                                             variant=\"contained\"\r\n//                                             disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n//                                         >\r\n//                                             Individual Report\r\n//                                         </Button>\r\n//                                         <Button\r\n//                                             onClick={() =>\r\n//                                                 handleOverallDownload(filter?.From, filter?.To)\r\n//                                             }\r\n//                                         >\r\n//                                             Monthly Report\r\n//                                         </Button>\r\n//                                         <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n//                                             Cumulative Monthly Report\r\n//                                         </Button>\r\n//                                         <Button onClick={handleSummaryDownload}>Summary</Button>\r\n//                                     </div>\r\n//                                 )}\r\n//                             </div>\r\n\r\n//                             <div className=\"px-2 row mb-4\">\r\n//                                 <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                     <label>Employee</label>\r\n//                                     <Select\r\n//                                         value={{ value: filter?.EmpId, label: filter?.Name }}\r\n//                                         onChange={(e) =>\r\n//                                             setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n//                                         }\r\n//                                         options={[\r\n//                                             { value: 0, label: \"ALL\" },\r\n//                                             ...employees.map((obj) => ({\r\n//                                                 value: obj.UserId,\r\n//                                                 label: obj.Name,\r\n//                                             })),\r\n//                                         ]}\r\n//                                         styles={customSelectStyles}\r\n//                                         isSearchable\r\n//                                         placeholder={dropdownPlaceholder}\r\n//                                         isDisabled={isDropdownDisabled}\r\n//                                     />\r\n//                                 </div>\r\n\r\n//                                 <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                                     <label>From</label>\r\n//                                     <input\r\n//                                         type=\"month\"\r\n//                                         className=\"cus-inpt\"\r\n//                                         value={filter?.From?.slice(0, 7)}\r\n//                                         onChange={handleFromChange}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n\r\n//                             <FilterableTable\r\n//                                 dataArray={attendanceData}\r\n//                                 columns={[\r\n//                                     {\r\n//                                         isCustomCell: true,\r\n//                                         Cell: ({ row }) => row.username,\r\n//                                         ColumnHeader: \"Employee\",\r\n//                                         isVisible: 1,\r\n//                                         width: \"20%\",\r\n//                                         CellProps: {\r\n//                                             sx: {\r\n//                                                 padding: \"10px\",\r\n//                                                 textAlign: \"left\",\r\n//                                                 fontWeight: \"bold\",\r\n//                                             },\r\n//                                         },\r\n//                                     },\r\n//                                     {\r\n//                                         isCustomCell: true,\r\n//                                         Cell: ({ row }) =>\r\n//                                             formatAttendanceDate(row.LogDate || \"--\"),\r\n//                                         ColumnHeader: \"Log Date\",\r\n//                                         isVisible: 1,\r\n//                                         width: \"20%\",\r\n//                                         CellProps: {\r\n//                                             sx: {\r\n//                                                 padding: \"10px\",\r\n//                                                 textAlign: \"center\",\r\n//                                                 color: \"gray\",\r\n//                                             },\r\n//                                         },\r\n//                                     },\r\n//                                     ...punchColumns,\r\n//                                 ]}\r\n//                                 EnableSerialNumber\r\n//                                 CellSize=\"small\"\r\n//                                 disablePagination={false}\r\n//                             />\r\n//                         </CardContent>\r\n//                     </Card>\r\n//                 </>\r\n//             )}\r\n//         </>\r\n//     );\r\n// };\r\n// export default AttendanceNewScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  IconButton,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { ISOString, isValidDate } from \"../../Components/functions\";\r\n// import InvoiceBillTemplate from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { Search, Refresh } from \"@mui/icons-material\";\r\n// import { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  Chip,\r\n  Autocomplete,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as XLSX from \"xlsx\";\r\nimport DefaultLeave from \"./defaultLeave\";\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst AttendanceNewScreen = ({ loadingOn, loadingOff }) => {\r\n  const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const stateDetails = location.state;\r\n\r\n  const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n\r\n  const getCurrentMonthYear = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    return `${year}-${month}`;\r\n  };\r\n\r\n  const initialValue = {\r\n    From: getCurrentMonthYear(),\r\n    To: getCurrentMonthYear(),\r\n    EmpId: \"0\",\r\n    Name: \"ALL\",\r\n  };\r\n  const query = useQuery();\r\n\r\n  const defaultFilters = {\r\n    From: getCurrentMonthYear(),\r\n    To: getCurrentMonthYear(),\r\n  };\r\n\r\n  const [saleOrders, setSaleOrders] = useState([]);\r\n  const [viewMode, setViewMode] = useState(\"default\");\r\n  const [expandedDepartment, setExpandedDepartment] = useState([]);\r\n\r\n  const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n  const [reload, setReload] = useState(false);\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [isDropdownDisabled, setIsDropdownDisabled] = useState(false);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n  const userTypeId = storage?.UserTypeId;\r\n  const parseData = storage;\r\n  const { contextObj } = useContext(MyContext);\r\n\r\n  const [dropdownPlaceholder, setDropdownPlaceholder] = useState(\"ALL\");\r\n  const [filter, setFilter] = useState(initialValue);\r\n  const [debouncedFilter, setDebouncedFilter] = useState(filter);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setDebouncedFilter(filter);\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const { From, EmpId } = debouncedFilter;\r\n    if (From && (EmpId || EmpId === 0)) {\r\n      fetchAttendanceData(From, EmpId);\r\n      fetchDropdownEmployees();\r\n    }\r\n  }, [debouncedFilter]);\r\n\r\n  const getDaysInMonth = (monthYear) => {\r\n    if (!monthYear) return 0;\r\n\r\n    const [year, month] = monthYear.split(\"-\");\r\n\r\n    return new Date(year, month, 0).getDate();\r\n  };\r\n\r\n  const [filters, setFilters] = useState({\r\n    FromDate: new Date().toISOString().split(\"T\")[0],\r\n    ToDate: new Date().toISOString().split(\"T\")[0],\r\n    Cancel_status: 0,\r\n  });\r\n\r\n  const toggleExpand = (department) => {\r\n    if (expandedDepartment === department) {\r\n      setExpandedDepartment(null);\r\n    } else {\r\n      setExpandedDepartment(department);\r\n    }\r\n  };\r\n  const [departments, setDepartments] = useState([]);\r\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n\r\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n  const Add_Rights = contextObj?.Add_Rights;\r\n\r\n  useEffect(() => {\r\n    if (loadingOn) loadingOn();\r\n\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    const fromDate = filters.FromDate || today;\r\n    const toDate = filters.ToDate || today;\r\n\r\n    fetchLink({\r\n      address: `empAttendance/departmentwise?FromDate=${fromDate}&ToDate=${toDate}`,\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          setSaleOrders(data?.data);\r\n        }\r\n      })\r\n      .catch((e) => console.error(e))\r\n      .finally(() => {\r\n        if (loadingOff) loadingOff();\r\n      });\r\n  }, [reload]);\r\n\r\n  const handleFromChange = (e) => {\r\n    const getDaysInMonth = (monthYear) => {\r\n      if (!monthYear) return 0;\r\n\r\n      const [year, month] = monthYear.split(\"-\");\r\n\r\n      return new Date(year, month, 0).getDate();\r\n    };\r\n    const selectedMonth = e.target.value;\r\n    const [year, month] = selectedMonth.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    setFilter({\r\n      From: startDate,\r\n      To: endDate,\r\n      EmpId: filter.EmpId || 0,\r\n      Name: filter?.Name,\r\n    });\r\n  };\r\n\r\nconst handleSummaryDownload = async () => {\r\n  try {\r\n    const fromDate = filter.From;\r\n    const [year, month] = fromDate.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    const response = await fetchLink({\r\n      address: `userModule/employeeActivity/summary?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n\r\n    if (response.success) {\r\n      const overallData = response.data;\r\n\r\n      // Build all dates in month\r\n      const getDateRange = (from, to) => {\r\n        const allDates = [];\r\n        const start = new Date(from);\r\n        const end = new Date(to);\r\n        let sundayCount = 0;\r\n\r\n        while (start <= end) {\r\n          const dateStr = start.toISOString().split(\"T\")[0];\r\n          allDates.push(dateStr);\r\n          if (start.getDay() === 0) sundayCount++; // Sunday\r\n          start.setDate(start.getDate() + 1);\r\n        }\r\n\r\n        return {\r\n          days: allDates,\r\n          sundayCount,\r\n          totalDays: allDates.length,\r\n        };\r\n      };\r\n\r\n      const { days: dateRange, sundayCount, totalDays } = getDateRange(startDate, endDate);\r\n\r\nconst summaryData = overallData.map((row) => {\r\n  const punchDetails = Array.isArray(row.AttendanceDetails)\r\n    ? row.AttendanceDetails\r\n    : row.AttendanceDetails\r\n    ? JSON.parse(row.AttendanceDetails)\r\n    : [];\r\n\r\n  let totalPresent = 0;\r\n  let companyHoliday = 0;\r\n\r\n  const workingDays = dateRange.filter(date => new Date(date).getDay() !== 0); // exclude Sundays\r\n\r\n  workingDays.forEach(date => {\r\n    const dayRecord = punchDetails.find(p => p.Date.startsWith(date));\r\n    if (dayRecord) {\r\n      if (dayRecord.AttendanceStatus === \"P\") {\r\n        totalPresent++;\r\n      } else if (dayRecord.AttendanceStatus === \"H\") {\r\n        companyHoliday++;\r\n      }\r\n    }\r\n  });\r\n\r\n  const approvedLeave = row.ApprovedLeave || 0;\r\n  const pendingLeave = row.PendingLeave || 0;\r\n  const totalWorkingDays = workingDays.length;\r\n\r\n  const totalAbsent =\r\n    totalWorkingDays - (totalPresent + approvedLeave + companyHoliday);\r\n\r\n  return {\r\n    Name: row.Name,\r\n    TotalPresent: totalPresent,\r\n    ApprovedLeave: approvedLeave,\r\n    PendingLeave: pendingLeave,\r\n    CompanyHoliday: companyHoliday,\r\n    TotalAbsent: totalAbsent < 0 ? 0 : totalAbsent,\r\n    NumberOfSundays: sundayCount,\r\n  };\r\n});\r\n\r\n// Create Excel Sheet\r\nconst ws = XLSX.utils.json_to_sheet(summaryData);\r\n\r\nconst headers = [\r\n  \"Name\",\r\n  \"TotalPresent\",\r\n  \"ApprovedLeave\",\r\n  \"PendingLeave\",\r\n  \"CompanyHoliday\",\r\n  \"TotalAbsent\",\r\n  \"NumberOfSundays\",\r\n];\r\n\r\n// Add headers to the top\r\nXLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n// Create workbook and download\r\nconst wb = XLSX.utils.book_new();\r\nXLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary\");\r\n\r\nXLSX.writeFile(wb, `Attendance_Summary_${month}_${year}.xlsx`);\r\n\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error downloading attendance summary:\", error);\r\n    toast.error(\"Failed to generate summary report\");\r\n  }\r\n};\r\n\r\n\r\n\r\n// const handleSummaryDownload = async () => {\r\n//   try {\r\n//     const fromDate = filter.From;\r\n//     const [year, month] = fromDate.split(\"-\");\r\n//     const startDate = `${year}-${month}-01`;\r\n//     const dayCount = getDaysInMonth(`${year}-${month}`);\r\n//     const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n//     // Fetch all required data\r\n//     const [attendanceRes, leaveRes, defaultLeaveRes] = await Promise.all([\r\n//       fetchLink({ address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//       fetchLink({ address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//       fetchLink({ address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}` }),\r\n//     ]);\r\n\r\n//     if (!attendanceRes.success) {\r\n//       toast.error(\"Failed to fetch attendance data\");\r\n//       return;\r\n//     }\r\n\r\n//     const overallData = attendanceRes.data;\r\n//     const allLeaves = leaveRes?.data ? leaveRes.data : [];\r\n//     const defaultLeaves = defaultLeaveRes?.success ? defaultLeaveRes.data : [];\r\n\r\n// const approvedLeaveMap = {};\r\n// const pendingLeaveMap = {};\r\n\r\n// allLeaves.forEach(leave => {\r\n//   const userId = String(leave.User_Id);\r\n//   if (!userId) return;\r\n\r\n//   const status = leave.Status?.toLowerCase();\r\n//   const from = new Date(leave.FromDate);\r\n//   const to = new Date(leave.ToDate);\r\n\r\n//   let current = new Date(from);\r\n//   while (current <= to) {\r\n//     const dateStr = current.toISOString().split(\"T\")[0];\r\n\r\n//     if (status === \"approved\") {\r\n//       if (!approvedLeaveMap[userId]) approvedLeaveMap[userId] = {};\r\n//       approvedLeaveMap[userId][dateStr] = true;\r\n//       console.log(`✅ Approved leave set -> User: ${userId}, Date: ${dateStr}`);\r\n//     } else {\r\n//       if (!pendingLeaveMap[userId]) pendingLeaveMap[userId] = {};\r\n//       pendingLeaveMap[userId][dateStr] = true;\r\n//       console.log(`🕒 Pending leave set -> User: ${userId}, Date: ${dateStr}`);\r\n//     }\r\n\r\n//     current.setDate(current.getDate() + 1);\r\n//   }\r\n// });\r\n\r\n\r\n\r\n//     const defaultLeaveDates = new Set(\r\n//       defaultLeaves.map(d => d.Date?.split(\"T\")[0]).filter(Boolean)\r\n//     );\r\n\r\n//     const getDateRange = (start, end) => {\r\n//       const dates = [];\r\n//       let current = new Date(start);\r\n//       const endDate = new Date(end);\r\n      \r\n//       while (current <= endDate) {\r\n//         dates.push(current.toISOString().split(\"T\")[0]);\r\n//         current.setDate(current.getDate() + 1);\r\n//       }\r\n//       return dates;\r\n//     };\r\n\r\n//     const dateRange = getDateRange(startDate, endDate);\r\n//     const totalWorkingDays = dateRange.filter(date => new Date(date).getDay() !== 0).length;\r\n\r\n//     const summaryData = overallData.map((employee) => {\r\n//       const punchDetails = employee.AttendanceDetails ? JSON.parse(employee.AttendanceDetails) : [];\r\n//       const userId = String(employee.EmployeeID);\r\n      \r\n//       let totalPresent = 0;\r\n//       let totalApprovedLeave = 0;\r\n//       let totalPendingLeave = 0;\r\n//       let totalSundays = 0;\r\n//       let totalDefaultLeave = 0;\r\n//       let totalUnmarkedDays = 0;\r\n\r\n//  dateRange.forEach(date => {\r\n//   const dateObj = new Date(date);\r\n//   const dateStr = dateObj.toISOString().split(\"T\")[0];\r\n//   const isSunday = dateObj.getDay() === 0;\r\n//   const isDefaultLeave = defaultLeaveDates.has(dateStr);\r\n//   const attendanceRecord = punchDetails.find(d => d.Date === dateStr);\r\n\r\n//   const isApprovedLeave = approvedLeaveMap[userId]?.[dateStr] === true;\r\n//   const isPendingLeave = pendingLeaveMap[userId]?.[dateStr] === true;\r\n\r\n//   console.log(`📅 ${dateStr} - User ${String(userId)} | Approved: ${isApprovedLeave} | Pending: ${isPendingLeave}`);\r\n\r\n//   if (isSunday) {\r\n//     totalSundays++;\r\n//     if (attendanceRecord?.AttendanceStatus === \"P\") totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isDefaultLeave) {\r\n//     totalDefaultLeave++;\r\n//     if (attendanceRecord?.AttendanceStatus === \"P\") totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isApprovedLeave) {\r\n//     totalApprovedLeave++;\r\n//     totalPresent++;\r\n//     return;\r\n//   }\r\n\r\n//   if (isPendingLeave) {\r\n//     totalPendingLeave++;\r\n//     return;\r\n//   }\r\n\r\n//   if (attendanceRecord) {\r\n//     if (attendanceRecord.AttendanceStatus === \"P\") {\r\n//       totalPresent++;\r\n//     } else {\r\n//       totalUnmarkedDays++;\r\n//     }\r\n//   } else {\r\n//     totalUnmarkedDays++;\r\n//   }\r\n// });\r\n\r\n\r\n\r\n//       return {\r\n//         EmployeeName: employee.Name,\r\n//         EmployeeID: employee.EmployeeID,\r\n//         Month: `${month}-${year}`,\r\n//         Branch: employee.Branch,\r\n//         TotalWorkingDays: totalWorkingDays,\r\n//         TotalSundays: totalSundays,\r\n//         TotalDefaultLeave: totalDefaultLeave,\r\n//         TotalPresent: totalPresent,\r\n//         TotalApprovedLeave: totalApprovedLeave,\r\n//         TotalPendingLeave: totalPendingLeave,\r\n//         TotalUnmarkedDays: totalUnmarkedDays,\r\n//       };\r\n//     });\r\n\r\n//     const exportData = summaryData.map(item => ({\r\n//       \"Employee Name\": item.EmployeeName,\r\n//       \"Employee ID\": item.EmployeeID,\r\n//       \"Month\": item.Month,\r\n//       \"Branch\": item.Branch,\r\n//       \"Total Working Days\": item.TotalWorkingDays,\r\n//       \"Sundays\": item.TotalSundays,\r\n//       \"Company Holidays\": item.TotalDefaultLeave,\r\n//       \"Present Days\": item.TotalPresent,\r\n//       \"Approved Leave Days\": item.TotalApprovedLeave,\r\n//       \"Pending Leave Days\": item.TotalPendingLeave,\r\n//       \"Absent Days\": item.TotalUnmarkedDays,\r\n//     }));\r\n\r\n//     const ws = XLSX.utils.json_to_sheet(exportData);\r\n//     const wb = XLSX.utils.book_new();\r\n//     XLSX.utils.book_append_sheet(wb, ws, \"Attendance Summary\");\r\n//     XLSX.writeFile(wb, `Attendance_Summary_${month}_${year}.xlsx`);\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error downloading summary report:\", error);\r\n//     toast.error(\"Failed to generate attendance report\");\r\n//   }\r\n// };\r\n\r\n  const handleDownload = () => {\r\n    const maxPunches = 4;\r\n\r\n    const exportData = attendanceData.map((row) => {\r\n      const punchDetails = row.AttendanceDetails\r\n        ? row.AttendanceDetails.split(\",\").filter((p) => p.trim() !== \"\")\r\n        : [];\r\n\r\n      let attendanceStatus = row.AttendanceStatus;\r\n\r\n      if (!attendanceStatus) {\r\n        attendanceStatus = punchDetails.length === 0 ? \"A\" : \"P\";\r\n      }\r\n\r\n      const punchColumns = {};\r\n      for (let i = 0; i < maxPunches; i++) {\r\n        punchColumns[`Punch${i + 1}`] = punchDetails[i]\r\n          ? punchDetails[i].trim()\r\n          : \"--\";\r\n      }\r\n\r\n      return {\r\n        Employee: row.username || row.Employee,\r\n        \"Log Date\": formatAttendanceDate(row.LogDate),\r\n        \"Attendance Status\": attendanceStatus,\r\n        ...punchColumns,\r\n      };\r\n    });\r\n\r\n    const columnsOrder = [\r\n      \"Employee\",\r\n      \"Log Date\",\r\n      \"Attendance Status\",\r\n      \"Punch1\",\r\n      \"Punch2\",\r\n      \"Punch3\",\r\n      \"Punch4\",\r\n      \"Punch5\",\r\n      \"Punch6\"\r\n    ];\r\n\r\n    const reorderedData = exportData.map((row) =>\r\n      columnsOrder.reduce((acc, col) => {\r\n        acc[col] = row[col] || \"--\";\r\n        return acc;\r\n      }, {})\r\n    );\r\n\r\n    const ws = XLSX.utils.json_to_sheet(reorderedData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n\r\n    XLSX.writeFile(wb, \"Attendance_Report.xlsx\");\r\n  };\r\n\r\n  const MAX_PUNCHES = 6;\r\n\r\n  function formatToAmPm(timeString) {\r\n    if (!timeString) return \"--\";\r\n    const [hourStr, minuteStr] = timeString.split(\":\");\r\n    if (!hourStr || !minuteStr) return \"--\";\r\n\r\n    let hour = parseInt(hourStr, 10);\r\n    const minute = minuteStr;\r\n    const ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n    hour = hour % 12 || 12;\r\n\r\n    return `${hour.toString().padStart(2, \"0\")}:${minute} ${ampm}`;\r\n  }\r\n\r\n  const punchColumns = Array.from({ length: MAX_PUNCHES }, (_, index) => ({\r\n    isCustomCell: true,\r\n    ColumnHeader: `Punch ${index + 1}`,\r\n    isVisible: 1,\r\n    width: \"13%\",\r\n    CellProps: {\r\n      sx: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        padding: \"10px\",\r\n      },\r\n    },\r\n    Cell: ({ row }) => {\r\n      const punches = row.AttendanceDetails\r\n        ? row.AttendanceDetails.split(\",\")\r\n            .map((p) => p.trim())\r\n            .filter((p) => p !== \"\")\r\n        : [];\r\n\r\n      const punch = punches[index] || \"--\";\r\n      const rawTime = punch.split(\":in(\")[0];\r\n      const formattedTime = punch !== \"--\" ? formatToAmPm(rawTime) : \"--\";\r\n\r\n      return formattedTime !== \"--\" ? (\r\n        <Chip\r\n          label={formattedTime}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          sx={{ color: \"green\", margin: \"2px\" }}\r\n        />\r\n      ) : (\r\n        <div style={{ color: \"gray\" }}>--</div>\r\n      );\r\n    },\r\n  }));\r\n\r\n  const formatAttendanceDate = (logDateTime) => {\r\n    if (!logDateTime) return \"--\";\r\n    const [date] = logDateTime.split(\"T\");\r\n    return `${date} `;\r\n  };\r\n\r\n\r\n  \r\nconst handleOverallDownload = async () => {\r\n  try {\r\n    const fromDate = filter.From;\r\n    const [year, month] = fromDate.split(\"-\");\r\n    const startDate = `${year}-${month}-01`;\r\n    const dayCount = getDaysInMonth(`${year}-${month}`);\r\n    const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n    const [attendanceRes, leaveRes, defaultLeaveRes] = await Promise.all([\r\n      fetchLink({\r\n        address: `userModule/employeActivity/employeeAttendanceModuledownload?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n      fetchLink({\r\n        address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n      fetchLink({\r\n        address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}`,\r\n      }),\r\n    ]);\r\n\r\n    if (!attendanceRes.success) throw new Error(\"Attendance data failed\");\r\n\r\n    const leaveMap = {};\r\n    const defaultLeaveDates = new Set();\r\n\r\n \r\n    (leaveRes?.data || []).forEach((leave) => {\r\n      if (leave.Status?.toUpperCase() !== \"APPROVED\") return;\r\n\r\n      const userId = leave.User_Id;\r\n      if (!userId) return;\r\n\r\n      let current = new Date(leave.FromDate);\r\n      const leaveEnd = new Date(leave.ToDate);\r\n\r\n      while (current <= leaveEnd) {\r\n        const dateStr = current.toISOString().split(\"T\")[0];\r\n        if (!leaveMap[userId]) leaveMap[userId] = {};\r\n        leaveMap[userId][dateStr] = true;\r\n        current.setDate(current.getDate() + 1);\r\n      }\r\n    });\r\n\r\n    (defaultLeaveRes?.data || []).forEach((defaultLeave) => {\r\n      const dateStr = new Date(defaultLeave.Date).toISOString().split(\"T\")[0];\r\n      defaultLeaveDates.add(dateStr);\r\n    });\r\n\r\n    const { days: dateRange } = getDateRange(startDate, endDate);\r\n    const exportData = attendanceRes.data.map((emp) => {\r\n      const attendanceDetails = tryParseJSON(emp.AttendanceDetails) || [];\r\n      const dailyStatus = {};\r\n      let presentCount = 0;\r\n\r\n       const attendanceLookup = {};\r\n      attendanceDetails.forEach((record) => {\r\n        const dateStr = new Date(record.Date).toISOString().split(\"T\")[0];\r\n        attendanceLookup[dateStr] = {\r\n          status: record.AttendanceStatus,\r\n          hasPunch: record.Punch1 !== \"[]\",\r\n        };\r\n      });\r\n\r\n      dateRange.forEach((date, index) => {\r\n        const dayKey = `Day ${index + 1}`;\r\n        const userId = emp.User_Mgt_Id;\r\n        const dateStr = new Date(date).toISOString().split(\"T\")[0];\r\n        const isSunday = new Date(date).getDay() === 0;\r\n\r\n        const attendanceRecord = attendanceLookup[dateStr];\r\n        const attendanceStatus = attendanceRecord?.status;\r\n        const hasPunch = attendanceRecord?.hasPunch;\r\n        if (defaultLeaveDates.has(dateStr)) {\r\n          if (attendanceStatus === \"P\" && hasPunch) {\r\n            dailyStatus[dayKey] = \"P\";\r\n            presentCount++;\r\n          } else {\r\n            dailyStatus[dayKey] = \"DL\";\r\n          }\r\n        } else if (isSunday) {\r\n          dailyStatus[dayKey] = \"H\";\r\n        } else if (leaveMap[userId]?.[dateStr]) {\r\n          dailyStatus[dayKey] = \"L\";\r\n        } else if (attendanceStatus === \"L\") {\r\n          dailyStatus[dayKey] = \"L\";\r\n        } else if (attendanceStatus === \"P\") {\r\n          dailyStatus[dayKey] = hasPunch ? \"P\" : \"A\";\r\n          if (hasPunch) presentCount++;\r\n        } else if (attendanceStatus === \"H\") {\r\n          dailyStatus[dayKey] = \"H\";\r\n        } else {\r\n          dailyStatus[dayKey] = \"A\";\r\n        }\r\n      });\r\n\r\n      return {\r\n        EmployeeName: emp.username || emp.Name,\r\n        TotalPresent: presentCount,\r\n        ...dailyStatus,\r\n      };\r\n    });\r\n\r\n    const headers = [\r\n      \"EmployeeName\",\r\n      \"TotalPresent\",\r\n      ...dateRange.map((_, i) => `Day ${i + 1}`),\r\n    ];\r\n    const ws = XLSX.utils.json_to_sheet(exportData);\r\n    XLSX.utils.sheet_add_aoa(ws, [headers], { origin: \"A1\" });\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Attendance Report\");\r\n    XLSX.writeFile(wb, `Attendance_Report_${month}_${year}.xlsx`);\r\n  } catch (error) {\r\n    console.error(\"Download failed:\", error);\r\n    toast.error(\"Failed to generate report\");\r\n  }\r\n};\r\n\r\n  \r\n  \r\n  function getDateRange(start, end) {\r\n    const dates = [];\r\n    const current = new Date(start);\r\n    const endDate = new Date(end);\r\n\r\n    while (current <= endDate) {\r\n      dates.push(current.toISOString().split(\"T\")[0]);\r\n      current.setDate(current.getDate() + 1);\r\n    }\r\n\r\n    return { days: dates, count: dates.length };\r\n  }\r\n\r\n  function tryParseJSON(jsonString) {\r\n    try {\r\n      return jsonString ? JSON.parse(jsonString) : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\nconst handleOverallWithPunch = async () => {\r\n  try {\r\n    const maxPunches = 6;\r\n\r\n\r\n    const firstLogDate = attendanceData[0]?.LogDate;\r\n    if (!firstLogDate) {\r\n      toast.error(\"No attendance data found\");\r\n      return;\r\n    }\r\n\r\n    const dateObj = new Date(firstLogDate);\r\n    const year = dateObj.getFullYear();\r\n    const month = dateObj.getMonth() + 1;\r\n    const startDate = `${year}-${month.toString().padStart(2, \"0\")}-01`;\r\n    const endDate = new Date(year, month, 0).toISOString().split(\"T\")[0];\r\n\r\n  \r\n    const defaultLeaveResponse = await fetchLink({\r\n      address: `masters/defaultLeave?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n  \r\n    const defaultLeaveData = defaultLeaveResponse?.success ? defaultLeaveResponse.data : [];\r\n  const defaultLeaveDates = new Set(\r\n  defaultLeaveData\r\n    .map(leave => leave.Date ? leave.Date.split('T')[0] : null)\r\n    .filter(date => date !== null)\r\n);\r\n  \r\n    const leaveResponse = await fetchLink({\r\n      address: `masters/leave?FromDate=${startDate}&ToDate=${endDate}`,\r\n    });\r\n    const leaveData = leaveResponse.data || [];\r\n\r\n    const leaveMap = {};\r\n    leaveData.forEach((leave) => {\r\n      if (leave.Status?.toLowerCase() !== \"approved\") return;\r\n\r\n      const userId = String(leave.User_Id);\r\n      if (!userId) return;\r\n\r\n      const parseDate = (dateStr) => {\r\n        const parts = dateStr.split(/[-/]/) || [];\r\n        if (parts.length === 3) {\r\n          if (parts[2].length === 4) {\r\n            return parts[0].length === 2\r\n              ? new Date(`${parts[2]}-${parts[1]}-${parts[0]}`)\r\n              : new Date(`${parts[2]}-${parts[0]}-${parts[1]}`);\r\n          }\r\n          return new Date(dateStr);\r\n        }\r\n        return new Date(dateStr);\r\n      };\r\n\r\n      const leaveStart = parseDate(leave.FromDate);\r\n      const leaveEnd = parseDate(leave.ToDate);\r\n\r\n      let currentDate = new Date(leaveStart);\r\n      while (currentDate <= leaveEnd) {\r\n        const dateStr = currentDate.toISOString().split(\"T\")[0];\r\n        if (!leaveMap[userId]) leaveMap[userId] = {};\r\n        \r\n        if (currentDate.getDay() !== 0) { // Skip Sundays\r\n          leaveMap[userId][dateStr] = true;\r\n        }\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n      }\r\n    });\r\n\r\n    // 5. Filter and group attendance data\r\n    const filteredAttendanceData = attendanceData.filter((row) =>\r\n      selectedEmployees.some(\r\n        (user) =>\r\n          String(user.UserId) === String(row.User_Mgt_Id) ||\r\n          user.UserId === \"ALL\"\r\n      )\r\n    );\r\n\r\n    const groupedData = filteredAttendanceData.reduce((acc, row) => {\r\n      acc[row.username] = acc[row.username] || [];\r\n      acc[row.username].push(row);\r\n      return acc;\r\n    }, {});\r\n\r\n    if (Object.keys(groupedData).length === 0) {\r\n      toast.error(\"No attendance data found\");\r\n      return;\r\n    }\r\n\r\n    // 6. Generate Excel sheets\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    Object.entries(groupedData).forEach(([username, userAttendance]) => {\r\n      const exportData = userAttendance.map((row) => {\r\n        const logDate = new Date(row.LogDate);\r\n        const dateStr = logDate.toISOString().split(\"T\")[0];\r\n        const isSunday = logDate.getDay() === 0;\r\n        const userId = String(row.User_Mgt_Id);\r\n\r\n        // Attendance status priority:\r\n        // 1. Default Leave (DL)\r\n        // 2. Approved Leave (L)\r\n        // 3. Sunday (H)\r\n        // 4. Present/Absent based on punches\r\n        let attendanceStatus;\r\n        if (defaultLeaveDates.has(dateStr)) {\r\n          attendanceStatus = \"DL\";\r\n        } else if (leaveMap[userId]?.[dateStr]) {\r\n          attendanceStatus = \"L\";\r\n        } else if (isSunday) {\r\n          attendanceStatus = \"H\";\r\n        } else {\r\n          const punches = row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n          attendanceStatus = punches.some((p) => p && p !== \"--\") ? \"P\" : \"A\";\r\n        }\r\n\r\n        // Punch columns\r\n        const punchColumns = {};\r\n        const punches = row.AttendanceDetails?.split(\",\").map((d) => d.trim()) || [];\r\n        for (let i = 0; i < maxPunches; i++) {\r\n          punchColumns[`Punch ${i + 1}`] = punches[i] || \"--\";\r\n        }\r\n\r\n        return {\r\n          Employee: username,\r\n          \"Log Date\": formatAttendanceDate(row.LogDate),\r\n          \"Attendance Status\": attendanceStatus,\r\n          ...punchColumns,\r\n        };\r\n      });\r\n\r\n      // Reorder columns\r\n      const columnsOrder = [\r\n        \"Employee\",\r\n        \"Log Date\",\r\n        \"Attendance Status\",\r\n        ...Array.from({ length: maxPunches }, (_, i) => `Punch ${i + 1}`),\r\n      ];\r\n\r\n      const reorderedData = exportData.map((row) =>\r\n        columnsOrder.reduce((acc, col) => {\r\n          acc[col] = row[col] || \"--\";\r\n          return acc;\r\n        }, {})\r\n      );\r\n\r\n      XLSX.utils.book_append_sheet(\r\n        wb,\r\n        XLSX.utils.json_to_sheet(reorderedData),\r\n        username.slice(0, 31)\r\n      );\r\n    });\r\n\r\n    // 7. Export Excel file\r\n    const fileName = `Attendance_Report_${new Date().toLocaleString(\r\n      \"default\",\r\n      { month: \"long\" }\r\n    )}_${year}.xlsx`;\r\n    XLSX.writeFile(wb, fileName);\r\n\r\n  } catch (error) {\r\n    console.error(\"Error generating report:\", error);\r\n    toast.error(\"Failed to generate report\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  const fetchDropdownEmployees = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await fetchLink({\r\n        address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n      });\r\n      if (data.success) {\r\n        setDropdownEmployees(data.data);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      toast.error(\"Failed to fetch employees for dropdown\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e));\r\n  }, [\r\n    storage?.UserTypeId,\r\n    storage?.UserId,\r\n    storage?.Company_id,\r\n    storage?.Name,\r\n    reload,\r\n  ]);\r\n\r\n  const fetchAttendanceData = async (From, EmpId) => {\r\n    try {\r\n      const userTypeId = storage?.UserTypeId;\r\n      const [year, month] = From.split(\"-\");\r\n\r\n      const startDate = `${year}-${month}-01`;\r\n\r\n      const dayCount = getDaysInMonth(`${year}-${month}`);\r\n\r\n      const endDate = `${year}-${month}-${dayCount}`;\r\n\r\n      const response = await fetchLink({\r\n        address: `userModule/employeActivity/trackActivitylogAttendance?FromDate=${startDate}&ToDate=${endDate}&UserTypeId=${userTypeId}&UserId=${EmpId}`,\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.success) {\r\n        setAttendanceData(response.data);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error fetching attendance data:\", e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const queryFilters = {\r\n      FromDate:\r\n        query.get(\"FromDate\") && isValidDate(query.get(\"FromDate\"))\r\n          ? query.get(\"FromDate\")\r\n          : defaultFilters.Fromdate,\r\n      ToDate:\r\n        query.get(\"ToDate\") && isValidDate(query.get(\"ToDate\"))\r\n          ? query.get(\"ToDate\")\r\n          : defaultFilters.Todate,\r\n    };\r\n    setFilters((pre) => ({\r\n      ...pre,\r\n      FromDate: queryFilters.FromDate,\r\n      ToDate: queryFilters.ToDate,\r\n    }));\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    const FromDate =\r\n      stateDetails?.FromDate && isValidDate(stateDetails?.FromDate)\r\n        ? ISOString(stateDetails?.FromDate)\r\n        : null;\r\n    const ToDate =\r\n      stateDetails?.ToDate && isValidDate(stateDetails?.ToDate)\r\n        ? ISOString(stateDetails?.ToDate)\r\n        : null;\r\n    if (FromDate && ToDate) {\r\n      updateQueryString({ FromDate, ToDate });\r\n      setFilters((pre) => ({\r\n        ...pre,\r\n        FromDate: ISOString(stateDetails.FromDate),\r\n        ToDate: stateDetails.ToDate,\r\n      }));\r\n      setReload((pre) => !pre);\r\n    }\r\n  }, [stateDetails]);\r\n\r\n  const updateQueryString = (newFilters) => {\r\n    const params = new URLSearchParams(newFilters);\r\n    navigate(`?${params.toString()}`, { replace: true });\r\n  };\r\n\r\n  const handleAddEmployeeClose = () => {\r\n    setAddEmployeeDialogOpen(false);\r\n  };\r\n\r\n  const data = () => setViewMode(\"employee\");\r\n  const dataDepartment = () => setViewMode(\"department\");\r\n  const defaultLeave = () => setViewMode(\"defaultLeave\");\r\n\r\n\r\n\r\n  const dashboard = () => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      FromDate: prev.FromDate || new Date().toISOString().split(\"T\")[0],\r\n      ToDate: prev.ToDate || new Date().toISOString().split(\"T\")[0],\r\n    }));\r\n    setViewMode(\"default\");\r\n  };\r\n\r\n  const ExpendableComponent = ({ row }) => {\r\n    const departments =\r\n      typeof row.DepartmentWiseCounts === \"string\"\r\n        ? JSON.parse(row.DepartmentWiseCounts)\r\n        : row.DepartmentWiseCounts;\r\n\r\n    return (\r\n      <table\r\n        style={{\r\n          width: \"100%\",\r\n          borderCollapse: \"collapse\",\r\n          marginTop: \"10px\",\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Department Name\r\n            </th>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Total Employees\r\n            </th>\r\n            <th\r\n              style={{\r\n                border: \"1px solid #ccc\",\r\n                padding: \"8px\",\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              Present Today\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {departments && departments.length > 0 ? (\r\n            departments.map((data, index) => (\r\n              <tr key={index} onClick={() => toggleExpand(data.Department)}>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  {data?.Department || \"-\"}\r\n                </td>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"1.25rem\",\r\n                        fontWeight: \"bold\",\r\n                        marginRight: \"100px\", // Increased from 15px to 100px\r\n                        minWidth: \"60px\", // Ensures consistent spacing\r\n                      }}\r\n                    >\r\n                      {data?.TotalEmployees || \"-\"}\r\n                    </span>\r\n                    <span style={{ fontSize: \"1rem\" }}>\r\n                      Male / Female: {data?.TotalMaleEmployees || \"0\"} /{\" \"}\r\n                      {data?.TotalFemaleEmployees || \"0\"}\r\n                    </span>\r\n                  </div>\r\n                </td>\r\n                <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"1.25rem\",\r\n                        fontWeight: \"bold\",\r\n                        marginRight: \"100px\", // Increased from 15px to 100px\r\n                        minWidth: \"60px\", // Ensures consistent spacing\r\n                      }}\r\n                    >\r\n                      {data?.TotalPresentToday || \"-\"}\r\n                    </span>\r\n                    <span style={{ fontSize: \"1rem\" }}>\r\n                      Male / Female: {data?.TotalMalePresentToday || \"0\"} /{\" \"}\r\n                      {data?.TotalFemalePresentToday || \"0\"}\r\n                    </span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\" style={{ padding: \"8px\" }}>\r\n                No Departments Available\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (loadingOn) loadingOn();\r\n\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e))\r\n      .finally(() => {\r\n        if (loadingOff) loadingOff();\r\n        setReload((prev) => !prev);\r\n      });\r\n  };\r\n\r\n  const handleRefreshData = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const ExpendableComponent1 = ({ row }) => {\r\n    let departments = [];\r\n    let monthlyAttendance = [];\r\n\r\n    try {\r\n      departments =\r\n        typeof row.Employees === \"string\"\r\n          ? JSON.parse(row.Employees)\r\n          : row.Employees || [];\r\n\r\n      monthlyAttendance =\r\n        typeof row.MonthlyAverageAttendance === \"string\"\r\n          ? JSON.parse(row.MonthlyAverageAttendance)\r\n          : row.MonthlyAverageAttendance || [];\r\n    } catch (err) {\r\n      departments = [];\r\n      monthlyAttendance = [];\r\n    }\r\n\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    const monthList = [\r\n      { name: \"January\", number: 1 },\r\n      { name: \"February\", number: 2 },\r\n      { name: \"March\", number: 3 },\r\n      { name: \"April\", number: 4 },\r\n      { name: \"May\", number: 5 },\r\n      { name: \"June\", number: 6 },\r\n      { name: \"July\", number: 7 },\r\n      { name: \"August\", number: 8 },\r\n      { name: \"September\", number: 9 },\r\n      { name: \"October\", number: 10 },\r\n      { name: \"November\", number: 11 },\r\n      { name: \"December\", number: 12 },\r\n    ];\r\n\r\n    const attendanceMap = new Map();\r\n    monthlyAttendance.forEach((item) => {\r\n      const key = `${item.MonthNumber}-${item.YearNumber}`;\r\n      attendanceMap.set(key, item.UniqueEmployeeDays ?? 0);\r\n    });\r\n\r\n    return (\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n        <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n          <table\r\n            style={{\r\n              width: \"20%\",\r\n              borderCollapse: \"collapse\",\r\n              border: \"1px solid #ccc\",\r\n              height:'10px'\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr style={{ backgroundColor: \"#f0f0f0\" }}>\r\n                <th\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    padding: \"2px\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                >\r\n                  Emp_Name\r\n                </th>\r\n                <th\r\n                  style={{\r\n                    border: \"1px solid #ccc\",\r\n                    padding: \"2px\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                >\r\n                  Sex\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {departments && departments.length > 0 ? (\r\n                departments.map((data, index) => (\r\n                  <tr key={index}>\r\n                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                      {data?.Emp_Name || \"-\"}\r\n                    </td>\r\n                    <td style={{ border: \"1px solid #ccc\", padding: \"8px\" }}>\r\n                      {data?.Sex || \"-\"}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"2\" style={{ padding: \"8px\" }}>\r\n                    No Employees Available\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n\r\n          <div\r\n            style={{\r\n              flex: \"1\",\r\n              border: \"1px solid #ddd\",\r\n              borderRadius: \"5px\",\r\n              padding: \"10px\",\r\n              overflowX: \"auto\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            <h3 style={{ textAlign: \"center\" }}>Months & Attendance</h3>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                gap: \"10px\",\r\n              }}\r\n            >\r\n              {monthList.map((month) => {\r\n                const key = `${month.number}-${currentYear}`;\r\n                const uniqueEmployeeDays = attendanceMap.get(key) ?? 0;\r\n\r\n                return (\r\n                  <div\r\n                    key={month.number}\r\n                    style={{\r\n                      minWidth: \"100px\",\r\n                      padding: \"8px\",\r\n                      backgroundColor: \"#f0f0f0\",\r\n                      color: \"black\",\r\n                      borderRadius: \"4px\",\r\n                      textAlign: \"center\",\r\n                      userSelect: \"none\",\r\n                    }}\r\n                  >\r\n                    <div style={{ fontWeight: \"bold\" }}>\r\n                      {month.name} {currentYear}\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        marginTop: \"6px\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#555\",\r\n                      }}\r\n                    >\r\n                      {uniqueEmployeeDays}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\nconst handleViewChange = (newView) => {\r\n  setViewMode(newView);\r\n};\r\n  useEffect(() => {\r\n    const userTypeId = storage?.UserTypeId;\r\n    const userId = storage?.UserId;\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `masters/users/employee/dropDown?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          let filteredEmployees = [];\r\n\r\n          if (\r\n            Number(userTypeId) === 1 ||\r\n            Number(userTypeId) === 0 ||\r\n            Number(Add_Rights) === 1\r\n          ) {\r\n            filteredEmployees = data.data;\r\n            setFilter((prev) => ({ ...prev, EmpId: 0, Name: \"ALL\" }));\r\n            setIsDropdownDisabled(false);\r\n            setDropdownPlaceholder(\"ALL\");\r\n          } else {\r\n            filteredEmployees = data.data.filter(\r\n              (employee) => employee.UserId === userId\r\n            );\r\n            setFilter((prev) => ({\r\n              ...prev,\r\n              EmpId: userId,\r\n              Name: storage?.Name,\r\n            }));\r\n            setIsDropdownDisabled(true);\r\n            setDropdownPlaceholder(storage?.Name);\r\n          }\r\n\r\n          setEmployees(filteredEmployees);\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching employees:\", e));\r\n  }, [\r\n    storage?.UserTypeId,\r\n    storage?.UserId,\r\n    storage?.Company_id,\r\n    storage?.Name,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const companyId = storage?.Company_id;\r\n\r\n    fetchLink({\r\n      address: `empAttendance/department?Company_id=${companyId}`,\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"Autheticate_Id\")}`,\r\n      },\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          if (data.others && data.others.department) {\r\n            const deptOptions = data.others.department.map((dept) => ({\r\n              value: dept.value,\r\n              label: dept.label,\r\n            }));\r\n            setDepartments(deptOptions);\r\n          }\r\n        }\r\n      })\r\n      .catch((e) => console.error(\"Error fetching departments:\", e));\r\n  }, [storage?.Company_id, reload]);\r\n\r\n  const handleDepartmentChange = (selected) => {\r\n    setSelectedDepartment(selected);\r\n\r\n    setEmployees([]);\r\n    setSelectedEmployee(null);\r\n\r\n    if (selected) {\r\n      fetchLink({\r\n        address: `empAttendance/employeesByDepartment`,\r\n        method: \"POST\",\r\n        bodyData: { department: selected.value },\r\n      })\r\n        .then((data) => {\r\n          if (data.success && data.others?.employees) {\r\n            const employeeOptions = data.others.employees.map((emp) => ({\r\n              value: emp.id || emp.value || emp.Emp_Id,\r\n              label: emp.name || emp.label || emp.Emp_Name,\r\n            }));\r\n\r\n            setEmployees(employeeOptions);\r\n          } else {\r\n            setEmployees([]);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.error(\"Error fetching employees:\", e);\r\n          setEmployees([]);\r\n        });\r\n    } else {\r\n      setEmployees([]);\r\n    }\r\n  };\r\n\r\n  const departmentWiseCounts = React.useMemo(() => {\r\n    if (!saleOrders?.[0]?.DepartmentWiseCounts) return [];\r\n    try {\r\n      const parsed = JSON.parse(saleOrders[0].DepartmentWiseCounts);\r\n      return Array.isArray(parsed) ? parsed : [];\r\n    } catch (err) {\r\n      console.error(\"Failed to parse DepartmentWiseCounts JSON:\", err);\r\n      return [];\r\n    }\r\n  }, [saleOrders]);\r\n\r\n  const filteredData = React.useMemo(() => {\r\n    if (!departmentWiseCounts || !departmentWiseCounts.length) return [];\r\n\r\n    const filteredDepartments = departmentWiseCounts.filter((item) => {\r\n      return selectedDepartment\r\n        ? item.Department === selectedDepartment.label\r\n        : true;\r\n    });\r\n\r\n    return filteredDepartments.map((dept) => {\r\n      const employeeList = dept.employees || dept.Employees || [];\r\n\r\n      const filteredEmployees = selectedEmployee\r\n        ? employeeList.filter((emp) => {\r\n            if (!emp.Emp_Name) return false;\r\n            return (\r\n              emp.Emp_Name.trim().toLowerCase() ===\r\n              selectedEmployee.label.trim().toLowerCase()\r\n            );\r\n          })\r\n        : employeeList;\r\n\r\n      return {\r\n        ...dept,\r\n        Employees: filteredEmployees,\r\n      };\r\n    });\r\n  }, [departmentWiseCounts, selectedDepartment, selectedEmployee]);\r\n\r\n  return (\r\n    <>\r\n      {Number(userTypeId) === 0 || Number(userTypeId) === 1 ? (\r\n        <>\r\n          {viewMode === \"default\" && (\r\n            <FilterableTable\r\n              title={\r\n                <div className=\"d-flex align-items-center\">\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    disabled\r\n                    onClick={() => dashboard()}\r\n                  >\r\n                    Dashboard\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => data()}\r\n                  >\r\n                    Employee\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => dataDepartment()}\r\n                  >\r\n                    Department\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                    Defined Leave\r\n                  </Button>\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <label>From Date</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      onChange={(e) =>\r\n                        setFilters({ ...filters, FromDate: e.target.value })\r\n                      }\r\n                      value={filters?.FromDate}\r\n                      className=\"cus-inpt w-auto p-1\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <label>To Date</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      onChange={(e) =>\r\n                        setFilters({ ...filters, ToDate: e.target.value })\r\n                      }\r\n                      value={filters?.ToDate}\r\n                      className=\"cus-inpt w-auto p-1\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"p-1\">\r\n                    <IconButton\r\n                      onClick={() => setReload(!reload)}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                    >\r\n                      <Search />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              }\r\n              dataArray={saleOrders}\r\n              EnableSerialNumber\r\n              columns={[\r\n                {\r\n                  isVisible: 1,\r\n                  ColumnHeader: \"Tot.Emp\",\r\n                  isCustomCell: true,\r\n                  Cell: ({ row }) => {\r\n                    const total = row?.TotalEmployees ?? 0;\r\n                    const male = row?.TotalMaleEmployees ?? 0;\r\n                    const female = row?.TotalFemaleEmployees ?? 0;\r\n                    return (\r\n                      <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                        <div>{total}</div>\r\n                        <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                          Male / Female: {male} / {female}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  },\r\n                },\r\n                {\r\n                  isVisible: 1,\r\n                  ColumnHeader: \"Tot.Pre.Today\",\r\n                  isCustomCell: true,\r\n                  Cell: ({ row }) => {\r\n                    const total = row?.TotalPresentToday ?? 0;\r\n                    const male = row?.TotalMalePresentToday ?? 0;\r\n                    const female = row?.TotalFemalePresentToday ?? 0;\r\n                    return (\r\n                      <div style={{ fontSize: \"1.25rem\", fontWeight: \"bold\" }}>\r\n                        <div>{total}</div>\r\n                        <div style={{ fontSize: \"1rem\", fontWeight: \"normal\" }}>\r\n                          Male / Female: {male} / {female}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  },\r\n                },\r\n              ]}\r\n              isExpendable={true}\r\n              tableMaxHeight={550}\r\n              expandableComp={ExpendableComponent}\r\n            />\r\n          )}\r\n\r\n          {viewMode === \"employee\" && (\r\n            <>\r\n              <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                maxWidth=\"md\"\r\n                PaperProps={{\r\n                  style: { width: \"500px\", height: \"500px\" },\r\n                }}\r\n              >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                  <Autocomplete\r\n                    multiple\r\n                    options={[\r\n                      { UserId: \"all\", Name: \"ALL\" },\r\n                      ...dropdownEmployees,\r\n                    ]}\r\n                    getOptionLabel={(option) => option.Name}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option.UserId === value.UserId\r\n                    }\r\n                    onChange={(event, value) => {\r\n                      if (value.some((selected) => selected.UserId === \"all\")) {\r\n                        setSelectedEmployees(dropdownEmployees);\r\n                      } else {\r\n                        const uniqueValues = value.filter(\r\n                          (val, index, self) =>\r\n                            index ===\r\n                            self.findIndex((t) => t.UserId === val.UserId)\r\n                        );\r\n                        setSelectedEmployees(uniqueValues);\r\n                      }\r\n                    }}\r\n                    value={\r\n                      selectedEmployees.some((user) => user.UserId === \"all\")\r\n                        ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                        : selectedEmployees\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField {...params} placeholder=\"Employees\" />\r\n                    )}\r\n                  />\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => setSelectedEmployees([])}\r\n                  >\r\n                    Clear\r\n                  </Button>\r\n                  <span>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleOverallWithPunch}>Download</Button>\r\n                  </span>\r\n                </DialogActions>\r\n              </Dialog>\r\n              <Card>\r\n                <CardContent sx={{ minHeight: \"50vh\" }}>\r\n                  <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                    <h6 className=\"fa-18\">\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => dashboard()}\r\n                      >\r\n                        Dashboard\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        disabled\r\n                        onClick={() => data()}\r\n                      >\r\n                        EMPLOYEE\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small mx-2\"\r\n                        variant=\"outlined\"\r\n                        onClick={() => dataDepartment()}\r\n                      >\r\n                        Department\r\n                      </Button>\r\n                       <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                        Defined Leave\r\n                  </Button>\r\n                    </h6>\r\n\r\n                    <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                      <Button\r\n                        onClick={handleDownload}\r\n                        variant=\"contained\"\r\n                        disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                      >\r\n                        Individual Report\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          handleOverallDownload(filter?.From, filter?.To);\r\n                        }}\r\n                      >\r\n                        Monthly Report\r\n                      </Button>\r\n                      <Button\r\n                        onClick={() => {\r\n                          setAddEmployeeDialogOpen(true);\r\n                        }}\r\n                      >\r\n                        Cummulative Report\r\n                      </Button>\r\n                      <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"px-2 row mb-4\">\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Employee</label>\r\n                      <Select\r\n                        value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                        onChange={(e) =>\r\n                          setFilter({\r\n                            ...filter,\r\n                            EmpId: e.value,\r\n                            Name: e.label,\r\n                          })\r\n                        }\r\n                        options={[\r\n                          { value: 0, label: `ALL` },\r\n                          ...employees.map((obj) => ({\r\n                            value: obj?.UserId,\r\n                            label: obj?.Name,\r\n                          })),\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={dropdownPlaceholder}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>From</label>\r\n                      <input\r\n                        type=\"month\"\r\n                        className=\"cus-inpt\"\r\n                        value={filter?.From?.slice(0, 7)}\r\n                        onChange={handleFromChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                      <button\r\n                        className=\"btn btn-link ms-2 p-0 mt-3\"\r\n                        onClick={handleRefresh}\r\n                        title=\"Refresh Departments & Employees\"\r\n                      >\r\n                        <Refresh fontSize=\"medium\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <FilterableTable\r\n                    dataArray={attendanceData}\r\n                    columns={[\r\n                      {\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => row.username,\r\n                        ColumnHeader: \"Employee\",\r\n                        isVisible: 1,\r\n                        width: \"20%\",\r\n                        CellProps: {\r\n                          sx: {\r\n                            padding: \"10px\",\r\n                            textAlign: \"left\",\r\n                            fontWeight: \"bold\",\r\n                          },\r\n                        },\r\n                      },\r\n                      {\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) =>\r\n                          formatAttendanceDate(row.LogDate || \"--\"),\r\n                        ColumnHeader: \"Log Date\",\r\n                        isVisible: 1,\r\n                        width: \"20%\",\r\n                        CellProps: {\r\n                          sx: {\r\n                            padding: \"10px\",\r\n                            textAlign: \"center\",\r\n                            color: \"gray\",\r\n                          },\r\n                        },\r\n                      },\r\n                      ...punchColumns,\r\n                    ]}\r\n                    EnableSerialNumber\r\n                    CellSize=\"small\"\r\n                    disablePagination={false}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n            </>\r\n          )}\r\n\r\n          {viewMode === \"department\" && (\r\n            <FilterableTable\r\n              title={\r\n                <div className=\"d-flex flex-column\">\r\n                  <div className=\"d-flex align-items-center mb-3\">\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      onClick={() => dashboard()}\r\n                    >\r\n                      Dashboard\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      onClick={() => data()}\r\n                    >\r\n                      Employee\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small mx-2\"\r\n                      variant=\"outlined\"\r\n                      disabled\r\n                      onClick={() => dataDepartment()}\r\n                    >\r\n                      Department\r\n                    </Button>\r\n                     <Button\r\n                    size=\"small mx-2\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => defaultLeave()}\r\n                  >\r\n                      Defined Leave\r\n                  </Button>\r\n                  </div>\r\n\r\n                  <div className=\"row align-items-end\">\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Department</label>\r\n                      <Select\r\n                        options={departments}\r\n                        isSearchable\r\n                        placeholder=\"ALL\"\r\n                        value={selectedDepartment}\r\n                        styles={customSelectStyles}\r\n                        onChange={handleDepartmentChange}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                      <label>Employee</label>\r\n                      <Select\r\n                        options={employees}\r\n                        isSearchable\r\n                        placeholder=\"ALL\"\r\n                        value={selectedEmployee}\r\n                        styles={customSelectStyles}\r\n                        onChange={setSelectedEmployee}\r\n                        isDisabled={!selectedDepartment}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-auto p-2 d-flex align-items-center\">\r\n                      <button\r\n                        className=\"btn btn-link ms-2 p-0 mb-2\"\r\n                        onClick={handleRefreshData}\r\n                        style={{ minWidth: \"24px\" }}\r\n                        title=\"Refresh Departments & Employees\"\r\n                      >\r\n                        <Refresh fontSize=\"small\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              }\r\n              dataArray={filteredData}\r\n              EnableSerialNumber\r\n              columns={[\r\n                createCol(\"Department\", \"string\", \"Department\"),\r\n                createCol(\r\n                  \"TotalMaleEmployees\",\r\n                  \"number\",\r\n                  \"Total Male Employees\"\r\n                ),\r\n                createCol(\r\n                  \"TotalFemaleEmployees\",\r\n                  \"number\",\r\n                  \"Total Female Employees\"\r\n                ),\r\n                createCol(\"TotalEmployees\", \"number\", \"Total Employees\"),\r\n                createCol(\r\n                  \"TotalMalePresentToday\",\r\n                  \"number\",\r\n                  \"Total Male Present Today\"\r\n                ),\r\n                createCol(\r\n                  \"TotalFemalePresentToday\",\r\n                  \"number\",\r\n                  \"Total Female Present Today\"\r\n                ),\r\n                createCol(\"TotalPresentToday\", \"number\", \"Total Present Today\"),\r\n              ]}\r\n              isExpendable={true}\r\n              tableMaxHeight={550}\r\n              expandableComp={ExpendableComponent1}\r\n            />\r\n          )}\r\n\r\n         {viewMode === \"defaultLeave\" && (\r\n  <DefaultLeave\r\n    currentView={viewMode}\r\n    onViewChange={handleViewChange}\r\n    departments={departments}\r\n    selectedDepartment={selectedDepartment}\r\n    handleDepartmentChange={handleDepartmentChange}\r\n    employees={employees}\r\n    selectedEmployee={selectedEmployee}\r\n    setSelectedEmployee={setSelectedEmployee}\r\n    handleRefreshData={handleRefreshData}\r\n  />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Dialog\r\n            open={addEmployeeDialogOpen}\r\n            maxWidth=\"md\"\r\n            PaperProps={{\r\n              style: { width: \"500px\", height: \"500px\" },\r\n            }}\r\n          >\r\n            <DialogTitle>Add Employee</DialogTitle>\r\n            <DialogContent>\r\n              <Autocomplete\r\n                multiple\r\n                options={[{ UserId: \"all\", Name: \"ALL\" }, ...dropdownEmployees]}\r\n                getOptionLabel={(option) => option.Name}\r\n                isOptionEqualToValue={(option, value) =>\r\n                  option.UserId === value.UserId\r\n                }\r\n                value={\r\n                  selectedEmployees.some((user) => user.UserId === \"all\")\r\n                    ? [{ UserId: \"all\", Name: \"ALL\" }]\r\n                    : selectedEmployees\r\n                }\r\n                onChange={(event, value) => {\r\n                  if (value.some((selected) => selected.UserId === \"all\")) {\r\n                    setSelectedEmployees(dropdownEmployees);\r\n                  } else {\r\n                    const uniqueValues = value.filter(\r\n                      (val, index, self) =>\r\n                        index === self.findIndex((t) => t.UserId === val.UserId)\r\n                    );\r\n                    setSelectedEmployees(uniqueValues);\r\n                  }\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} placeholder=\"Employees\" />\r\n                )}\r\n              />\r\n            </DialogContent>\r\n            <DialogActions className=\"d-flex justify-content-between flex-wrap\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setSelectedEmployees([])}\r\n              >\r\n                Clear\r\n              </Button>\r\n              <span>\r\n                <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                <Button onClick={handleOverallWithPunch}>Download</Button>\r\n              </span>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Card>\r\n            <CardContent sx={{ minHeight: \"50vh\" }}>\r\n              <div className=\"ps-3 pb-2 pt-0 d-flex align-items-center justify-content-between border-bottom mb-3\">\r\n                <h6 className=\"fa-18\">\r\n                  <Button size=\"small\" variant=\"outlined\" className=\"mx-2\">\r\n                    EMPLOYEE\r\n                  </Button>\r\n                </h6>\r\n\r\n                {(userTypeId === 1 || userTypeId === 0) && (\r\n                  <div className=\"d-flex align-items-center justify-content-start gap-3\">\r\n                    <Button\r\n                      onClick={handleDownload}\r\n                      variant=\"contained\"\r\n                      disabled={filter?.EmpId === 0 || filter?.Name === \"ALL\"}\r\n                    >\r\n                      Individual Report\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() =>\r\n                        handleOverallDownload(filter?.From, filter?.To)\r\n                      }\r\n                    >\r\n                      Monthly Report\r\n                    </Button>\r\n                    <Button onClick={() => setAddEmployeeDialogOpen(true)}>\r\n                      Cumulative Monthly Report\r\n                    </Button>\r\n                    <Button onClick={handleSummaryDownload}>Summary</Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"px-2 row mb-4\">\r\n                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                  <label>Employee</label>\r\n                  <Select\r\n                    value={{ value: filter?.EmpId, label: filter?.Name }}\r\n                    onChange={(e) =>\r\n                      setFilter({ ...filter, EmpId: e.value, Name: e.label })\r\n                    }\r\n                    options={[\r\n                      { value: 0, label: \"ALL\" },\r\n                      ...employees.map((obj) => ({\r\n                        value: obj.UserId,\r\n                        label: obj.Name,\r\n                      })),\r\n                    ]}\r\n                    styles={customSelectStyles}\r\n                    isSearchable\r\n                    placeholder={dropdownPlaceholder}\r\n                    isDisabled={isDropdownDisabled}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n                  <label>From</label>\r\n                  <input\r\n                    type=\"month\"\r\n                    className=\"cus-inpt\"\r\n                    value={filter?.From?.slice(0, 7)}\r\n                    onChange={handleFromChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <FilterableTable\r\n                dataArray={attendanceData}\r\n                columns={[\r\n                  {\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => row.username,\r\n                    ColumnHeader: \"Employee\",\r\n                    isVisible: 1,\r\n                    width: \"20%\",\r\n                    CellProps: {\r\n                      sx: {\r\n                        padding: \"10px\",\r\n                        textAlign: \"left\",\r\n                        fontWeight: \"bold\",\r\n                      },\r\n                    },\r\n                  },\r\n                  {\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) =>\r\n                      formatAttendanceDate(row.LogDate || \"--\"),\r\n                    ColumnHeader: \"Log Date\",\r\n                    isVisible: 1,\r\n                    width: \"20%\",\r\n                    CellProps: {\r\n                      sx: {\r\n                        padding: \"10px\",\r\n                        textAlign: \"center\",\r\n                        color: \"gray\",\r\n                      },\r\n                    },\r\n                  },\r\n                  ...punchColumns,\r\n                ]}\r\n                EnableSerialNumber\r\n                CellSize=\"small\"\r\n                disablePagination={false}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AttendanceNewScreen;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\nvar _utils = require(\"@mui/material/utils\");","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import createChainedFunction from '@mui/utils/createChainedFunction';\nexport default createChainedFunction;","import deprecatedPropType from '@mui/utils/deprecatedPropType';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n    return null;\n  };\n}","import requirePropFactory from '@mui/utils/requirePropFactory';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n    return null;\n  };\n  return requireProp;\n}","import setRef from '@mui/utils/setRef';\nexport default setRef;","import unsupportedProp from '@mui/utils/unsupportedProp';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n  const propFullNameSafe = propFullName || propName;\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n  return null;\n}","'use client';\n\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/ClassNameGenerator';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\n// TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    }\n    ClassNameGenerator.configure(generator);\n  }\n};"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","currentView","onViewChange","attendanceData","setAttendanceData","useState","monthlyLeaves","setMonthlyLeaves","filter","setFilter","FromDate","Date","toISOString","split","Description","display","Created_By","description","setDesctiption","addDialog","setAddDialog","selectedDate","setSelectedDate","calendarViewDate","setCalendarViewDate","editMode","setEditMode","editIndex","setEditIndex","formatDate","dateStr","d","String","getDate","padStart","getMonth","getFullYear","localData","localStorage","getItem","parseData","JSON","parse","fetchLeaves","async","res","fetchLink","success","data","currentMonth","currentYear","filtered","item","itemDate","e","console","error","useEffect","closeDialg","_jsxs","className","children","_jsx","Card","CardContent","sx","minHeight","map","view","Button","size","onClick","disabled","charAt","toUpperCase","slice","value","onChange","pre","Number","target","maxHeight","overflowY","length","index","FullCalendar","plugins","timeGridPlugin","listPlugin","dayGridPlugin","interactionPlugin","initialView","initialDate","events","o","title","start","objectData","headerToolbar","left","center","right","showNonCurrentDates","editable","selectable","selectMirror","height","eventClick","eventInfo","leave","event","extendedProps","date","findIndex","dateClick","info","datesSet","viewDate","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","IconButton","Close","DialogContent","type","dateString","formatForInputDate","DialogActions","currentRow","SNo","User_Id","UserId","Modified_By","_ref3","updatedList","bodyData","Id","method","toast","message","onUpdate","_ref2","then","catch","onsubmit","_filter$From","_filter$From2","loadingOn","loadingOff","storage","navigate","useNavigate","location","useLocation","stateDetails","addEmployeeDialogOpen","setAddEmployeeDialogOpen","getCurrentMonthYear","toString","initialValue","From","To","EmpId","Name","query","URLSearchParams","search","defaultFilters","saleOrders","setSaleOrders","viewMode","setViewMode","expandedDepartment","setExpandedDepartment","dropdownEmployees","setDropdownEmployees","reload","setReload","loading","setLoading","isDropdownDisabled","setIsDropdownDisabled","employees","setEmployees","selectedEmployee","setSelectedEmployee","userTypeId","UserTypeId","contextObj","useContext","MyContext","dropdownPlaceholder","setDropdownPlaceholder","debouncedFilter","setDebouncedFilter","timer","setTimeout","clearTimeout","fetchAttendanceData","fetchDropdownEmployees","getDaysInMonth","monthYear","year","month","filters","setFilters","ToDate","Cancel_status","departments","setDepartments","selectedDepartment","setSelectedDepartment","selectedEmployees","setSelectedEmployees","Add_Rights","today","fromDate","toDate","finally","handleFromChange","selectedMonth","startDate","dayCount","handleSummaryDownload","endDate","response","overallData","getDateRange","from","to","allDates","end","sundayCount","push","getDay","setDate","days","totalDays","dateRange","summaryData","row","punchDetails","Array","isArray","AttendanceDetails","totalPresent","companyHoliday","workingDays","forEach","dayRecord","find","p","startsWith","AttendanceStatus","approvedLeave","ApprovedLeave","pendingLeave","PendingLeave","totalAbsent","TotalPresent","CompanyHoliday","TotalAbsent","NumberOfSundays","ws","XLSX","json_to_sheet","headers","sheet_add_aoa","origin","wb","book_new","book_append_sheet","handleDownload","exportData","trim","attendanceStatus","punchColumns","i","Employee","username","formatAttendanceDate","LogDate","columnsOrder","reorderedData","reduce","acc","col","_","isCustomCell","ColumnHeader","isVisible","CellProps","justifyContent","alignItems","Cell","punch","rawTime","formattedTime","timeString","hourStr","minuteStr","hour","parseInt","minute","ampm","formatToAmPm","Chip","label","margin","logDateTime","handleOverallDownload","attendanceRes","leaveRes","defaultLeaveRes","Promise","all","Error","leaveMap","defaultLeaveDates","Set","_leave$Status","Status","userId","current","leaveEnd","defaultLeave","add","dates","count","emp","attendanceDetails","jsonString","tryParseJSON","dailyStatus","presentCount","attendanceLookup","record","status","hasPunch","Punch1","_leaveMap$userId","dayKey","User_Mgt_Id","isSunday","attendanceRecord","has","EmployeeName","handleOverallWithPunch","_attendanceData$","maxPunches","firstLogDate","dateObj","defaultLeaveResponse","defaultLeaveData","leaveData","_leave$Status2","toLowerCase","parseDate","parts","leaveStart","currentDate","groupedData","some","user","Object","keys","entries","userAttendance","_leaveMap$userId2","_row$AttendanceDetail2","logDate","_row$AttendanceDetail","punches","fileName","toLocaleString","Company_id","companyId","Authorization","filteredEmployees","prev","employee","queryFilters","get","isValidDate","Fromdate","Todate","ISOString","updateQueryString","newFilters","params","replace","handleAddEmployeeClose","dataDepartment","dashboard","handleRefreshData","window","others","department","deptOptions","dept","handleDepartmentChange","selected","_data$others","employeeOptions","Emp_Id","Emp_Name","departmentWiseCounts","React","_saleOrders$","DepartmentWiseCounts","parsed","err","filteredData","Department","employeeList","Employees","_Fragment","FilterableTable","Search","dataArray","EnableSerialNumber","columns","_ref6","_row$TotalEmployees","_row$TotalMaleEmploye","_row$TotalFemaleEmplo","total","TotalEmployees","male","TotalMaleEmployees","female","TotalFemaleEmployees","_ref7","_row$TotalPresentToda","_row$TotalMalePresent","_row$TotalFemalePrese","TotalPresentToday","TotalMalePresentToday","TotalFemalePresentToday","isExpendable","tableMaxHeight","expandableComp","_ref4","borderCollapse","marginTop","border","textAlign","toggleExpand","marginRight","minWidth","colSpan","PaperProps","Autocomplete","multiple","options","getOptionLabel","isOptionEqualToValue","uniqueValues","val","self","t","renderInput","TextField","placeholder","Select","obj","styles","isSearchable","handleRefresh","Refresh","_ref8","_ref9","CellSize","disablePagination","isDisabled","createCol","_ref5","monthlyAttendance","MonthlyAverageAttendance","attendanceMap","Map","_item$UniqueEmployeeD","key","MonthNumber","YearNumber","set","UniqueEmployeeDays","flexDirection","gap","Sex","flex","borderRadius","overflowX","whiteSpace","number","_attendanceMap$get","uniqueEmployeeDays","userSelect","DefaultLeave","newView","_ref10","_ref11","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","createSvgIcon","defineProperty","enumerable","_utils","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","inProps","ref","useDefaultProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","validator","reason","componentNameInError","Component","propName","componentName","propFullName","unstable_ClassNameGenerator","configure","generator","ClassNameGenerator"],"sourceRoot":""}
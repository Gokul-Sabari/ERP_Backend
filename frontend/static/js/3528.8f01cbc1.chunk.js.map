{"version":3,"file":"static/js/3528.8f01cbc1.chunk.js","mappings":"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","sources":["Pages/UserModule/customerCreation.jsx","Pages/UserModule/customerList.jsx","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber } from '../../Components/functions'\r\n\r\nfunction onlynum(e) {\r\n    e.target.value = e.target.value.replace(/[^0-9]/g, '');\r\n}\r\n\r\nconst CustomerAddScreen = ({ screen, setScreen, underArray, row, refresh }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"))\r\n    const initialValue = {\r\n        Branch_Id: 0,\r\n        Company_Id: 0,\r\n        Cust_Id: '',\r\n        Cust_No: '',\r\n        Customer_name: '',\r\n        Contact_Person: '',\r\n        Mobile_no: '',\r\n        Email_Id: '',\r\n        Address1: '',\r\n        Address2: '',\r\n        Address3: '',\r\n        Address4: '',\r\n        Pincode: '',\r\n        State: '',\r\n        Country: 'India',\r\n        Gstin: '',\r\n        Under_Id: '',\r\n        User_Mgt_Id: '',\r\n        User_Type_Id: '',\r\n        Entry_By: storage?.UserId,\r\n    }\r\n    const [value, setValue] = useState(initialValue);\r\n    const [branchData, setBranchData] = useState([]);\r\n    // console.log(row)\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/branch/dropDown?User_Id=${storage?.UserId}&Company_id=${storage?.Company_id}`\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setBranchData(data.data);\r\n            }\r\n        }).catch(e => console.error(e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const {\r\n            Branch_Id, Company_Id, Cust_Id, Cust_No, Customer_name, Contact_Person,\r\n            Mobile_no, Email_Id, Address1, Address2, Address3, Address4, Pincode,\r\n            State, Country, Gstin, Under_Id, User_Mgt_Id, User_Type_Id\r\n        } = row;\r\n        setValue(pre => ({\r\n            ...pre,\r\n            Branch_Id, Company_Id, Cust_Id, Cust_No, Customer_name, Contact_Person, \r\n            Mobile_no, Email_Id, Address1, Address2, Address3, Address4, Pincode, \r\n            State, Country, Gstin, Under_Id, User_Mgt_Id, User_Type_Id\r\n        }))\r\n    }, [row])\r\n\r\n    const clearValue = () => {\r\n        setValue(initialValue)\r\n    }\r\n\r\n    const filteredOptions = underArray\r\n        .filter(obj => (isEqualNumber(obj.User_Type_Id, 5) && isEqualNumber(obj.Id, value?.Cust_Id)))\r\n        .map(obj => ({ value: obj.Cust_Id, label: obj.Customer_name }));\r\n\r\n    const input = [\r\n        {\r\n            label: 'Name',\r\n            elem: 'input',\r\n            placeholder: \"Mr / Ms\",\r\n            event: (e) => setValue({ ...value, Customer_name: e.target.value }),\r\n            required: true,\r\n            value: value.Customer_name,\r\n        },\r\n        {\r\n            label: 'Mobile',\r\n            elem: 'input',\r\n            oninput: (e) => onlynum(e),\r\n            placeholder: \"Enter Mobile Number\",\r\n            event: (e) => setValue({ ...value, Mobile_no: e.target.value }),\r\n            required: true,\r\n            value: value.Mobile_no,\r\n            max: 10\r\n        },\r\n        {\r\n            label: 'Branch',\r\n            elem: 'select',\r\n            options: [\r\n                { value: 0, label: ' - Select - ', disabled: true, selected: true },\r\n                ...branchData.map(obj => ({\r\n                    value: Number(obj.BranchId),\r\n                    label: obj.BranchName\r\n                }))\r\n            ],\r\n            class: 'selectpicker',\r\n            data: true,\r\n            event: (e) => setValue({ ...value, Branch_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.Branch_Id,\r\n        },\r\n        {\r\n            label: 'User Type',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                { value: 4, label: 'CUSTOMER' },\r\n                { value: 5, label: 'BROKER' },\r\n            ],\r\n            event: (e) => setValue({ ...value, User_Type_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.User_Type_Id,\r\n        },\r\n        {\r\n            label: 'Contact Person',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            event: (e) => setValue({ ...value, Contact_Person: e.target.value }),\r\n            required: true,\r\n            value: value.Contact_Person,\r\n        },\r\n        {\r\n            label: 'Email ID',\r\n            elem: 'input',\r\n            type: 'email',\r\n            placeholder: \"emailaddress@mail.com\",\r\n            event: (e) => setValue({ ...value, Email_Id: e.target.value }),\r\n            required: false,\r\n            value: value.Email_Id,\r\n        },\r\n        {\r\n            label: 'Gstin',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            // oninput: (e) => onlynum(e),\r\n            event: (e) => setValue({ ...value, Gstin: e.target.value }),\r\n            required: false,\r\n            value: value.Gstin,\r\n            max: 15,\r\n        },\r\n        {\r\n            label: 'Under',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                { value: 0, label: ' Primary ' },\r\n                ...filteredOptions\r\n            ],\r\n            class: 'selectpicker',\r\n            data: true,\r\n            event: (e) => setValue({ ...value, Under_Id: parseInt(e.target.value) }),\r\n            required: true,\r\n            value: value.Under_Id,\r\n        },\r\n        {\r\n            label: 'Pincode',\r\n            elem: 'input',\r\n            placeholder: \"654321\",\r\n            oninput: (e) => onlynum(e),\r\n            event: (e) => setValue({ ...value, Pincode: e.target.value }),\r\n            required: false,\r\n            value: value.Pincode,\r\n            max: 6\r\n        },\r\n        {\r\n            label: 'State',\r\n            elem: 'input',\r\n            placeholder: \"\",\r\n            event: (e) => setValue({ ...value, State: e.target.value }),\r\n            required: false,\r\n            value: value.State,\r\n        },\r\n        {\r\n            label: 'Address Line 1',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address1: e.target.value }),\r\n            required: true,\r\n            value: value.Address1,\r\n        },\r\n        {\r\n            label: 'Address Line 2',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address2: e.target.value }),\r\n            value: value.Address2,\r\n        },\r\n        {\r\n            label: 'Address Line 3',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address3: e.target.value }),\r\n            value: value.Address3,\r\n        },\r\n        {\r\n            label: 'Address Line 4',\r\n            elem: 'textarea',\r\n            event: (e) => setValue({ ...value, Address4: e.target.value }),\r\n            value: value.Address4,\r\n        },\r\n    ];\r\n\r\n    const validateForm = () => {\r\n        for (const field of input) {\r\n            if (field.required && field.value === '') {\r\n                return `${field.label} is required.`;\r\n            }\r\n        }\r\n\r\n        const validemail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        const isEmailValid = validemail.test(value.Email_Id);\r\n        if ((!isEmailValid) && value.Email_Id !== '') {\r\n            return 'Invalid email address'\r\n        }\r\n\r\n        const validPhoneNumber = /^\\d{10}$/;\r\n        const isPhoneNumberValid = validPhoneNumber.test(value.Mobile_no);\r\n\r\n        if (!isPhoneNumberValid) {\r\n            return 'Invalid phone number'\r\n        }\r\n\r\n        const validGstin = /^\\d{15}$/;\r\n        const isGstinValid = validGstin.test(value.Gstin);\r\n        if ((!isGstinValid) && value.Gstin !== '') {\r\n            return 'Invalid gstin'\r\n        }\r\n\r\n        const validPIN = /^\\d{6}$/;\r\n        const isPinValid = validPIN.test(value.Pincode);\r\n        if ((!isPinValid) && value.Pincode !== '') {\r\n            return 'Invalid Pincode'\r\n        }\r\n\r\n        return \"Success\";\r\n    };\r\n\r\n    const CreateCustomer = () => {\r\n        const validate = validateForm();\r\n        if (validate === 'Success') {\r\n            fetchLink({\r\n                address: `userModule/customer`,\r\n                method: 'POST',\r\n                bodyData: { ...value }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    clearValue()\r\n                    toast.success(data.message)\r\n                    refresh()\r\n                    setScreen(!screen)\r\n                } else {\r\n                    toast.error(data.message)\r\n                }\r\n            }).catch(e => console.error(e))\r\n\r\n        } else {\r\n            toast.error(validate)\r\n        }\r\n    }\r\n\r\n    const UpdateCustomer = () => {\r\n        const validate = validateForm();\r\n        if (validate === 'Success') {\r\n            fetchLink({\r\n                address: `userModule/customer`,\r\n                method: 'PUT',\r\n                bodyData: { ...value }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    clearValue();\r\n                    toast.success(data.message)\r\n                    refresh()\r\n                    setScreen(!screen)\r\n                } else {\r\n                    toast.error(data.message)\r\n                }\r\n            }).catch(e => console.error(e))\r\n        } else {\r\n            toast.error(validate)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className='card-header py-2 d-flex align-items-center justify-content-between'>\r\n                    <h5 className=\"mb-0 \">Customer Details</h5>\r\n                    <button className=\"comadbtn mb-0\" onClick={() => { setScreen(!screen); clearValue(); }}>Back</button>\r\n                </div>\r\n                <div className=\"card-body row\">\r\n                    {input.map((field, index) => (\r\n                        <div key={index} className=\"col-lg-4 col-md-6 p-2 px-3\">\r\n                            <label>{field.label}{field.required && <p style={{ color: 'red', display: 'inline', fontWeight: 'bold', fontSize: '1em' }}> *</p>}</label>\r\n                            {field.elem === 'input' ? (\r\n                                <input\r\n                                    type={field.type || 'text'}\r\n                                    className='cus-inpt b-0'\r\n                                    onChange={field.event}\r\n                                    onInput={field.oninput}\r\n                                    disabled={field.disabled}\r\n                                    value={field.value} \r\n                                    maxLength={field.max}\r\n                                />\r\n                            ) : field.elem === 'select' ? (\r\n                                <select\r\n                                    className={'cus-inpt b-0'}\r\n                                    onChange={field.event}\r\n                                    value={field.value}>\r\n                                    {field.options.map((option, optionIndex) => (\r\n                                        <option\r\n                                            key={optionIndex}\r\n                                            value={option.value}\r\n                                            disabled={option.disabled}\r\n                                            defaultValue={option.selected} >\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            ) : field.elem === 'textarea' ? (\r\n                                <textarea\r\n                                    className='cus-inpt b-0'\r\n                                    onChange={field.event}\r\n                                    rows={4} value={field.value}>\r\n                                </textarea>\r\n                            ) : null}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"card-footer text-end\">\r\n                    <button className=\"cancelbtn\" onClick={() => setScreen(!screen)}>Cancel</button>\r\n                    <button\r\n                        className=\"comadbtn mb-0\"\r\n                        onClick={row.Cust_Id ? UpdateCustomer : CreateCustomer}>\r\n                        {row.Cust_Id ? 'Update' : 'Create'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerAddScreen;","import React, { useEffect, useState } from \"react\";\r\nimport { Edit, LocalMallOutlined } from '@mui/icons-material';\r\nimport { IconButton, Box, Tooltip, Button } from \"@mui/material\";\r\nimport CustomerAddScreen from \"./customerCreation\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from '../../Components/filterableTable2';\r\n\r\nconst CustomerList = ({ loadingOn, loadingOff, AddRights, EditRights }) => {\r\n    const [customers, setCustomers] = useState([])\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [rowValue, setRowValue] = useState({})\r\n    const [screen, setScreen] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `userModule/customer`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            setCustomers(data.data ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        if (screen === true) {\r\n            setRowValue({});\r\n        }\r\n    }, [screen])\r\n\r\n    const doRefresh = () => {\r\n        setRefresh(!refresh)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {screen ?\r\n                <FilterableTable\r\n                    title=\"Customers\"\r\n                    dataArray={customers}\r\n                    headerFontSizePx={13}\r\n                    bodyFontSizePx={12}\r\n                    columns={[\r\n                        createCol('Cust_No', 'string', 'CusID'),\r\n                        createCol('Customer_name', 'string', 'Name'),\r\n                        createCol('UserTypeGet', 'string', 'Type'),\r\n                        createCol('Mobile_no', 'string', 'Phone'),\r\n                        createCol('Contact_Person', 'string', 'Contact Person'),\r\n                        createCol('Email_Id', 'string', 'Email'),\r\n                        createCol('State', 'string', 'State'),\r\n                        createCol('Gstin', 'string', 'Gstin'),\r\n                        {\r\n                            isVisible: 1,\r\n                            ColumnHeader: 'Action',\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <>\r\n                                    <Tooltip title=\"Edit\">\r\n                                        <span>\r\n                                            <IconButton size=\"small\" onClick={() => {\r\n                                                setRowValue(row);\r\n                                                setScreen(!screen);\r\n                                            }}>\r\n                                                <Edit className=\"fa-20\" />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                    {/* <Tooltip title=\"Outstanding\">\r\n                                        <span>\r\n                                            <IconButton \r\n                                                size=\"small\" \r\n                                                onClick={() => {}}\r\n                                            >\r\n                                                <LocalMallOutlined className=\"fa-20\" />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip> */}\r\n                                </>\r\n                            )\r\n                        },\r\n                    ]}\r\n                    ButtonArea={\r\n                        <>\r\n                            <Button variant='outlined' onClick={() => setScreen(!screen)} >Add</Button>\r\n                        </>\r\n                    }\r\n                />\r\n                : <CustomerAddScreen\r\n                    screen={screen}\r\n                    setScreen={setScreen}\r\n                    underArray={customers}\r\n                    row={rowValue}\r\n                    refresh={doRefresh}\r\n                />\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["onlynum","e","target","value","replace","_ref","screen","setScreen","underArray","row","refresh","storage","JSON","parse","localStorage","getItem","initialValue","Branch_Id","Company_Id","Cust_Id","Cust_No","Customer_name","Contact_Person","Mobile_no","Email_Id","Address1","Address2","Address3","Address4","Pincode","State","Country","Gstin","Under_Id","User_Mgt_Id","User_Type_Id","Entry_By","UserId","setValue","useState","branchData","setBranchData","useEffect","fetchLink","address","concat","Company_id","then","data","success","catch","console","error","pre","_objectSpread","clearValue","filteredOptions","filter","obj","isEqualNumber","Id","map","label","input","elem","placeholder","event","required","oninput","max","options","disabled","selected","Number","BranchId","BranchName","class","parseInt","type","validateForm","field","test","_jsx","_Fragment","children","_jsxs","className","onClick","index","style","color","display","fontWeight","fontSize","onChange","onInput","maxLength","option","optionIndex","defaultValue","rows","UpdateCustomer","validate","method","bodyData","toast","message","CreateCustomer","loadingOn","loadingOff","AddRights","EditRights","customers","setCustomers","setRefresh","rowValue","setRowValue","FilterableTable","title","dataArray","headerFontSizePx","bodyFontSizePx","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref2","Tooltip","IconButton","size","Edit","ButtonArea","Button","variant","CustomerAddScreen","doRefresh","createSvgIcon","d"],"sourceRoot":""}
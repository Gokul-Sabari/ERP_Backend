{"version":3,"file":"static/js/312.46435a4f.chunk.js","mappings":"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","sources":["Pages/Reports/storageClosingStock/itemWise.jsx","Pages/Reports/storageClosingStock/variable.js","Pages/Reports/storageClosingStock/stockInHand.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { Addition, checkIsNumber, Division, filterableText, groupData, isEqualNumber, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, Settings } from \"@mui/icons-material\";\r\nimport { useMemo } from \"react\";\r\n\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\n\r\nconst ItemWiseStockReport = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    Fromdate,\r\n    Todate,\r\n    api = 'itemWise',\r\n    defaultGrouping = '',\r\n    storageStockColumns = [],\r\n    groupingOption = true\r\n}) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState(defaultGrouping);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const propsColumns = storageStockColumns.map((col, colInd) => ({\r\n        isVisible: colInd < 11 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1\r\n    }));\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/storageStock/${api}?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(toArray(data.data))\r\n            }\r\n        })\r\n    }, [Fromdate, Todate]);\r\n\r\n    const sortedCoulumns = useMemo(() => {\r\n        return [...columns].sort(\r\n            (a, b) => (\r\n                a?.OrderBy && b?.OrderBy\r\n            ) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy\r\n        )\r\n    }, [columns])\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedCoulumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [sortedCoulumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : reportData;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        // key === 'Total_Qty' ? \r\n                        grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        )\r\n                        // : Division(\r\n                        //     grp?.groupedData?.reduce(\r\n                        //         (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                        //         0\r\n                        //     ),\r\n                        //     grp.groupedData.length\r\n                        // )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, reportData, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of sortedCoulumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(reportData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(showData)\r\n    }, [showData])\r\n\r\n    return (\r\n        <>\r\n            {/* <div className=\"row\">\r\n\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    <FilterableTable\r\n                        title=\"Item Wise\"\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        maxHeightOption\r\n                        ButtonArea={\r\n                            <>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialog(true)}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Filters\">\r\n                                    <IconButton\r\n                                        onClick={() => setFilterDialog(true)}\r\n                                        size=\"small\"\r\n                                    // className=\"d-md-none d-inline\"\r\n                                    >\r\n                                        <FilterAlt />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={e => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">Group By</option>\r\n                                    {DisplayColumn.filter(fil => (\r\n                                        filterableText(fil.Fied_Data) === \"string\"\r\n                                        && fil?.Field_Name !== 'Ledger_Name'\r\n                                    )).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </>\r\n                        }\r\n                        ExcelPrintOption\r\n                        dataArray={showData}\r\n                        columns={\r\n                            groupBy\r\n                                ? DisplayColumn.filter(fil =>\r\n                                    showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                                ).map(col => ({\r\n                                    ...col,\r\n                                    ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                                }))\r\n                                : DisplayColumn\r\n                        }\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <div className=\"bg-white rounded-3\">\r\n                        <h5 className=\"d-flex justify-content-between p-2 bg-w\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialog(true)}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '68vh', overflow: 'auto' }}>\r\n                            {DisplayColumn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"Item Wise\"\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Column Visiblity'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setDialog(true)}\r\n                            >\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        {groupingOption && (\r\n                            <div className=\"d-flex align-items-center flex-wrap\">\r\n                                <span>Group-By: </span>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={e => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">select group</option>\r\n                                    {DisplayColumn.filter(fil => (\r\n                                        filterableText(fil.Fied_Data) === \"string\"\r\n                                        && fil?.Field_Name !== 'Ledger_Name'\r\n                                    )).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(clm => !stringCompare(clm.Field_Name, groupBy))}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\r\n                                            disabled={Boolean(o?.isDefault)}\r\n                                            onChange={e =>\r\n                                                setColumns(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )}\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setColumns(prevColumns =>\r\n                                                prevColumns.map(oo =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setColumns(propsColumns)} variant=\"outlined\">Reset</Button>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemWiseStockReport;","export const storageStockColumnsForItemWise = [\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n];\r\n\r\nexport const storageStockColumnsForGodownWise = [\r\n    // { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Godown_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n]","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\nimport ItemWiseStockReport from './itemWise';\r\nimport { storageStockColumnsForItemWise, storageStockColumnsForGodownWise } from './variable';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        FilterFromDate: ISOString(),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='itemWise'\r\n                    defaultGrouping=''\r\n                    storageStockColumns={storageStockColumnsForItemWise}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Godown Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='godownWise'\r\n                    defaultGrouping='Godown_Name'\r\n                    storageStockColumns={storageStockColumnsForGodownWise}\r\n                    groupingOption={false}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","loadingOn","loadingOff","Fromdate","Todate","api","defaultGrouping","storageStockColumns","groupingOption","reportData","setReportData","useState","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","propsColumns","map","col","colInd","isVisible","Field_Name","Column_Name","Fied_Data","Data_Type","OrderBy","columns","setColumns","useEffect","fetchLink","address","concat","then","data","success","toArray","sortedCoulumns","useMemo","sort","a","b","DisplayColumn","filter","isEqualNumber","Defult_Display","showData","Object","keys","length","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_objectSpread","fromEntries","key","_grp$groupedData","groupedData","reduce","acc","colmn","Addition","toNumber","applyFilters","handleFilterChange","column","value","prevFilters","type","min","max","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","_item$column$Field_Na","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","closeDialog","console","log","_Fragment","FilterableTable","title","EnableSerialNumber","headerFontSizePx","bodyFontSizePx","maxHeightOption","ButtonArea","Tooltip","IconButton","size","onClick","Settings","FilterAltOff","FilterAlt","_col$Field_Name","ExcelPrintOption","dataArray","ColumnHeader","isExpendable","expandableComp","_ref3","row","clm","stringCompare","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","ke","_column$Field_Name","DialogActions","Button","color","DialogTitle","o","i","Card","component","Paper","Switch","Boolean","isDefault","disabled","prevColumns","oo","checkIsNumber","width","variant","storageStockColumnsForItemWise","storageStockColumnsForGodownWise","tabValue","setTabValue","dateFilter","setDateFilter","ISOString","FilterFromDate","FilterTodate","tabData","name","ItemWiseStockReport","htmlFor","pre","Search","TabContext","Box","sx","borderBottom","borderColor","TabList","indicatorColor","n","scrollButtons","tab","tabInd","Tab","backgroundColor","TabPanel","p","pt"],"sourceRoot":""}
{"version":3,"file":"static/js/6056.be62b60a.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Components/tablecolumn.js","Pages/Tasks/Components/newaddEditTask.jsx","Pages/Tasks/taskAssign/addEditTaskAssign.jsx","Pages/Tasks/taskDetails/taskIndividual.jsx","Pages/Tasks/taskDetails/listingTask.jsx","Pages/Masters/ProjectList.jsx","Pages/ProjectList/addEditProject.jsx","Pages/employeeManagement/employeeManagement.jsx"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        height: '45px',\r\n        background: 'rgba(255, 255, 255, 0.322)'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n            ? '#E2ECF9'\r\n            : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]","import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css';\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    \r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: \"\",\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    };\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [editDialog, setEditDialog] = useState(false);\r\n    const [editInputValue, setEditInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const taskResponse = await fetchLink({ address: `taskManagement/tasks/dropdown` });\r\n                if (taskResponse.success) setTaskData(taskResponse.data);\r\n\r\n                const taskGroupResponse = await fetchLink({ address: `masters/taskType/dropDown` });\r\n                if (taskGroupResponse.success) setTaskGroup(taskGroupResponse.data);\r\n\r\n                const taskParametersResponse = await fetchLink({ address: `taskManagement/parameters` });\r\n                if (taskParametersResponse.success) setTaskParameters(taskParametersResponse.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction);\r\n    }, [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            console.log(row)\r\n            setInputValue(prev => ({\r\n                ...prev,\r\n                ...row,\r\n                Task_Group_Id: row.Task_Group_Id || \"\",\r\n            }));\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        if (onCloseFun) onCloseFun();\r\n    };\r\n\r\n    const closeEditDialog = () => {\r\n        setEditDialog(false); \r\n        setEditInputValue(initialValue); \r\n    };\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj,\r\n            });\r\n             \r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                setInputValue(initialValue)\r\n                closeDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded(); \r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    // const openEditDialog = () => {\r\n    //     setEditInputValue({\r\n    //         ...inputValue,\r\n    //         Task_Group_Id: inputValue.Type_Task_Id, \r\n    //     });\r\n\r\n    //     setEditDialog(true);\r\n    // };\r\n\r\n    const handleEditSubmit = async () => {\r\n        const paramArr = editInputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...editInputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'PUT',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeEditDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog open={dialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value=\"\" disabled>- select -</option>\r\n                                    {taskGroup.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Type_Id}>\r\n                                            {o.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Id}>\r\n                                            {o.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-12\">\r\n                                <label>Task Description <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={taskParameters}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => `${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                    value={inputValue.Task_Parameters || []}\r\n                                    onChange={(event, newValue) => setInputValue({ ...inputValue, Task_Parameters: newValue })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {`${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt.Paramet_Id) === Number(val.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Parameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.Task_Parameters.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedParams = [...inputValue.Task_Parameters];\r\n                                            updatedParams[index] = {\r\n                                                ...updatedParams[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedParams });\r\n                                        }}\r\n                                        value={param.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {/* Edit Task Dialog */}\r\n            <Dialog open={editDialog} onClose={closeEditDialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Edit Task</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleEditSubmit();\r\n                }}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            label=\"Task Name\"\r\n                            value={editInputValue.Task_Name}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Name: e.target.value })}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Task Group\"\r\n                            select\r\n                            value={editInputValue.Task_Group_Id}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Group_Id: e.target.value })}\r\n                            fullWidth\r\n                        >\r\n                            <option value=\"\" disabled>- select -</option>\r\n                            {taskGroup.map((o, i) => (\r\n                                <option key={i} value={o.Task_Type_Id}>\r\n                                    {o.Task_Type}\r\n                                </option>\r\n                            ))}\r\n                        </TextField>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light rounded-5 px-3\" type=\"button\" onClick={closeEditDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary rounded-5 px-3\" type='submit'>\r\n                            Save\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskMasterMgt;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TaskAssign = ({ open, onClose, projectId, taskId, reload,onReload, editData }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n \r\n    const [usersDropdown, setUsersDropdown] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    // const [schType, setSchType] = useState([]);\r\n    const [selectedSch, setSelectedSch] = useState([])\r\n    const intitalVlaue={\r\n        AN_No: '',\r\n        Project_Id: projectId,\r\n        Sch_Id: taskId,\r\n        Assigned_Emp_Id: parseData?.UserId,\r\n        Emp_Id: '',\r\n        Task_Assign_dt: new Date().toISOString().split('T')[0],\r\n        Sch_Period: '',\r\n        Sch_Time: '',\r\n        EN_Time: '',\r\n        Est_Start_Dt: '',\r\n        Est_End_Dt: '',\r\n        Ord_By: 1,\r\n        Timer_Based: false,\r\n        Sch_Type: '',\r\n        Invovled_Stat: true,\r\n        EmpGet: '- Select -',\r\n        Is_Repitative: false,\r\n        RepeatDays: { Mon: false, Tue: false, Wed: false, Thu: false, Fri: false, Sat: false, Sun: false }\r\n    }\r\n\r\n    const [assignEmpInpt, setAssignEmpInpt] = useState(intitalVlaue);\r\n    \r\n    useEffect(() => {\r\n \r\n\r\n        if (open) fetchData();\r\n    }, [projectId, open, reload]);\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const userResponse =  await fetchLink({ address: `masters/Employeedetails/getusersproject?Project_Id=${projectId}` });\r\n            const schTypeResponse =  await fetchLink({ address: `taskManagement/project/schedule/newscheduleType` });\r\n\r\n\r\n            if (userResponse.success) setUsersDropdown(userResponse.data || []);\r\n            if (schTypeResponse.success) {\r\n            \r\n   }\r\n            \r\n        } catch (error) {\r\n            toast.error(\"Failed to fetch data.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n \r\n        const fetchSelectedData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (editData) {\r\n                    const selectedSchType =  await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.Sch_Id}&Task_Id=${taskId.Task_Id}` });\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const selectedSchType = await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.TaskSchId}&Task_Id=${taskId.Task_Id}` });\r\n\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n                }\r\n            } catch (error) {\r\n\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n        };\r\n\r\n        if (open) fetchSelectedData();\r\n    }, [open, editData, reload,projectId]);\r\n\r\n    useEffect(() => {\r\n        if (editData) {\r\n\r\n            setAssignEmpInpt(prev => ({\r\n                ...prev,\r\n                AN_No: editData.AN_No,\r\n                Emp_Id: editData.Emp_Id,\r\n                Sch_Time: editData.Sch_Time,\r\n                EN_Time: editData.EN_Time,\r\n                Est_Start_Dt: editData.Est_Start_Dt.split('T')[0],\r\n                Est_End_Dt: editData.Est_End_Dt.split('T')[0],\r\n                Ord_By: editData.Ord_By,\r\n                Timer_Based: editData.Timer_Based,\r\n                Invovled_Stat: editData.Invovled_Stat,\r\n                Sch_Type_Id: editData.Sch_Type,\r\n                Sch_Type: editData.Sch_Type_Name,\r\n                EmpGet: editData.EmployeeName,\r\n                Is_Repitative: editData.Is_Repitative,\r\n                RepeatDays: {\r\n                    Mon: !!editData.IS_Rep_Monday,\r\n                    Tue: !!editData.IS_Rep_Tuesday,\r\n                    Wed: !!editData.IS_Rep_Wednesday,\r\n                    Thu: !!editData.IS_Rep_Thursday,\r\n                    Fri: !!editData.Is_Rep_Friday,\r\n                    Sat: !!editData.Is_Rep_Saturday,\r\n                    Sun: !!editData.Is_Rep_Sunday,\r\n                },\r\n            }));\r\n        }\r\n    }, [editData]);\r\n\r\n\r\n\r\n    const calculateSchPeriod = () => {\r\n        const [hours1, minutes1] = assignEmpInpt.Sch_Time.split(':').map(Number);\r\n        const [hours2, minutes2] = assignEmpInpt.EN_Time.split(':').map(Number);\r\n\r\n        const date1 = new Date(0, 0, 0, hours1, minutes1);\r\n        const date2 = new Date(0, 0, 0, hours2, minutes2);\r\n\r\n        if (date2 > date1) {\r\n            let difference = Math.abs(date2 - date1);\r\n            const hours = Math.floor(difference / (1000 * 60 * 60));\r\n            const minutes = Math.floor(difference / (1000 * 60));\r\n            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n\r\n    const mapRepeatDaysToISRepFields = () => {\r\n        return {\r\n            IS_Rep_Monday: assignEmpInpt.RepeatDays.Mon ? 1 : null,\r\n            IS_Rep_Tuesday: assignEmpInpt.RepeatDays.Tue ? 1 : null,\r\n            IS_Rep_Wednesday: assignEmpInpt.RepeatDays.Wed ? 1 : null,\r\n            IS_Rep_Thursday: assignEmpInpt.RepeatDays.Thu ? 1 : null,\r\n            Is_Rep_Friday: assignEmpInpt.RepeatDays.Fri ? 1 : null,\r\n            Is_Rep_Saturday: assignEmpInpt.RepeatDays.Sat ? 1 : null,\r\n            Is_Rep_Sunday: assignEmpInpt.RepeatDays.Sun ? 1 : null,\r\n        };\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const schPeriod = calculateSchPeriod();\r\n\r\n        if (assignEmpInpt.Est_End_Dt < assignEmpInpt.Est_Start_Dt) {\r\n            toast.error(\"End date must be greater than start date.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n\r\n            const address = editData ? 'masters/employeedetails/updateTask' : 'masters/employeedetails/assignTask';\r\n            const repeatDaysMapped = mapRepeatDaysToISRepFields();\r\n            const response = await fetchLink({\r\n                address,\r\n                method: editData ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...assignEmpInpt,\r\n                    Project_Id: projectId,\r\n                    Sch_Id: editData ? taskId.Sch_Id : taskId.TaskSchId,\r\n                    Task_Levl_Id: taskId.Task_Levl_Id,\r\n                    Task_Id: Number(taskId.Task_Id),\r\n                    Assigned_Emp_Id: assignEmpInpt.Assigned_Emp_Id,\r\n                    Emp_Id: assignEmpInpt.Emp_Id,\r\n                    Sch_Period: schPeriod,\r\n                    Sch_Time: assignEmpInpt.Sch_Time,\r\n                    EN_Time: assignEmpInpt.EN_Time,\r\n                    Est_Start_Dt: assignEmpInpt.Est_Start_Dt,\r\n                    Est_End_Dt: assignEmpInpt.Est_End_Dt,\r\n                    Ord_By: assignEmpInpt.Ord_By,\r\n                    Sch_Type: selectedSch.value,\r\n                    Timer_Based: assignEmpInpt.Timer_Based ? 1 : 0,\r\n                    Invovled_Stat: assignEmpInpt.Invovled_Stat ? 1 : 0,\r\n                    Is_Repitative: assignEmpInpt.Is_Repitative ? 1 : 0,\r\n                    RepeatDays: assignEmpInpt.Is_Repitative ? assignEmpInpt.RepeatDays : '',\r\n                    ...repeatDaysMapped,\r\n                }\r\n\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(`Task ${editData ? 'updated' : 'assigned'} successfully!`);\r\n                setAssignEmpInpt({});\r\n                if (onReload) {\r\n                    onReload();  \r\n                }\r\n                onClose();\r\n        \r\n\r\n            } else {\r\n\r\n                toast.error(\"Please fill the values correctly\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error during task assignment/update: \" + error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Dialog open={open} maxWidth=\"sm\">\r\n                <DialogTitle>{editData ? 'Edit Task' : 'Employee Assign'}</DialogTitle>\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                           {loading && <div>Loading...</div>}\r\n                        <table className=\"table\" style={{ tableLayout: 'fixed' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Employee\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={{ value: assignEmpInpt.Emp_Id, label: assignEmpInpt.EmpGet }}\r\n                                            onChange={(e) => setAssignEmpInpt({ ...assignEmpInpt, Emp_Id: e.value, EmpGet: e.label })}\r\n                                            options={[{ value: '', label: '- Select -' }, ...usersDropdown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                                            styles={customSelectStyles}\r\n                                            required\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select User\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Sch_Type\r\n                                    </td>\r\n                                    \r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={selectedSch ? { value: selectedSch.value, label: `${selectedSch.label}` } : null}\r\n                                            styles={{ padding: '0.5em' }}\r\n                                            isDisabled\r\n                                            placeholder=\"Select Sch_Type\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n\r\n                                {/* Time and Date Inputs */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Sch_Time}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Sch_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.EN_Time}\r\n                                            required\r\n                                            min={assignEmpInpt.Sch_Time}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, EN_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. Start Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_Start_Dt}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_Start_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. End Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_End_Dt}\r\n                                            required\r\n                                            min={assignEmpInpt.Est_Start_Dt}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_End_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* Timer Based & Involved Status */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15 text-start\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none\"\r\n                                                type=\"checkbox\"\r\n                                                id=\"timerbased\"\r\n                                                checked={Boolean(Number(assignEmpInpt?.Timer_Based))}\r\n                                                onChange={(e) =>\r\n                                                    setAssignEmpInpt({ ...assignEmpInpt, Timer_Based: e.target.checked })\r\n                                                }\r\n                                                style={{ marginRight: '0.5em' }}\r\n                                            />\r\n                                            <label className=\"form-check-label p-1 ps-2\" htmlFor=\"timerbased\">\r\n                                                Timer Based Task?\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                        {editData && (\r\n                                            <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none\"\r\n                                                    type=\"checkbox\"\r\n                                                    checked={Boolean(Number(assignEmpInpt?.Invovled_Stat))}\r\n                                                    onChange={() =>\r\n                                                        setAssignEmpInpt({ ...assignEmpInpt, Invovled_Stat: !assignEmpInpt.Invovled_Stat })\r\n                                                    }\r\n                                                    style={{ marginRight: '0.5em' }}\r\n                                                />\r\n                                                <label className=\"form-check-label p-1 ps-2\">Involved Status</label>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                            <div style={{ display: 'flex', alignItems: 'center', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={assignEmpInpt.Is_Repitative === 1}\r\n                                                    onChange={(e) => {\r\n                                                        setAssignEmpInpt((prevState) => ({\r\n                                                            ...prevState,\r\n                                                            Is_Repitative: e.target.checked ? 1 : 0,\r\n                                                        }));\r\n                                                    }}\r\n                                                    style={{ marginRight: '1em' }}\r\n                                                />\r\n                                                <label style={{ marginBottom: '0' }}>Is Repetitive?</label>\r\n                                            </div>\r\n                                            {assignEmpInpt.Is_Repitative === 1 && (\r\n                                                <div style={{ display: 'inline-flex', gap: '0.5em' }}>\r\n                                                    {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\r\n                                                        <label\r\n                                                            key={day}\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                marginRight: '1em',\r\n                                                                width: '30px',\r\n                                                            }}\r\n                                                        >\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={assignEmpInpt.RepeatDays[day]}\r\n                                                                onChange={() =>\r\n                                                                    setAssignEmpInpt({\r\n                                                                        ...assignEmpInpt,\r\n                                                                        RepeatDays: {\r\n                                                                            ...assignEmpInpt.RepeatDays,\r\n                                                                            [day]: !assignEmpInpt.RepeatDays[day],\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                                style={{ marginRight: '0.5em' }}\r\n                                                            />\r\n                                                            {day}\r\n                                                        </label>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={() => {\r\n                                onClose();\r\n                                setAssignEmpInpt(intitalVlaue);\r\n                            }}\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\">\r\n                            Save Changes\r\n                        </Button>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskAssign;\r\n","import React, { useState, useEffect,useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Button\r\n} from '@mui/material';\r\nimport { CalendarMonth, QueryBuilder, Edit } from \"@mui/icons-material\";\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\nimport { MyContext } from '../../../Components/context/contextProvider';\r\nfunction TaskIndividual({ open, onClose, taskDetails, closeDialogTask }) {\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            setSelectedTask(null);\r\n            setLoading(true); \r\n\r\n    \r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }, [open]);\r\n\r\n    const handleEditClick = (task) => {\r\n        setSelectedTask(task);\r\n        setAssignDialogOpen(true);\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"lg\">\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Details</span>\r\n                        <Button variant=\"contained\" color=\"primary\"  onClick={onClose}>Close</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px', width: '500px' }}>\r\n                            <CircularProgress /> \r\n                        </div>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"fa-14 text-center\">Employee</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Assigned By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Date</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Time</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Total Hours</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Timer Based</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Involved Status</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Order By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {taskDetails.length === 0 ? (\r\n                                       \r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} className=\"fa-14 text-center\" style={{ textAlign: 'center' }}>\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                     \r\n                                        taskDetails.map((detail, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.EmployeeName || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.AssignedUser || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <CalendarMonth className=\"fa-18 me-2\" />\r\n                                                        {formatDate(detail.Est_Start_Dt)} - {formatDate(detail.Est_End_Dt)}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <QueryBuilder className=\"fa-18 me-2\" />\r\n                                                        {detail.Sch_Time || 'N/A'} - {detail.EN_Time || 'N/A'}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Sch_Period || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Timer_Based) ? 'bg-success' : 'bg-warning'}`}>\r\n                                                        {Number(detail.Timer_Based) ? \"Yes\" : \"No\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Invovled_Stat) ? 'bg-success' : 'bg-danger'}`}>\r\n                                                        {Number(detail.Invovled_Stat) ? \"IN\" : \"OUT\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Ord_By || 'N/A'}</TableCell>\r\n                                                {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                                <TableCell className=\"fa-13 text-center\">\r\n                                                    \r\n                                                    <IconButton size=\"small\" onClick={() => handleEditClick(detail)}>\r\n                                                        <Edit className=\"fa-18\" />\r\n                                                        Edit\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {assignDialogOpen &&\r\n                <TaskAssign\r\n                    open={assignDialogOpen}\r\n                    projectId={selectedTask?.Project_Id}\r\n                    taskId={selectedTask}\r\n                    editData={selectedTask}\r\n                    onClose={() => {\r\n                        setAssignDialogOpen(false);\r\n                        onClose();\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskIndividual;\r\n","import React, { useState, useCallback, useEffect, useContext } from 'react';\r\nimport {\r\n\tDialog,\r\n\tDialogTitle,\r\n\tDialogContent,\r\n\tDialogActions,\r\n\tButton,\r\n\tTab,\r\n\tTable,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tTableHead,\r\n\tTableRow,\r\n\tIconButton,\r\n\tChip,\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tTypography,\r\n\tBox\r\n} from '@mui/material';\r\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\r\nimport ViewHeadlineSharpIcon from '@mui/icons-material/ViewHeadlineSharp';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Edit } from \"@mui/icons-material\";\r\n\r\nimport TaskMasterMgt from '../Components/newaddEditTask';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\n\r\nimport TaskIndividual from './taskIndividual';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { MyContext } from \"../../../Components/context/contextProvider\";\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n\tconst [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\tconst [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n\tconst [taskAssignOpen, setTaskAssignOpen] = useState(false);\r\n\tconst [selectedTask, setSelectedTask] = useState(null);\r\n\tconst [tasks, setTasks] = useState([]);\r\n\tconst [taskDetails, setTaskDetails] = useState([]);\r\n\tconst [taskDetailDialog, setTaskDetailsDialog] = useState(false);\r\n\tconst [taskScheduleInput, setTaskScheduleInput] = useState({\r\n\t\tSch_Type_Id: '',\r\n\t\tSch_Type: ''\r\n\t});\r\n\r\n\r\n\tconst [taskData, setTaskData] = useState([]);\r\n\tconst [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\tconst userData = JSON.parse(localStorage.getItem('user'));\r\n\tconst entryBy = userData?.UserId;\r\n\tconst companyId = userData?.Company_id;\r\n\tconst [editDialogOpen, setEditDialogOpen] = useState(false);\r\n\tconst [expandedAccordion, setExpandedAccordion] = useState(null);\r\n\t// const [expandedAccordionSubTask, setExpandedAccordionSubTask] = useState(null);\r\n\t// const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\t// const [selectedTab, setSelectedTab] = useState(0);\r\n\tconst [expandedAccordionTask, setExpandedAccordionTask] = useState(null);\r\n\r\n\tconst { contextObj } = useContext(MyContext);\r\n\r\n\tconst [isEdit, setIsedit] = useState(false)\r\n\tconst [updateDialogOpen, setUpdateDialogOpen] = useState(false)\r\n\r\n\t// const [expandedItem, setExpandedItem] = useState({ schTypeId: null, taskId: null });\r\n\r\n\r\n\r\n\tconst [selectedTab, setSelectedTab] = useState('1');\r\n\tconst [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n\r\n\r\n\tconst handleTabChange = (event, newValue) => {\r\n\t\tsetSelectedTab(newValue);\r\n\t};\r\n\r\n\r\n\tconst handleAccordionChange = (taskId) => {\r\n\t\tsetExpandedAccordion((prev) => (prev === taskId ? null : taskId));\r\n\t};\r\n\r\n\tconst handleAccordionChangeTask = (taskId) => {\r\n\t\tsetExpandedAccordionTask((prev) => (prev === taskId ? null : taskId));\r\n\t};\r\n\r\n\tconst handleSelectedTask = async (task) => {\r\n\t\tsetSelectedTask(task);\r\n\t\tsetTaskAssignOpen(true);\r\n\t}\r\n\r\n\tconst Schtype = async () => {\r\n\t\tfetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n\t\t\tif (data.success) {\r\n\t\t\t\tconsole.log(\"data.data\", data.data)\r\n\t\t\t\tsetScheduleTypes(data.data);\r\n\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(data.message);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconst fetchTasks = useCallback(async () => {\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({ address: `taskManagement/tasks/dropdown?Company_id=${companyId}` });\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTasks(data.data);\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}, [companyId]);\r\n\r\n\tconst fetchData = useCallback(async () => {\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({\r\n\t\t\t\taddress: `taskManagement/project/schedule/ListingDetails?Project_Id=${projectid}`\r\n\t\t\t});\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTaskData(data.data);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Failed to fetch task details:', data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error('Error fetching task details:', e);\r\n\t\t}\r\n\t}, [projectid]);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchTasks();\r\n\t\tfetchData();\r\n\t\tSchtype();\r\n\t}, [reload, projectid, onReload]);\r\n\r\n\r\n\r\n\tconst taskOptions = tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }));\r\n\tconst handleviewTaskDetail = async (task) => {\r\n\t\tsetTaskDetailsDialog(true);\r\n\r\n\t\tif (!task.Task_Id || !projectid) {\r\n\t\t\ttoast.error('Task ID and Project ID are required');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({\r\n\t\t\t\taddress: `masters/employeedetails/assignedTaskDetails?Task_Id=${task.Task_Id}&ProjectId=${projectid}&LevelId=${task.Task_Levl_Id}`\r\n\t\t\t});\r\n\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTaskDetails(data.data);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error('Error fetching task details:', e);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\r\n\tconst handleAssignTask = async () => {\r\n\t\tif (!taskScheduleInput.Task_Id || !taskScheduleInput.Sch_Type_Id) {\r\n\t\t\ttoast.error(\"Please select a task and schedule type before saving.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst requestData = {\r\n\t\t\tentryBy: entryBy,\r\n\t\t\tProject_Id: projectid,\r\n\t\t\tSch_Type_Id: taskScheduleInput.Sch_Type_Id,\r\n\t\t\tSch_Est_Start_Date: taskScheduleInput.Task_Est_Start_Date,\r\n\t\t\tSch_Est_End_Date: taskScheduleInput.Task_Est_End_Date,\r\n\t\t\ttasks: [taskScheduleInput]\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: 'taskManagement/project/schedule/createNewTaskWithSchedule',\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbodyData: requestData,\r\n\t\t\t});\r\n\r\n\t\t\tif (response.success) {\r\n\t\t\t\ttoast.success(response.message);\r\n\t\t\t\tsetAssignDialogOpen(false);\r\n\t\t\t\tsetTaskScheduleInput({})\r\n\t\t\t\tfetchData();\r\n\t\t\t\tonReload();\r\n\t\t\t}\r\n\t\t\telse if (response.status === 'warning') {\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleEditTask = (task) => {\r\n\t\tsetSelectedTask(task);\r\n\t\tsetEditDialogOpen(true);\r\n\t};\r\n\r\n\r\n\tconst updatesTaskDetails = async (task) => {\r\n\r\n\t\tconst requestData = {\r\n\t\t\tSch_Project_Id: task.Sch_Project_Id,\r\n\t\t\tSch_Id: task.TaskSchId,\r\n\t\t\tschtypeid: taskScheduleInput.Sch_Type_Id,\r\n\t\t\tTask_Id: task.Task_Id\r\n\r\n\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: 'taskManagement/project/schedule/updateScheduleTaskUpdate',\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\tbodyData: requestData,\r\n\t\t\t});\r\n\r\n\t\t\tif (response.success) {\r\n\t\t\t\ttoast.success(response.message);\r\n\r\n\t\t\t\tsetUpdateDialogOpen(false)\r\n\t\t\t\tsetIsedit(false)\r\n\t\t\t\tonReload();\r\n\t\t\t}\r\n\t\t\telse if (response.status === 'warning') {\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\r\n\r\n\tconst handleTaskEdit = (task) => {\r\n\r\n\t\tsetIsedit(true);\r\n\t\tsetTaskScheduleInput(task);\r\n\t\tsetUpdateDialogOpen(true);\r\n\t};\r\n\r\n\tconst handleTaskChange = async (selectedOption) => {\r\n\t\tsetTaskScheduleInput(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tTask_Id: selectedOption.value,\r\n\t\t\tTasksGet: selectedOption.label\r\n\t\t}));\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: `taskManagement/tasks/tasklistsid?Task_Id=${selectedOption.value}`\r\n\t\t\t});\r\n\t\t\tif (response.success) {\r\n\t\t\t\tconst taskDetails = response.data;\r\n\t\t\t\tsetTaskScheduleInput(prev => ({\r\n\t\t\t\t\t...prev,\r\n\t\t\t\t\tTask_Levl_Id: taskDetails.Task_Levl_Id,\r\n\t\t\t\t\tTask_Name: taskDetails.Task_Name,\r\n\t\t\t\t\tTask_Desc: taskDetails.Task_Desc,\r\n\t\t\t\t\tTask_Group_Id: taskDetails.Task_Group_Id,\r\n\r\n\t\t\t\t\tSch_Type_Id: taskDetails.Sch_Type_Id,\r\n\t\t\t\t\tTask_Sch_Duaration: taskDetails.Task_Sch_Duaration || '',\r\n\t\t\t\t\tTask_Start_Time: taskDetails.Task_Start_Time || new Date().toISOString(),\r\n\t\t\t\t\tTask_End_Time: taskDetails.Task_End_Time || new Date().toISOString(),\r\n\t\t\t\t\tTask_Est_Start_Date: taskDetails.Task_Est_Start_Date || new Date().toISOString(),\r\n\t\t\t\t\tTask_Est_End_Date: taskDetails.Task_Est_End_Date || new Date().toISOString(),\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(\"Failed to fetch task details\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst setCloseTask = async () => {\r\n\t\tsetDialogOpen(false);\r\n\t\tsetTaskScheduleInput({});\r\n\r\n\t}\r\n\r\n\r\n\r\n\tconst handleSchTypeChange = (e) => {\r\n\t\t\r\n\t\tconst selectedOption = scheduleTypes.find(option => option.Sch_Type_Id === parseInt(e.target.value));\r\n\t\tif (selectedOption) {\r\n\t\t\tsetTaskScheduleInput({\r\n\t\t\t\t...taskScheduleInput,\r\n\t\t\t\tSch_Type_Id: selectedOption.Sch_Type_Id,\r\n\t\t\t\tSch_Type: selectedOption.Sch_Type,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{updateDialogOpen && (\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\topen={updateDialogOpen}\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tmaxWidth=\"sm\"\r\n\t\t\t\t\tPaperProps={{ style: { borderRadius: '8px' } }}\r\n\t\t\t\t\tonClose={() => setUpdateDialogOpen(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DialogTitle>{isEdit ? \"Edit Task\" : \"Assign Task\"}</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t\t<label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Sch_Type_Id || ''}\r\n\t\t\t\t\t\t\t\t\tonChange={handleSchTypeChange}\r\n\t\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<option value=\"\" disabled>- Sch_Type -</option>\r\n\t\t\t\t\t\t\t\t\t{scheduleTypes.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<option key={index} value={option.Sch_Type_Id}>\r\n\t\t\t\t\t\t\t\t\t\t\t{option.Sch_Type}\r\n\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={() => setUpdateDialogOpen(false)}>Cancel</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tonClick={() => updatesTaskDetails(taskScheduleInput)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</Dialog>\r\n\t\t\t)}\r\n\r\n\r\n\t\t\t<Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n\t\t\t\t<DialogTitle>\r\n\t\t\t\t\t<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n\t\t\t\t\t\t<span>{selectedProject?.Project_Name}</span>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => setAssignDialogOpen(true)}>Assign Task</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogTitle>\r\n\r\n\t\t\t\t<Box sx={{ width: '100%', typography: 'body1' }}>\r\n\t\t\t\t\t{taskData.map((schedule, index) => {\r\n\t\t\t\t\t\tconst scheduleTypes = JSON.parse(schedule.SchTypes);\r\n\t\t\t\t\t\t// const overallSchTypes = JSON.parse(schedule.OverallSchTypes)\r\n\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TabContext value={selectedTab} key={index}>\r\n\t\t\t\t\t\t\t\t<Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n\t\t\t\t\t\t\t\t\t<TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n\t\t\t\t\t\t\t\t\t\t{/* <Tab label=\"Overall\" value=\"overall\" id=\"tab-overall\" aria-controls=\"tabpanel-overall\" /> */}\r\n\t\t\t\t\t\t\t\t\t\t{Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\tscheduleTypes.map((sch, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Tab\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`${sch.SchTypeId || 'index'}-${index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={sch.SchType || 'No SchType'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={(sch.SchTypeId || index).toString()}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={`tab-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tNo Details Available for {scheduleTypes}\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</TabList>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t{Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n\t\t\t\t\t\t\t\t\t<TabPanel\r\n\t\t\t\t\t\t\t\t\t\tkey={`${sch.SchTypeId || 'index'}-${index}`}\r\n\t\t\t\t\t\t\t\t\t\tvalue={(sch.SchTypeId || index).toString()}\r\n\t\t\t\t\t\t\t\t\t\tid={`tabpanel-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\taria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\tsch.TaskCountsInSchType.map((count, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSchedule Type: <strong>{sch.SchType}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box textAlign=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTotal Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNo tasks counted for this schedule type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t\t{Array.isArray(sch.TaskTypeGroups) && sch.TaskTypeGroups.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\tsch.TaskTypeGroups.map((taskType) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Accordion\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={taskType.Task_Type_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\texpanded={expandedAccordion === taskType.Task_Type_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleAccordionChange(taskType.Task_Type_Id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: '#f0f4ff',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tboxShadow: 'black',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{taskType.Task_Type || 'Default Task Type'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box sx={{ textAlign: 'right', flexGrow: 1 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompleted Task / Total Task\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskType.TaskMetrics) && taskType.TaskMetrics.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskType.TaskMetrics.map((tasks, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography sx={{ textAlign: 'right', flexGrow: 1 }} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tasks.CompletedTasks} / {tasks?.TotalTasks}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo task metrics available for this task type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionSummary>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskType.Tasks) && taskType.Tasks.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskType.Tasks.map((taskItem) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={taskItem.Task_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texpanded={expandedAccordionTask === taskItem.Task_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleAccordionChangeTask(taskItem.Task_Id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginBottom: 2,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box sx={{ textAlign: 'left', flexGrow: 1 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{taskItem?.Task_Name || 'DEFAULT TASK'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionSummary>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableContainer style={{ maxHeight: '50vh' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Table stickyHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead style={{ backgroundColor: '#2C3E50' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow style={{ backgroundColor: '#2C3E50' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task Type</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employees</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employee Assign</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Actions</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Details</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={taskItem.Task_Id} sx={{ backgroundColor: '#BBE6F6' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>{taskItem.Task_Name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{sch.SchType}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleTaskEdit(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Edit />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskItem.AssignedEmployees.map((employee, empIndex) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={empIndex}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={employee.Name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{ margin: '2px', color: 'green' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>No Employees Assigned</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleSelectedTask(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LibraryAddIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Number(contextObj?.Edit_Rights) === 1 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleEditTask(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Edit />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleviewTaskDetail(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ViewHeadlineSharpIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo tasks available for this task type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\tNo task type groups found for this schedule type.\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t\t\t</TabContext>\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Box>\r\n\r\n\r\n\r\n\t\t\t\t<DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n\t\t\t\t</DialogActions>\r\n\r\n\t\t\t</Dialog>\r\n\r\n\r\n\t\t\t<Dialog open={assignDialogOpen} fullWidth maxWidth=\"sm\" PaperProps={{ style: { borderRadius: '8px' } }}>\r\n\t\t\t\t<DialogTitle>Assign Task</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t<label htmlFor=\"task-select\" style={{ marginRight: '8px' }}>Select Task</label>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tid=\"task-select\"\r\n\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Task_Id || ''}\r\n\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tonChange={e => handleTaskChange({ value: e.target.value })}\r\n\t\t\t\t\t\t\t\tstyle={{ flex: 1, marginRight: '8px' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<option value=\"\" disabled>- select -</option>\r\n\t\t\t\t\t\t\t\t{taskOptions.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t<option key={index} value={option.value}>\r\n\t\t\t\t\t\t\t\t\t\t{option.label}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<IconButton onClick={() => setIsDialogOpen(true)}>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\">Create New</Button>\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t<label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Sch_Type_Id || ''}\r\n\t\t\t\t\t\t\t\tonChange={handleSchTypeChange}\r\n\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tstyle={{ marginLeft: '10px' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<option value=\"\" disabled>- Sch_Type -</option>\r\n\t\t\t\t\t\t\t\t{scheduleTypes.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t<option key={index} value={option.Sch_Type_Id}>\r\n\t\t\t\t\t\t\t\t\t\t{option.Sch_Type}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={() => setAssignDialogOpen(false)}>Cancel</Button>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={handleAssignTask}>Save</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\r\n\t\t\t<TaskAssign\r\n\t\t\t\topen={taskAssignOpen}\r\n\t\t\t\tonClose={() => setTaskAssignOpen(false)}\r\n\t\t\t\ttask={selectedTask}\r\n\t\t\t\tprojectId={projectid}\r\n\t\t\t\tentryBy={entryBy}\r\n\t\t\t\ttaskId={selectedTask}\r\n\t\t\t\treload={reload}\r\n\t\t\t\tonReload={onReload}\r\n\t\t\t/>\r\n\r\n\t\t\t<Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\r\n\t\t\t\t<DialogTitle>Delete Task</DialogTitle>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">Cancel</Button>\r\n\t\t\t\t\t{/* <Button onClick={deleteTaskFun} color=\"secondary\">Delete</Button> */}\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\r\n\t\t\t<TaskMasterMgt\r\n\t\t\t\topenAction={isDialogOpen}\r\n\t\t\t\tonCloseFun={() => setIsDialogOpen(false)}\r\n\t\t\t\tonTaskAdded={fetchTasks}\r\n\t\t\t\tReload={reload}\r\n\t\t\t/>\r\n\t\t\t<TaskMasterMgt\r\n\t\t\t\trow={selectedTask}\r\n\t\t\t\topenAction={editDialogOpen}\r\n\t\t\t\tonCloseFun={() => setEditDialogOpen(false)}\r\n\t\t\t\treload={fetchData}\r\n\t\t\t\tReload={reload}\r\n\t\t\t/>\r\n\t\t\t<TaskIndividual\r\n\t\t\t\topen={taskDetailDialog}\r\n\t\t\t\tonClose={() => setTaskDetailsDialog(false)}\r\n\t\t\t\ttaskDetails={taskDetails}\r\n\t\t\t/>\r\n\r\n\t\t</>\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default ListingTask;\r\n\r\n\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"../Tasks/taskDetails/listingTask\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n    const [reloadFlag, setReloadFlag] = useState(false);\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => {\r\n        setReload(prev => !prev);  \r\n        setReloadFlag(prev => !prev); \r\n    };\r\n    \r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n    const columns = [\r\n        { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '250px' },\r\n        { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n        { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n        { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n        { name: 'Progress', selector: row => `${calcPercentage(row.TodayTaskcounts, row.CompletedTasks)}%`, sortable: true },\r\n        {\r\n            name: 'Task Details', cell: row => (\r\n                <>\r\n                    <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                        <Launch />\r\n                    </IconButton>\r\n                    {row.CompletedTasks} / {row.TodayTaskcounts}\r\n                </>\r\n            )\r\n        },\r\n      \r\n        { name: 'Task Count',  selector: row => row?.TodayTaskcounts, sortable: true, sortable: true },\r\n      \r\n        { name: 'Assigned', selector: row => row.TasksAssignedToEmployee },\r\n        {\r\n            name: 'Employees', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                            <People />\r\n                        </IconButton>\r\n                    )}\r\n                    {row.EmployeesInvolved}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            name: 'Actions', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEditDialog(row)}><Edit /></IconButton>\r\n                    )}\r\n                </>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 \">\r\n                <span style={{ marginLeft: '20px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                        <SearchIcon style={{ position: 'absolute', left: 15, color: '#aaa' }} />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={e => setFilterInput(e.target.value)}\r\n                            style={{\r\n                                paddingLeft: 35,\r\n                                marginRight: 10,\r\n                                margin: 10,\r\n                                borderRadius: 4,\r\n                                border: '1px solid black'\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <button onClick={handleOpenCreateDialog} className=\"btn btn-primary fa-13 shadow\">\r\n                            Create Project\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n                reload={reload}  \r\n              \r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n            \r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n    \r\n            if (isEdit && inputValue) {\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head: inputValue?.Project_Head_Id, \r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                    Project_Status: inputValue?.Project_Status || '', \r\n                    Project_Desc: inputValue?.Project_Desc || '-'\r\n                });\r\n            } else if (!isEdit) {\r\n           \r\n                setFormData({\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '', \r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n    \r\n    \r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","customTableStyles","table","width","backgroundColor","rows","headCells","customSelectStyles","control","provided","state","_objectSpread","height","background","menu","zIndex","menuPortal","base","groupHeading","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","_ref","row","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","localData","localStorage","getItem","parseData","JSON","parse","initialValue","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_By","UserId","Company_id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","useState","isEdit","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","inputValue","setInputValue","editDialog","setEditDialog","editInputValue","setEditInputValue","useEffect","async","taskResponse","fetchLink","success","data","taskGroupResponse","taskParametersResponse","e","console","error","fetchData","isValidObject","log","prev","closeDialog","closeEditDialog","_jsxs","_Fragment","onClick","cursor","Dialog","open","DialogTitle","className","onSubmit","preventDefault","paramArr","map","param","Param_Id","Paramet_Id","PostObj","response","method","bodyData","toast","message","postAndPutTask","DialogContent","maxLength","onChange","target","value","required","placeholder","disabled","o","i","Task_Type_Id","Task_Type","Under_Task_Id","Autocomplete","multiple","options","disableCloseOnSelect","getOptionLabel","concat","Paramet_Name","Paramet_Data_Type","event","newValue","renderOption","props","_ref2","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","val","Number","renderInput","params","TextField","label","index","type","updatedParams","Default_Value","DialogActions","onClose","handleEditSubmit","fullWidth","select","projectId","taskId","onReload","editData","usersDropdown","setUsersDropdown","loading","setLoading","selectedSch","setSelectedSch","intitalVlaue","AN_No","Project_Id","Sch_Id","Assigned_Emp_Id","Emp_Id","Task_Assign_dt","Date","toISOString","split","Sch_Period","Sch_Time","EN_Time","Est_Start_Dt","Est_End_Dt","Ord_By","Timer_Based","Sch_Type","Invovled_Stat","EmpGet","Is_Repitative","RepeatDays","Mon","Tue","Wed","Thu","Fri","Sat","Sun","assignEmpInpt","setAssignEmpInpt","userResponse","schTypeResponse","_selectedSchType$data","_selectedSchType$data2","selectedSchType","selectedSchId","Sch_Type_Id","selectedSchName","Sch_Name","_selectedSchType$data3","_selectedSchType$data4","TaskSchId","fetchSelectedData","Sch_Type_Name","EmployeeName","IS_Rep_Monday","IS_Rep_Tuesday","IS_Rep_Wednesday","IS_Rep_Thursday","Is_Rep_Friday","Is_Rep_Saturday","Is_Rep_Sunday","maxWidth","schPeriod","calculateSchPeriod","hours1","minutes1","hours2","minutes2","date1","date2","difference","Math","abs","hours","floor","minutes","String","padStart","repeatDaysMapped","Task_Levl_Id","tableLayout","verticalAlign","paddingRight","paddingLeft","Select","obj","Name","styles","isSearchable","isDisabled","min","display","Boolean","htmlFor","alignItems","flexWrap","prevState","marginBottom","gap","day","Button","taskDetails","closeDialogTask","selectedTask","setSelectedTask","assignDialogOpen","setAssignDialogOpen","contextObj","useContext","MyContext","setTimeout","formatDate","dateString","date","isNaN","getTime","getDate","month","getMonth","year","getFullYear","justifyContent","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","length","colSpan","textAlign","detail","AssignedUser","CalendarMonth","QueryBuilder","Edit_Rights","IconButton","size","Edit","TaskAssign","dialogOpen","setDialogOpen","projectid","selectedProject","isDialogOpen","setIsDialogOpen","taskAssignOpen","setTaskAssignOpen","tasks","setTasks","setTaskDetails","taskDetailDialog","setTaskDetailsDialog","taskScheduleInput","setTaskScheduleInput","deleteDialogOpen","setDeleteDialogOpen","userData","entryBy","companyId","editDialogOpen","setEditDialogOpen","expandedAccordion","setExpandedAccordion","expandedAccordionTask","setExpandedAccordionTask","setIsedit","updateDialogOpen","setUpdateDialogOpen","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","handleTabChange","fetchTasks","useCallback","then","Schtype","taskOptions","handleSchTypeChange","selectedOption","find","parseInt","PaperProps","borderRadius","flex","marginLeft","requestData","Sch_Project_Id","task","schtypeid","status","warn","updatesTaskDetails","Project_Name","Box","sx","typography","schedule","SchTypes","TabContext","borderColor","TabList","Array","isArray","sch","Tab","SchType","SchTypeId","toString","Typography","TabPanel","TaskCountsInSchType","count","TotalTasks","CompletedTasks","TaskTypeGroups","taskType","Accordion","expanded","handleAccordionChange","boxShadow","AccordionSummary","expandIcon","ExpandMoreIcon","flexGrow","TaskMetrics","AccordionDetails","Tasks","taskItem","handleAccordionChangeTask","maxHeight","stickyHeader","handleTaskEdit","AssignedEmployees","employee","empIndex","Chip","margin","handleSelectedTask","LibraryAddIcon","handleviewTaskDetail","ViewHeadlineSharpIcon","marginTop","position","bottom","TasksGet","Task_Sch_Duaration","Task_Start_Time","Task_End_Time","Task_Est_Start_Date","Task_Est_End_Date","handleTaskChange","Sch_Est_Start_Date","Sch_Est_End_Date","TaskMasterMgt","Reload","TaskIndividual","ActiveProjects","setReload","projects","setProjects","projectAlldata","setProjectAlldata","setSelectedProject","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","reloadFlag","setReloadFlag","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","catch","columns","selector","sortable","_projectAlldata$find","p","Project_Head_Name","_projectAlldata$find2","Status","toLocaleDateString","TodayTaskcounts","completed","toFixed","calcPercentage","cell","handleOpenListingTaskDialog","Launch","TasksAssignedToEmployee","Add_Rights","handleOpenEmployeeDialog","People","EmployeesInvolved","handleOpenEditDialog","filteredProjects","filter","project","_projectAlldata$find3","_projectAlldata$find4","projectHead","toLowerCase","includes","handleCloseDialogs","SearchIcon","left","border","handleOpenCreateDialog","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","top","cells","overflowY","ListingTask","ProjectForm","projectData","EmployeeManagementDialog","setProjectHead","proStatus","setProStatus","formData","setFormData","Project_Desc","Project_Head","ISOString","Project_Status","Project_Head_Id","handleChange","validateFields","requiredFields","field","replace","inputFields","elem","Status_Id","createFun","payload","idx","Designation_Name","BranchName","employees","setEmployees","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","onClosed","marginInlineStart","handleAddEmployeeOpen","mr","user","EmployeeId","uniqueValues","self","findIndex","t","PopperComponent","Popper","placement","onclose","handleAddEmployeeClose","UserIds","emp"],"sourceRoot":""}
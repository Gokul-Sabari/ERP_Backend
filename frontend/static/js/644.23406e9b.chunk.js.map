{"version":3,"file":"static/js/644.23406e9b.chunk.js","mappings":"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","sources":["Pages/Sales/SalesInvoice/manageInvolvedStaff.jsx","Pages/Sales/SalesInvoice/manageGeneralInfo.jsx","Pages/Sales/SalesInvoice/taxDetails.jsx","Pages/Sales/SalesInvoice/manageExpences.jsx","Pages/Sales/SalesInvoice/salesInvoiceCreation.jsx","../node_modules/@mui/icons-material/esm/ReceiptLong.js"],"sourcesContent":["import { Button, IconButton } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { salesInvoiceStaffInfo } from \"./variable\";\r\nimport { checkIsNumber, isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\n\r\nconst InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [], }) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => setStaffArray(pre => [...pre, { ...salesInvoiceStaffInfo }])}\r\n                >Add</Button>\r\n            </div>\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"fa-13\">Sno</th>\r\n                        <th className=\"fa-13\">Staff Name</th>\r\n                        <th className=\"fa-13\">Category</th>\r\n                        <th className=\"fa-13\">#</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {toArray(StaffArray).map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                            <td className='fa-13 w-100 p-0'>\r\n                                <Select\r\n                                    value={{\r\n                                        value: row?.Emp_Id,\r\n                                        label: row?.Emp_Name,\r\n                                    }}\r\n                                    onChange={e => setStaffArray(prev => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                const staff = toArray(costCenter).find(c => isEqualNumber(c?.Cost_Center_Id, e.value))\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id:\r\n                                                        checkIsNumber(staffRow?.Emp_Type_Id)\r\n                                                            ? Number(staffRow?.Emp_Type_Id)\r\n                                                            : checkIsNumber(staff.User_Type)\r\n                                                                ? Number(staff.User_Type)\r\n                                                                : 0,\r\n                                                    Emp_Id: Number(e.value),\r\n                                                    Emp_Name: e.label\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    options={\r\n                                        [...toArray(costCenter).filter(fil => (\r\n                                            !StaffArray.some(st => (\r\n                                                isEqualNumber(st.Emp_Id, fil.Cost_Center_Id)\r\n                                            ))\r\n                                        ))].map(st => ({\r\n                                            value: st.Cost_Center_Id,\r\n                                            label: st.Cost_Center_Name\r\n                                        }))\r\n                                    }\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Staff\"}\r\n                                />\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                <select\r\n                                    value={row?.Emp_Type_Id}\r\n                                    onChange={e => setStaffArray((prev) => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id: e.target.value\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    className=\"cus-inpt p-2 border-0\"\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {toArray(costCategory).map((st, sti) =>\r\n                                        <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                    )}\r\n                                </select>\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0'>\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setStaffArray(prev => {\r\n                                            return prev.filter((_, filIndex) => index !== filIndex);\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                >\r\n                                    <Delete color='error' />\r\n                                </IconButton>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvolvedStaffs;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\"\r\nimport { isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport RequiredStar from '../../../Components/requiredStar';\r\n\r\nconst ManageSalesInvoiceGeneralInfo = ({\r\n    invoiceInfo = {},\r\n    setInvoiceInfo,\r\n    retailers = [],\r\n    voucherType = [],\r\n    branches = [],\r\n    onChangeRetailer,\r\n    stockItemLedgerName = []\r\n}) => {\r\n\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n\r\n                {/* customer name */}\r\n                <div className=\"col-sm-8 p-2\">\r\n                    <label className='fa-13'>Party Name</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo?.Retailer_Id,\r\n                            label: invoiceInfo?.Retailer_Name\r\n                        }}\r\n                        onChange={e => {\r\n                            setInvoiceInfo(pre => ({\r\n                                ...pre,\r\n                                Retailer_Id: e.value,\r\n                                Retailer_Name: e.label\r\n                            }));\r\n\r\n                            if (onChangeRetailer) onChangeRetailer();\r\n                        }}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(retailers).map(obj => ({\r\n                                value: obj?.Retailer_Id,\r\n                                label: obj?.Retailer_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select Vendor\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* voucher type */}\r\n                <div className=\"col-sm-4 p-2\">\r\n                    <label className='fa-13'>Voucher Type</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo.Voucher_Type,\r\n                            label: toArray(voucherType).find(v => isEqualNumber(v.Vocher_Type_Id, invoiceInfo.Voucher_Type))?.Voucher_Type\r\n                        }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Voucher_Type: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(voucherType).filter(\r\n                                fil => fil?.Type === 'SALES'\r\n                            ).map(obj => ({\r\n                                value: obj?.Vocher_Type_Id,\r\n                                label: obj?.Voucher_Type\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        required={true}\r\n                        placeholder={\"Select Voucher Type\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* Date */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Entry Date <RequiredStar /></label>\r\n                    <input\r\n                        value={invoiceInfo?.Do_Date}\r\n                        type=\"date\"\r\n                        required\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Do_Date: e.target.value }))}\r\n                    />\r\n                </div>\r\n\r\n                {/* branch */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Branch <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        value={invoiceInfo?.Branch_Id}\r\n                        required\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                    >\r\n                        <option value=\"\">select</option>\r\n                        {branches.map((o, i) => (\r\n                            <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* GST TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>GST Type <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                        value={invoiceInfo.GST_Inclusive}\r\n                        required\r\n                    >\r\n                        <option value={1}>Inclusive Tax</option>\r\n                        <option value={0}>Exclusive Tax</option>\r\n                        <option value={2}>Not Taxable</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* TAX TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Tax Type</label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                        value={invoiceInfo.IS_IGST}\r\n                    >\r\n                        <option value='0'>GST</option>\r\n                        <option value='1'>IGST</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* stock item ledger name */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Stock Item Ledger Name</label>\r\n                    <Select\r\n                        value={{ value: invoiceInfo.Stock_Item_Ledger_Name, label: invoiceInfo.Stock_Item_Ledger_Name }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Stock_Item_Ledger_Name: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...stockItemLedgerName.map(obj => ({\r\n                                value: obj?.Stock_Item_Ledger_Name,\r\n                                label: obj?.Stock_Item_Ledger_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        menuPortalTarget={document.body}\r\n                        required={true}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* STATUS */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Status</label>\r\n                    <select\r\n                        value={invoiceInfo?.Cancel_status}\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Cancel_status: e.target.value }))}\r\n                    >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        <option value=\"1\">New</option>\r\n                        <option value=\"2\">Progess</option>\r\n                        <option value=\"3\">Completed</option>\r\n                        <option value=\"0\">Canceled</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <label className='fa-13'>Narration</label>\r\n            <textarea\r\n                className=\"cus-inpt fa-14\"\r\n                rows={2}\r\n                value={invoiceInfo.Narration}\r\n                onChange={e => setInvoiceInfo(pre => ({ ...pre, Narration: e.target.value }))}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageSalesInvoiceGeneralInfo;","import { useMemo } from \"react\";\r\nimport { Addition, isEqualNumber, NumberFormat, numberToWords, RoundNumber, toArray } from \"../../../Components/functions\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\n\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SalesInvoiceTaxDetails = ({\r\n    invoiceProducts = [],\r\n    invoiceExpences = [],\r\n    isNotTaxableBill,\r\n    isInclusive,\r\n    IS_IGST,\r\n    products = [],\r\n}) => {\r\n\r\n    const invExpencesTotal = useMemo(() => {\r\n        return toArray(invoiceExpences).reduce((acc, exp) => Addition(acc, exp?.Expence_Value), 0)\r\n    }, [invoiceExpences]);\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const invValue = invoiceProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0);\r\n\r\n        return Addition(invValue, invExpencesTotal);\r\n    }, [invoiceProducts, isNotTaxableBill, products, IS_IGST, isInclusive, invExpencesTotal])\r\n\r\n    const totalValueBeforeTax = useMemo(() => {\r\n        const productTax = invoiceProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return {\r\n                TotalValue: Addition(acc.TotalValue, Amount),\r\n                TotalTax: 0\r\n            }\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n            const TotalValue = Addition(acc.TotalValue, taxInfo.without_tax);\r\n            const TotalTax = Addition(acc.TotalTax, taxInfo.tax_amount);\r\n\r\n            return {\r\n                TotalValue, TotalTax\r\n            };\r\n        }, {\r\n            TotalValue: 0,\r\n            TotalTax: 0\r\n        });\r\n\r\n        const invoiceExpencesTaxTotal = toArray(invoiceExpences).reduce((acc, exp) => Addition(\r\n            acc, \r\n            IS_IGST ? exp?.Igst_Amo : Addition(exp?.Cgst_Amo, exp?.Sgst_Amo)\r\n        ), 0);\r\n\r\n        return {\r\n            TotalValue: productTax.TotalValue,\r\n            TotalTax: Addition(productTax.TotalTax, invoiceExpencesTaxTotal),\r\n        }\r\n    }, [invoiceProducts, isNotTaxableBill, products, IS_IGST, isInclusive, invoiceExpences])\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2\" rowSpan={IS_IGST ? 5 : 6}>\r\n                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                        </td>\r\n                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                        <td className=\"border p-2\">\r\n                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                        </td>\r\n                    </tr>\r\n                    {!IS_IGST ? (\r\n                        <>\r\n                            <tr>\r\n                                <td className=\"border p-2\">CGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {NumberFormat(RoundNumber(totalValueBeforeTax.TotalTax / 2))}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border p-2\">SGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {NumberFormat(RoundNumber(totalValueBeforeTax.TotalTax / 2))}\r\n                                </td>\r\n                            </tr>\r\n                        </>\r\n                    ) : (\r\n                        <tr>\r\n                            <td className=\"border p-2\">IGST</td>\r\n                            <td className=\"border p-2\">\r\n                                {NumberFormat(RoundNumber(totalValueBeforeTax.TotalTax))}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total Expences</td>\r\n                        <td className=\"border p-2\">\r\n                            {RoundNumber(invExpencesTotal)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Round Off</td>\r\n                        <td className=\"border p-2\">\r\n                            {RoundNumber(Math.round(Total_Invoice_value) - Total_Invoice_value)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total</td>\r\n                        <td className=\"border p-2\">\r\n                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                        </td>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesInvoiceTaxDetails;","import { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { Addition, checkIsNumber, Division, isEqualNumber, NumberFormat, onlynum, onlynumAndNegative, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { salesInvoiceExpencesInfo } from \"./variable\";\r\nimport { useState } from \"react\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst ExpencesOfSalesInvoice = ({\r\n    invoiceExpences = [],\r\n    setInvoiceExpences,\r\n    expenceMaster = [],\r\n    IS_IGST,\r\n    taxType,\r\n}) => {\r\n\r\n    const handleInputChange = (index, field, value) => {\r\n\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n\r\n                const updated = { ...item, [field]: value };\r\n\r\n                if (field === 'Expence_Value') {\r\n                    const\r\n                        Cgst = item.Cgst ? toNumber(item.Cgst) : 0,\r\n                        Sgst = item.Sgst ? toNumber(item.Sgst) : 0,\r\n                        Igst = item.Igst ? toNumber(item.Igst) : 0,\r\n                        expVal = toNumber(value),\r\n                        taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst_Amo = (Cgst > 0 && !IS_IGST)\r\n                        ? taxAmount.cgst_amount\r\n                        : 0;\r\n                    updated.Sgst_Amo = (Sgst > 0 && !IS_IGST)\r\n                        ? taxAmount.sgst_amount\r\n                        : 0;\r\n                    updated.Igst_Amo = (Igst > 0 && IS_IGST)\r\n                        ? taxAmount.igst_amount\r\n                        : 0;\r\n                }\r\n\r\n                if (field === 'Igst') {\r\n                    const \r\n                        Igst = IS_IGST ? toNumber(value) : 0, \r\n                        Cgst = !IS_IGST ? Division(toNumber(value), 2) : 0, \r\n                        Sgst = !IS_IGST ? Division(toNumber(value), 2) : 0;\r\n\r\n                    const expVal = toNumber(item.Expence_Value), taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst = Cgst;\r\n                    updated.Sgst = Sgst;\r\n                    updated.Cgst_Amo = Cgst > 0 ? taxAmount.cgst_amount : 0;\r\n                    updated.Sgst_Amo = Sgst > 0 ? taxAmount.sgst_amount : 0;\r\n                    updated.Igst_Amo = Igst > 0 ? taxAmount.igst_amount : 0;\r\n                }\r\n\r\n                return updated;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSelectChange = (index, selectedOption) => {\r\n        const selected = expenceMaster.find(exp => isEqualNumber(exp.Id, selectedOption.value)) || {};\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n                return {\r\n                    ...item,\r\n                    Expense_Id: selected.Id,\r\n                    Expence_Value: 0\r\n                };\r\n            })\r\n        );\r\n    };\r\n\r\n    const addNewRow = () => {\r\n        setInvoiceExpences(prev => [...prev, { ...salesInvoiceExpencesInfo, Sno: prev.length }]);\r\n    };\r\n\r\n    const removeRow = index => {\r\n        setInvoiceExpences(prev => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card >\r\n                <div className=\"d-flex align-items-center justify-content-between flex-wrap px-3 py-2\">\r\n                    <h5 className=\"m-0\">Expenses</h5>\r\n                    <Button variant=\"outlined\" type=\"button\" onClick={addNewRow}>Add</Button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n\r\n                    <table className=\"table table-bordered m-0\">\r\n                        <thead className=\"table-light\">\r\n                            <tr>\r\n                                {[\r\n                                    'S.No', 'Expense', \r\n                                    // 'GST %', 'Tax', \r\n                                    'Expense Value', 'Action'].map(\r\n                                    (o, i) => <th className=\"fa-13 bg-light\" key={i}>{o}</th>\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{ fontSize: '13px' }}>\r\n                            {invoiceExpences.map((row, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td className=\"p-0 vctr\" style={{ minWidth: '180px' }}>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: row?.Expense_Id,\r\n                                                label: expenceMaster.find(\r\n                                                    exp => isEqualNumber(exp.Id, row?.Expense_Id)\r\n                                                )?.Expence_Name || '',\r\n                                            }}\r\n                                            onChange={e => handleSelectChange(index, e)}\r\n                                            options={expenceMaster\r\n                                                .filter(exp => !invoiceExpences.some(inv => inv.Expense_Id === exp.Id))\r\n                                                .map(exp => ({ value: exp.Id, label: exp.Expence_Name }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select Expense\"\r\n                                        />\r\n                                    </td>\r\n                                    {/* <td className=\"p-0 vctr\">\r\n                                        <input\r\n                                            onInput={onlynum}\r\n                                            className=\"cus-inpt p-2 border-0\"\r\n                                            value={(IS_IGST ? toNumber(row.Igst) : Addition(row?.Cgst, row?.Sgst)) || ''}\r\n                                            disabled={!checkIsNumber(row.Expense_Id)}\r\n                                            onChange={e => handleInputChange(index, 'Igst', e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                    <td className=\"p-0 vctr text-center\" >\r\n                                        {NumberFormat(IS_IGST ? toNumber(row?.Igst_Amo) : Addition(row?.Cgst_Amo, row?.Sgst_Amo))}\r\n                                    </td> */}\r\n                                    <td className=\"p-0 vctr\">\r\n                                        <input\r\n                                            onInput={onlynumAndNegative}\r\n                                            className=\"cus-inpt p-2 border-0\"\r\n                                            value={toNumber(row.Expence_Value) || ''}\r\n                                            disabled={!checkIsNumber(row.Expense_Id)}\r\n                                            onChange={e => handleInputChange(index, 'Expence_Value', e.target.value)}\r\n                                        />\r\n                                    </td>\r\n                                    <td className=\"p-0 vctr  text-center \">\r\n                                        <IconButton onClick={() => removeRow(index)} size=\"small\">\r\n                                            <Delete color=\"error\" fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            {invoiceExpences.length === 0 && (\r\n                                <tr><td className=\"text-center\" colSpan={6}>No rows</td></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpencesOfSalesInvoice;","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, IconButton, CardContent, Card } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    NumberFormat, numberToWords,\r\n    RoundNumber, Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber,\r\n    toArray,\r\n    stringCompare\r\n} from \"../../../Components/functions\";\r\nimport { Add, ArrowLeft, Clear, Delete, Download, Edit, ReceiptLong, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { salesInvoiceGeneralInfo, salesInvoiceDetailsInfo, salesInvoiceExpencesInfo, salesInvoiceStaffInfo } from './variable';\r\nimport InvolvedStaffs from \"./manageInvolvedStaff\";\r\nimport ManageSalesInvoiceGeneralInfo from \"./manageGeneralInfo\";\r\nimport SalesInvoiceTaxDetails from \"./taxDetails\";\r\nimport AddItemToSaleOrderCart from \"../SaleOrder/addItemToCart\";\r\nimport AddProductsInSalesInvoice from \"./importFromSaleOrder\";\r\nimport ExpencesOfSalesInvoice from \"./manageExpences\";\r\n\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst CreateSalesInvoice = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const editValues = location.state;\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        brand: [],\r\n        godown: [],\r\n        expence: [],\r\n        stockInGodown: [],\r\n        stockItemLedgerName: [],\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        addProductDialog: false,\r\n        importFromSaleOrder: false,\r\n    })\r\n\r\n    const [invoiceInfo, setInvoiceInfo] = useState(salesInvoiceGeneralInfo)\r\n    const [invoiceProducts, setInvoiceProduct] = useState([]);\r\n    const [invoiceExpences, setInvoiceExpences] = useState([]);\r\n    const [staffArray, setStaffArray] = useState([]);\r\n\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n    const isInclusive = isEqualNumber(invoiceInfo.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceInfo.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceInfo.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n    const minimumRows = 3;\r\n    const dummyRowCount = minimumRows - invoiceProducts.length\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    godownLocationsResponse,\r\n                    expenceResponse,\r\n                    godownWiseStock,\r\n                    stockItemLedgerNameResponse\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n                    fetchLink({ address: `masters/defaultAccountMaster` }),\r\n                    fetchLink({ address: `sales/stockInGodown` }),\r\n                    fetchLink({ address: `purchase/stockItemLedgerName` }),\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n                );\r\n                const expencesMaster = (expenceResponse.success ? toArray(expenceResponse.data) : []).sort(\r\n                    (a, b) => String(a?.Account_Name).localeCompare(b?.Account_Name)\r\n                );\r\n                const stockInGodowns = (godownWiseStock.success ? godownWiseStock.data : []).sort(\r\n                    (a, b) => String(a?.stock_item_name).localeCompare(b?.stock_item_name)\r\n                );\r\n                const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n                    (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    godown: godownLocations,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n                    expence: expencesMaster.filter(\r\n                        exp => !stringCompare(exp.Type, 'DEFAULT')\r\n                    ).map(exp => ({ Id: exp.Acc_Id, Expence_Name: exp.Account_Name })),\r\n                    stockInGodown: stockInGodowns,\r\n                    stockItemLedgerName: stockItemLedgerName\r\n                }));\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const clearValues = () => {\r\n        setInvoiceInfo(salesInvoiceGeneralInfo);\r\n        setInvoiceProduct([]);\r\n        setInvoiceExpences([]);\r\n        setStaffArray([]);\r\n    }\r\n\r\n    // re-calculate the tax after changeing tax-type, invoice-type\r\n    useEffect(() => {\r\n        setInvoiceProduct(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(item).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setInvoiceExpences(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                const\r\n                    Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n                    Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n                    Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n                    Expence_Value = toNumber(item?.Expence_Value),\r\n                    taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n\r\n                return {\r\n                    ...item,\r\n                    Cgst, Sgst, Igst,\r\n                    Expence_Value,\r\n                    Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n                    Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n                    Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n                }\r\n            })\r\n        })\r\n    }, [\r\n        baseData.expence,\r\n        IS_IGST,\r\n        taxType,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(editValues) &&\r\n            Array.isArray(editValues?.Products_List)\r\n        ) {\r\n            const { Products_List, Expence_Array, Staffs_Array } = editValues;\r\n            setInvoiceInfo(\r\n                Object.fromEntries(\r\n                    Object.entries(salesInvoiceGeneralInfo).map(([key, value]) => {\r\n                        if (key === 'Do_Date') return [key, editValues[key] ? ISOString(editValues[key]) : value]\r\n                        return [key, editValues[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setInvoiceProduct(\r\n                Products_List.map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceDetailsInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setInvoiceExpences(\r\n                toArray(Expence_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceExpencesInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setStaffArray(\r\n                toArray(Staffs_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceStaffInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [editValues])\r\n\r\n    const saveSalesInvoice = () => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `sales/salesInvoice`,\r\n            method: checkIsNumber(invoiceInfo?.Do_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                ...invoiceInfo,\r\n                Product_Array: invoiceProducts,\r\n                Staffs_Array: staffArray,\r\n                Expence_Array: invoiceExpences\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                clearValues();\r\n                toast.success(data.message);\r\n                navigate('/erp/sales/invoice')\r\n            } else {\r\n                toast.warn(data.message)\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <AddItemToSaleOrderCart\r\n                orderProducts={invoiceProducts}\r\n                setOrderProducts={setInvoiceProduct}\r\n                open={dialog.addProductDialog}\r\n                onClose={() => {\r\n                    setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                godowns={baseData.godown}\r\n                GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={{ ...salesInvoiceDetailsInfo, Pre_Id: invoiceInfo.So_No }}\r\n                stockInGodown={baseData.stockInGodown}\r\n            />\r\n\r\n            <Card>\r\n                <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n                    <span className=\"flex-grow-1 fa-16 fw-bold\">Sales Invoice</span>\r\n                    <span>\r\n                        <Button type='button' onClick={() => {\r\n                            if (window.history.length > 1) {\r\n                                navigate(-1);\r\n                            } else {\r\n                                navigate('/erp/sales/invoice');\r\n                            }\r\n                        }}>Cancel</Button>\r\n                        <Button onClick={() => saveSalesInvoice()} variant=\"contained\">submit</Button>\r\n                    </span>\r\n                </div>\r\n                <CardContent>\r\n                    <div className=\"row p-0\">\r\n                        {/* staff info */}\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <InvolvedStaffs\r\n                                    StaffArray={staffArray}\r\n                                    setStaffArray={setStaffArray}\r\n                                    costCenter={baseData.staff}\r\n                                    costCategory={baseData.staffType}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* general info */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <ManageSalesInvoiceGeneralInfo\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    retailers={baseData.retailers}\r\n                                    branches={baseData.branch}\r\n                                    voucherType={baseData.voucherType}\r\n                                    stockItemLedgerName={baseData.stockItemLedgerName}\r\n                                    onChangeRetailer={() => {\r\n                                        setInvoiceProduct([]);\r\n                                        setInvoiceExpences([]);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* product details */}\r\n                    <FilterableTable\r\n                        title=\"Items\"\r\n                        headerFontSizePx={13}\r\n                        bodyFontSizePx={13}\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setSelectedProductToEdit(null);\r\n                                        setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                    }}\r\n                                    sx={{ ml: 1 }}\r\n                                    variant='outlined'\r\n                                    type=\"button\"\r\n                                    startIcon={<Add />}\r\n                                    disabled={\r\n                                        !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                        || (invoiceProducts.length > 0\r\n                                            && checkIsNumber(invoiceInfo.So_No))\r\n                                    }\r\n                                >Add Product</Button>\r\n\r\n                                <AddProductsInSalesInvoice\r\n                                    loadingOn={loadingOn}\r\n                                    loadingOff={loadingOff}\r\n                                    open={dialog.importFromSaleOrder}\r\n                                    onClose={() => setDialog(pre => ({ ...pre, importFromSaleOrder: false }))}\r\n                                    retailer={invoiceInfo?.Retailer_Id}\r\n                                    selectedItems={invoiceProducts}\r\n                                    setSelectedItems={setInvoiceProduct}\r\n                                    products={baseData.products}\r\n                                    GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                                    IS_IGST={IS_IGST}\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    godowns={baseData.godown}\r\n                                    stockInGodown={baseData.stockInGodown}\r\n                                >\r\n                                    <Button\r\n                                        onClick={() => setDialog(pre => ({ ...pre, importFromSaleOrder: true }))}\r\n                                        disabled={\r\n                                            !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                            || (\r\n                                                invoiceProducts.length > 0\r\n                                                && !checkIsNumber(invoiceInfo.So_No)\r\n                                            )\r\n                                        }\r\n                                        sx={{ ml: 1 }}\r\n                                        type=\"button\"\r\n                                        variant='outlined'\r\n                                        startIcon={<ReceiptLong />}\r\n                                    >Choose Sale Order</Button>\r\n                                </AddProductsInSalesInvoice>\r\n                            </>\r\n                        }\r\n                        dataArray={[\r\n                            ...invoiceProducts,\r\n                            ...Array.from({\r\n                                length: dummyRowCount > 0 ? dummyRowCount : 0\r\n                            }).map(d => salesInvoiceDetailsInfo)\r\n                        ]}\r\n                        columns={[\r\n                            createCol('Item_Name', 'string'),\r\n                            createCol('HSN_Code', 'string'),\r\n                            createCol('Bill_Qty', 'number'),\r\n                            createCol('Act_Qty', 'number'),\r\n                            createCol('Item_Rate', 'number'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Tax',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const { Cgst = 0, Sgst = 0, Igst = 0, Cgst_Amo = 0, Sgst_Amo = 0, Igst_Amo = 0 } = row;\r\n                                    const taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                                    const taxAmount = IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo);\r\n\r\n                                    return !checkIsNumber(row?.Item_Id) ? '' : `${taxAmount} - (${taxPercentage} %)`\r\n                                }\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Godown',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => baseData.godown.find(\r\n                                    godown => isEqualNumber(godown.Godown_Id, row?.GoDown_Id)\r\n                                )?.Godown_Name ?? ''\r\n                            },\r\n                            createCol('Amount', 'number'),\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    setSelectedProductToEdit(row);\r\n                                                    setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                                }}\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                onClick={() => setInvoiceProduct(\r\n                                                    pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id))\r\n                                                )}\r\n                                                color='error'\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Delete />\r\n                                            </IconButton>\r\n                                        </>\r\n                                    )\r\n                                },\r\n                                ColumnHeader: 'Action',\r\n                                isVisible: 1,\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <ExpencesOfSalesInvoice\r\n                        invoiceExpences={invoiceExpences}\r\n                        setInvoiceExpences={setInvoiceExpences}\r\n                        expenceMaster={baseData.expence}\r\n                        IS_IGST={IS_IGST}\r\n                        taxType={taxType}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <SalesInvoiceTaxDetails\r\n                        invoiceProducts={invoiceProducts}\r\n                        invoiceExpences={invoiceExpences}\r\n                        isNotTaxableBill={isNotTaxableBill}\r\n                        isInclusive={isInclusive}\r\n                        IS_IGST={IS_IGST}\r\n                        products={baseData.products}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateSalesInvoice;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.5 3.5 18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2v14H3v3c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V2zM19 19c0 .55-.45 1-1 1s-1-.45-1-1v-3H8V5h11z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 7h6v2H9zm7 0h2v2h-2zm-7 3h6v2H9zm7 0h2v2h-2z\"\n}, \"1\")], 'ReceiptLong');"],"names":["_ref","StaffArray","setStaffArray","costCenter","costCategory","_jsxs","_Fragment","children","className","_jsx","Button","variant","color","type","onClick","pre","_objectSpread","salesInvoiceStaffInfo","toArray","map","row","index","Select","value","Emp_Id","label","Emp_Name","onChange","e","prev","staffRow","ind","isEqualNumber","staff","find","c","Cost_Center_Id","Emp_Type_Id","checkIsNumber","Number","User_Type","options","filter","fil","some","st","Cost_Center_Name","styles","customSelectStyles","isSearchable","placeholder","style","maxWidth","minWidth","target","sti","Cost_Category_Id","Cost_Category","IconButton","_","filIndex","size","Delete","_toArray$find","invoiceInfo","setInvoiceInfo","retailers","voucherType","branches","onChangeRetailer","stockItemLedgerName","inputStyle","Retailer_Id","Retailer_Name","isDisabled","obj","maxMenuHeight","Voucher_Type","v","Vocher_Type_Id","Type","required","RequiredStar","Do_Date","Branch_Id","o","i","BranchId","BranchName","GST_Inclusive","IS_IGST","Stock_Item_Ledger_Name","menuPortalTarget","document","body","Cancel_status","disabled","rows","Narration","findProductDetails","_arr$find","productid","arguments","length","undefined","Product_Id","invoiceProducts","invoiceExpences","isNotTaxableBill","isInclusive","products","invExpencesTotal","useMemo","reduce","acc","exp","Addition","Expence_Value","Total_Invoice_value","invValue","item","Amount","RoundNumber","product","Item_Id","gstPercentage","Igst_P","Gst_P","calculateGSTDetails","with_tax","totalValueBeforeTax","productTax","TotalValue","TotalTax","taxInfo","without_tax","tax_amount","invoiceExpencesTaxTotal","Igst_Amo","Cgst_Amo","Sgst_Amo","rowSpan","numberToWords","parseInt","NumberFormat","Math","round","setInvoiceExpences","expenceMaster","taxType","Card","addNewRow","salesInvoiceExpencesInfo","Sno","fontSize","_expenceMaster$find","Expense_Id","Id","Expence_Name","handleSelectChange","selectedOption","selected","inv","onInput","onlynumAndNegative","toNumber","handleInputChange","field","updated","Cgst","Sgst","Igst","expVal","taxPercentage","taxAmount","cgst_amount","sgst_amount","igst_amount","Division","removeRow","colSpan","storage","getSessionUser","user","loadingOn","loadingOff","navigate","useNavigate","editValues","useLocation","state","baseData","setBaseData","useState","branch","uom","staffType","brand","godown","expence","stockInGodown","dialog","setDialog","addProductDialog","importFromSaleOrder","salesInvoiceGeneralInfo","setInvoiceProduct","staffArray","selectedProductToEdit","setSelectedProductToEdit","dummyRowCount","useEffect","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","godownLocationsResponse","expenceResponse","godownWiseStock","stockItemLedgerNameResponse","Promise","all","fetchLink","address","concat","Company_id","branchData","success","data","sort","a","b","String","localeCompare","productsData","Product_Name","retailersData","uomData","Units","staffData","staffCategoryData","godownLocations","Godown_Name","expencesMaster","Account_Name","stockInGodowns","stock_item_name","getUniqueData","stringCompare","Acc_Id","console","error","fetchData","Object","fromEntries","entries","_ref2","key","productMaster","isTaxable","Bill_Qty","Item_Rate","itemRateGst","gstInfo","cgstPer","cgst_per","igstPer","igst_per","base_amount","isValidObject","Array","isArray","Products_List","Expence_Array","Staffs_Array","_ref3","_editValues$key","ISOString","salesInvoiceDetailsInfo","_ref4","_item$key","_ref5","_item$key2","_ref6","_item$key3","saveSalesInvoice","method","Do_Id","bodyData","Product_Array","then","toast","message","warn","catch","finally","AddItemToSaleOrderCart","orderProducts","setOrderProducts","open","onClose","brands","godowns","initialValue","Pre_Id","So_No","window","history","CardContent","minHeight","height","InvolvedStaffs","ManageSalesInvoiceGeneralInfo","FilterableTable","title","headerFontSizePx","bodyFontSizePx","EnableSerialNumber","disablePagination","ButtonArea","sx","ml","startIcon","Add","AddProductsInSalesInvoice","retailer","selectedItems","setSelectedItems","ReceiptLong","dataArray","from","d","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref7","_ref8","_baseData$godown$find","_baseData$godown$find2","Godown_Id","GoDown_Id","_ref9","Edit","ExpencesOfSalesInvoice","SalesInvoiceTaxDetails","createSvgIcon"],"sourceRoot":""}
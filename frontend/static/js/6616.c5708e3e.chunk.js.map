{"version":3,"file":"static/js/6616.c5708e3e.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Sales/TripMaster/tableColumns.js","Pages/Sales/TripMaster/DeliveryTripSheetAdd.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import { ISOString } from \"../../../Components/functions\"\r\n\r\nexport const tripMasterDetails = {\r\n    Trip_Id: '',\r\n    Challan_No: '',\r\n    Branch_Id: '',\r\n    Trip_Date: ISOString(),\r\n    Vehicle_No: '',\r\n    StartTime: '',\r\n    EndTime: '',\r\n    Trip_No: '',\r\n    Trip_ST_KM: '',\r\n    Trip_EN_KM: '',\r\n    Trip_Tot_Kms: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n    DO_Date:ISOString(),\r\n    Delivery_Person_Id:'',\r\n    BillType:'',\r\n    VoucherType:''\r\n}\r\n\r\nexport const tripDetailsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    Batch_No: '',\r\n    Journal_no: '',\r\n    From_Location: '',\r\n    To_Location: '',\r\n    S_No: '',\r\n    Reason: '',\r\n    Product_Id: '',\r\n    HSN_Code: '',\r\n    QTY: '',\r\n    KGS: '',\r\n    GST_Inclusive: '',\r\n    IS_IGST: '',\r\n    Gst_Rate: '',\r\n    Gst_P: '',\r\n    Cgst_P: '',\r\n    Sgst_P: '',\r\n    Igst_P: '',\r\n    Taxable_Value: '',\r\n    Round_off: '',\r\n    Total_Value: '',\r\n    Trip_From: '',\r\n    Party_And_Branch_Id: '',\r\n    Transporter_Id: '',\r\n    Dispatch_Date: '',\r\n    Delivery_Date: '',\r\n    Created_By: '',\r\n    Updated_By: '',\r\n}\r\n\r\nexport const tripStaffsColumns = {\r\n    Id: '',\r\n    Trip_Id: '',\r\n    Involved_Emp_Id: '',\r\n    Cost_Center_Type_Id: '',\r\n    Emp_Name: '',\r\n}","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n} from \"@mui/material\";\r\nimport {\r\n    Addition,\r\n    checkIsNumber,\r\n    combineDateTime,\r\n    isEqualNumber,\r\n    ISOString,\r\n    isValidDate,\r\n    isValidObject,\r\n    Subraction,\r\n} from \"../../../Components/functions\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Close, Delete, Search } from \"@mui/icons-material\";\r\nimport FilterableTable, {\r\n    createCol,\r\n} from \"../../../Components/filterableTable2\";\r\nimport { tripMasterDetails, tripStaffsColumns } from \"./tableColumns\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst TripSheetGodownSearch = ({ loadingOn, loadingOff }) => {\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n    const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Retailer_Id: \"\",\r\n        RetailerGet: \"ALL\",\r\n        Created_by: \"\",\r\n        CreatedByGet: \"ALL\",\r\n        Sales_Person_Id: \"\",\r\n        SalsePersonGet: \"ALL\",\r\n        Cancel_status: 0,\r\n        Route_Id: \"\",\r\n        RoutesGet: \"ALL\",\r\n        Area_Id: \"\",\r\n        AreaGet: \"ALL\",\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false,\r\n        addItemDialog: false,\r\n    });\r\n\r\n    const [transactionData, setTransactionData] = useState([]);\r\n    const [costCenter, setCostCenter] = useState([]);\r\n    const [costCenterCategory, setCostCenterCategory] = useState([]);\r\n    const [branch, setBranch] = useState([]);\r\n    const [tripSheetInfo, setTripSheetInfo] = useState(tripMasterDetails);\r\n    const [staffInvolvedList, setStaffInvolvedList] = useState([]);\r\n    const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [branchResponse, staffResponse, staffCategory] =\r\n                    await Promise.all([\r\n                        fetchLink({ address: `masters/branch/dropDown` }),\r\n\r\n                        fetchLink({ address: `dataEntry/costCenter` }),\r\n                        fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    ]);\r\n                const branchData = (\r\n                    branchResponse.success ? branchResponse.data : []\r\n                ).sort((a, b) => String(a?.BranchName).localeCompare(b?.BranchName));\r\n                const staffData = (\r\n                    staffResponse.success ? staffResponse.data : []\r\n                ).sort((a, b) =>\r\n                    String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (\r\n                    staffCategory.success ? staffCategory.data : []\r\n                ).sort((a, b) =>\r\n                    String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n\r\n                setBranch(branchData);\r\n                setCostCenter(staffData);\r\n                setCostCenterCategory(staffCategoryData);\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSalePerson(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const extractHHMM = (timeString) => {\r\n            const date = new Date(timeString);\r\n            const hours = date.getHours();\r\n            const minutes = date.getMinutes();\r\n            return `${hours < 10 ? \"0\" + hours : hours}:${minutes < 10 ? \"0\" + minutes : minutes\r\n                }`;\r\n        };\r\n\r\n        const productsArray = stateDetails?.Product_Array;\r\n        const employeesArray = stateDetails?.Employees_Involved;\r\n        if (\r\n            isValidObject(stateDetails) &&\r\n            Array.isArray(productsArray) &&\r\n            Array.isArray(employeesArray)\r\n        ) {\r\n            setTripSheetInfo((prev) => ({\r\n                ...prev,\r\n                ...Object.fromEntries(\r\n                    Object.entries(tripMasterDetails).map(([key, value]) => {\r\n                        if (key === \"Trip_Date\")\r\n                            return [\r\n                                key,\r\n                                stateDetails[key] ? ISOString(stateDetails[key]) : value,\r\n                            ];\r\n                        if (key === \"Branch_Id\") return [key, stateDetails[key] ?? value];\r\n                        if (key === \"StartTime\" || key === \"EndTime\")\r\n                            return [\r\n                                key,\r\n                                stateDetails[key] ? extractHHMM(stateDetails[key]) : value,\r\n                            ];\r\n\r\n                        return [key, stateDetails[key] ?? value];\r\n                    })\r\n                ),\r\n                Product_Array: productsArray,\r\n            }));\r\n\r\n            setSelectedItems(productsArray);\r\n            setStaffInvolvedList(\r\n                employeesArray.map((staffData) =>\r\n                    Object.fromEntries(\r\n                        Object.entries(tripStaffsColumns).map(([key, value]) => {\r\n                            return [key, staffData[key] ?? value];\r\n                        })\r\n                    )\r\n                )\r\n            );\r\n\r\n            const deliveryStaff = employeesArray.find(\r\n                (staff) => Number(staff.Cost_Center_Type_Id) === 9\r\n            );\r\n            if (deliveryStaff) {\r\n                setDeliveryPerson({\r\n                    UserId: deliveryStaff.Involved_Emp_Id,\r\n                    Name: deliveryStaff.Emp_Name,\r\n                });\r\n            } else {\r\n                setDeliveryPerson(null);\r\n            }\r\n        }\r\n    }, [stateDetails]);\r\n\r\n    const searchTransaction = (e) => {\r\n        e.preventDefault();\r\n        const { Fromdate, Todate, Sales_Person_Id } = filters;\r\n\r\n        if (Fromdate && Todate) {\r\n            if (loadingOn) loadingOn();\r\n            setTransactionData([]);\r\n            fetchLink({\r\n                address: `delivery/deliveryDetailsList?Fromdate=${Fromdate}&Todate=${Todate}&Sales_Person_Id=${Sales_Person_Id}`,\r\n            })\r\n                .then((data) => {\r\n                    if (data.success) setTransactionData(data.data);\r\n                })\r\n                .catch((e) => console.log(e))\r\n                .finally(() => {\r\n                    if (loadingOff) loadingOff();\r\n                });\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setSelectedItems([]);\r\n        setStaffInvolvedList([]);\r\n        setTripSheetInfo(tripMasterDetails);\r\n        setTransactionData([]);\r\n    };\r\n\r\n    const saveTripSheet = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `delivery/deliveryOrderTrip`,\r\n            method: checkIsNumber(tripSheetInfo?.Trip_Id) ? \"PUT\" : \"POST\",\r\n            bodyData: {\r\n                ...tripSheetInfo,\r\n                StartTime:\r\n                    tripSheetInfo.StartTime && tripSheetInfo.Trip_Date\r\n                        ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.StartTime)\r\n                        : \"\",\r\n                EndTime:\r\n                    tripSheetInfo.EndTime && tripSheetInfo.Trip_Date\r\n                        ? combineDateTime(tripSheetInfo.Trip_Date, tripSheetInfo.EndTime)\r\n                        : \"\",\r\n                Product_Array: selectedItems,\r\n                Delivery_Person_Id: deliveryPerson?.UserId,\r\n                EmployeesInvolved: staffInvolvedList.filter(\r\n                    (staff) =>\r\n                        checkIsNumber(staff.Involved_Emp_Id) &&\r\n                        checkIsNumber(staff.Cost_Center_Type_Id)\r\n                ),\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    resetForm();\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            })\r\n            .catch((e) => console.log(e))\r\n            .finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            });\r\n    };\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && \"Inclusive\"}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && \"Exclusive\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && \"IGST\"}\r\n                                {isEqualNumber(row.IS_IGST, 0) && \"GST\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>\r\n                                {row.Narration}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const handleCostCenterChange = (e, index) => {\r\n        setStaffInvolvedList((prev) => {\r\n            const updatedList = prev.map((item, ind) => {\r\n                if (isEqualNumber(ind, index)) {\r\n                    const updatedItem = { ...item, Cost_Center_Type_Id: e.target.value };\r\n                    if (Number(updatedItem.Cost_Center_Type_Id) === 9) {\r\n                        setDeliveryPerson({\r\n                            UserId: updatedItem.Involved_Emp_Id,\r\n                            Name: updatedItem.Emp_Name,\r\n                        });\r\n                    } else if (deliveryPerson?.UserId === updatedItem.Involved_Emp_Id) {\r\n                        setDeliveryPerson(null);\r\n                    }\r\n                    return updatedItem;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            return updatedList;\r\n        });\r\n    };\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        setSelectedItems((prevSelectedItems) => {\r\n            const isSelected = prevSelectedItems.some(\r\n                (selectedRow) => selectedRow.Do_Id == row.Do_Id\r\n            );\r\n\r\n            if (isSelected) {\r\n                return prevSelectedItems.filter(\r\n                    (selectedRow) => selectedRow.Do_Id != row.Do_Id\r\n                );\r\n            } else {\r\n                return [...prevSelectedItems, row];\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"d-flex flex-wrap align-items-center border-bottom p-2\">\r\n                    <h5 className=\"flex-grow-1 m-0 ps-2\">Trip Sheet Creation</h5>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={\r\n                            selectedItems.length === 0 ||\r\n                            !isValidDate(tripSheetInfo.Trip_Date)\r\n                        }\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <div className=\"row \">\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div\r\n                                className=\"border p-2\"\r\n                                style={{ minHeight: \"30vh\", height: \"100%\" }}\r\n                            >\r\n                                <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                                    <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        type=\"button\"\r\n                                        onClick={() =>\r\n                                            setStaffInvolvedList([\r\n                                                ...staffInvolvedList,\r\n                                                { ...tripStaffsColumns },\r\n                                            ])\r\n                                        }\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </div>\r\n                                <table className=\"table table-bordered\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"fa-13\">Sno</th>\r\n                                            <th className=\"fa-13\">Staff Name</th>\r\n                                            <th className=\"fa-13\">Category</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {/* <tbody>\r\n                                        {staffInvolvedList.map((row, index) => (\r\n                                            <tr key={index}>\r\n                                                <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                                                <td className='fa-13 w-100 p-0'>\r\n                                                    \r\n                                                    <Select\r\n                                                        value={{\r\n                                                            value: row?.Involved_Emp_Id,\r\n                                                            label: row?.Emp_Name\r\n                                                        }}\r\n                                                        onChange={e => {\r\n                                                            setStaffInvolvedList((prev) => {\r\n                                                                const updatedList = prev.map((item, ind) => {\r\n                                                                    \r\n                                                                    if (isEqualNumber(ind, index)) {\r\n                                                                        const staff = costCenter.find(c => isEqualNumber(c.Cost_Center_Id, e.value));\r\n                                                                        const updatedItem = {\r\n                                                                            ...item,\r\n                                                                            Cost_Center_Type_Id: item.Cost_Center_Type_Id || staff.User_Type || 0,\r\n                                                                            Involved_Emp_Id: e.value,\r\n                                                                            Emp_Name: staff.Cost_Center_Name ?? ''\r\n                                                                        };\r\n\r\n\r\n                                                                        if (Number(updatedItem.Cost_Center_Type_Id) === 9) {\r\n                                                                            setDeliveryPerson({\r\n                                                                                UserId: updatedItem.Involved_Emp_Id,\r\n                                                                                Name: updatedItem.Emp_Name,\r\n                                                                            });\r\n                                                                        } else if (deliveryPerson?.UserId === updatedItem.Involved_Emp_Id) {\r\n\r\n                                                                            setDeliveryPerson(null);\r\n                                                                        }\r\n\r\n                                                                        return updatedItem;\r\n                                                                    }\r\n                                                                    return item;\r\n                                                                });\r\n\r\n                                                                return updatedList;\r\n                                                            });\r\n                                                        }}\r\n                                                        \r\n                                                        options={costCenter.filter(fil => (\r\n                                                            staffInvolvedList.findIndex(st => isEqualNumber(st.Cost_Center_Type_Id, fil.Cost_Center_Id)) === -1\r\n                                                        )).map(st => ({\r\n                                                            value: st.Cost_Center_Id,\r\n                                                            label: st.Cost_Center_Name\r\n                                                        }))}\r\n                                                        styles={customSelectStyles}\r\n                                                        isSearchable\r\n                                                        placeholder=\"Select Staff\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '110px' }}>\r\n                                                    <select\r\n                                                        value={row?.Cost_Center_Type_Id}\r\n                                                        onChange={e => handleCostCenterChange(e, index)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    >\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {costCenterCategory.map((st, sti) => (\r\n                                                            <option value={st?.Cost_Category_Id} key={sti}>\r\n                                                                {st?.Cost_Category}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody> */}\r\n\r\n                                    <tbody>\r\n                                        {staffInvolvedList.map((row, index) => (\r\n                                            <tr key={index}>\r\n                                                <td className=\"fa-13 vctr text-center\">{index + 1}</td>\r\n                                                <td className=\"fa-13 w-100 p-0\">\r\n                                                    <Select\r\n                                                        value={{\r\n                                                            value: row?.Involved_Emp_Id,\r\n                                                            label: row?.Emp_Name,\r\n                                                        }}\r\n                                                        onChange={(e) => {\r\n                                                            setStaffInvolvedList((prev) => {\r\n                                                                const updatedList = prev.map((item, ind) => {\r\n                                                                    if (isEqualNumber(ind, index)) {\r\n                                                                        const staff = costCenter.find((c) =>\r\n                                                                            isEqualNumber(c.Cost_Center_Id, e.value)\r\n                                                                        );\r\n                                                                        const updatedItem = {\r\n                                                                            ...item,\r\n                                                                            Cost_Center_Type_Id:\r\n                                                                                item.Cost_Center_Type_Id ||\r\n                                                                                staff.User_Type ||\r\n                                                                                0,\r\n                                                                            Involved_Emp_Id: e.value,\r\n                                                                            Emp_Name: staff.Cost_Center_Name ?? \"\",\r\n                                                                        };\r\n\r\n                                                                        if (\r\n                                                                            Number(\r\n                                                                                updatedItem.Cost_Center_Type_Id\r\n                                                                            ) === 9\r\n                                                                        ) {\r\n                                                                            setDeliveryPerson({\r\n                                                                                UserId: updatedItem.Involved_Emp_Id,\r\n                                                                                Name: updatedItem.Emp_Name,\r\n                                                                            });\r\n                                                                        } else if (\r\n                                                                            deliveryPerson?.UserId ===\r\n                                                                            updatedItem.Involved_Emp_Id\r\n                                                                        ) {\r\n                                                                            setDeliveryPerson(null);\r\n                                                                        }\r\n\r\n                                                                        return updatedItem;\r\n                                                                    }\r\n                                                                    return item;\r\n                                                                });\r\n\r\n                                                                return updatedList;\r\n                                                            });\r\n                                                        }}\r\n                                                        options={costCenter\r\n                                                            .filter(\r\n                                                                (fil) =>\r\n                                                                    staffInvolvedList.findIndex((st) =>\r\n                                                                        isEqualNumber(\r\n                                                                            st.Cost_Center_Type_Id,\r\n                                                                            fil.Cost_Center_Id\r\n                                                                        )\r\n                                                                    ) === -1\r\n                                                            )\r\n                                                            .map((st) => ({\r\n                                                                value: st.Cost_Center_Id,\r\n                                                                label: st.Cost_Center_Name,\r\n                                                            }))}\r\n                                                        styles={customSelectStyles}\r\n                                                        isSearchable\r\n                                                        placeholder=\"Select Staff\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td\r\n                                                    className=\"fa-13 vctr p-0\"\r\n                                                    style={{ maxWidth: \"130px\", minWidth: \"110px\" }}\r\n                                                >\r\n                                                    <select\r\n                                                        value={row?.Cost_Center_Type_Id}\r\n                                                        onChange={(e) => handleCostCenterChange(e, index)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    >\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {costCenterCategory.map((st, sti) => (\r\n                                                            <option value={st?.Cost_Category_Id} key={sti}>\r\n                                                                {st?.Cost_Category}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td className=\"fa-13 vctr text-center\">\r\n                                                    <button\r\n                                                        className=\"btn btn-danger btn-sm\"\r\n                                                        onClick={() => {\r\n                                                            setStaffInvolvedList((prev) => {\r\n                                                                const updatedList = prev.filter(\r\n                                                                    (_, i) => i !== index\r\n                                                                );\r\n\r\n                                                                if (\r\n                                                                    deliveryPerson?.UserId === row.Involved_Emp_Id\r\n                                                                ) {\r\n                                                                    setDeliveryPerson(null);\r\n                                                                }\r\n\r\n                                                                return updatedList;\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <Close />\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Stock Journal Details */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div\r\n                                className=\"border p-2\"\r\n                                style={{ minHeight: \"30vh\", height: \"100%\" }}\r\n                            >\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>\r\n                                            Branch <span style={{ color: \"red\" }}>*</span>\r\n                                        </label>\r\n                                        <select\r\n                                            value={tripSheetInfo.Branch_Id}\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    Branch_Id: e.target.value,\r\n                                                })\r\n                                            }\r\n                                            placeholder={\"Select Branch\"}\r\n                                            className=\"cus-inpt mb-2 p-2\"\r\n                                        >\r\n                                            <option value=\"\" disabled>\r\n                                                Select Branch\r\n                                            </option>\r\n                                            {branch.map((br, bi) => (\r\n                                                <option key={bi} value={br.BranchId}>\r\n                                                    {br.BranchName}\r\n                                                </option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip_Date</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_Date}\r\n                                            type=\"date\"\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    Trip_Date: e.target.value,\r\n                                                })\r\n                                            }\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    {/* <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Delivery Date <span style={{ color: \"red\" }}>*</span></label>\r\n                                        <input\r\n                                            value={tripSheetInfo?.DO_Date || \"\"}\r\n                                            type=\"date\"\r\n                                            onChange={e => setTripSheetInfo({ ...tripSheetInfo, Do_Date: e.target.value })}\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div> */}\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Vehicle No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Vehicle_No}\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    Vehicle_No: e.target.value,\r\n                                                })\r\n                                            }\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-6 col-sm-12 p-2\">\r\n                                        <label>\r\n                                            Delivery Person <span style={{ color: \"red\" }}>*</span>\r\n                                        </label>\r\n                                        <input\r\n                                            id=\"delivery-person\"\r\n                                            name=\"deliveryPerson\"\r\n                                            type=\"text\"\r\n                                            value={deliveryPerson ? deliveryPerson.Name : \"\"}\r\n                                            readOnly\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Delivery Person\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip No</label>\r\n                                        <input\r\n                                            value={tripSheetInfo.Trip_No}\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    Trip_No: e.target.value,\r\n                                                })\r\n                                            }\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Voucher Type</label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                            value={tripSheetInfo?.VoucherType ?? \"\"} // FIXED\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    VoucherType: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        >\r\n                                            <option value=\"\">Select Voucher Type</option>\r\n                                            <option value=\"0\">SALES</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Bill Type</label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 mb-2\"\r\n                                            value={tripSheetInfo?.BillType ?? \"\"}\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo({\r\n                                                    ...tripSheetInfo,\r\n                                                    BillType: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        >\r\n                                            <option value=\"\">Select Bill Type</option>\r\n                                            <option value=\"SALES\">SALES</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label>Trip Status</label>\r\n                                        <select\r\n                                            value={tripSheetInfo?.TripStatus || \"\"}\r\n                                            onChange={(e) =>\r\n                                                setTripSheetInfo((pre) => ({\r\n                                                    ...pre,\r\n                                                    TripStatus: e.target.value,\r\n                                                }))\r\n                                            }\r\n                                            className=\"cus-inpt p-2\"\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"New\">New</option>\r\n                                            <option value=\"OnProcess\">OnProcess</option>\r\n                                            <option value=\"Completed\">Completed</option>\r\n                                            <option value=\"Canceled\">Canceled</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">\r\n                                                    Time\r\n                                                </th>\r\n                                                <th colSpan={2} className=\"fa-13 text-center\">\r\n                                                    Distance\r\n                                                </th>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <th className=\"fa-13 text-center\">Start </th>\r\n                                                <th className=\"fa-13 text-center\">End</th>\r\n                                                <th className=\"fa-13 text-center\">Start (Km)</th>\r\n                                                <th className=\"fa-13 text-center\">End (Km)</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"time\"\r\n                                                        onChange={(e) =>\r\n                                                            setTripSheetInfo((pre) => ({\r\n                                                                ...pre,\r\n                                                                StartTime: e.target.value,\r\n                                                            }))\r\n                                                        }\r\n                                                        value={tripSheetInfo?.StartTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"time\"\r\n                                                        onChange={(e) =>\r\n                                                            setTripSheetInfo((pre) => ({\r\n                                                                ...pre,\r\n                                                                EndTime: e.target.value,\r\n                                                            }))\r\n                                                        }\r\n                                                        value={tripSheetInfo?.EndTime}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={(e) =>\r\n                                                            setTripSheetInfo((pre) => ({\r\n                                                                ...pre,\r\n                                                                Trip_ST_KM: e.target.value,\r\n                                                                Trip_Tot_Kms: Subraction(\r\n                                                                    pre.Trip_EN_KM ?? 0,\r\n                                                                    e.target.value ?? 0\r\n                                                                ),\r\n                                                            }))\r\n                                                        }\r\n                                                        value={tripSheetInfo?.Trip_ST_KM}\r\n                                                        min={0}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                                <td className=\"fa-13\">\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        onChange={(e) =>\r\n                                                            setTripSheetInfo((pre) => ({\r\n                                                                ...pre,\r\n                                                                Trip_EN_KM: e.target.value,\r\n                                                                Trip_Tot_Kms: Subraction(\r\n                                                                    e.target.value ?? 0,\r\n                                                                    pre.Trip_ST_KM ?? 0\r\n                                                                ),\r\n                                                            }))\r\n                                                        }\r\n                                                        value={tripSheetInfo?.Trip_EN_KM}\r\n                                                        min={Addition(tripSheetInfo?.Trip_ST_KM, 1)}\r\n                                                        className=\"cus-inpt p-2\"\r\n                                                        placeholder=\"Kilometers\"\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        <div className=\"d-flex justify-content-end gap-3\">\r\n                            <h6 className=\"m-0 text-muted\">Selected Sales Orders: {selectedItems.length}</h6> <span></span>\r\n                            <h6 className=\"m-0 text-muted\">\r\n                                Total Items: {selectedItems?.reduce((acc, item) => acc + (item.Products_List?.length || 0), 0)}\r\n                            </h6>\r\n                        </div>\r\n                    }\r\n                    <FilterableTable\r\n                        dataArray={selectedItems?.map((item) => item?.Products_List).flat()}\r\n                        expandableComp={ExpendableComponent}\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button\r\n                                    onClick={() =>\r\n                                        setFilters((prev) => ({ ...prev, addItemDialog: true }))\r\n                                    }\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                                <Button onClick={() => setSelectedItems([])} className=\"me-2\">\r\n                                    Clear\r\n                                </Button>\r\n                            </>\r\n                        }\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        // title={`Selected Items: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.length, 0) ?? 0} QTY: ${selectedItems?.reduce((acc, item) => acc + item.Products_List.reduce((sum, product) => sum + (product.Total_Qty ?? 0), 0), 0) ?? 0}`}\r\n                        maxHeightOption\r\n                        columns={[\r\n                            createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                            createCol(\"Product_Name\", \"string\", \"Product_Name\"),\r\n                            // createCol('Sales_Order_Id', 'string', 'So_Id'),\r\n                            // createCol('So_Date', 'date', 'So_Date'),\r\n                            createCol(\"Taxable_Rate\", \"number\", \"Rate\"),\r\n                            createCol(\"Bill_Qty\", \"number\", \"Bill_Qty\"),\r\n                            createCol(\"Taxable_Amount\", \"string\", \"Before_Tax_Amount\"),\r\n                            createCol(\"Amount\", \"number\", \"Total_Invoice_value\"),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: \"#\",\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <IconButton\r\n                                        variant=\"contained\"\r\n                                        color=\"error\"\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            const filteredItems = selectedItems\r\n                                                ?.map((item) => {\r\n                                                    return {\r\n                                                        ...item,\r\n                                                        Products_List: item.Products_List.filter(\r\n                                                            (o) =>\r\n                                                                o[row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\"] !==\r\n                                                                row[row.DO_St_Id ? \"DO_St_Id\" : \"SO_St_Id\"]\r\n                                                        ),\r\n                                                    };\r\n                                                })\r\n                                                .filter((item) => item.Products_List.length > 0);\r\n\r\n                                            setSelectedItems(filteredItems);\r\n                                        }}\r\n                                    >\r\n                                        <Delete className=\"fa-20\" />\r\n                                    </IconButton>\r\n                                ),\r\n                            },\r\n                        ]}\r\n                    />\r\n                </CardContent>\r\n                <div className=\"border-top p-2 text-end\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={saveTripSheet}\r\n                        disabled={\r\n                            selectedItems.length === 0 ||\r\n                            !isValidDate(tripSheetInfo.Trip_Date)\r\n                        }\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={filters.addItemDialog}\r\n                onClose={() => setFilters((pre) => ({ ...pre, addItemDialog: false }))}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n                fullScreen\r\n            >\r\n                <form onSubmit={searchTransaction}>\r\n                    <DialogTitle className=\"d-flex align-items-center\">\r\n                        <span className=\"flex-grow-1\">Add Data</span>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            type=\"submit\"\r\n                            className=\"me-2\"\r\n                            startIcon={<Search />}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() =>\r\n                                setFilters((pre) => ({ ...pre, addItemDialog: false }))\r\n                            }\r\n                        >\r\n                            <Close />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-bordered\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"fa-13 text-center\">\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                From Date\r\n                                            </td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Fromdate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                required\r\n                                                max={filters.Todate}\r\n                                                onChange={(e) =>\r\n                                                    setFilters((pre) => ({\r\n                                                        ...pre,\r\n                                                        Fromdate: e.target.value,\r\n                                                    }))\r\n                                                }\r\n                                                style={{ width: \"100%\" }}\r\n                                            />\r\n                                        </td>\r\n\r\n                                        <td className=\"fa-13 text-center\">\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                To Date\r\n                                            </td>\r\n                                            <input\r\n                                                type=\"date\"\r\n                                                value={filters.Todate}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                min={filters.Fromdate}\r\n                                                required\r\n                                                onChange={(e) =>\r\n                                                    setFilters((pre) => ({\r\n                                                        ...pre,\r\n                                                        Todate: e.target.value,\r\n                                                    }))\r\n                                                }\r\n                                                style={{ width: \"100%\" }}\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            <td className=\"text-center fa-13 fw-bold\" colSpan={6}>\r\n                                                Sales_Person\r\n                                            </td>\r\n                                            <select\r\n                                                value={filters?.Sales_Person_Id || \"\"}\r\n                                                className=\"cus-inpt p-2\"\r\n                                                onChange={(e) => {\r\n                                                    const selected = salesPerson.find(\r\n                                                        (sp) => sp.UserId == Number(e.target.value)\r\n                                                    );\r\n                                                    setFilters({\r\n                                                        ...filters,\r\n                                                        Sales_Person_Id: selected?.UserId || \"\",\r\n                                                        SalsePersonGet: selected?.Name || \"\",\r\n                                                    });\r\n                                                }}\r\n                                                style={{ width: \"100%\" }}\r\n                                            >\r\n                                                <option value=\"\">ALL</option>\r\n                                                {salesPerson.map((obj) => (\r\n                                                    <option key={obj.UserId} value={obj.UserId}>\r\n                                                        {obj.Name}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        {/* <div className=\"w-100 p-2 d-flex justify-content-center\"> */}\r\n\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                            {transactionData.length > 0 && (\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    onClick={() => {\r\n                                        if (selectedItems.length === transactionData.length) {\r\n                                            setSelectedItems([]);\r\n                                        } else {\r\n                                            setSelectedItems(transactionData);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {selectedItems.length === transactionData.length\r\n                                        ? \"Unselect All\"\r\n                                        : \"Select All\"}\r\n                                </Button>\r\n                            )}\r\n\r\n\r\n\r\n                            {selectedItems.length >= 0 && (\r\n                                <div className=\"d-flex justify-content-end gap-3\">\r\n                                    <h6 className=\"m-0 text-muted\">Selected Sales Orders: {selectedItems.length}</h6>\r\n                                    <h6 className=\"m-0 text-muted\">\r\n                                        Total Items: {selectedItems?.reduce((acc, item) => acc + (item.Products_List?.length || 0), 0)}\r\n                                    </h6>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <FilterableTable\r\n                            dataArray={transactionData}\r\n                            disablePagination\r\n                            maxHeightOption\r\n                            columns={[\r\n\r\n                                {\r\n                                    Field_Name: \"checkbox\",\r\n                                    ColumnHeader: \"\",\r\n                                    isVisible: 1,\r\n                                    pointer: true,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        // const isSelected = selectedItems.some((selectedRow) => selectedRow.So_Id === row.So_Id);\r\n\r\n                                        return (\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedItems.some(\r\n                                                    (selectedRow) => selectedRow.Do_Id === row.Do_Id\r\n                                                )}\r\n                                                onChange={() => handleCheckboxChange(row)}\r\n                                                onFocus={(e) => {\r\n                                                    e.target.blur();\r\n                                                }}\r\n                                                style={{\r\n                                                    cursor: \"pointer\",\r\n                                                    transform: \"scale(1.5)\",\r\n                                                    width: \"14px\",\r\n                                                    height: \"20px\",\r\n                                                }}\r\n                                            />\r\n                                        );\r\n                                    },\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                createCol(\"Branch_Name\", \"string\", \"Branch_Name\"),\r\n                                createCol(\"AreaName\", \"string\", \"AreaName\"),\r\n                                createCol(\"Do_Date\", \"date\", \"Do_Date\"),\r\n                                createCol(\"Total_Before_Tax\", \"string\", \"Total_Before_Tax\"),\r\n                                createCol(\"Total_Tax\", \"number\", \"Total_Tax\"),\r\n                                createCol(\"Total_Invoice_value\", \"number\", \"Total_Invoice_value\"),\r\n                            ]}\r\n                        />\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                                setFilters((pre) => ({ ...pre, addItemDialog: false }))\r\n                            }\r\n                        >\r\n                            close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TripSheetGodownSearch;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","tripMasterDetails","Trip_Id","Challan_No","Branch_Id","Trip_Date","ISOString","Vehicle_No","StartTime","EndTime","Trip_No","Trip_ST_KM","Trip_EN_KM","Trip_Tot_Kms","Created_By","Updated_By","DO_Date","Delivery_Person_Id","BillType","VoucherType","tripStaffsColumns","Id","Involved_Emp_Id","Cost_Center_Type_Id","Emp_Name","_tripSheetInfo$Vouche","_tripSheetInfo$BillTy","loadingOn","loadingOff","stateDetails","useLocation","deliveryPerson","setDeliveryPerson","storage","JSON","parse","localStorage","getItem","salesPerson","setSalePerson","filters","setFilters","Retailer_Id","RetailerGet","Created_by","CreatedByGet","Sales_Person_Id","SalsePersonGet","Cancel_status","Route_Id","RoutesGet","Area_Id","AreaGet","Fromdate","Todate","search","addItemDialog","transactionData","setTransactionData","costCenter","setCostCenter","costCenterCategory","setCostCenterCategory","branch","setBranch","tripSheetInfo","setTripSheetInfo","staffInvolvedList","setStaffInvolvedList","selectedItems","setSelectedItems","useEffect","async","branchResponse","staffResponse","staffCategory","Promise","all","fetchLink","branchData","success","BranchName","localeCompare","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","fetchData","Company_id","then","catch","extractHHMM","timeString","date","Date","hours","getHours","minutes","getMinutes","productsArray","Product_Array","employeesArray","Employees_Involved","isValidObject","isArray","prev","fromEntries","_stateDetails$key","_stateDetails$key2","_staffData$key","deliveryStaff","staff","UserId","Name","saveTripSheet","method","checkIsNumber","bodyData","combineDateTime","EmployeesInvolved","toast","message","finally","Button","isValidDate","CardContent","minHeight","height","Select","label","onChange","item","ind","_staff$Cost_Center_Na","c","Cost_Center_Id","updatedItem","User_Type","options","fil","findIndex","st","styles","isSearchable","placeholder","maxWidth","minWidth","handleCostCenterChange","sti","Cost_Category_Id","updatedList","_","Close","br","bi","BranchId","readOnly","TripStatus","_pre$Trip_EN_KM","_e$target$value","Subraction","min","_e$target$value2","_pre$Trip_ST_KM","Addition","reduce","acc","_item$Products_List","Products_List","flat","Branch_Name","Sales_Person_Name","Round_off","GST_Inclusive","IS_IGST","Narration","_ref5","filteredItems","DO_St_Id","Delete","Dialog","fullWidth","fullScreen","onSubmit","preventDefault","DialogTitle","startIcon","Search","DialogContent","required","max","selected","sp","obj","_item$Products_List2","pointer","_ref6","checked","some","selectedRow","Do_Id","prevSelectedItems","handleCheckboxChange","onFocus","blur","cursor","transform","DialogActions","createSvgIcon","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","root","paddingBottom","React","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}
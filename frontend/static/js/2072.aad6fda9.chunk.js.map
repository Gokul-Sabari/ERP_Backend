{"version":3,"file":"static/js/2072.aad6fda9.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Reports/storageClosingStock/itemGroupBasedStockValue.jsx","Pages/Reports/storageClosingStock/variable.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Addition, checkIsNumber, filterableText,\r\n    groupData, isEqualNumber, ISOString, stringCompare, toArray, toNumber,\r\n} from \"../../../Components/functions\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport {\r\n    Autocomplete, Button, Card, Checkbox, Dialog,\r\n    DialogActions, DialogContent, DialogTitle, IconButton, \r\n    Paper, Switch, TextField, Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, Settings,\r\n} from \"@mui/icons-material\";\r\nimport { useMemo } from \"react\";\r\nimport { itemGroupWiseStockValue } from \"./variable\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst ItemGroupWiseStockValue = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    defaultGrouping = \"\",\r\n    groupingOption = true,\r\n}) => {\r\n\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState(defaultGrouping);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const [fetchFilters, setFetchFilters] = useState({\r\n        reqDate: ISOString(),\r\n    })\r\n\r\n    const propsColumns = itemGroupWiseStockValue.map((col, colInd) => ({\r\n        isVisible: colInd < 11 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1,\r\n        isEnabled: true,\r\n    }));\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `reports/itemGroup/stockInfo?\r\n            reqDate=${fetchFilters.reqDate}`,\r\n            loadingOn, loadingOff\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setReportData(toArray(data.data));\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [fetchFilters.reqDate, loadingOn, loadingOff]);\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...columns].sort((a, b) =>\r\n            a?.OrderBy && b?.OrderBy\r\n                ? a?.OrderBy - b?.OrderBy\r\n                : b?.OrderBy - a?.OrderBy\r\n        );\r\n    }, [columns]);\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedColumns.filter(\r\n            (col) =>\r\n                (isEqualNumber(col?.Defult_Display, 1) ||\r\n                    isEqualNumber(col?.isVisible, 1)) &&\r\n                col.isEnabled === true\r\n        );\r\n    }, [sortedColumns]);\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0;\r\n        const grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : reportData;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(\r\n            (fil) => filterableText(fil.Fied_Data) === \"number\"\r\n        ).map((col) => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map((grp) => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map((key) => [\r\n                        key,\r\n                        grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ),\r\n                    ])\r\n                ),\r\n            };\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered;\r\n    }, [filters, reportData, filteredData, groupBy, DisplayColumn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters((prevFilters) => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of sortedColumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === \"range\") {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter((item) => {\r\n                        const value = item[column.Field_Name];\r\n                        return (\r\n                            (min === undefined || value >= min) &&\r\n                            (max === undefined || value <= max)\r\n                        );\r\n                    });\r\n                } else if (filters[column.Field_Name].type === \"date\") {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter((item) => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (\r\n                            (start === undefined || dateValue >= new Date(start)) &&\r\n                            (end === undefined || dateValue <= new Date(end))\r\n                        );\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered =\r\n                        filters[column.Field_Name]?.length > 0\r\n                            ? filtered.filter((item) =>\r\n                                filters[column.Field_Name].includes(\r\n                                    item[column.Field_Name]?.toLowerCase().trim()\r\n                                )\r\n                            )\r\n                            : filtered;\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === \"number\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                min: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                max: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"date\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    start: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    end: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"string\") {\r\n            const distinctValues = [\r\n                ...new Set(\r\n                    reportData.map((item) => item[Field_Name]?.toLowerCase()?.trim())\r\n                ),\r\n            ];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={(option) => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) =>\r\n                        handleFilterChange(Field_Name, newValue)\r\n                    }\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    };\r\n\r\n    const resetColumns = () => {\r\n        setColumns(propsColumns);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Wise\"\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title=\"Column Visibility\">\r\n                            <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Clear Filters\">\r\n                            <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        {groupingOption && (\r\n                            <div className=\"d-flex align-items-center flex-wrap\">\r\n                                <span>Group-By: </span>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={(e) => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">select group</option>\r\n                                    {DisplayColumn.filter(\r\n                                        (fil) =>\r\n                                            filterableText(fil.Fied_Data) === \"string\" &&\r\n                                            fil?.Field_Name !== \"Ledger_Name\" &&\r\n                                            fil.isEnabled\r\n                                    ).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>\r\n                                            {col?.Field_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(\r\n                            (fil) =>\r\n                                showData.length > 0 &&\r\n                                Object.keys(showData[0]).includes(fil.Field_Name) &&\r\n                                fil.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name,\r\n                        }))\r\n                        : DisplayColumn.filter((col) => col.isEnabled).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name,\r\n                        }))\r\n                }\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(\r\n                            (clm) => !stringCompare(clm.Field_Name, groupBy) && clm.isEnabled\r\n                        )}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog open={filterDialog} onClose={closeDialog} maxWidth=\"sm\" fullWidth>\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title=\"Column Visibility\">\r\n                                <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Clear Filters\">\r\n                                <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n\r\n                    <div className=\"border rounded-3\">\r\n                        {DisplayColumn.filter((col) => col.isEnabled).map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className=\"mt-2 mb-1\">\r\n                                    {column?.Field_Name}\r\n                                </label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? \"bg-light\" : \"\"\r\n                                        } ${!o.isEnabled ? \"opacity-50\" : \"\"}`}\r\n                                >\r\n                                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isVisible) && o.isEnabled}\r\n                                            onChange={(e) =>\r\n                                                o.isEnabled &&\r\n                                                setColumns((prevColumns) =>\r\n                                                    prevColumns.map((oo) =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        // disabled={!o.isEnabled}\r\n                                        />\r\n                                        <h6 className=\"fa-13 mb-0 fw-bold\">\r\n                                            {o.Field_Name}\r\n                                            {!o.isEnabled && (\r\n                                                <span className=\"text-muted small\"></span>\r\n                                            )}\r\n                                        </h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : \"\"}\r\n                                        onChange={(e) =>\r\n                                            o.isEnabled &&\r\n                                            setColumns((prevColumns) =>\r\n                                                prevColumns.map((oo) =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        disabled={!o.isEnabled}\r\n                                        className=\"mt-2 p-1 border-0 cus-inpt\"\r\n                                        style={{ width: \"80px\" }}\r\n                                        placeholder=\"Order\"\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetColumns} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialog(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ItemGroupWiseStockValue;","export const storageStockColumnsForItemWise = [\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n];\r\n\r\nexport const storageStockColumnsForGodownWise = [\r\n    // { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Godown_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n]\r\n\r\nexport const itemGroupWiseStockValue = [\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'Brand', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    \r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'OUT_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Expense_value', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Expense', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'CR_CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_CL_Value', Data_Type: 'number' },\r\n]"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","CheckBoxOutlineBlank","checkedIcon","CheckBox","loadingOn","loadingOff","defaultGrouping","groupingOption","reportData","setReportData","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","fetchFilters","setFetchFilters","reqDate","ISOString","propsColumns","itemGroupWiseStockValue","col","colInd","Column_Name","Data_Type","OrderBy","isEnabled","setColumns","useEffect","fetchLink","address","then","success","toArray","catch","sortedColumns","useMemo","DisplayColumn","showData","keys","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","fromEntries","_grp$groupedData","groupedData","reduce","acc","colmn","Addition","toNumber","applyFilters","handleFilterChange","prevFilters","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","_item$column$Field_Na","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","closeDialog","Settings","FilterAltOff","FilterAlt","clm","stringCompare","Dialog","maxWidth","fullWidth","DialogContent","DialogActions","Button","DialogTitle","Switch","prevColumns","oo","checkIsNumber","width","resetColumns","variant","storageStockColumnsForItemWise","storageStockColumnsForGodownWise"],"sourceRoot":""}
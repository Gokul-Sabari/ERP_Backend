{"version":3,"file":"static/js/7380.b699dcf2.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Pages/ProjectList/addEditProject.jsx","Pages/ProjectReports/listing.jsx","Pages/ProjectReports/reports.jsx","Pages/employeeManagement/employeeManagement.jsx","../node_modules/@mui/icons-material/esm/Launch.js","../node_modules/@mui/icons-material/esm/People.js","../node_modules/@mui/lab/TabContext/TabContext.js","../node_modules/@mui/lab/TabList/TabList.js","../node_modules/@mui/lab/TabPanel/tabPanelClasses.js","../node_modules/@mui/lab/TabPanel/TabPanel.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n            \r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n    \r\n            if (isEdit && inputValue) {\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head: inputValue?.Project_Head_Id, \r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                    Project_Status: inputValue?.Project_Status || '', \r\n                    Project_Desc: inputValue?.Project_Desc || '-'\r\n                });\r\n            } else if (!isEdit) {\r\n           \r\n                setFormData({\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '', \r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n    \r\n    \r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Tab,\r\n  Chip,\r\n  Typography,\r\n  Box\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { ISOString } from \"../../Components/functions\";\r\n\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n\r\n  const [taskData, setTaskData] = useState([]);\r\n  const userData = JSON.parse(localStorage.getItem('user'));\r\n  const companyId = userData?.Company_id;\r\n\r\n\r\n  const [filters, setFilters] = useState({\r\n    startDate: ISOString() || new Date().toISOString().split('T')[0]\r\n  });\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedTaskEmployees, setSelectedTaskEmployees] = useState([]);\r\n  const [selectedTaskName, setSelectedTaskName] = useState('');\r\n\r\n  const [selectedTab, setSelectedTab] = useState('1');\r\n  const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n  const [parsedTaskDetails, setParsedTaskDetails] = useState([]);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n\r\n  const handleOpenDialog = (employees, taskName) => {\r\n    setSelectedTaskEmployees(employees);\r\n    setSelectedTaskName(taskName);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setSelectedTaskEmployees([]);\r\n    setSelectedTaskName('');\r\n  };\r\n\r\n  const Schtype = async () => {\r\n    fetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n      if (data.success) {\r\n        setScheduleTypes(data.data);\r\n      } else {\r\n        toast.error(data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (taskData.length > 0 && taskData[0].TaskDetails) {\r\n      try {\r\n        const taskDetails = JSON.parse(taskData[0].TaskDetails);\r\n        setParsedTaskDetails(taskDetails);\r\n      } catch (error) {\r\n        console.error(\"Error parsing TaskDetails:\", error);\r\n      }\r\n    }\r\n  }, [taskData]);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    Schtype();\r\n  }, [projectid]);\r\n\r\n  useEffect(() => {\r\n    const fetchTaskDetails = async () => {\r\n      if (!filters.startDate || filters.startDate === '') {\r\n        setFilters({ ...filters, startDate: new Date().toISOString().split('T')[0] });\r\n      }\r\n\r\n      try {\r\n        const response = await fetchLink({\r\n          address: `taskManagement/project/schedule/projectDetailsforReport?Project_Id=${projectid}&StartDate=${filters.startDate}`,\r\n        });\r\n\r\n        if (response.success) {\r\n          setTaskData(response.data);\r\n        } else {\r\n          toast.error('Failed to fetch task details');\r\n        }\r\n      } catch (error) {\r\n        toast.error('Error while fetching task details');\r\n        console.error('Error while fetching task details:', error);\r\n      }\r\n    };\r\n\r\n    if (projectid) {\r\n      fetchTaskDetails();\r\n    }\r\n  }, [filters.startDate, projectid]);\r\n\r\n  const setCloseTask = async () => {\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n  \r\n      <Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n        <DialogTitle>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{selectedProject?.Project_Name}</span>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}></div>\r\n          </div>\r\n        </DialogTitle>\r\n        <Box sx={{ width: '100%', typography: 'body1' }}>\r\n          {taskData.map((schedule, index) => {\r\n            const scheduleTypes = JSON.parse(schedule.SchTypes);\r\n\r\n            return (\r\n              <TabContext value={selectedTab} key={index}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                  <TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n                    {Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n                      scheduleTypes.map((sch, index) => (\r\n                        <Tab\r\n                          key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                          label={sch.SchType || 'No SchType'}\r\n                          value={(sch.SchTypeId || index).toString()}\r\n                          id={`tab-${sch.SchTypeId || index}`}\r\n                          aria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n                        />\r\n                      ))\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n                        No Details Available for {scheduleTypes}\r\n                      </Typography>\r\n                    )}\r\n\r\n                    <Tab label=\"Today\" value=\"today\" id=\"tab-today\" aria-controls=\"tabpanel-today\" />\r\n                  </TabList>\r\n                </Box>\r\n\r\n                {Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n                  <TabPanel\r\n                    key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                    value={(sch.SchTypeId || index).toString()}\r\n                    id={`tabpanel-${sch.SchTypeId || index}`}\r\n                    aria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n                  >\r\n                    <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n                      {Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n                        sch.TaskCountsInSchType.map((count, index) => (\r\n                          <Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Box>\r\n                              Schedule Type: <strong>{sch.SchType}</strong>\r\n                            </Box>\r\n                            <Box textAlign=\"right\">\r\n                              Total Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n                            </Box>\r\n                          </Typography>\r\n                        ))\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          No tasks counted for this schedule type.\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n\r\n                    {Array.isArray(sch.Tasks) && sch.Tasks.length > 0 ? (\r\n                      <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\r\n                        {sch.Tasks.map((taskItem) => (\r\n                          <div\r\n                            key={taskItem.Task_Id}\r\n                            style={{\r\n                              backgroundColor: '#f0f4ff',\r\n                              boxShadow: 'black',\r\n                              padding: '16px',\r\n                              borderRadius: '8px',\r\n                              display: 'flex',\r\n                              margin: '8px 0',\r\n                              width: '100%',\r\n                              justifyContent: 'space-between', // Add this to space out content\r\n                            }}\r\n                          >\r\n                            <Typography fontWeight=\"bold\" style={{ marginBottom: '8px' }}>\r\n                              {taskItem.Task_Name || 'DEFAULT TASK'}\r\n                            </Typography>\r\n\r\n                            {Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n                              <Button\r\n                                onClick={() => handleOpenDialog(taskItem.AssignedEmployees, taskItem.Task_Name)}\r\n                                sx={{ marginLeft: 'auto' }} // This moves the button to the right\r\n                              >\r\n                                <span style={{ textAlign: 'left' }}>View Employees</span>\r\n                              </Button>\r\n                            ) : (\r\n                              <span style={{ marginLeft: '60px', textAlign: 'left' }}>\r\n                                No employees assigned\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                      </Box>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        No tasks available for this task type.\r\n                      </Typography>\r\n                    )}\r\n\r\n                  </TabPanel>\r\n                ))}\r\n\r\n           \r\n                <TabPanel value=\"today\" id=\"tabpanel-today\" aria-labelledby=\"tab-today\">\r\n                  <Box sx={{ padding: 2 }}>\r\n                    {Array.isArray(parsedTaskDetails) && parsedTaskDetails.length > 0 ? (\r\n                      <div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                          <Typography variant=\"h6\" gutterBottom style={{ margin: 0 }}>\r\n                            Task Details for\r\n                          </Typography>\r\n\r\n                          {/* Date Picker */}\r\n                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <span style={{ verticalAlign: 'middle' }}>From:</span>\r\n                            <input\r\n                              type=\"date\"\r\n                              value={filters.startDate}\r\n                              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}\r\n                              className=\"cus-inpt\"\r\n                              style={{ padding: '5px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        No tasks available for today.\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n\r\n                  {Array.isArray(parsedTaskDetails) && parsedTaskDetails.length > 0 ? (\r\n                    parsedTaskDetails.map((taskDetail) => (\r\n                      <div\r\n                        key={taskDetail.Task_Id}\r\n                        style={{\r\n                          backgroundColor: '#fff',\r\n                          padding: '16px',\r\n                          borderRadius: '12px',\r\n                          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n                          marginBottom: '16px',\r\n                          display: 'flex',\r\n                          flexDirection: 'row',\r\n                          justifyContent: 'space-between',\r\n                          alignItems: 'center',\r\n                        }}\r\n                      >\r\n                        <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ color: '#2c3e50', marginRight: '16px' }}>\r\n                          {taskDetail.Task_Name || 'DEFAULT TASK'}\r\n                        </Typography>\r\n\r\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                          {Array.isArray(taskDetail.AssignedEmployees) && taskDetail.AssignedEmployees.length > 0 ? (\r\n                            <Button\r\n                              onClick={() => handleOpenDialog(taskDetail.AssignedEmployees, taskDetail.Task_Name)}\r\n                              sx={{ marginLeft: '8px' }}\r\n                            >\r\n                              View Employees\r\n                            </Button>\r\n                          ) : (\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ marginLeft: '8px' }}>\r\n                              No Employees Assigned\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: '16px' }}>\r\n                      No tasks available for today.\r\n                    </Typography>\r\n                  )}\r\n                </TabPanel>\r\n              </TabContext>\r\n            );\r\n          })}\r\n        </Box>\r\n\r\n        <DialogActions sx={{ marginTop: 'auto', position: 'sticky', bottom: 0 }}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Employee Details for {selectedTaskName}</DialogTitle>\r\n        <DialogContent>\r\n          {selectedTaskEmployees.length > 0 ? (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n              {selectedTaskEmployees.map((employee, index) => (\r\n                <Chip key={index} label={employee.Name} variant=\"outlined\" size=\"small\" sx={{ margin: '4px', color: 'green' }} />\r\n              ))}\r\n            </Box>\r\n          ) : (\r\n            <Typography variant=\"body1\">No employees assigned to this task.</Typography>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ListingTask;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"./listing\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => setReload(prev => !prev);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n     const columns = [\r\n         { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '250px' },\r\n         { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n         { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n         { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n         { name: 'Progress', selector: row => `${calcPercentage(row.TodayTaskcounts, row.CompletedTasks)}%`, sortable: true },\r\n         {\r\n             name: 'Task Details', cell: row => (\r\n                 <>\r\n                     <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                         <Launch />\r\n                     </IconButton>\r\n                     {row.CompletedTasks} / {row.TodayTaskcounts}\r\n                 </>\r\n             )\r\n         },\r\n       \r\n         { name: 'Task Count',  selector: row => row?.TodayTaskcounts, sortable: true, sortable: true },\r\n       \r\n         { name: 'Assigned', selector: row => row.TasksAssignedToEmployee },\r\n         {\r\n             name: 'Employees', cell: row => (\r\n                 <>\r\n                     {Number(contextObj?.Add_Rights) === 1 && (\r\n                         <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                             <People />\r\n                         </IconButton>\r\n                     )}\r\n                     {row.EmployeesInvolved}\r\n                 </>\r\n             )\r\n         }\r\n     ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 mb-3 \">\r\n                <span style={{ marginLeft: '10px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                      \r\n                    </div>\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'Launch');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5\"\n}), 'People');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\n\n/**\n * @returns {unknown}\n */\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-T-${value}`;\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n      children: childrenProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getTabPanelUtilityClass(slot) {\n  return generateUtilityClass('MuiTabPanel', slot);\n}\nconst tabPanelClasses = generateUtilityClasses('MuiTabPanel', ['root']);\nexport default tabPanelClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\nconst TabPanelRoot = styled('div', {\n  name: 'MuiTabPanel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n  const {\n      children,\n      className,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props);\n  const classes = useUtilityClasses(ownerState);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    ownerState: ownerState\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"\n}), 'KeyboardArrowLeft');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"\n}), 'KeyboardArrowRight');"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","_ref","open","onClose","inputValue","isEdit","setReload","localData","localStorage","getItem","parseData","JSON","parse","projectHead","setProjectHead","useState","proStatus","setProStatus","formData","setFormData","Project_Id","Project_Name","Project_Desc","Project_Head","Est_Start_Dt","ISOString","Est_End_Dt","Project_Status","Entry_By","UserId","Company_id","useEffect","fetchLink","address","then","data","success","catch","e","console","error","Project_Head_Id","handleChange","target","name","value","validateFields","requiredFields","field","toast","replace","inputFields","label","elem","type","required","options","map","obj","Name","Status_Id","Status","_Fragment","_jsxs","Dialog","DialogTitle","className","DialogContent","onSubmit","preventDefault","method","bodyData","prev","message","createFun","payload","index","onChange","option","idx","DialogActions","onClick","dialogOpen","setDialogOpen","projectid","reload","onReload","selectedProject","taskData","setTaskData","userData","filters","setFilters","startDate","Date","toISOString","split","openDialog","setOpenDialog","selectedTaskEmployees","setSelectedTaskEmployees","selectedTaskName","setSelectedTaskName","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","parsedTaskDetails","setParsedTaskDetails","handleTabChange","event","newValue","handleOpenDialog","employees","taskName","handleCloseDialog","length","TaskDetails","taskDetails","async","Schtype","response","fetchTaskDetails","fullWidth","maxWidth","PaperProps","height","display","justifyContent","alignItems","Box","sx","width","typography","schedule","SchTypes","TabContext","borderBottom","borderColor","TabList","Array","isArray","sch","Tab","SchType","SchTypeId","toString","id","Typography","variant","padding","TabPanel","marginBottom","backgroundColor","borderRadius","TaskCountsInSchType","count","textAlign","TotalTasks","CompletedTasks","Tasks","flexDirection","taskItem","boxShadow","margin","Task_Name","AssignedEmployees","Button","marginLeft","Task_Id","gutterBottom","gap","verticalAlign","border","taskDetail","marginRight","flexWrap","marginTop","position","bottom","employee","Chip","size","ActiveProjects","projects","setProjects","projectAlldata","setProjectAlldata","contextObj","useContext","MyContext","setSelectedProject","setIsEdit","projectId","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","columns","selector","row","sortable","_projectAlldata$find","find","p","Project_Head_Name","_projectAlldata$find2","toLocaleDateString","task","TodayTaskcounts","completed","Number","toFixed","calcPercentage","cell","IconButton","handleOpenListingTaskDialog","Launch","TasksAssignedToEmployee","Add_Rights","handleOpenEmployeeDialog","People","EmployeesInvolved","filteredProjects","filter","project","_projectAlldata$find3","_projectAlldata$find4","status","toLowerCase","includes","handleCloseDialogs","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","headCells","top","zIndex","cells","rows","overflowY","maxHeight","background","cursor","ListingTask","ProjectForm","projectData","EmployeeManagementDialog","initialValue","Designation_Name","BranchName","setEmployees","loading","setLoading","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","onClosed","marginInlineStart","handleAddEmployeeOpen","mr","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","user","EmployeeId","colSpan","Autocomplete","multiple","getOptionLabel","isOptionEqualToValue","uniqueValues","val","self","findIndex","t","PopperComponent","props","Popper","placement","onclose","renderInput","params","TextField","placeholder","handleAddEmployeeClose","UserIds","emp","createSvgIcon","d","Context","React","idPrefix","setId","Math","round","random","useUniquePrefix","context","Provider","useTabContext","getPanelId","getTabId","_excluded","ref","childrenProp","other","_objectWithoutPropertiesLoose","TypeError","child","Tabs","_extends","getTabPanelUtilityClass","slot","generateUtilityClass","generateUtilityClasses","TabPanelRoot","styled","overridesResolver","styles","root","theme","spacing","inProps","useThemeProps","ownerState","classes","composeClasses","useUtilityClasses","tabId","clsx","hidden","role","defaultTheme","createTheme","createBox","themeId","THEME_ID","defaultClassName","boxClasses","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}
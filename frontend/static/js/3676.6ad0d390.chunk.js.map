{"version":3,"file":"static/js/3676.6ad0d390.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/DataSetDisplay.jsx","Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/SalesReportComponent/LedgerBasedTable.jsx","Pages/Sales/salesReports.jsx"],"sourcesContent":["import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ \r\n    dataArray = [], \r\n    columns = [], \r\n    ExpandableComp, \r\n    enableFilters = false,\r\n    ExportAllData = false,\r\n\r\n}) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                            ExcelPrintOption\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;","import { Fragment, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\n\r\nconst ProductBasedSalesReport = ({ dataArray }) => {\r\n    const productColumns = ['Stock_Group', 'Item_Name_Modified', 'Y1', 'M6', 'M2', 'LM', 'Total_Qty'];\r\n    const [daysCol, setDaysCol] = useState([])\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => {\r\n            const transaction = Array.isArray(o?.StockTransaction) ? o?.StockTransaction : [];\r\n            const stkObj = transaction[0] || {}; \r\n            const DaySum = Object.fromEntries(\r\n                Object.entries(stkObj).filter(([key]) => \r\n                    !productColumns.includes(key) && !isNaN(Number(key)) \r\n                ).map(([key]) => {\r\n                    setDaysCol(pre => pre.includes(key) ? pre : [...pre, key])\r\n                    const total = transaction.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);\r\n                    return [key, total];\r\n                })\r\n            );\r\n\r\n            return {\r\n                ...o,\r\n                ...DaySum\r\n            };\r\n        });\r\n    }, [dataArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    createCol('Stock_Group', 'string'),\r\n                    createCol('Y1', 'number'),\r\n                    createCol('M6', 'number'),\r\n                    createCol('M2', 'number'),\r\n                    createCol('LM', 'number'),\r\n                    createCol('Total_Qty', 'number'),\r\n                    ...daysCol.map(day => createCol(day, 'number', `Day ${day}`))\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    const transaction = Array.isArray(row?.StockTransaction) ? row?.StockTransaction : [];\r\n                    const preDefinedCol = [\r\n                        createCol('Item_Name_Modified', 'string', 'Item'),\r\n                        createCol('Y1', 'number'),\r\n                        createCol('M6', 'number'),\r\n                        createCol('M2', 'number'),\r\n                        createCol('LM', 'number'),\r\n                        createCol('Total_Qty', 'number')\r\n                    ];\r\n                    \r\n                    const columns = Object.keys(transaction[0] || {}).filter(\r\n                        key => !productColumns.includes(key) && key !== 'Stock_Group'\r\n                    ).map(key => createCol(key, 'number'));\r\n\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={transaction}\r\n                            columns={[...preDefinedCol, ...columns]}\r\n                        />\r\n                    );\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProductBasedSalesReport;\r\n","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\r\n\r\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => ({\r\n            ...o,\r\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                Grade_Item_Group: st.Item_Name_Modified,\r\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            }))\r\n        })).map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Grade_Item_Group',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductDayBasedSalesReport;","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { isEqualNumber, checkIsNumber, filterableText, groupData, Addition, toNumber, Division } from '../../../Components/functions'\r\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBoxOutlineBlank, CheckBox, FilterAltOff, Settings, FilterAlt } from '@mui/icons-material'\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport DisplayArrayData from \"./DataSetDisplay\";\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\r\n\r\n    return (\r\n        loading\r\n            ? <h5 className=\"text-center text-primary \">Loading...</h5>\r\n            : <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\nconst LedgerBasedSalesReport = ({ dataArray, colTypes, DB, Fromdate, Todate }) => {\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const propsColumns = colTypes.map((col, colInd) => ({\r\n        isVisible: colInd < 10 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1\r\n    }));\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    const sortedCoulumns = useMemo(() => {\r\n        return [...columns].sort(\r\n            (a, b) => (\r\n                a?.OrderBy && b?.OrderBy\r\n            ) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy\r\n        )\r\n    }, [columns])\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedCoulumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [sortedCoulumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : dataArray;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        key === 'Total_Qty' ? grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ) : Division(\r\n                            grp?.groupedData?.reduce(\r\n                                (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                0\r\n                            ),\r\n                            grp.groupedData.length\r\n                        )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, dataArray, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of sortedCoulumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <div className=\"row\">\r\n                <div className=\"col-xxl-10 col-lg-9 col-md-8\">\r\n                    \r\n                </div>\r\n\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '58vh', overflow: 'auto' }}>\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"LOL - Sales Reports\"\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Column Visiblity'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setDialog(true)}\r\n                            >\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto m-1\"\r\n                            value={groupBy}\r\n                            onChange={e => setGroupBy(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Group By</option>\r\n                            {DisplayColumn.filter(fil => (\r\n                                filterableText(fil.Fied_Data) === \"string\"\r\n                                && fil?.Field_Name !== 'Ledger_Name'\r\n                            )).map((col, colInd) => (\r\n                                <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    groupBy ? (\r\n                        <FilterableTable\r\n                            title={row[groupBy] + ' - Ledgers'}\r\n                            dataArray={Array.isArray(row?.groupedData) ? row?.groupedData : []}\r\n                            columns={DisplayColumn}\r\n                            ExcelPrintOption\r\n                            isExpendable={true}\r\n                            expandableComp={({ row }) => (\r\n                                <LedgerDetails\r\n                                    row={row}\r\n                                    DB={DB}\r\n                                    Fromdate={Fromdate}\r\n                                    Todate={Todate}\r\n                                />\r\n                            )}\r\n                        />\r\n                    ) : (\r\n                        <LedgerDetails\r\n                            row={row}\r\n                            DB={DB}\r\n                            Fromdate={Fromdate}\r\n                            Todate={Todate}\r\n                        />\r\n                    )\r\n                )}\r\n                maxHeightOption\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\r\n                                            disabled={Boolean(o?.isDefault)}\r\n                                            onChange={e =>\r\n                                                setColumns(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )}\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setColumns(prevColumns =>\r\n                                                prevColumns.map(oo =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setColumns(propsColumns)} variant=\"outlined\">Reset</Button>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default LedgerBasedSalesReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const ledgerAndTransactionExport = (excludeDetails, transactions) => {\r\n//     const wb = XLSX.utils.book_new();\r\n\r\n//     const excludeDetailsSheet = XLSX.utils.json_to_sheet(excludeDetails);\r\n//     XLSX.utils.book_append_sheet(wb, excludeDetailsSheet, 'Sheet1');\r\n\r\n//     const transactionsSheet = XLSX.utils.json_to_sheet(transactions);\r\n//     XLSX.utils.book_append_sheet(wb, transactionsSheet, 'Sheet2');\r\n\r\n//     XLSX.writeFile(wb, 'exported_data.xlsx');\r\n// };\r\n\r\n\r\n// {\r\n//     Field_Name: \"Excel_Export\",\r\n//     Fied_Data: \"string\",\r\n//     isVisible: 1,\r\n//     OrderBy: 1,\r\n//     isCustomCell: true,\r\n//     Cell: ({ row }) => {\r\n//         const excludeDetails = Object.fromEntries(\r\n//             Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\r\n//         );\r\n//         return (\r\n//             <>\r\n//                 <IconButton\r\n//                     size=\"small\"\r\n//                     onClick={() => {\r\n//                         ledgerAndTransactionExport([excludeDetails], row.LedgerSales);\r\n//                     }}\r\n//                 >\r\n//                     <Download />\r\n//                 </IconButton>\r\n//             </>\r\n//         )\r\n//     }\r\n// },\r\n\r\n\r\n\r\n\r\n\r\n// const columnsInitialValue = [\r\n//     { Field_Name: \"Ledger_Name\", Fied_Data: \"string\", isVisible: 1, isDefault: 1, OrderBy: 4 },\r\n//     { Field_Name: \"Total_Qty\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 5 },\r\n//     { Field_Name: \"ALL_Avg_M2\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 3, ColumnHeader: 'M2' },\r\n//     { Field_Name: \"ALL_Avg_M3\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 6, ColumnHeader: 'M3' },\r\n//     { Field_Name: \"ALL_Avg_M6\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 2, ColumnHeader: 'M6' },\r\n//     { Field_Name: \"ALL_Avg_M9\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 7, ColumnHeader: 'M9' },\r\n//     { Field_Name: \"ALL_Avg_One_Year\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 1, ColumnHeader: 'Y1' },\r\n//     { Field_Name: \"Q_Pay_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Freq_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Alias\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Actual_Party_Name_with_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Name\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Location\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Nature\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Owners\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_1\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_District\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"File_No\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Payment_Mode\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A3\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A4\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M2_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M3_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M6_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M9_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Y_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Q_Pay_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Tally_Id\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null }\r\n// ].sort((a, b) => a.OrderBy - b.OrderBy);","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { DaysBetween, firstDayOfMonth, getPreviousDate, ISOString } from \"../../Components/functions\";\r\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\r\nimport ProductDayBasedSalesReport from \"./SalesReportComponent/ProductDayBasedTable\";\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport LedgerBasedSalesReport from \"./SalesReportComponent/LedgerBasedTable\";\r\n\r\nconst SalesReport = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState({\r\n        salesInfo: [],\r\n        salesItemInfo: [],\r\n    })\r\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        ReportType: 'LedgerBased',\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n            .catch(console.error);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const { dataTypeInfo } = data?.others;\r\n\r\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\r\n                    ...los,\r\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\r\n                })) : [];\r\n\r\n                setDataTypes(pre => ({ ...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n                setSalesDataOfProduct(combinedData);\r\n            } else {\r\n                setSalesDataOfProduct([])\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setSalesDataOfProduct(null);\r\n        setDataTypes({\r\n            salesInfo: [],\r\n            salesItemInfo: [],\r\n        })\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({ ...pre, filterDialog: false }))\r\n    }\r\n\r\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        {storage?.Company_Name}\r\n                    </span>\r\n                    <span>\r\n                        <select\r\n                            value={filters.ReportType}\r\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\r\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\r\n                        >\r\n                            <option value={'LedgerBased'}>Ledger Based</option>\r\n                            <option value={'ProductBased'}>Product Based</option>\r\n                            {/* <option value={'ProductDayAverage'}>Product/Day Based</option> */}\r\n                        </select>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <form onSubmit={e => { \r\n                            e.preventDefault();\r\n                            setFilters(pre => ({ ...pre, reload: !pre.reload }))\r\n                        }}>\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                                // min={firstDayOfMonth()}\r\n                                value={filters.Fromdate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            />\r\n\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5'\r\n                                value={filters.Todate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            />\r\n\r\n                            <Tooltip title='Reload Data'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"ms-2\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <Refresh />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </form>\r\n\r\n                        {/* <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip> */}\r\n                    </div>\r\n\r\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\r\n                    )}\r\n\r\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\r\n                        <LedgerBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesData}\r\n                            colTypes={dataTypes.salesInfo}\r\n                            DB={storage?.Company_id}\r\n                            Fromdate={filters?.Fromdate}\r\n                            Todate={filters?.Todate}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesDataOFProduct}\r\n                            fromDate={filters.Fromdate}\r\n                            toDate={filters.Todate}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SalesReport;"],"names":["mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","dataArray","columns","ExpandableComp","enableFilters","ExportAllData","dispColmn","setDispColmn","useState","filters","setFilters","filteredData","setFilteredData","showData","Object","keys","length","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","map","index","Field_Name","Column_Name","Fied_Data","Data_Type","isVisible","align","OrderBy","sortedColumns","useMemo","sort","a","b","applyFilters","handleFilterChange","column","value","prevFilters","filtered","type","min","max","filter","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","_Fragment","Box","sx","display","gap","padding","flexWrap","Button","onClick","pre","startIcon","FilterAlt","FilterableTable","isExpendable","expandableComp","tableMaxHeight","ExcelPrintOption","Tooltip","title","IconButton","size","Settings","FilterAltOff","maxHeight","overflow","ke","_column$Field_Name","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Field_Name2","DialogActions","o","i","displayedColumn","find","oo","Card","component","Paper","Switch","Boolean","prevColumns","checkIsNumber","width","color","productColumns","daysCol","setDaysCol","transaction","StockTransaction","stkObj","DaySum","fromEntries","entries","key","isNaN","Number","_ref3","total","reduce","sum","Fragment","createCol","day","_ref4","row","preDefinedCol","initialPageCount","days","_Division","_Division2","_Division3","_Division4","_Division5","M2_Avg","Division","ALL_Avg_M2","getDaysInPreviousMonths","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","Billed_Avg","st","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","loading","setLoading","fetchLink","address","Ledger_Tally_Id","headers","then","success","data","others","dataTypeInfo","salesInfo","catch","console","error","finally","DisplayArrayData","colTypes","groupBy","setGroupBy","dialog","setDialog","filterDialog","setFilterDialog","propsColumns","col","colInd","setColumns","sortedCoulumns","DisplayColumn","isEqualNumber","Defult_Display","grouping","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_grp$groupedData","_grp$groupedData2","groupedData","acc","colmn","Addition","toNumber","_item$column$Field_Na","closeDialog","headerFontSizePx","bodyFontSizePx","ButtonArea","_col$Field_Name","ColumnHeader","_ref5","_ref6","maxHeightOption","isDefault","disabled","variant","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","getPreviousDate","ISOString","ReportType","reload","Company_id","_data$others","combinedData","LOSAbstract","los","losDetails","Stock_Group","daysDifferent","DaysBetween","backgroundColor","Company_Name","CardContent","onSubmit","preventDefault","Refresh","LedgerBasedSalesReport","ProductBasedSalesReport","fromDate","toDate","ProductDayBasedSalesReport"],"sourceRoot":""}
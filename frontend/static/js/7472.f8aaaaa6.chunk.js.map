{"version":3,"file":"static/js/7472.f8aaaaa6.chunk.js","mappings":"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","sources":["Pages/Analytics/dataComparison/SalesComparison/salesInvoiceComparison.jsx","Pages/Analytics/dataComparison/SalesComparison/invoiceBasedSalesComparison.jsx","Pages/Analytics/dataComparison/SalesComparison/salesTabs.jsx","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../../../Components/fetchComponent\";\r\nimport { checkIsNumber, getPreviousDate, isEqualNumber, ISOString, stringCompare, toArray } from \"../../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../../Components/filterableTable2\";\r\nimport { comparisonColorCode, fieldMap } from \"../variable\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Close, Search, Visibility } from \"@mui/icons-material\";\r\n\r\n\r\nconst ErpAndTallySalesComparison = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [ERPData, setERPData] = useState([]);\r\n    const [TallyData, setTallyData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        erpStatus: '',\r\n        tallyStatus: '',\r\n        comparisonDialog: false,\r\n        erpRow: {},\r\n        tallyRow: {},\r\n        reload: false\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `analytics/dataComparison/salesInvoice/alterBased?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const erpData = toArray(data?.others?.ERPDifference);\r\n                const tallyData = toArray(data?.others?.TallyDifference);\r\n\r\n                setERPData(erpData.map(row => {\r\n                    const isAvailableInTally = tallyData.find(comRow => isEqualNumber(\r\n                        comRow?.tally_id, row?.Tally_Id\r\n                    ));\r\n\r\n                    return {\r\n                        ...row,\r\n                        RowStatus: isAvailableInTally ? 'Modified' : 'ONLY IN ERP',\r\n                        statusCode: isAvailableInTally ? 3 : 1\r\n                    }\r\n                }));\r\n\r\n                setTallyData(tallyData.map(row => {\r\n                    const isAvailableInERP = erpData.find(comRow => isEqualNumber(\r\n                        comRow?.Tally_Id, row?.tally_id\r\n                    ));\r\n\r\n                    return {\r\n                        ...row,\r\n                        RowStatus: isAvailableInERP ? 'Modified' : 'ONLY IN Tally',\r\n                        statusCode: isAvailableInERP ? 3 : 2\r\n                    }\r\n                }));\r\n            } else {\r\n                setERPData([]);\r\n                setTallyData([]);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [Fromdate, Todate])\r\n\r\n    function compareWithFieldMap(tallyObj, erpObj, fieldMap) {\r\n        const result = [];\r\n\r\n        for (const [label, [tallyKey, erpKey]] of Object.entries(fieldMap)) {\r\n            const tallyVal = tallyObj[tallyKey] ?? '';\r\n            const erpVal = erpObj[erpKey] ?? '';\r\n            const status = String(tallyVal) === String(erpVal) ? 'Match' : 'Different';\r\n\r\n            result.push({\r\n                label,\r\n                tallyValue: String(tallyVal),\r\n                erpValue: String(erpVal),\r\n                status,\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    const closeDialg = () => {\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            comparisonDialog: false,\r\n            erpRow: {},\r\n            tallyRow: {}\r\n        }))\r\n    }\r\n\r\n    const rows = useMemo(() => {\r\n        return compareWithFieldMap(filters.tallyRow, filters.erpRow, fieldMap)\r\n    }, [filters.erpRow, filters.tallyRow, fieldMap]);\r\n\r\n    console.log(ERPData, TallyData)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row p-2\">\r\n\r\n                <div className=\"col-lg-6 p-2\">\r\n                    <FilterableTable\r\n                        title=\"ERP Miss-Matched\"\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        EnableSerialNumber\r\n                        ButtonArea={\r\n                            <>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto\"\r\n                                    value={filters.erpStatus}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, erpStatus: e.target.value }))}\r\n                                >\r\n                                    <option value=\"\">All Type</option>\r\n                                    <option value=\"1\">ERP only</option>\r\n                                    <option value=\"3\">Modified</option>\r\n                                    <option value=\"4\">Child</option>\r\n                                </select>\r\n                                <label className=\"me-1\">Error Type:</label>\r\n                            </>\r\n                        }\r\n                        dataArray={\r\n                            (checkIsNumber(filters.erpStatus)\r\n                                ? ERPData.filter(row => isEqualNumber(row.statusCode, filters.erpStatus))\r\n                                : ERPData).sort(\r\n                                    (a, b) => String(a?.Do_Inv_No || '').localeCompare(String(b?.Do_Inv_No || ''))\r\n                                )\r\n                        }\r\n                        columns={[\r\n                            createCol('Do_Inv_No', 'string', 'Voucher Number'),\r\n                            createCol('Do_Date', 'date', 'Date'),\r\n                            createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                            createCol('RowStatus', 'string', 'Reason'),\r\n                            // {\r\n                            //     isVisible: 1,\r\n                            //     ColumnHeader: 'Code',\r\n                            //     isCustomCell: true,\r\n                            //     Cell: ({ row }) => {\r\n                            //         const statusColor = comparisonColorCode.find(\r\n                            //             statusList => stringCompare(statusList.code, row.statusCode)\r\n                            //         ).color;\r\n\r\n                            //         return (\r\n                            //             <div\r\n                            //                 style={{\r\n                            //                     height: '25px',\r\n                            //                     width: '25px',\r\n                            //                     borderRadius: '100%',\r\n                            //                     backgroundColor: statusColor\r\n                            //                 }}\r\n                            //                 className=\"rounded-5\"\r\n                            //             ></div>\r\n                            //         )\r\n                            //     }\r\n                            // },\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Preview Invoice',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const tallyRow = TallyData.find(comRow => isEqualNumber(\r\n                                        comRow?.tally_id, row?.Tally_Id\r\n                                    ));\r\n\r\n                                    return (\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => setFilters(pre => ({\r\n                                                ...pre,\r\n                                                comparisonDialog: true,\r\n                                                erpRow: row,\r\n                                                tallyRow: tallyRow || {}\r\n                                            }))}\r\n                                        ><Visibility /></IconButton>\r\n                                    )\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 p-2\">\r\n                    <FilterableTable\r\n                        title=\"Tally Miss-Matched\"\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        EnableSerialNumber\r\n                        ButtonArea={\r\n                            <>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto\"\r\n                                    value={filters.tallyStatus}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, tallyStatus: e.target.value }))}\r\n                                >\r\n                                    <option value=\"\">All Type</option>\r\n                                    <option value=\"2\">Tally only</option>\r\n                                    <option value=\"3\">Modified</option>\r\n                                    <option value=\"4\">Child</option>\r\n                                </select>\r\n                                <label className=\"me-1\">Error Type:</label>\r\n                            </>\r\n                        }\r\n                        dataArray={(\r\n                            checkIsNumber(filters.tallyStatus)\r\n                                ? TallyData.filter(row => isEqualNumber(row.statusCode, filters.tallyStatus))\r\n                                : TallyData\r\n                        ).sort(\r\n                            (a, b) => String(a?.invoice_no || '').localeCompare(String(b?.invoice_no || ''))\r\n                        )}\r\n                        columns={[\r\n                            createCol('invoice_no', 'string', 'Voucher Number'),\r\n                            createCol('invoice_date', 'date', 'Date'),\r\n                            createCol('total_invoice_value', 'number', 'Invoice Value'),\r\n                            createCol('RowStatus', 'string', 'Reason'),\r\n                            // {\r\n                            //     isVisible: 1,\r\n                            //     ColumnHeader: 'Code',\r\n                            //     isCustomCell: true,\r\n                            //     Cell: ({ row }) => {\r\n                            //         const statusColor = comparisonColorCode.find(\r\n                            //             statusList => stringCompare(statusList.code, row.statusCode)\r\n                            //         ).color;\r\n\r\n                            //         return (\r\n                            //             <div\r\n                            //                 style={{\r\n                            //                     height: '25px',\r\n                            //                     width: '25px',\r\n                            //                     borderRadius: '100%',\r\n                            //                     backgroundColor: statusColor\r\n                            //                 }}\r\n                            //                 className=\"rounded-5\"\r\n                            //             ></div>\r\n                            //         )\r\n                            //     }\r\n                            // },\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Preview Invoice',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const erpRow = ERPData.find(comRow => isEqualNumber(\r\n                                        comRow?.Tally_Id, row?.tally_id\r\n                                    ));\r\n\r\n                                    return (\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => setFilters(pre => ({\r\n                                                ...pre,\r\n                                                comparisonDialog: true,\r\n                                                tallyRow: row,\r\n                                                erpRow: erpRow,\r\n                                            }))}\r\n                                        ><Visibility /></IconButton>\r\n                                    )\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={filters.comparisonDialog}\r\n                onClose={closeDialg} fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle className=\"d-flex justify-content-between align-items-center\">\r\n                    <span>Invoice Difference</span>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        onClick={closeDialg}\r\n                    ><Close color='error' /></IconButton>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive \">\r\n                        <h2 className=\"text-xl font-bold mb-4\">ERP vs Tally Comparison</h2>\r\n                        <table className=\"table table-bordered border-gray-300\">\r\n                            <thead>\r\n                                <tr className=\"bg-gray-100 text-left\">\r\n                                    <th>Field</th>\r\n                                    <th>Tally DB</th>\r\n                                    <th>ERP DB</th>\r\n                                    <th>Status</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {rows.map(({ label, tallyValue, erpValue, status }, idx) => (\r\n                                    <tr key={idx} className={status === 'Different' ? 'bg-red-100' : 'bg-white'}>\r\n                                        <td className=\" font-medium\">{label}</td>\r\n                                        <td>{tallyValue}</td>\r\n                                        <td>{erpValue}</td>\r\n                                        <td className={`p-2 border font-semibold ${status === 'Different' ? 'text-red-600' : 'text-green-600'}`}>\r\n                                            {status}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions></DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ErpAndTallySalesComparison;","import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../../../Components/fetchComponent\";\r\nimport { checkIsNumber, getPreviousDate, isEqualNumber, ISOString, stringCompare, toArray } from \"../../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../../Components/filterableTable2\";\r\nimport { comparisonColorCode, fieldMap } from \"../variable\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { Close, Search, Visibility } from \"@mui/icons-material\";\r\n\r\n\r\nconst InvoiceBasedSalesComparison = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [ERPData, setERPData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        comparisonDialog: false,\r\n        excluedeSyced: 1\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `\r\n                analytics/dataComparison/salesInvoice/invoiceBased?\r\n                Fromdate=${Fromdate}&\r\n                Todate=${Todate}&\r\n                excluedeSyced=${filters.excluedeSyced}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const erpData = toArray(data?.data);\r\n                setERPData(erpData)\r\n            } else {\r\n                setERPData([]);\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [Fromdate, Todate, filters.excluedeSyced])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Sales unsynced list\"\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                EnableSerialNumber\r\n                ButtonArea={\r\n                    <>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto\"\r\n                            value={filters.excluedeSyced}\r\n                            onChange={e => setFilters(pre => ({ ...pre, excluedeSyced: e.target.value }))}\r\n                        >\r\n                            <option value=\"0\">Show Synced</option>\r\n                            <option value=\"1\">Exclude Synced</option>\r\n                        </select>\r\n                        {/* <label className=\"me-1\">Error Type:</label> */}\r\n                    </>\r\n                }\r\n                dataArray={ERPData}\r\n                columns={[\r\n                    createCol('Do_Date', 'date', 'Date'),\r\n                    createCol('Do_Inv_No', 'string', 'Voucher Number'),\r\n                    createCol('Retailer_Name', 'string', 'Ledger'),\r\n                    createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                    createCol('erpChildCount', 'number', 'ERP-Products'),\r\n                    createCol('erpChildQuantity', 'number', 'ERP Bill Quantity'),\r\n                    createCol('tallyChildCount', 'number', 'Tally-Products'),\r\n                    createCol('tallyChildQuantity', 'number', 'Tally Bill Quantity'),\r\n                    createCol('RowStatus', 'string', 'Reason'),\r\n                ]}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceBasedSalesComparison;","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { getPreviousDate, ISOString } from '../../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\nimport ErpAndTallySalesComparison from './salesInvoiceComparison';\r\nimport InvoiceBasedSalesComparison from './invoiceBasedSalesComparison';\r\nimport ItemWiseSalesComparison from './itemWiseComparison';\r\n\r\nconst SalesComparisonTabs = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: getPreviousDate(10),\r\n        Todate: ISOString(),\r\n        FilterFromDate: getPreviousDate(10),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item based',\r\n            component: (\r\n                <ItemWiseSalesComparison\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'InvoiceId based',\r\n            component: (\r\n                <InvoiceBasedSalesComparison\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'AlterId based',\r\n            component: (\r\n                <ErpAndTallySalesComparison\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesComparisonTabs;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["_ref","loadingOn","loadingOff","Fromdate","Todate","ERPData","setERPData","useState","TallyData","setTallyData","filters","setFilters","erpStatus","tallyStatus","comparisonDialog","erpRow","tallyRow","reload","useEffect","fetchLink","address","then","data","success","_data$others","_data$others2","erpData","toArray","others","ERPDifference","tallyData","TallyDifference","map","row","isAvailableInTally","find","comRow","isEqualNumber","tally_id","Tally_Id","RowStatus","statusCode","isAvailableInERP","catch","e","console","error","closeDialg","pre","rows","useMemo","tallyObj","erpObj","fieldMap","result","label","tallyKey","erpKey","Object","entries","_tallyObj$tallyKey","_erpObj$erpKey","tallyVal","erpVal","status","String","push","tallyValue","erpValue","compareWithFieldMap","log","_jsxs","_Fragment","children","className","_jsx","FilterableTable","title","headerFontSizePx","bodyFontSizePx","EnableSerialNumber","ButtonArea","value","onChange","target","dataArray","checkIsNumber","filter","sort","a","b","Do_Inv_No","localeCompare","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref2","IconButton","size","onClick","Visibility","invoice_no","_ref3","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","Close","color","DialogContent","_ref4","idx","DialogActions","excluedeSyced","tabValue","setTabValue","dateFilter","setDateFilter","getPreviousDate","ISOString","FilterFromDate","FilterTodate","tabData","name","component","ItemWiseSalesComparison","InvoiceBasedSalesComparison","ErpAndTallySalesComparison","htmlFor","type","id","Search","TabContext","Box","sx","borderBottom","borderColor","TabList","indicatorColor","n","variant","scrollButtons","tab","tabInd","Tab","backgroundColor","TabPanel","p","pt","createSvgIcon","d"],"sourceRoot":""}
{"version":3,"file":"static/js/3216.280b5bb4.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/ShoppingCartCheckout.js","Pages/DataEntry/purchaseOrderDataArray.js","Pages/DataEntry/purchaseOrderPreviewTemplate.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Visibility.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name] \r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign] \r\n * @property {string} [ColumnHeader] \r\n * @property {string} [tdClass] \r\n * @property {0|1} [isVisible] \r\n * @property {'left'|'right'|'center'} [align] \r\n * @property {boolean} [isCustomCell] \r\n * @property {Function} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name] \r\n * @property {JSX.Element} [icon] \r\n * @property {Function} [onclick] \r\n * @property {boolean} [disabled] \r\n */\r\n\r\n/**\r\n * Filterable Table Component\r\n * @param {Object} props \r\n * @param {Array<Object>} [props.dataArray] \r\n * @param {Array<Column>} [props.columns] \r\n * @param {Function} [props.onClickFun] \r\n * @param {boolean} [props.isExpendable=false] \r\n * @param {React.ReactElement|JSX.Element} [props.expandableComp] \r\n * @param {number} [props.tableMaxHeight] \r\n * @param {number} [props.initialPageCount=10] \r\n * @param {number} [props.bodyFontSizePx=13] \r\n * @param {number} [props.headerFontSizePx=13] \r\n * @param {boolean} [props.EnableSerialNumber=false] \r\n * @param {'small'|'medium'|'large'} [props.CellSize='medium'] \r\n * @param {boolean} [props.disablePagination=false] \r\n * @param {string} [props.title=''] \r\n * @param {boolean} [props.PDFPrintOption=false] \r\n * @param {boolean} [props.ExcelPrintOption=false] \r\n * @param {boolean} [props.maxHeightOption=false]\r\n * @param {React.ReactElement|JSX.Element} [props.ButtonArea] \r\n * @param {Array<Menu>} props.MenuButtons \r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (field = '', type = 'string', ColumnHeader = '', align = 'left', verticalAlign = 'center', tdClass = '') => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        tdClass,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass\r\n                                ? String(' ' + column?.tdClass({ row, Field_Name, index: tdIndex }) + ' ')\r\n                                : ''\r\n                        );\r\n                        const horizondalalignClass = column.align ? columnAlign.find(\r\n                            align => align.type === String(column.align).toLowerCase()\r\n                        )?.class : '';\r\n                        const verticalAlignClass = column.verticalAlign ? columnVerticalAlign.find(\r\n                            align => align.type === String(column.verticalAlign).toLowerCase()\r\n                        )?.class : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) return Object.entries(row).map(\r\n                            ([key, value]) => column.Field_Name === key && (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`\r\n                                        border-end` \r\n                                        + horizondalalignClass \r\n                                        + verticalAlignClass \r\n                                        + tdClass(row, column.Field_Name, index)\r\n                                    }\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {formatString(value, column?.Fied_Data)}\r\n                                </TableCell>\r\n                            )\r\n                        )\r\n\r\n                        if (isColumnVisible && isCustomCell) return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                className={`\r\n                                    border-end` \r\n                                    + horizondalalignClass \r\n                                    + verticalAlignClass \r\n                                    + tdClass(row, column.Field_Name, index)\r\n                                }\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                            >\r\n                                {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                            </TableCell>\r\n                        )\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ` + horizondalalignClass + verticalAlignClass}\r\n                            ></TableCell>\r\n                        )\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2m10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2m-8.9-5h7.45c.75 0 1.41-.41 1.75-1.03L21 4.96 19.25 4l-3.7 7H8.53L4.27 2H1v2h2l3.6 7.59-1.35 2.44C4.52 15.37 5.48 17 7 17h12v-2H7zM12 2l4 4-4 4-1.41-1.41L12.17 7H8V5h4.17l-1.59-1.59z\"\n}), 'ShoppingCartCheckout');","import { Addition, isEqualNumber, isGraterNumber, ISOString, LocalDate, Multiplication, Subraction, Division, checkIsNumber, NumberFormat } from \"../../Components/functions\";\r\nimport { IconButton, Tooltip } from '@mui/material';\r\nimport { Delete, Edit, ShoppingCartCheckout, Visibility } from '@mui/icons-material';\r\n\r\nexport const purchaseOrderDataSet = ({ data = [], status = 'ITEMS' }) => {\r\n\r\n    switch (status) {\r\n        case 'ITEMS':\r\n        case 'PO-Vendor-Wise':\r\n        case 'PO-Item-Wise':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item.ItemDetails.map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            DeliveryDetails: item.DeliveryDetails ?? [],\r\n                            StaffDetails: item.StaffDetails ?? [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            IsConvertedAsInvoice: item?.IsConvertedAsInvoice,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            TranspoterDetails: item.TranspoterDetails ?? [],\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ITEMS PENDING':\r\n        case 'PO-Pending-Only':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item?.ItemDetails?.filter(fil => {\r\n                        const itemsInDelivery = item?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, fil?.ItemId));\r\n                        const WeightTotal = itemsInDelivery.reduce((sum, delivery) => Addition(sum, delivery?.Weight), 0);\r\n                        return Number(WeightTotal) < Number(fil?.Weight);\r\n                    }).map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            DeliveryDetails: item.DeliveryDetails ?? [],\r\n                            StaffDetails: item.StaffDetails ?? [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            IsConvertedAsInvoice: item?.IsConvertedAsInvoice,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            TranspoterDetails: item.TranspoterDetails ?? [],\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ITEMS ARRIVED':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item?.ItemDetails?.filter(fil => {\r\n                        const itemsInDelivery = item?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, fil?.ItemId));\r\n                        const WeightTotal = itemsInDelivery.reduce((sum, delivery) => Addition(sum, delivery?.Weight), 0);\r\n                        return Number(WeightTotal) >= Number(fil?.Weight);\r\n                    }).map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            DeliveryDetails: item.DeliveryDetails ?? [],\r\n                            StaffDetails: item.StaffDetails ?? [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            IsConvertedAsInvoice: item?.IsConvertedAsInvoice,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            TranspoterDetails: item.TranspoterDetails ?? [],\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'AR-Item-Based':\r\n        case 'AR-Vendor-Wise':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.DeliveryDetails)) return acc;\r\n\r\n                    const DeliveryDetails = item.DeliveryDetails.map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            DeliveryDetails: item?.DeliveryDetails ?? [],\r\n                            StaffDetails: item.StaffDetails ?? [],\r\n                            OrderStatus: item?.OrderStatus,\r\n                            ItemDetails: item.ItemDetails ?? [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            IsConvertedAsInvoice: item?.IsConvertedAsInvoice,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            TranspoterDetails: item.TranspoterDetails ?? [],\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(DeliveryDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ORDERS':\r\n            return data\r\n        case 'ORDERS PENDING':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (!Array.isArray(item?.DeliveryDetails) || isGraterNumber(item?.DeliveryDetails?.length, 0)) return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'ORDERS ARRIVED':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (!Array.isArray(item?.DeliveryDetails) || isEqualNumber(item?.DeliveryDetails?.length, 0)) return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'COMPLETED ORDERS':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (item?.OrderStatus !== 'Completed') return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'IN-COMPLETED ORDERS':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (item?.OrderStatus === 'Completed') return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        default:\r\n            return []\r\n    }\r\n}\r\n\r\nconst statusColor = {\r\n    NewOrder: ' bg-info fw-bold fa-11 px-2 py-1 rounded-3 ',\r\n    OnProcess: ' bg-warning fw-bold fa-11 px-2 py-1 rounded-3 ',\r\n    Completed: ' bg-success text-light fa-11 px-2 py-1 rounded-3 ',\r\n    Canceled: ' bg-danger text-light fw-bold fa-11 px-2 py-1 rounded-3 '\r\n}\r\n\r\nconst chooseColor = (orderStatus) => {\r\n    // const DeliveryDetails = Number(orderStatus) > 0 ? 'Arrived' : 'Pending';\r\n    switch (orderStatus) {\r\n        case 'New Order': return statusColor.NewOrder;\r\n        case 'On Process': return statusColor.OnProcess;\r\n        case 'Completed': return statusColor.Completed;\r\n        case 'Canceled': return statusColor.Canceled;\r\n        default: return ''\r\n    }\r\n}\r\n\r\nconst createCol = (field, type, ColumnHeader) => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\n// const findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\n// const getActQty = (item, products) => {\r\n//     console.log(item)\r\n//     const productDetails = findProductDetails(products, item?.ItemId);\r\n//     const pack = parseFloat(productDetails?.PackGet ?? 0);\r\n//     const Quantity = Division(item.Weight, pack);\r\n//     console.log({pack, Quantity})\r\n//     return Quantity;\r\n// }\r\n\r\nexport const displayColumns = ({ OrderStatus = 'ITEMS', dialogs, setOrderPreview, navigation, products }) => {\r\n\r\n    // Order Based Cells\r\n    const OrderId = createCol('OrderId', 'string', 'Order Id'),\r\n        // OwnerName = createCol('OwnerName', 'string', 'Owner Name'),\r\n        OwnerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Owners',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return row?.StaffDetails?.filter(staff => staff.Cost_Category === 'Owners').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        },\r\n        BrokerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Brokers',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return row?.StaffDetails?.filter(staff => staff.Cost_Category === 'Broker').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        },\r\n        PartyName = createCol('PartyName', 'string', 'Party'),\r\n        PaymentCondition = createCol('PaymentCondition', 'string', 'Payment Condition'),\r\n        Remarks = createCol('Remarks', 'string'),\r\n        TradeConfirmDate = createCol('TradeConfirmDate', 'date', 'Trade Confirm Date'),\r\n        LoadingDate = createCol('LoadingDate', 'date', 'Loading Date'),\r\n        Condition = createCol('QualityCondition', 'string', 'Condition'),\r\n        OrderPartyName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Party',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.PartyName\r\n        }, OrderActions = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Action',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row ?? {};\r\n                const OrderItemsArray = row?.ItemDetails ?? [];\r\n                const DeliveryArray = row?.DeliveryDetails ?? [];\r\n                const StaffArray = row?.StaffDetails ?? [];\r\n                const TranspoterArray = row?.TranspoterDetails ?? [];\r\n\r\n                return (\r\n                    <>\r\n                        <Tooltip title='Preview Order'>\r\n                            <span>\r\n                                <IconButton\r\n                                    size='small'\r\n                                    color='primary'\r\n                                    onClick={() => setOrderPreview(pre => ({\r\n                                        ...pre,\r\n                                        OrderDetails,\r\n                                        OrderItemsArray,\r\n                                        DeliveryArray,\r\n                                        TranspoterArray,\r\n                                        StaffArray,\r\n                                        display: true,\r\n                                    }))}\r\n                                ><Visibility className=\"fa-16\" /></IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n\r\n                        {(\r\n                            navigation\r\n                            && isEqualNumber(row?.IsConvertedAsInvoice, 0)\r\n                            && OrderDetails?.OrderStatus === 'Completed'\r\n                        ) && (\r\n                                <Tooltip title='Convert to invoice'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            navigation({\r\n                                                page: '/erp/purchase/invoice/create',\r\n                                                stateToTransfer: {\r\n                                                    invoiceInfo: {\r\n                                                        Branch_Id: OrderDetails?.BranchId,\r\n                                                        Po_Inv_Date: ISOString(),\r\n                                                        Po_Entry_Date: OrderDetails?.LoadingDate ? ISOString(OrderDetails?.LoadingDate) : ISOString(),\r\n                                                        Retailer_Id: OrderDetails?.PartyId,\r\n                                                        Retailer_Name: OrderDetails?.PartyName\r\n                                                    },\r\n                                                    orderInfo: DeliveryArray.map(item => ({\r\n                                                        POI_St_Id: '',\r\n                                                        DeliveryId: item?.Id,\r\n                                                        OrderId: item?.OrderId,\r\n                                                        Location_Id: item?.LocationId,\r\n                                                        Item_Id: item?.ItemId,\r\n                                                        Bill_Qty: item?.Weight,\r\n                                                        Act_Qty: item?.Weight,\r\n                                                        Bill_Alt_Qty: item?.Quantity,\r\n                                                        Item_Rate: item?.BilledRate,\r\n                                                        Amount: Multiplication(item?.BilledRate, item?.Weight),\r\n                                                        Free_Qty: 0,\r\n                                                        Batch_No: item?.BatchLocation,\r\n                                                    })),\r\n                                                    staffInfo: StaffArray.map(staff => ({\r\n                                                        Involved_Emp_Id: Number(staff.EmployeeId),\r\n                                                        Involved_Emp_Name: staff.Emp_Name,\r\n                                                        Cost_Center_Type_Id: Number(staff.CostType),\r\n                                                    }))\r\n                                                }\r\n                                            })\r\n                                        }}\r\n                                    ><ShoppingCartCheckout /></IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n\r\n                        {(navigation && isEqualNumber(row?.IsConvertedAsInvoice, 0)) && (\r\n                            <Tooltip title='Edit'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => {\r\n                                            navigation({\r\n                                                page: '/dataEntry/purchaseOrder/create',\r\n                                                stateToTransfer: {\r\n                                                    OrderDetails,\r\n                                                    OrderItemsArray,\r\n                                                    DeliveryArray,\r\n                                                    TranspoterArray,\r\n                                                    StaffArray,\r\n                                                    editPage: 'PurchaseOderWithDelivery'\r\n                                                }\r\n                                            })\r\n                                        }}\r\n                                    ><Edit className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip >\r\n                        )}\r\n\r\n                        {isEqualNumber(row?.IsConvertedAsInvoice, 0) && (\r\n                            <Tooltip title='Delete Order'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => dialogs(pre => ({ ...pre, deleteOrderDialog: true, deleteOrderId: row?.Id }))}\r\n                                        color='error'\r\n                                    ><Delete className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip>\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        }, GeneralStatus = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Status',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderStatus = row?.OrderStatus;\r\n                return (\r\n                    <span className={chooseColor(OrderStatus)}>\r\n                        {String(OrderStatus).replace(' ', '')}\r\n                    </span>\r\n                )\r\n            }\r\n        }, OrderPO_ID = createCol('PO_ID', 'string', 'Order ID')\r\n\r\n    // Item Based Cells\r\n    const\r\n        ItemPO_ID = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Order ID',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.PO_ID ?? ''\r\n        },\r\n        ItemName = createCol('ItemName', 'string', 'Item'),\r\n        Rate = createCol('Rate', 'number'),\r\n        WeightWithUOM = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Weight',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => checkIsNumber(row?.Weight) ? NumberFormat(row?.Weight) : 0\r\n            // + ' ' + row?.Units\r\n        }, ItemArrivedQuantity = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Arrived Quantity',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const itemsInDelivery = row?.OrderDetails?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, row?.ItemId));\r\n                const WeightTotal = itemsInDelivery.reduce((acc, item) => Addition(acc, item?.Weight), 0);\r\n                return WeightTotal\r\n            }\r\n        }, PendingItemQuantity = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Pending-Quantity',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const itemsInDelivery = row?.OrderDetails?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, row?.ItemId));\r\n                const WeightTotal = itemsInDelivery.reduce((acc, item) => Addition(acc, item?.Weight), 0);\r\n                return Subraction(row?.Weight, WeightTotal);\r\n            }\r\n        }, ItemTradeConfirmDate = {\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            ColumnHeader: 'Date',\r\n            Cell: ({ row }) => LocalDate(row?.OrderDetails?.TradeConfirmDate)\r\n        }, ItemOrderStatus = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Status',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderStatus = row?.OrderDetails?.OrderStatus;\r\n                return (\r\n                    <span className={chooseColor(OrderStatus)}>\r\n                        {String(OrderStatus).replace(' ', '')}\r\n                    </span>\r\n                )\r\n            }\r\n        }, ItemOwnerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Owners',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { StaffDetails } = OrderDetails;\r\n                return StaffDetails?.filter(staff => staff.Cost_Category === 'Owners').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        }, ItemBrokerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Brokers',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { StaffDetails } = OrderDetails;\r\n                return StaffDetails?.filter(staff => staff.Cost_Category === 'Broker').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        },ItemActions = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Action',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { ItemDetails, DeliveryDetails, TranspoterDetails, StaffDetails } = OrderDetails;\r\n\r\n                return (\r\n                    <>\r\n                        <Tooltip title='Preview Order'>\r\n                            <span>\r\n                                <IconButton\r\n                                    size='small'\r\n                                    color='primary'\r\n                                    onClick={() => setOrderPreview(pre => ({\r\n                                        ...pre,\r\n                                        OrderDetails,\r\n                                        OrderItemsArray: ItemDetails,\r\n                                        DeliveryArray: DeliveryDetails,\r\n                                        TranspoterArray: TranspoterDetails,\r\n                                        StaffArray: StaffDetails,\r\n                                        display: true,\r\n                                    }))}\r\n                                ><Visibility className=\"fa-16\" /></IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n\r\n                        {navigation && (\r\n                            <Tooltip title='Edit'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => navigation({\r\n                                            page: '/dataEntry/purchaseOrder/create',\r\n                                            stateToTransfer: {\r\n                                                OrderDetails,\r\n                                                OrderItemsArray: ItemDetails,\r\n                                                DeliveryArray: DeliveryDetails,\r\n                                                TranspoterArray: TranspoterDetails,\r\n                                                StaffArray: StaffDetails,\r\n                                                editPage: 'PurchaseOderWithDelivery'\r\n                                            }\r\n                                        })}\r\n                                    ><Edit className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip >\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        };\r\n\r\n    // Delivery Based Columns \r\n    const ArrivedDate = {\r\n        isVisible: 1,\r\n        isCustomCell: true,\r\n        ColumnHeader: 'Arrived Date',\r\n        Cell: ({ row }) => row?.ArrivalDate ? LocalDate(row?.ArrivalDate) : ''\r\n    }, ArrivedLocation = createCol('Location', 'string'),\r\n        ArrivalRate = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Rate',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderedItems = Array.isArray(row?.OrderDetails?.ItemDetails) ? row?.OrderDetails?.ItemDetails : [];\r\n                const OrderedRate = OrderedItems.find(o => isEqualNumber(o?.ItemId, row?.ItemId))?.Rate ?? 0\r\n                const BilledRate = Number(row?.BilledRate);\r\n                return `${BilledRate} (${isGraterNumber(BilledRate, OrderedRate) ? ('+' + (BilledRate - OrderedRate)) : ('-' + (OrderedRate - BilledRate))})`\r\n            }\r\n        }\r\n\r\n\r\n    // Tally Column\r\n    const OrderLOLLedgerName = createCol('Ledger_Name', 'string', 'LOL Ledger Name'),\r\n        OrderLOLPartyDistrict = createCol('Party_District', 'string', 'LOL Party District'),\r\n        ItemLOLLedgerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'LOL Ledger Name',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.Ledger_Name\r\n        }, ItemLOLPartyDistrict = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'LOL Party District',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.Party_District\r\n        }, StockItem = createCol('Stock_Item', 'string', 'Stock Item'),\r\n        StockGroup = createCol('Stock_Group', 'string', 'Stock Group');\r\n\r\n\r\n    switch (OrderStatus) {\r\n        case 'ITEMS':\r\n        case 'ITEMS PENDING':\r\n        case 'ITEMS ARRIVED':\r\n            return [\r\n                ItemPO_ID, OrderPartyName, ItemTradeConfirmDate, ItemName, WeightWithUOM, \r\n                ItemArrivedQuantity, PendingItemQuantity, Rate, ItemOwnerName, ItemBrokerName, ItemActions\r\n            ];\r\n        case 'ORDERS':\r\n        case 'COMPLETED ORDERS':\r\n        case 'IN-COMPLETED ORDERS':\r\n            return [\r\n                OrderPO_ID, TradeConfirmDate, PartyName, BrokerName, OwnerName, Remarks, GeneralStatus, OrderActions,\r\n            ]\r\n        case 'ORDERS PENDING':\r\n        case 'ORDERS ARRIVED':\r\n            return [\r\n                OrderPO_ID, TradeConfirmDate, PartyName, BrokerName, OwnerName, Remarks, OrderActions,\r\n            ]\r\n\r\n        case 'PO-Vendor-Wise':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, ItemLOLLedgerName, ItemLOLPartyDistrict, StockGroup, WeightWithUOM, Rate, PendingItemQuantity, ItemActions\r\n            ]\r\n        case 'PO-Item-Wise':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, StockGroup, StockItem, WeightWithUOM, Rate, PendingItemQuantity, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'PO-Pending-Only':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, StockGroup, StockItem, WeightWithUOM, Rate, PendingItemQuantity, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'AR-Item-Based':\r\n            return [\r\n                ItemPO_ID, ArrivedDate, ArrivedLocation, StockGroup, StockItem, WeightWithUOM, ArrivalRate, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'AR-Vendor-Wise':\r\n            return [\r\n                ItemPO_ID, ArrivedDate, ArrivedLocation, ItemLOLLedgerName, ItemLOLPartyDistrict, StockGroup, ArrivalRate, WeightWithUOM, PendingItemQuantity, ItemActions\r\n            ]\r\n        default:\r\n            return [];\r\n    }\r\n}","import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { LocalDate } from '../../Components/functions';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { Download } from '@mui/icons-material';\r\n\r\nconst PurchaseOrderPreviewTemplate = ({\r\n    OrderDetails = {},\r\n    OrderItemsArray = [],\r\n    DeliveryArray = [],\r\n    TranspoterArray = [],\r\n    display = false,\r\n    onCloseDialog\r\n}) => {\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const printRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setDialog(display ? true : false);\r\n    }, [display])\r\n\r\n    const closeDialog = () => {\r\n        if (onCloseDialog) onCloseDialog();\r\n        setDialog(false);\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog} maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                    <span>Order Preview</span>\r\n                    <span>\r\n                        <Button\r\n                            startIcon={<Download />}\r\n                            variant='outlined'\r\n                            onClick={handlePrint}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    <div className=\"table-responsive\">\r\n\r\n                        <table className=\"table m-0\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-bottom-0'} >\r\n                                        ORDER DETAILS\r\n                                    </td>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light '} >\r\n                                        PARTY DETAILS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' p-0 border-0'}>\r\n                                        <table className=\"table m-0 \">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Loading Date</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.LoadingDate ? LocalDate(OrderDetails?.LoadingDate) : ''}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Trade Confirm Date</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.TradeConfirmDate ? LocalDate(OrderDetails?.TradeConfirmDate) : ''}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Owner Name</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.OwnerName}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Broker Name</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.BrokerName}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </td>\r\n                                    <td className={tdStyle + ' p-0 border-0 '}>\r\n\r\n                                        <table className=\"table m-0 p-0\">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Party Name: <br /> &emsp; {OrderDetails?.PartyName ?? '-'}</h6>\r\n                                                    </td>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Party Address: <br /> &emsp; {OrderDetails?.PartyAddress ?? '-'}</h6>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Payment Condition: <br /> &emsp; {OrderDetails?.PaymentCondition ?? '-'}</h6>\r\n                                                    </td>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Remarks: <br /> &emsp; {OrderDetails?.Remarks ?? '-'}</h6>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n\r\n                                        {/* <div className=\"d-flex flex-wrap bg-white\">\r\n                                            <span className='flex-grow-1 p-2'>\r\n                                                <h6>Party Name: {OrderDetails?.PartyName}</h6>\r\n                                                <h6>Party Address: {OrderDetails?.PartyAddress}</h6>\r\n                                            </span>\r\n\r\n                                            <span className='p-2'>\r\n                                                <h6>Payment Condition: {OrderDetails?.PaymentCondition}</h6>\r\n                                                <h6>Remarks: {OrderDetails?.Remarks}</h6>\r\n                                            </span>\r\n                                        </div> */}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={7}>\r\n                                        ORDER ITEMS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'}>Item Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Tonnage</th>\r\n                                    <th className={tdStyle + ' text-center'}>\r\n                                        Rate <br />\r\n                                        Deliver/Spot\r\n                                    </th>\r\n                                    <th className={tdStyle + ' text-center'}>Discount</th>\r\n                                    <th className={tdStyle + ' text-center'}>Quality Condition</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {OrderItemsArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.ItemName}</td>\r\n                                        <td className={tdStyle}>{o?.Weight + ' ' + o?.Units}</td>\r\n                                        <td className={tdStyle}>{o?.Rate}</td>\r\n                                        <td className={tdStyle}>{o?.Discount}</td>\r\n                                        <td className={tdStyle}>{o?.QualityCondition}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={11}>DELIVERY DETAILS</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'}>Location</th>\r\n                                    <th className={tdStyle + ' text-center'}>Arrival Date</th>\r\n                                    <th className={tdStyle + ' text-center'}>Item Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Concern</th>\r\n\r\n                                    <th className={tdStyle + ' text-center'}>Bill No</th>\r\n                                    <th className={tdStyle + ' text-center'}>Bill Date</th>\r\n                                    <th className={tdStyle + ' text-center'}>Quantity</th>\r\n                                    <th className={tdStyle + ' text-center'}>Billed Rate</th>\r\n                                    <th className={tdStyle + ' text-center'}>Tonnage / KGs</th>\r\n                                    <th className={tdStyle + ' text-center'}>Batch / Location</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {DeliveryArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.Location}</td>\r\n                                        <td className={tdStyle}>{o?.ArrivalDate ? LocalDate(o?.ArrivalDate) : ''}</td>\r\n                                        <td className={tdStyle}>{o?.ItemName}</td>\r\n                                        <td className={tdStyle}>{o?.Concern}</td>\r\n\r\n                                        <td className={tdStyle}>{o?.BillNo}</td>\r\n                                        <td className={tdStyle}>{o?.BillDate ? LocalDate(o?.BillDate) : ''}</td>\r\n                                        <td className={tdStyle}>{o?.Quantity}</td>\r\n                                        <td className={tdStyle}>{o?.BilledRate ?? 0}</td>\r\n                                        <td className={tdStyle}>{o?.Weight + ' ' + o?.Units}</td>\r\n                                        <td className={tdStyle}>{o?.BatchLocation}</td>\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={9}>\r\n                                        OTHER DETAILS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'} rowSpan={2}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={2}>Loading Wt</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={2}>Unloading Wt</th>\r\n                                    <th className={tdStyle + ' text-center'}>Weight</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={3}>Transport Details</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>Load</th>\r\n                                    <th className={tdStyle + ' text-center'}>Empty</th>\r\n                                    <th className={tdStyle + ' text-center'}>Load</th>\r\n                                    <th className={tdStyle + ' text-center'}>Empty</th>\r\n                                    <th className={tdStyle + ' text-center'}>EX / SH</th>\r\n                                    <th className={tdStyle + ' text-center'}>Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Vehicle No</th>\r\n                                    <th className={tdStyle + ' text-center'}>Phone Number</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {TranspoterArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.Loading_Load}</td>\r\n                                        <td className={tdStyle}>{o?.Loading_Empty}</td>\r\n                                        <td className={tdStyle}>{o?.Unloading_Load}</td>\r\n                                        <td className={tdStyle}>{o?.Unloading_Empty}</td>\r\n                                        <td className={tdStyle}>{o?.EX_SH}</td>\r\n                                        <td className={tdStyle}>{o?.DriverName}</td>\r\n                                        <td className={tdStyle}>{o?.VehicleNo}</td>\r\n                                        <td className={tdStyle}>{o?.PhoneNumber}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseOrderPreviewTemplate;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","tdClass","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdIndex","horizondalalignClass","find","verticalAlignClass","Object","entries","_ref4","value","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","createSvgIcon","d","purchaseOrderDataSet","status","reduce","acc","item","isArray","ItemDetails","itemDetails","_item$BrokerId","_item$DeliveryDetails","_item$StaffDetails","_item$OwnerId","_item$PartyId","_item$TranspoterDetai","OrderDetails","Id","PoYear","PO_ID","BranchId","BrokerId","BrokerName","CreatedBy","CreatedAt","OrderStatus","DeliveryDetails","StaffDetails","LoadingDate","IsConvertedAsInvoice","OwnerId","OwnerName","PartyAddress","PartyId","PartyName","PaymentCondition","Remarks","TradeConfirmDate","TranspoterDetails","Ledger_Name","Party_District","_item$ItemDetails","fil","_item$DeliveryDetails2","WeightTotal","del","ItemId","sum","delivery","Addition","Weight","_item$BrokerId2","_item$DeliveryDetails3","_item$StaffDetails2","_item$OwnerId2","_item$PartyId2","_item$TranspoterDetai2","_item$ItemDetails2","_item$DeliveryDetails4","_item$BrokerId3","_item$DeliveryDetails5","_item$StaffDetails3","_item$OwnerId3","_item$PartyId3","_item$TranspoterDetai3","_item$BrokerId4","_item$DeliveryDetails6","_item$StaffDetails4","_item$ItemDetails3","_item$OwnerId4","_item$PartyId4","_item$TranspoterDetai4","_item$DeliveryDetails7","isGraterNumber","_item$DeliveryDetails8","statusColor","chooseColor","orderStatus","displayColumns","dialogs","setOrderPreview","navigation","products","_row$StaffDetails","staff","Cost_Category","Emp_Name","join","_row$StaffDetails2","OrderPartyName","_ref5","_row$OrderDetails","OrderActions","_ref6","_row$ItemDetails","_row$DeliveryDetails","_row$StaffDetails3","_row$TranspoterDetail","OrderItemsArray","DeliveryArray","StaffArray","TranspoterArray","display","Visibility","stateToTransfer","invoiceInfo","Branch_Id","Po_Inv_Date","ISOString","Po_Entry_Date","Retailer_Id","Retailer_Name","orderInfo","POI_St_Id","DeliveryId","OrderId","Location_Id","LocationId","Item_Id","Bill_Qty","Act_Qty","Bill_Alt_Qty","Quantity","Item_Rate","BilledRate","Amount","Multiplication","Free_Qty","Batch_No","BatchLocation","staffInfo","Involved_Emp_Id","EmployeeId","Involved_Emp_Name","Cost_Center_Type_Id","CostType","ShoppingCartCheckout","editPage","Edit","deleteOrderDialog","deleteOrderId","Delete","GeneralStatus","_ref7","OrderPO_ID","ItemPO_ID","_ref8","_row$OrderDetails$PO_","_row$OrderDetails2","ItemName","Rate","WeightWithUOM","_ref9","checkIsNumber","ItemArrivedQuantity","_ref10","_row$OrderDetails3","_row$OrderDetails3$De","PendingItemQuantity","_ref11","_row$OrderDetails4","_row$OrderDetails4$De","Subraction","ItemTradeConfirmDate","_ref12","_row$OrderDetails5","ItemOwnerName","_ref14","ItemBrokerName","_ref15","ItemActions","_ref16","ArrivedDate","_ref17","ArrivalDate","ArrivedLocation","ArrivalRate","_ref18","_row$OrderDetails7","_row$OrderDetails8","_OrderedItems$find$Ra","_OrderedItems$find","OrderedRate","ItemLOLLedgerName","_ref19","_row$OrderDetails9","ItemLOLPartyDistrict","_ref20","_row$OrderDetails10","StockItem","StockGroup","_OrderDetails$PartyNa","_OrderDetails$PartyAd","_OrderDetails$Payment","_OrderDetails$Remarks","onCloseDialog","dialog","setDialog","tdStyle","printRef","useRef","useEffect","closeDialog","handlePrint","useReactToPrint","content","current","Dialog","maxWidth","fullWidth","DialogTitle","Button","startIcon","variant","DialogContent","ref","Units","Discount","QualityCondition","_o$BilledRate","Location","Concern","BillNo","BillDate","rowSpan","Loading_Load","Loading_Empty","Unloading_Load","Unloading_Empty","EX_SH","DriverName","VehicleNo","PhoneNumber","DialogActions"],"sourceRoot":""}
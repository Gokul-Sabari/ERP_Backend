{"version":3,"file":"static/js/5640.a87a188f.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Reports/storageClosingStock/itemWise.jsx","Pages/Reports/storageClosingStock/stockInHand.jsx","Pages/Reports/storageClosingStock/variable.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/lab/TabContext/TabContext.js","../node_modules/@mui/lab/TabList/TabList.js","../node_modules/@mui/lab/TabPanel/tabPanelClasses.js","../node_modules/@mui/lab/TabPanel/TabPanel.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/material/styles/useThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Addition,\r\n    checkIsNumber,\r\n    filterableText,\r\n    groupData,\r\n    isEqualNumber,\r\n    stringCompare,\r\n    toArray,\r\n    toNumber,\r\n} from \"../../../Components/functions\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport {\r\n    Autocomplete,\r\n    Button,\r\n    Card,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    Paper,\r\n    Switch,\r\n    TextField,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    CheckBox,\r\n    CheckBoxOutlineBlank,\r\n    FilterAlt,\r\n    FilterAltOff,\r\n    Settings,\r\n} from \"@mui/icons-material\";\r\nimport { useMemo } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst ItemWiseStockReport = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    Fromdate,\r\n    Todate,\r\n    api = \"itemWise\",\r\n    defaultGrouping = \"\",\r\n    storageStockColumns = [],\r\n    groupingOption = true,\r\n    reportName = \"\",\r\n    url = \"\",\r\n}) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState(defaultGrouping);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const [columnSettings, setColumnSettings] = useState([]);\r\n    const [reportVisiblity, setReportVisiblity] = useState([]);\r\n\r\n    const propsColumns = storageStockColumns.map((col, colInd) => {\r\n        const columnState =\r\n            reportVisiblity.find((repState) =>\r\n                stringCompare(repState.columnName, col?.Column_Name)\r\n            ) || {};\r\n\r\n        return {\r\n            isVisible: 1, // Force visible for all columns\r\n            Field_Name: col?.Column_Name,\r\n            Fied_Data: col?.Data_Type,\r\n            OrderBy: columnState?.orderNum || colInd + 1,\r\n            isEnabled: true, // Default all columns to enabled\r\n        };\r\n    });\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const companyId = parseData?.Company_id;\r\n\r\n    useEffect(() => {\r\n        const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n        const companyId = parseData?.Company_id;\r\n\r\n        fetchLink({\r\n            address: `reports/reportState/columnVisiblity?reportName=${reportName}&reportUrl=${url}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setReportVisiblity(toArray(data.data));\r\n                } else setReportVisiblity([]);\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/displayLosColumn?company_id=${companyId}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    const settings = toArray(data.data);\r\n\r\n                    setColumnSettings(settings);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [reportName, url]);\r\n\r\n    useEffect(() => {\r\n        loadingOn();\r\n\r\n        Promise.all([\r\n            fetchLink({\r\n                address: `reports/storageStock/${api}?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            }),\r\n            fetchLink({\r\n                address: `reports/reportState/columnVisiblity?reportName=${reportName}&reportUrl=${url}`,\r\n            }),\r\n            fetchLink({\r\n                address: `masters/displayLosColumn?company_id=${companyId}`,\r\n            }),\r\n        ])\r\n            .then(([reportData, visibilityData, columnData]) => {\r\n                if (reportData.success) {\r\n                    setReportData(toArray(reportData.data));\r\n                }\r\n\r\n                const visibilitySettings = visibilityData.success\r\n                    ? toArray(visibilityData.data)\r\n                    : [];\r\n                setReportVisiblity(visibilitySettings);\r\n\r\n                const columnSettings = columnData.success\r\n                    ? toArray(columnData.data)\r\n                    : [];\r\n                setColumnSettings(columnSettings);\r\n\r\n\r\n                const initialColumns = storageStockColumns.map((col, colInd) => {\r\n\r\n                    const visibilitySetting = visibilitySettings.find((v) =>\r\n                        stringCompare(v.columnName, col?.Column_Name)\r\n                    );\r\n\r\n\r\n                    const columnSetting = columnSettings.find((cs) =>\r\n                        stringCompare(cs.Column_Name, col?.Column_Name)\r\n                    );\r\n\r\n                    return {\r\n                        Field_Name: col?.Column_Name,\r\n                        Fied_Data: col?.Data_Type,\r\n                        OrderBy: visibilitySetting?.orderNum || colInd + 1,\r\n                        isEnabled: true,\r\n                        isVisible: visibilitySetting ? 1 : 0,\r\n                        Alias_Name: columnSetting?.Alias_Name || col?.Alias_Name,\r\n                    };\r\n                });\r\n\r\n                setColumns(initialColumns);\r\n            })\r\n            .catch((error) => console.error(\"Fetch error:\", error))\r\n            .finally(() => loadingOff());\r\n    }, [\r\n        Fromdate,\r\n        Todate,\r\n        companyId,\r\n        api,\r\n        reportName,\r\n        url,\r\n        loadingOn,\r\n        loadingOff,\r\n    ]);\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...columns].sort((a, b) => a?.OrderBy - b?.OrderBy);\r\n    }, [columns]);\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedColumns.filter(\r\n            (col) => isEqualNumber(col.isVisible, 1) && col.isEnabled\r\n        );\r\n    }, [sortedColumns]);\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0;\r\n        const grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : reportData;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(\r\n            (fil) => filterableText(fil.Fied_Data) === \"number\"\r\n        ).map((col) => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map((grp) => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map((key) => [\r\n                        key,\r\n                        grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ),\r\n                    ])\r\n                ),\r\n            };\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered;\r\n    }, [filters, reportData, filteredData, groupBy, DisplayColumn]);\r\n\r\n    const getDisplayName = (columnName) => {\r\n        if (!columnName) return \"\";\r\n\r\n        const columnSetting = columnSettings.find(\r\n            (cs) =>\r\n                cs.Column_Name?.toLowerCase() === columnName?.toLowerCase() ||\r\n                cs.ColumnName?.toLowerCase() === columnName?.toLowerCase()\r\n        );\r\n\r\n        if (columnSetting?.Alias_Name) {\r\n            return columnSetting.Alias_Name;\r\n        }\r\n\r\n        const storageColumn = storageStockColumns.find(\r\n            (col) => col.Column_Name?.toLowerCase() === columnName?.toLowerCase()\r\n        );\r\n\r\n        if (storageColumn?.Alias_Name) {\r\n            return storageColumn.Alias_Name;\r\n        }\r\n\r\n        return columnName?.replace(/_/g, \" \");\r\n    };\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters((prevFilters) => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of sortedColumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === \"range\") {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter((item) => {\r\n                        const value = item[column.Field_Name];\r\n                        return (\r\n                            (min === undefined || value >= min) &&\r\n                            (max === undefined || value <= max)\r\n                        );\r\n                    });\r\n                } else if (filters[column.Field_Name].type === \"date\") {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter((item) => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (\r\n                            (start === undefined || dateValue >= new Date(start)) &&\r\n                            (end === undefined || dateValue <= new Date(end))\r\n                        );\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered =\r\n                        filters[column.Field_Name]?.length > 0\r\n                            ? filtered.filter((item) =>\r\n                                filters[column.Field_Name].includes(\r\n                                    item[column.Field_Name]?.toLowerCase().trim()\r\n                                )\r\n                            )\r\n                            : filtered;\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === \"number\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                min: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                max: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"date\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    start: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    end: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"string\") {\r\n            const distinctValues = [\r\n                ...new Set(\r\n                    reportData.map((item) => item[Field_Name]?.toLowerCase()?.trim())\r\n                ),\r\n            ];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={(option) => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) =>\r\n                        handleFilterChange(Field_Name, newValue)\r\n                    }\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={getDisplayName(Field_Name)}\r\n                            placeholder={`Select ${getDisplayName(Field_Name)}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    };\r\n\r\n    const resetColumns = () => {\r\n\r\n        const resetCols = propsColumns.map((col) => {\r\n            const visibilitySetting = reportVisiblity.find((v) =>\r\n                stringCompare(v.columnName, col.Field_Name)\r\n            );\r\n\r\n            return {\r\n                ...col,\r\n                isVisible: visibilitySetting ? 1 : 0,\r\n                OrderBy: visibilitySetting?.orderNum || col.OrderBy,\r\n            };\r\n        });\r\n\r\n        setColumns(resetCols);\r\n    };\r\n\r\n    const saveColumnState = () => {\r\n\r\n        const visibleColumns = columns.filter((col) =>\r\n            isEqualNumber(col.isVisible, 1)\r\n        );\r\n\r\n        fetchLink({\r\n            address: `reports/reportState/columnVisiblity`,\r\n            method: \"POST\",\r\n            bodyData: {\r\n                visibleColumns: visibleColumns.map((col) => ({\r\n                    ColumnName: col.Field_Name,\r\n                    ColumnOrder: col.OrderBy,\r\n                })),\r\n                reportName,\r\n                reportUrl: url,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(data.message);\r\n\r\n                    setReportVisiblity(\r\n                        visibleColumns.map((col) => ({\r\n                            columnName: col.Field_Name,\r\n                            orderNum: col.OrderBy,\r\n                        }))\r\n                    );\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Wise\"\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title=\"Column Visibility\">\r\n                            <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Clear Filters\">\r\n                            <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        {groupingOption && (\r\n                            <div className=\"d-flex align-items-center flex-wrap\">\r\n                                <span>Group-By: </span>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={(e) => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">select group</option>\r\n                                    {DisplayColumn.filter(\r\n                                        (fil) =>\r\n                                            filterableText(fil.Fied_Data) === \"string\" &&\r\n                                            fil?.Field_Name !== \"Ledger_Name\" &&\r\n                                            fil.isEnabled\r\n                                    ).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>\r\n                                            {getDisplayName(col?.Field_Name)}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(\r\n                            (fil) =>\r\n                                showData.length > 0 &&\r\n                                Object.keys(showData[0]).includes(fil.Field_Name) &&\r\n                                fil.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))\r\n                        : DisplayColumn.filter((col) => col.isEnabled).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))\r\n                }\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(\r\n                            (clm) => !stringCompare(clm.Field_Name, groupBy) && clm.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: getDisplayName(col.Field_Name),\r\n                        }))}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog open={filterDialog} onClose={closeDialog} maxWidth=\"sm\" fullWidth>\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title=\"Column Visibility\">\r\n                                <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Clear Filters\">\r\n                                <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n\r\n                    <div className=\"border rounded-3\">\r\n                        {DisplayColumn.filter((col) => col.isEnabled).map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className=\"mt-2 mb-1\">\r\n                                    {getDisplayName(column?.Field_Name)}\r\n                                </label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? \"bg-light\" : \"\"\r\n                                        } ${!o.isEnabled ? \"opacity-50\" : \"\"}`}\r\n                                >\r\n                                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isVisible) && o.isEnabled}\r\n                                            onChange={(e) =>\r\n                                                o.isEnabled &&\r\n                                                setColumns((prevColumns) =>\r\n                                                    prevColumns.map((oo) =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        // disabled={!o.isEnabled}\r\n                                        />\r\n                                        <h6 className=\"fa-13 mb-0 fw-bold\">\r\n                                            {getDisplayName(o.Field_Name)}\r\n                                            {!o.isEnabled && (\r\n                                                <span className=\"text-muted small\"></span>\r\n                                            )}\r\n                                        </h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : \"\"}\r\n                                        onChange={(e) =>\r\n                                            o.isEnabled &&\r\n                                            setColumns((prevColumns) =>\r\n                                                prevColumns.map((oo) =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        disabled={!o.isEnabled}\r\n                                        className=\"mt-2 p-1 border-0 cus-inpt\"\r\n                                        style={{ width: \"80px\" }}\r\n                                        placeholder=\"Order\"\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                    <Button onClick={saveColumnState} variant=\"outlined\">\r\n                        Save State\r\n                    </Button>\r\n                    <span>\r\n                        <Button onClick={resetColumns} variant=\"outlined\">\r\n                            Reset\r\n                        </Button>\r\n                        <Button onClick={() => setDialog(false)} color=\"error\">\r\n                            Close\r\n                        </Button>\r\n                    </span>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ItemWiseStockReport;\r\n","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\nimport ItemWiseStockReport from './itemWise';\r\nimport { storageStockColumnsForItemWise, storageStockColumnsForGodownWise } from './variable';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        FilterFromDate: ISOString(),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='itemWise'\r\n                    defaultGrouping=''\r\n                    storageStockColumns={storageStockColumnsForItemWise}\r\n                    reportName='stockInHand_itemWise'\r\n                    url='/erp/reports/stockInHand'\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Godown Wise',\r\n            component: (\r\n                <ItemWiseStockReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                    api='godownWise'\r\n                    defaultGrouping='Godown_Name'\r\n                    storageStockColumns={storageStockColumnsForGodownWise}\r\n                    groupingOption={false}\r\n                    reportName='stockInHand_GodownWise'\r\n                    url='/erp/reports/stockInHand'\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;","export const storageStockColumnsForItemWise = [\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n];\r\n\r\nexport const storageStockColumnsForGodownWise = [\r\n    // { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Godown_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n]\r\n\r\nexport const itemGroupWiseStockValue = [\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'Brand', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    \r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'OUT_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Expense_value', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Expense', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'CR_CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_CL_Value', Data_Type: 'number' },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\n\n/**\n * @returns {unknown}\n */\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-T-${value}`;\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n      children: childrenProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getTabPanelUtilityClass(slot) {\n  return generateUtilityClass('MuiTabPanel', slot);\n}\nconst tabPanelClasses = generateUtilityClasses('MuiTabPanel', ['root']);\nexport default tabPanelClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\nconst TabPanelRoot = styled('div', {\n  name: 'MuiTabPanel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n  const {\n      children,\n      className,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props);\n  const classes = useUtilityClasses(ownerState);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    ownerState: ownerState\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","'use client';\n\nimport systemUseThemeProps from '@mui/system/useThemeProps';\nimport defaultTheme from './defaultTheme';\nimport THEME_ID from './identifier';\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","import resolveProps from '@mui/utils/resolveProps';\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n  return resolveProps(theme.components[name].defaultProps, props);\n}","'use client';\n\nimport getThemeProps from './getThemeProps';\nimport useTheme from '../useTheme';\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  const mergedProps = getThemeProps({\n    theme,\n    name,\n    props\n  });\n  return mergedProps;\n}"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","CheckBoxOutlineBlank","checkedIcon","CheckBox","loadingOn","loadingOff","Fromdate","Todate","api","defaultGrouping","storageStockColumns","groupingOption","reportName","url","reportData","setReportData","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","columnSettings","setColumnSettings","reportVisiblity","setReportVisiblity","propsColumns","col","colInd","columnState","repState","stringCompare","columnName","Column_Name","Data_Type","OrderBy","orderNum","isEnabled","setColumns","parseData","JSON","parse","localStorage","getItem","companyId","Company_id","useEffect","fetchLink","address","then","success","toArray","catch","settings","Promise","all","visibilityData","columnData","visibilitySettings","initialColumns","visibilitySetting","v","columnSetting","cs","Alias_Name","finally","sortedColumns","useMemo","DisplayColumn","showData","keys","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","fromEntries","_grp$groupedData","groupedData","reduce","acc","colmn","Addition","toNumber","getDisplayName","_cs$Column_Name","_cs$ColumnName","ColumnName","storageColumn","_col$Column_Name","applyFilters","handleFilterChange","prevFilters","min","max","item","start","end","dateValue","Date","isArray","_filters$column$Field","_item$column$Field_Na","includes","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","placeholder","onChange","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","newValue","renderOption","props","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","closeDialog","Settings","FilterAltOff","FilterAlt","clm","Dialog","maxWidth","fullWidth","DialogContent","DialogActions","Button","DialogTitle","Switch","prevColumns","oo","checkIsNumber","width","saveColumnState","visibleColumns","method","bodyData","ColumnOrder","reportUrl","toast","message","variant","resetColumns","resetCols","tabValue","setTabValue","dateFilter","setDateFilter","ISOString","FilterFromDate","FilterTodate","tabData","ItemWiseStockReport","storageStockColumnsForItemWise","storageStockColumnsForGodownWise","htmlFor","Search","TabContext","Box","borderBottom","borderColor","TabList","indicatorColor","n","scrollButtons","tab","tabInd","Tab","TabPanel","p","pt","itemGroupWiseStockValue","createSvgIcon","d","Context","React","idPrefix","setId","Math","round","random","useUniquePrefix","context","Provider","useTabContext","getPanelId","getTabId","_excluded","ref","childrenProp","other","_objectWithoutPropertiesLoose","TypeError","child","Tabs","_extends","getTabPanelUtilityClass","slot","generateUtilityClass","generateUtilityClasses","TabPanelRoot","styled","overridesResolver","styles","root","theme","padding","spacing","inProps","useThemeProps","ownerState","classes","composeClasses","useUtilityClasses","tabId","clsx","hidden","role","defaultTheme","createTheme","createBox","themeId","THEME_ID","defaultClassName","boxClasses","generateClassName","ClassNameGenerator","generate","systemUseThemeProps","getThemeProps","components","resolveProps","useTheme"],"sourceRoot":""}
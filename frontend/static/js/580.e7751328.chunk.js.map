{"version":3,"file":"static/js/580.e7751328.chunk.js","mappings":"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","sources":["Pages/Masters/AccountingGroup.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContentText,\r\n    MenuItem,\r\n    Select,\r\n    FormControl,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit, Search } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst initialState = {\r\n    Group_Id: \"\",\r\n    Group_Name: \"\",\r\n    Alias_Name: \"\",\r\n    Parent_AC_id: \"\"\r\n};\r\n\r\nfunction AccountingGroup() {\r\n    const [reload, setReload] = useState(false);\r\n    // const [isLoading, setIsLoading] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [accountList, setAccountList] = useState([]);\r\n    const [filteredAccountList, setFilteredAccountList] = useState([]);\r\n    const [groupList, setGroupList] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const userId = user?.UserId;\r\n\r\n    useEffect(() => {\r\n        const fetchAccountGroups = async () => {\r\n            // setIsLoading(true);\r\n            try {\r\n                const data = await fetchLink({ address: `masters/accountGroup` });\r\n                if (data.success) {\r\n                    setAccountList(data.data);\r\n                    setFilteredAccountList(data.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load account groups\");\r\n            }\r\n        };\r\n\r\n        fetchAccountGroups();\r\n    }, [reload]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchGroupDropdown = async () => {\r\n            try {\r\n                const data = await fetchLink({ address: `masters/account/dropdown` });\r\n                if (data.success) setGroupList(data.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load group dropdown\");\r\n            }\r\n        };\r\n\r\n        fetchGroupDropdown();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() === \"\") {\r\n            setFilteredAccountList(accountList);\r\n        } else {\r\n            const filtered = accountList.filter(\r\n                (account) =>\r\n                (account.Group_Name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                    account.Alias_Name?.toLowerCase().includes(searchTerm.toLowerCase()))\r\n            );\r\n            setFilteredAccountList(filtered);\r\n        }\r\n    }, [searchTerm, accountList]);\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setIsSubmitting(true);\r\n        const deletedItemId = inputValue.Group_Id;\r\n\r\n        try {\r\n            setAccountList(prev => prev.filter(item => item.Group_Id !== deletedItemId));\r\n            setFilteredAccountList(prev => prev.filter(item => item.Group_Id !== deletedItemId));\r\n\r\n            const data = await fetchLink({\r\n                address: `masters/accountGroup`,\r\n                method: \"DELETE\",\r\n                bodyData: { Group_Id: deletedItemId },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"Account group deleted successfully!\");\r\n            } else {\r\n                setReload(prev => !prev);\r\n                toast.error(data.message || \"Failed to delete account group\");\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setReload(prev => !prev);\r\n            toast.error(\"Failed to delete account group\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        const { Group_Name, Alias_Name } = inputValue;\r\n        if (!Group_Name || !Alias_Name) {\r\n            toast.error(\"Please fill all required fields.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/accountGroup`,\r\n                method: \"POST\",\r\n                bodyData: {\r\n                    ...inputValue,\r\n                    Created_By: userId,\r\n                },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"Account group created successfully!\");\r\n                setIsCreateDialogOpen(false);\r\n                setInputValue(initialState);\r\n                setReload(prev => !prev);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to create account group\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const editRow = (row) => {\r\n        console.log(\"row\", row)\r\n        setInputValue({\r\n            Group_Id: row.Group_Id,\r\n            Group_Name: row.Group_Name,\r\n            Alias_Name: row.Alias_name,\r\n            Parent_AC_id: row.Parent_AC_id\r\n        });\r\n        setEditMode(true);\r\n    };\r\n\r\n    const handleEdit = () => {\r\n        const { Group_Id, Group_Name } = inputValue;\r\n        if (!Group_Id || !Group_Name) {\r\n            toast.error(\"All required fields must be filled.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        fetchLink({\r\n            address: `masters/accountGroup`,\r\n            method: \"PUT\",\r\n            bodyData: {\r\n                ...inputValue,\r\n                Alter_By: userId,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(\"Account group updated successfully!\");\r\n                    setEditMode(false);\r\n                    setInputValue(initialState);\r\n                    setReload(!reload);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                toast.error(\"Failed to update account group\");\r\n            })\r\n            .finally(() => setIsSubmitting(false));\r\n    };\r\n\r\n    const handleCloseCreateDialog = () => {\r\n        if (!isSubmitting) {\r\n            setIsCreateDialogOpen(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseEditDialog = () => {\r\n        if (!isSubmitting) {\r\n            setEditMode(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseDeleteDialog = () => {\r\n        if (!isSubmitting) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    Account Group Master\r\n                    <div className=\"d-flex align-items-center gap-3\">\r\n                        <div style={{ width: \"300px\" }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                placeholder=\"Search Group...\"\r\n                                value={searchTerm}\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: <Search fontSize=\"small\" sx={{ mr: 1 }} />,\r\n                                    style: { height: \"40px\" },\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className=\"rounded-1 btn-primary\"\r\n                            onClick={() => {\r\n                                setIsCreateDialogOpen(true);\r\n                                setInputValue(initialState);\r\n                            }}\r\n                            sx={{\r\n                                textTransform: 'none',\r\n                                fontWeight: 500,\r\n                                px: 2,\r\n                                height: '40px'\r\n                            }}\r\n                        >\r\n                            Create Account Master\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FilterableTable\r\n                    dataArray={filteredAccountList}\r\n                    EnableSerialNumber={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n                        createCol(\"Group_Name\", \"string\", \"Group\"),\r\n                        createCol(\"Alias_name\", \"string\", \"Alias Name\"),\r\n                        createCol(\"Parent_Group_Name\", \"string\", \"Parent AC\"),\r\n                        {\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <td style={{ minWidth: \"80px\" }}>\r\n                                    <IconButton onClick={() => editRow(row)} size=\"small\">\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            setOpen(true);\r\n                                            setInputValue({ Group_Id: row.Group_Id, Group_Name: row.Group_Name });\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                    >\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </td>\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Dialog\r\n                open={isCreateDialogOpen}\r\n                onClose={handleCloseCreateDialog}\r\n            >\r\n                <DialogTitle>Create Account Group</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>Group Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Group_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({ ...inputValue, Group_Name: e.target.value })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                            placeholder=\"Enter Group Name\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Alias Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Alias Name\"\r\n                            value={inputValue.Alias_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Alias_Name: e.target.value,\r\n                                })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Parent Account Group</label>\r\n                        <FormControl fullWidth>\r\n                            <Select\r\n                                labelId=\"parent-group-select-label\"\r\n                                value={inputValue.Parent_AC_id}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, Parent_AC_id: e.target.value })\r\n                                }\r\n                                displayEmpty\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {groupList.map((group) => (\r\n                                    <MenuItem key={group.Value} value={group.Value}>\r\n                                        {group.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton\r\n                        onClick={handleCloseCreateDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton\r\n                        onClick={handleCreate}\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting || !inputValue.Group_Name}\r\n                    >\r\n                        {isSubmitting ? \"Creating...\" : \"Create\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editMode}\r\n                onClose={handleCloseEditDialog}\r\n            >\r\n                <DialogTitle>Edit Account Group</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>Group Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Group_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({ ...inputValue, Group_Name: e.target.value })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Alias Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Alias_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Alias_Name: e.target.value,\r\n                                })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Parent Account Group</label>\r\n                        <FormControl fullWidth>\r\n                            <Select\r\n                                labelId=\"parent-group-edit-select-label\"\r\n                                value={inputValue.Parent_AC_id}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, Parent_AC_id: e.target.value })\r\n                                }\r\n                                displayEmpty\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {groupList.map((group) => (\r\n                                    <MenuItem key={group.Value} value={group.Value}>\r\n                                        {group.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton\r\n                        onClick={handleCloseEditDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton\r\n                        onClick={handleEdit}\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting || !inputValue.Group_Name}\r\n                    >\r\n                        {isSubmitting ? \"Updating...\" : \"Update\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleCloseDeleteDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Confirmation\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <b  >{`Do you want to delete the ${inputValue.Group_Name} Group?`}</b>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={handleCloseDeleteDialog}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus sx={{ color: 'red' }}>\r\n                        {isSubmitting ? \"Deleting...\" : \"Delete\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AccountingGroup;"],"names":["initialState","Group_Id","Group_Name","Alias_Name","Parent_AC_id","reload","setReload","useState","open","setOpen","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editMode","setEditMode","accountList","setAccountList","filteredAccountList","setFilteredAccountList","groupList","setGroupList","searchTerm","setSearchTerm","isSubmitting","setIsSubmitting","user","JSON","parse","localStorage","getItem","userId","UserId","useEffect","async","data","fetchLink","address","success","e","console","error","toast","fetchAccountGroups","fetchGroupDropdown","trim","filtered","filter","account","_account$Group_Name","_account$Alias_Name","toLowerCase","includes","handleCloseCreateDialog","handleCloseEditDialog","handleCloseDeleteDialog","_jsxs","_Fragment","children","className","_jsx","style","width","TextField","fullWidth","size","variant","placeholder","value","onChange","target","InputProps","startAdornment","Search","fontSize","sx","mr","height","Button","onClick","textTransform","fontWeight","px","FilterableTable","dataArray","EnableSerialNumber","maxHeightOption","columns","createCol","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","minWidth","IconButton","log","Alias_name","editRow","Edit","color","Delete","Dialog","onClose","DialogTitle","DialogContent","type","_objectSpread","FormControl","Select","labelId","displayEmpty","MenuItem","map","group","Value","label","DialogActions","MuiButton","disabled","method","bodyData","Created_By","prev","message","handleEdit","Alter_By","then","catch","finally","id","DialogContentText","concat","deletedItemId","item","autoFocus"],"sourceRoot":""}
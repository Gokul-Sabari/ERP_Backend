{"version":3,"file":"static/js/8076.9c0bce10.chunk.js","mappings":"yOAIA,MAgIA,EAhIgCA,IAAoB,IAAnB,UAAEC,GAAWD,EAC1C,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAgCzC,OA9BAC,EAAAA,EAAAA,YAAU,KAGN,MAkBMC,GApBKC,MAAMC,QAAQP,GAAa,IAAIA,GAAa,IAEhCQ,KAAIC,IAAC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBN,GAAC,IACJO,OAAoB,QAAdN,EAAED,EAAEQ,kBAAU,IAAAP,EAAAA,EAAI,EACxBQ,OAAoB,QAAdP,EAAEF,EAAEU,kBAAU,IAAAR,EAAAA,EAAI,EACxBS,OAAoB,QAAdR,EAAEH,EAAEY,kBAAU,IAAAT,EAAAA,EAAI,EACxBU,OAAoB,QAAdT,EAAEJ,EAAEc,kBAAU,IAAAV,EAAAA,EAAI,EACxBW,QAA2B,QAApBV,EAAEL,EAAEgB,wBAAgB,IAAAX,EAAAA,EAAI,EAC/BY,YAAYC,EAAAA,EAAAA,IAAUlB,EAAEmB,iBAAkB,YAC1CA,iBAAkBnB,EAAEmB,iBAAiBpB,KAAIqB,IAAE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpCc,GAAE,IACLb,OAAqB,QAAfc,EAAED,EAAGM,kBAAU,IAAAL,EAAAA,EAAI,EACzBZ,OAAqB,QAAfa,EAAEF,EAAGO,kBAAU,IAAAL,EAAAA,EAAI,EACzBX,OAAqB,QAAfY,EAAEH,EAAGQ,kBAAU,IAAAL,EAAAA,EAAI,EACzBV,OAAqB,QAAfW,EAAEJ,EAAGS,kBAAU,IAAAL,EAAAA,EAAI,EACzBT,QAA4B,QAArBU,EAAEL,EAAGU,wBAAgB,IAAAL,EAAAA,EAAI,GAAC,KAClC,IAGsB1B,KAAIC,IAACM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BN,GAAC,IACJiB,YAAYC,EAAAA,EAAAA,IAAUlB,EAAEmB,iBAAkB,gBAG9C1B,EAAYG,EAAW,GAExB,CAACL,KAGAwC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZ3C,UAAWC,EACX2C,cAAc,EACdC,QAAS,CACL,CACIC,WAAY,cACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,aACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,WAGnBC,eAAgBC,IAAc,IAAb,IAAEC,GAAKD,EACpB,OACIV,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZS,iBAAkB,GAClBpD,UAAWM,MAAMC,QAAQ4C,EAAIvB,kBAAoBuB,EAAIvB,iBAAmB,GACxEiB,QAAS,CACL,CACIC,WAAY,qBACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,WACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,YAIrB,EAGVK,eAAgB,OAEb,ECYnB,EAvImCtD,IAA0B,IAAzB,UAAEC,EAAS,KAAEsD,GAAMvD,EACnD,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAkCzC,OAhCAC,EAAAA,EAAAA,YAAU,KAGN,MAoBMC,GAtBKC,MAAMC,QAAQP,GAAa,IAAIA,GAAa,IAEhCQ,KAAIC,IAAC,IAAA8C,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA5C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBN,GAAC,IACJO,OAAgE,QAA1DuC,GAAEK,EAAAA,EAAAA,IAASnD,EAAEQ,YAAa4C,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAN,EAAAA,EAAI,EACpErC,OAAgE,QAA1DsC,GAAEI,EAAAA,EAAAA,IAASnD,EAAEU,YAAa0C,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAL,EAAAA,EAAI,EACpEpC,OAAgE,QAA1DqC,GAAEG,EAAAA,EAAAA,IAASnD,EAAEY,YAAawC,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAJ,EAAAA,EAAI,EACpEnC,OAAgE,QAA1DoC,GAAEE,EAAAA,EAAAA,IAASnD,EAAEc,YAAasC,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAH,EAAAA,EAAI,EACpElC,QAAyE,QAAlEmC,GAAEC,EAAAA,EAAAA,IAASnD,EAAEgB,kBAAmBoC,EAAAA,EAAAA,IAAwB,IAAM,WAAI,IAAAF,EAAAA,EAAI,EAC7EjC,YAAYC,EAAAA,EAAAA,IAAUlB,EAAEmB,iBAAkB,YAC1CkC,YAAYnC,EAAAA,EAAAA,IAAUlB,EAAEmB,iBAAkB,YAAc0B,EACxD1B,iBAAkBnB,EAAEmB,iBAAiBpB,KAAIqB,IAAE,IAAAkC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpCc,GAAE,IACLuC,iBAAkBvC,EAAGwC,mBACrBrD,OAAiE,QAA3D+C,GAAEH,EAAAA,EAAAA,IAAS/B,EAAGM,YAAa0B,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAE,EAAAA,EAAI,EACrE7C,OAAiE,QAA3D8C,GAAEJ,EAAAA,EAAAA,IAAS/B,EAAGO,YAAayB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAG,EAAAA,EAAI,EACrE5C,OAAiE,QAA3D6C,GAAEL,EAAAA,EAAAA,IAAS/B,EAAGQ,YAAawB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAI,EAAAA,EAAI,EACrE3C,OAAiE,QAA3D4C,GAAEN,EAAAA,EAAAA,IAAS/B,EAAGS,YAAauB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAK,EAAAA,EAAI,EACrE1C,QAA0E,QAAnE2C,GAAEP,EAAAA,EAAAA,IAAS/B,EAAGU,kBAAmBsB,EAAAA,EAAAA,IAAwB,IAAM,WAAI,IAAAM,EAAAA,EAAI,GAAC,KAChF,IAGsB3D,KAAIC,IAACM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BN,GAAC,IACJiB,YAAYC,EAAAA,EAAAA,IAAUlB,EAAEmB,iBAAkB,gBAG9C1B,EAAYG,EAAW,GAExB,CAACL,KAGAwC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZ3C,UAAWC,EACX2C,cAAc,EACdC,QAAS,CACL,CACIC,WAAY,cACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,aACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,aACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,WAGnBC,eAAgBC,IAAc,IAAb,IAAEC,GAAKD,EACpB,OACIV,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZS,iBAAkB,GAClBpD,UAAWM,MAAMC,QAAQ4C,EAAIvB,kBAAoBuB,EAAIvB,iBAAmB,GACxEiB,QAAS,CACL,CACIC,WAAY,mBACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,WACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,YAIrB,EAGVK,eAAgB,OAEb,E,oCC3HnB,MAAMiB,EAAgBvE,IAAoC,IAAnC,IAAEoD,EAAG,SAAEoB,EAAQ,OAAEC,EAAM,GAAEC,GAAI1E,EAChD,MAAO2E,EAAWC,IAAgBxE,EAAAA,EAAAA,UAAS,KACpCyE,EAAWC,IAAgB1E,EAAAA,EAAAA,UAAS,IAoB3C,OAlBAC,EAAAA,EAAAA,YAAU,MACN0E,EAAAA,EAAAA,GAAU,CACNC,QAAQ,mDAADC,OAAqDT,EAAQ,YAAAS,OAAWR,EAAM,eAAAQ,OAAiB,OAAH7B,QAAG,IAAHA,OAAG,EAAHA,EAAK8B,iBACxGC,QAAS,CACL,GAAMT,KAEXU,MAAKjC,IAAgC,IAA/B,QAAEkC,EAAO,KAAEC,EAAI,OAAEC,GAAQpC,EAC9B,GAAIkC,EAAS,CACT,MAAM,aAAEG,GAAiBD,EACzBX,EAAaU,GACbR,GAAaW,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASyE,GAAG,IAAEC,UAAWnF,MAAMC,QAAQgF,GAAgBA,EAAe,MAC1F,MACIZ,EAAa,GACjB,IAEHe,MAAMC,QAAQC,MAAM,GACtB,CAAI,OAAHzC,QAAG,IAAHA,OAAG,EAAHA,EAAK8B,gBAAiBV,EAAUC,KAGhChC,EAAAA,EAAAA,KAACqD,EAAAA,EAAgB,CAAC7F,UAAW0E,EAAW7B,QAAS+B,EAAUa,WAAa,EA8KhF,EAzKoBK,KAChB,MAAMC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,UACzCzB,EAAWC,IAAgBxE,EAAAA,EAAAA,UAAS,OACpCyE,EAAWC,IAAgB1E,EAAAA,EAAAA,UAAS,CACvCsF,UAAW,GACXW,cAAe,MAEZC,EAAoBC,IAAyBnG,EAAAA,EAAAA,UAAS,OACtDoG,EAASC,IAAcrG,EAAAA,EAAAA,UAAS,CACnCoE,UAAUkC,EAAAA,EAAAA,IAAgB,GAC1BjC,QAAQkC,EAAAA,EAAAA,MACRC,WAAY,cACZC,cAAc,EACdC,QAAQ,KA2CZzG,EAAAA,EAAAA,YAAU,KACNuE,EAAa,MACb2B,EAAsB,MACtBzB,EAAa,CACTY,UAAW,GACXW,cAAe,MA5CnBtB,EAAAA,EAAAA,GAAU,CACNC,QAAQ,uCAADC,OAAgD,OAAPuB,QAAO,IAAPA,OAAO,EAAPA,EAAShC,SAAQ,YAAAS,OAAkB,OAAPuB,QAAO,IAAPA,OAAO,EAAPA,EAAS/B,QACrFU,QAAS,CACL,GAAa,OAAPa,QAAO,IAAPA,OAAO,EAAPA,EAASe,cAEpB3B,MAAK4B,IAAgC,IAA/B,QAAE3B,EAAO,KAAEC,EAAI,OAAEC,GAAQyB,EAC9B,GAAI3B,EAAS,CACT,MAAM,aAAEG,GAAiBD,EACzBX,EAAaU,GACbR,GAAaW,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASyE,GAAG,IAAEC,UAAWnF,MAAMC,QAAQgF,GAAgBA,EAAe,MAC1F,MACIZ,EAAa,GACjB,IAEHe,MAAMC,QAAQC,QAEfd,EAAAA,EAAAA,GAAU,CACNC,QAAQ,yCAADC,OAAkD,OAAPuB,QAAO,IAAPA,OAAO,EAAPA,EAAShC,SAAQ,YAAAS,OAAkB,OAAPuB,QAAO,IAAPA,OAAO,EAAPA,EAAS/B,QACvFU,QAAS,CACL,GAAa,OAAPa,QAAO,IAAPA,OAAO,EAAPA,EAASe,cAEpB3B,MAAKE,IACJ,GAAIA,EAAKD,QAAS,CAAC,IAAD4B,EACd,MAAM,aAAEzB,GAAqB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,OAEzB2B,EAAe3G,MAAMC,QAAY,OAAJ8E,QAAI,IAAJA,GAAY,QAAR2B,EAAJ3B,EAAMC,cAAM,IAAA0B,OAAR,EAAJA,EAAcE,aAAe7B,EAAKC,OAAO4B,YAAY1G,KAAI2G,IAAGpG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxFoG,GAAG,IACNvF,iBAAkBtB,MAAMC,QAAQ8E,EAAKA,MAAQ,IAAIA,EAAKA,MAAM+B,QAAOC,GAAcA,EAAWC,cAAgBH,EAAIG,cAAe,OAC7H,GAENzC,GAAaW,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASyE,GAAG,IAAEY,cAAe9F,MAAMC,QAAQgF,GAAgBA,EAAe,OAC1Fe,EAAsBW,EAC1B,MACIX,EAAsB,GAC1B,IAEHZ,OAAM6B,GAAK5B,QAAQC,MAAM2B,IAUf,GACZ,CAAChB,EAAQM,SAEZ,MAAMW,EAAcA,KAChBhB,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEoB,cAAc,KAAS,EAGlDa,GAAgBC,EAAAA,EAAAA,IAAY,IAAIC,KAAKpB,EAAQhC,UAAW,IAAIoD,KAAKpB,EAAQ/B,SAE/E,OACIhC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACLkF,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,UAAU,OAAMpF,SAAA,EAClBkF,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gFAAgFC,MAAO,CAAEC,gBAAiB,WAAYtF,SAAA,EACjIF,EAAAA,EAAAA,KAAA,QAAAE,SACY,OAAPqD,QAAO,IAAPA,OAAO,EAAPA,EAASkC,gBAEdzF,EAAAA,EAAAA,KAAA,QAAAE,UACIkF,EAAAA,EAAAA,MAAA,UACIM,MAAO3B,EAAQI,WACfmB,UAAU,yCACVK,SAAUZ,GAAKf,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEmB,WAAYY,EAAEa,OAAOF,UAAUxF,SAAA,EAE3EF,EAAAA,EAAAA,KAAA,UAAQ0F,MAAO,cAAcxF,SAAC,kBAC9BF,EAAAA,EAAAA,KAAA,UAAQ0F,MAAO,eAAexF,SAAC,mBAC/BF,EAAAA,EAAAA,KAAA,UAAQ0F,MAAO,oBAAoBxF,SAAC,+BAKhDkF,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAAA3F,SAAA,EAERkF,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMpF,SAAA,EACjBF,EAAAA,EAAAA,KAAA,SACI8F,KAAM,OACNR,UAAU,6CACVI,MAAO3B,EAAQhC,SACf4D,SAAUZ,GAAKf,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEjB,SAAUgD,EAAEa,OAAOF,aAGnE1F,EAAAA,EAAAA,KAAA,SACI8F,KAAM,OACNR,UAAU,wCACVI,MAAO3B,EAAQ/B,OACf2D,SAAUZ,GAAKf,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEhB,OAAQ+C,EAAEa,OAAOF,aAGjE1F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,MAAM,cAAa9F,UACxBF,EAAAA,EAAAA,KAACiG,EAAAA,EAAU,CACPC,QAASA,IAAMlC,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEqB,QAASrB,EAAIqB,WACzD8B,KAAK,QACLb,UAAU,OAAMpF,UAEhBF,EAAAA,EAAAA,KAACoG,EAAAA,EAAO,SAIhBpG,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,MAAM,UAAS9F,UACpBF,EAAAA,EAAAA,KAACiG,EAAAA,EAAU,CACPC,QAASA,IAAMlC,GAAWhB,IAAGzE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyE,GAAG,IAAEoB,cAAc,MAC1D+B,KAAK,QACLb,UAAU,qBAAoBpF,UAE9BF,EAAAA,EAAAA,KAACqG,EAAAA,EAAS,WAKP,OAAdnE,GAA6C,gBAAvB6B,EAAQI,aAC3BnE,EAAAA,EAAAA,KAAA,MAAIsF,UAAU,wBAAuBpF,SAAC,kCAGjB,OAAvB2D,IAAuD,iBAAvBE,EAAQI,YAAwD,sBAAvBJ,EAAQI,cAC/EnE,EAAAA,EAAAA,KAAA,MAAIsF,UAAU,wBAAuBpF,SAAC,mCAGjB,gBAAvB6D,EAAQI,YAAgCrG,MAAMC,QAAQmE,KAEpDlC,EAAAA,EAAAA,KAACqD,EAAAA,EAAgB,CACb7F,UAAW0E,EACX7B,QAAS+B,EAAUa,UACnBqD,eAAgBC,IAAA,IAAC,IAAE5F,GAAK4F,EAAA,OACpBvG,EAAAA,EAAAA,KAAC8B,EAAa,CACVnB,IAAKA,EACLsB,GAAW,OAAPsB,QAAO,IAAPA,OAAO,EAAPA,EAASe,WACbvC,SAAiB,OAAPgC,QAAO,IAAPA,OAAO,EAAPA,EAAShC,SACnBC,OAAe,OAAP+B,QAAO,IAAPA,OAAO,EAAPA,EAAS/B,QACnB,EAENwE,eAAe,IAIE,iBAAvBzC,EAAQI,YAAiCrG,MAAMC,QAAQ8F,KACrD7D,EAAAA,EAAAA,KAACyG,EAAuB,CAACrC,aAAcL,EAAQK,aAAcY,YAAaA,EAAaxH,UAAWqG,IAG7E,sBAAvBE,EAAQI,YAAsCrG,MAAMC,QAAQ8F,KAC1D7D,EAAAA,EAAAA,KAAC0G,EAA0B,CAACtC,aAAcL,EAAQK,aAAcY,YAAaA,EAAaxH,UAAWqG,EAAoB/C,KAAMmE,WAIpI,C","sources":["Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/LedgerTransaction.jsx"],"sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal } from \"../../../Components/functions\";\r\n\r\nconst ProductBasedSalesReport = ({ dataArray }) => {\r\n    const [showData, setShowData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\r\n\r\n        const modifyCol = temp.map(o => ({\r\n            ...o,\r\n            M2_Avg: o.ALL_Avg_M2 ?? 0,\r\n            M3_Avg: o.ALL_Avg_M3 ?? 0,\r\n            M6_Avg: o.ALL_Avg_M6 ?? 0,\r\n            M9_Avg: o.ALL_Avg_M9 ?? 0,\r\n            M12_Avg: o.ALL_Avg_One_Year ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                M2_Avg: st.M2_AVG_Qty ?? 0,\r\n                M3_Avg: st.M3_AVG_Qty ?? 0,\r\n                M6_Avg: st.M6_AVG_Qty ?? 0,\r\n                M9_Avg: st.M9_AVG_Qty ?? 0,\r\n                M12_Avg: st.One_Year_AVG_Qty ?? 0,\r\n            }))\r\n        }));\r\n\r\n        const withQtySum = modifyCol.map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n        setShowData(withQtySum)\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Item_Name_Modified',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductBasedSalesReport;","import { Fragment, useEffect, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\r\n\r\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\r\n    const [showData, setShowData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let temp = Array.isArray(dataArray) ? [...dataArray] : [];\r\n\r\n        const modifyCol = temp.map(o => ({\r\n            ...o,\r\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                Grade_Item_Group: st.Item_Name_Modified,\r\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            }))\r\n        }));\r\n\r\n        const withQtySum = modifyCol.map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n        setShowData(withQtySum)\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Grade_Item_Group',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductDayBasedSalesReport;","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { DaysBetween, getPreviousDate, ISOString } from \"../../Components/functions\";\r\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\r\nimport ProductDayBasedSalesReport from \"./SalesReportComponent//ProductDayBasedTable\";\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\n\r\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n        .catch(console.error);\r\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\r\n\r\n    return (\r\n        <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\n\r\nconst SalesReport = () => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState({\r\n        salesInfo: [],\r\n        salesItemInfo: [],\r\n    })\r\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        ReportType: 'LedgerBased',\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n        .catch(console.error);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const { dataTypeInfo } = data?.others;\r\n\r\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\r\n                    ...los,\r\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\r\n                })) : [];\r\n\r\n                setDataTypes(pre => ({...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\r\n                setSalesDataOfProduct(combinedData);\r\n            } else {\r\n                setSalesDataOfProduct([])\r\n            }\r\n        })\r\n        .catch(e => console.error(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setSalesDataOfProduct(null);\r\n        setDataTypes({\r\n            salesInfo: [],\r\n            salesItemInfo: [],\r\n        })\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({ ...pre, filterDialog: false }))\r\n    }\r\n\r\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        {storage?.Company_Name}\r\n                    </span>\r\n                    <span>\r\n                        <select\r\n                            value={filters.ReportType}\r\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\r\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\r\n                        >\r\n                            <option value={'LedgerBased'}>Ledger Based</option>\r\n                            <option value={'ProductBased'}>Product Based</option>\r\n                            <option value={'ProductDayAverage'}>Product/Day Based</option>\r\n                        </select>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <input\r\n                            type={'date'}\r\n                            className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                            value={filters.Fromdate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                        />\r\n\r\n                        <input\r\n                            type={'date'}\r\n                            className='cus-inpt w-auto ps-3 border rounded-5'\r\n                            value={filters.Todate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                        />\r\n\r\n                        <Tooltip title='Reload Data'>\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\r\n                                size=\"small\"\r\n                                className=\"ms-2\"\r\n                            >\r\n                                <Refresh />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n\r\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\r\n                    )}\r\n\r\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\r\n                        // <LedgerBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesData} />\r\n                        <DisplayArrayData \r\n                            dataArray={salesData} \r\n                            columns={dataTypes.salesInfo} \r\n                            ExpandableComp={({ row }) => (\r\n                                <LedgerDetails \r\n                                    row={row} \r\n                                    DB={storage?.Company_id} \r\n                                    Fromdate={filters?.Fromdate} \r\n                                    Todate={filters?.Todate} \r\n                                />\r\n                            )}\r\n                            enableFilters={true} \r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SalesReport;"],"names":["_ref","dataArray","showData","setShowData","useState","useEffect","withQtySum","Array","isArray","map","o","_o$ALL_Avg_M","_o$ALL_Avg_M2","_o$ALL_Avg_M3","_o$ALL_Avg_M4","_o$ALL_Avg_One_Year","_objectSpread","M2_Avg","ALL_Avg_M2","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","StockTransaction","st","_st$M2_AVG_Qty","_st$M3_AVG_Qty","_st$M6_AVG_Qty","_st$M9_AVG_Qty","_st$One_Year_AVG_Qty","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","_jsx","Fragment","children","FilterableTable","isExpendable","columns","Field_Name","isVisible","Fied_Data","expandableComp","_ref2","row","initialPageCount","tableMaxHeight","days","_Division","_Division2","_Division3","_Division4","_Division5","Division","getDaysInPreviousMonths","Billed_Avg","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","fetchLink","address","concat","Ledger_Tally_Id","headers","then","success","data","others","dataTypeInfo","pre","salesInfo","catch","console","error","DisplayArrayData","SalesReport","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","filters","setFilters","getPreviousDate","ISOString","ReportType","filterDialog","reload","Company_id","_ref3","_data$others","combinedData","LOSAbstract","los","filter","losDetails","Stock_Group","e","closeDialog","daysDifferent","DaysBetween","Date","_jsxs","Card","className","style","backgroundColor","Company_Name","value","onChange","target","CardContent","type","Tooltip","title","IconButton","onClick","size","Refresh","FilterAlt","ExpandableComp","_ref4","enableFilters","ProductBasedSalesReport","ProductDayBasedSalesReport"],"sourceRoot":""}
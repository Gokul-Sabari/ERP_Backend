{"version":3,"file":"static/js/7712.cf730230.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/SalesDeliveryConvert.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Button,\r\n    Dialog,\r\n    Tooltip,\r\n    TextField,\r\n    IconButton,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Switch,\r\n} from \"@mui/material\";\r\nimport \"../../common.css\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport {\r\n    getPreviousDate,\r\n    isEqualNumber,\r\n    ISOString,\r\n    isValidObject,\r\n} from \"../../../Components/functions\";\r\n// import NewDeliveryOrder from \"../SalesReportComponent/newInvoiceTemplate\";\r\nimport { FilterAlt, Visibility } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport NewDeliveryOrder from \"../SalesReportComponent/NewDeliveryOrder\";\r\nimport InvoiceBillTemplate from \"./newInvoiceTemplate\";\r\n\r\nimport TwoWheelerIcon from \"@mui/icons-material/TwoWheeler\";\r\nimport DeliveryDetailsList from \"./DeliveryDetailsList\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SalesDeliveryConvert = ({ loadingOn, loadingOff }) => {\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [screen, setScreen] = useState(true);\r\n    const [orderInfo, setOrderInfo] = useState({});\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [reload, setReload] = useState(false);\r\n    const [routes, setRoutes] = useState([]);\r\n    const [area, setArea] = useState([]);\r\n    const [isDeliveryDetailsVisible, setIsDeliveryDetailsVisible] =\r\n        useState(false);\r\n    const [godDown, setGodDown] = useState([]);\r\n    const checked = useState(true);\r\n    // const [Product_Array, setProductArray] = useState([]);\r\n\r\n    const Created_by = storage?.UserId;\r\n    const Branch_Id = storage?.BranchId;\r\n    // const Cost_Center_Type_Id = storage?.UserTypeId\r\n    const [deliveryDialogBox, setDeliveryDialogBox] = useState(false);\r\n\r\n    const handleCloseDialog = () => setDeliveryDialogBox(false);\r\n\r\n    // const [deliveryPerson, setDeliveryPerson] = useState(null);\r\n    // const [deliveryPersonList, setDeliveryPersonList] = useState([]);\r\n    const [DeliveryList, setDeliveryList] = useState([]);\r\n\r\n    const initialValue = {\r\n        Fromdate: getPreviousDate(7),\r\n        Todate: ISOString(),\r\n        Retailer_Id: \"\",\r\n        RetailerGet: \"ALL\",\r\n        Created_by: \"\",\r\n        CreatedByGet: \"ALL\",\r\n        Sales_Person_Id: \"\",\r\n        SalsePersonGet: \"ALL\",\r\n        Cancel_status: 0,\r\n        Route_Id: \"\",\r\n        RoutesGet: \"ALL\",\r\n        Area_Id: \"\",\r\n        AreaGet: \"ALL\",\r\n    };\r\n\r\n    const [filters, setFilters] = useState(initialValue);\r\n    const [reloadKey, setReloadKey] = useState(false);\r\n\r\n    const handleReload = () => setReloadKey(prev => !prev);\r\n\r\n\r\n\r\n    const [deliveryDetails, setDeliveryDetails] = useState({\r\n        Do_Date: ISOString(),\r\n        Vehicle_No: \"\",\r\n        Trip_No: \"\",\r\n        Trip_Date: ISOString(),\r\n        StartTime: \"\",\r\n        Created_by: \"\",\r\n        Delivery_Person_Id: \"\",\r\n        Delivery_Location: \"\",\r\n        Delivery_Time: \"\",\r\n        Payment_Ref_No: \"\",\r\n        Payment_Mode: \"\",\r\n        Payment_Status: \"\",\r\n        Narration: \"\",\r\n        Alter_Id: \"\",\r\n        Delivery_Status: \"\",\r\n        GoDown_Id: \"\",\r\n        GodDown_Name: \"\",\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDeliveryDetails((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    const triggerReload = () => {\r\n        setReload((prev) => !prev);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleDelivery?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}&Retailer_Id=${filters?.Retailer_Id}&Sales_Person_Id=${filters?.Sales_Person_Id}&Created_by=${filters?.Created_by}&Cancel_status=${filters?.Cancel_status}&Route_Id=${filters?.Route_Id}&Area_Id=${filters?.Area_Id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSaleOrders(data?.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [\r\n        filters.Fromdate,\r\n        filters?.Todate,\r\n        filters?.Retailer_Id,\r\n        filters?.Sales_Person_Id,\r\n        filters?.Created_by,\r\n        filters?.Cancel_status,\r\n        filters?.Route_Id,\r\n        filters?.Area_Id,\r\n        reload,\r\n        reloadKey\r\n    ]);\r\n\r\n    const handleSubmit = async () => {\r\n        // const EmployeesInvolved = {\r\n        //     Trip_ST_KM: deliveryDetails.Trip_ST_KM || \"\",\r\n        //     Branch_Id: deliveryDetails.Branch_Id || \"\",\r\n        //     Vehicle_No: deliveryDetails.Vehicle_No || \"\",\r\n        //     Trip_No: deliveryDetails.Trip_No || \"\",\r\n        //     StartTime: deliveryDetails.StartTime || \"\",\r\n        //     Delivery_Person_Id: deliveryPerson?.UserId || \"\",\r\n        //     Delivery_Location: deliveryDetails.Delivery_Location || \"\",\r\n        //     Alter_Id: deliveryDetails.Alter_Id || \"\",\r\n        //     Delivery_Status: deliveryDetails.Delivery_Status || \"\",\r\n        //     Cost_Center_Type_Id: Cost_Center_Type_Id,\r\n\r\n        // };\r\n\r\n        const tripData = {\r\n            ...deliveryDetails,\r\n            DeliveryList,\r\n\r\n            Branch_Id: Branch_Id,\r\n            Created_by: Created_by,\r\n        };\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `delivery/multipleDelivery`,\r\n                method: \"POST\",\r\n                bodyData: tripData,\r\n            });\r\n\r\n            if (!response.success) {\r\n                toast.error(response.message);\r\n                // handleCloseDialog(true);\r\n                return false;\r\n            }\r\n            toast.success(response.message);\r\n            setFilters(initialValue);\r\n            setReload((prev) => !prev);\r\n            handleCloseDialog(true);\r\n            setSelectedRows([]);\r\n        } catch (error) {\r\n            handleCloseDialog(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setRetailers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setSalePerson(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUsers(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `/dataEntry/godownLocationMaster`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setGodDown(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        // fetchLink({\r\n        //     address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        // }).then(data => {\r\n        //     if (data.success) {\r\n        //         setDeliveryPersonList(data.data);\r\n        //     }\r\n        // }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/routes/dropdown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setRoutes(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/areas/dropdown?Company_id=${storage?.Company_id}`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setArea(data.data);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        const isSelected = selectedRows.some(\r\n            (selectedRow) => selectedRow.So_Id === row.So_Id\r\n        );\r\n\r\n        if (isSelected) {\r\n            setSelectedRows(\r\n                selectedRows.filter((selectedRow) => selectedRow.So_Id !== row.So_Id)\r\n            );\r\n        } else {\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n    const saleOrderColumn = [\r\n        {\r\n            Field_Name: \"checkbox\",\r\n            ColumnHeader: \"\",\r\n            isVisible: 1,\r\n            pointer: true,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const isSelected = selectedRows.some(\r\n                    (selectedRow) => selectedRow.So_Id === row.So_Id\r\n                );\r\n\r\n                return (\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleCheckboxChange(row)}\r\n                        disabled={row?.isConverted !== 0}\r\n                        onFocus={(e) => {\r\n                            e.target.blur();\r\n                        }}\r\n                        style={{\r\n                            cursor: \"pointer\",\r\n                            transform: \"scale(1.5)\",\r\n                            width: \"14px\",\r\n                            height: \"20px\",\r\n                        }}\r\n                    />\r\n                );\r\n            },\r\n        },\r\n        {\r\n            Field_Name: \"So_Id\",\r\n            ColumnHeader: \"Order ID\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"Retailer_Name\",\r\n            ColumnHeader: \"Customer\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n        },\r\n        {\r\n            Field_Name: \"So_Date\",\r\n            ColumnHeader: \"Sale Order Date\",\r\n            Fied_Data: \"date\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"So_Inv_No\",\r\n            ColumnHeader: \"So_Inv_No\",\r\n            Fied_Data: \"string\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        // {\r\n        //     Field_Name: 'Products',\r\n        //     ColumnHeader: 'Products / Quantity',\r\n        //     isVisible: 1,\r\n        //     align: 'center',\r\n        //     isCustomCell: true,\r\n        //     Cell: ({ row }) => (\r\n        //         <>\r\n        //             <span>{row?.Products_List?.length ?? 0}</span> /&nbsp;\r\n        //             <span>{row?.Products_List?.reduce((sum, item) => sum += item?.Bill_Qty ?? 0, 0) ?? 0}</span>\r\n        //         </>\r\n        //     )\r\n        // },\r\n        {\r\n            Field_Name: \"Total_Before_Tax\",\r\n            ColumnHeader: \"Before Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Tax\",\r\n            ColumnHeader: \"Tax\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            Field_Name: \"Total_Invoice_value\",\r\n            ColumnHeader: \"Invoice Value\",\r\n            Fied_Data: \"number\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n        },\r\n        {\r\n            ColumnHeader: \"Status\",\r\n            isVisible: 1,\r\n            align: \"center\",\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const convert = convertedStatus.find(\r\n                    (status) => status.id === Number(row?.isConverted)\r\n                );\r\n                return (\r\n                    <span\r\n                        className={\r\n                            \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                            \"bg-secondary text-white\"\r\n                        }\r\n                    >\r\n                        {convert?.label ?? \"Undefined\"}\r\n                    </span>\r\n                );\r\n            },\r\n        },\r\n\r\n        {\r\n            Field_Name: \"Action\",\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return (\r\n                    <>\r\n                        <Tooltip title=\"View Order\">\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List ? row?.Products_List : [],\r\n                                    });\r\n                                }}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                            >\r\n                                <Visibility className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Sales Delivery\">\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    switchScreen();\r\n                                    setOrderInfo({ ...row });\r\n                                }}\r\n                                size=\"small\"\r\n                            >\r\n                                <TwoWheelerIcon className=\"fa-16\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const setTripDetails = (data) => {\r\n        if (!Array.isArray(data)) {\r\n            console.error(\"Invalid data format. Expected an array.\");\r\n            return;\r\n        }\r\n\r\n        setDeliveryDialogBox(true);\r\n\r\n        const DeliveryList = [];\r\n        const Product_Array = [];\r\n\r\n        data.forEach((item) => {\r\n            if (item) {\r\n                DeliveryList.push(item);\r\n\r\n                if (item.Products_List && Array.isArray(item.Products_List)) {\r\n                    Product_Array.push(...item.Products_List);\r\n                }\r\n            }\r\n        });\r\n\r\n        setDeliveryList(DeliveryList);\r\n\r\n        setDeliveryDetails({\r\n            DeliveryList,\r\n            Product_Array,\r\n        });\r\n    };\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Branch</td>\r\n                            <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                            <td className=\"border p-2 bg-light\">Round off</td>\r\n                            <td className=\"border p-2\">{row.Round_off}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.GST_Inclusive, 1) && \"Inclusive\"}\r\n                                {isEqualNumber(row.GST_Inclusive, 0) && \"Exclusive\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                            <td className=\"border p-2\">\r\n                                {isEqualNumber(row.IS_IGST, 1) && \"IGST\"}\r\n                                {isEqualNumber(row.IS_IGST, 0) && \"GST\"}\r\n                            </td>\r\n                            <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                            <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border p-2 bg-light\">Narration</td>\r\n                            <td className=\"border p-2\" colSpan={5}>\r\n                                {row.Narration}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const switchScreen = () => {\r\n        setScreen(!screen);\r\n        setOrderInfo({});\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n        setOrderInfo({});\r\n    };\r\n    const handleToggle = () => {\r\n        setScreen((prev) => !prev);\r\n        setIsDeliveryDetailsVisible((prev) => !prev);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <div className=\"p-3 py-2 d-flex align-items-center justify-content-between\">\r\n                    <h6 className=\"fa-18 m-0 p-0\">\r\n                        {screen ? \"Sale Orders\" : isValidObject(orderInfo)}\r\n                    </h6>\r\n\r\n                    <div className=\"d-flex align-items-center gap-2\">\r\n\r\n                        {selectedRows.length > 0 && (\r\n                            <h6 className=\"m-0 text-muted\">\r\n                                Selected Rows: {selectedRows.length}\r\n                            </h6>\r\n                        )}\r\n                        {screen && (\r\n                            <Tooltip title=\"Filters\">\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog({ ...dialog, filters: true })}\r\n                                >\r\n                                    <FilterAlt />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )}\r\n\r\n                        {selectedRows.length > 0 && screen && (\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                onClick={() => setTripDetails(selectedRows)}\r\n                            >\r\n                                Convert To Delivery\r\n                            </Button>\r\n                        )}\r\n\r\n                        {screen && (\r\n                            <Switch\r\n                                checked={checked}\r\n                                onChange={() => {\r\n                                    //  setChecked(true);\r\n                                    setScreen(false);\r\n                                    setIsDeliveryDetailsVisible(true);\r\n                                }}\r\n                                inputProps={{ \"aria-label\": \"controlled\" }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <CardContent className=\"p-0\">\r\n                    {screen ? (\r\n                        <FilterableTable\r\n                            dataArray={saleOrders}\r\n                            columns={saleOrderColumn}\r\n                            // EnableSerialNumber={true}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                        />\r\n                    ) : isDeliveryDetailsVisible ? (\r\n                        <DeliveryDetailsList\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload((prev) => !prev);\r\n                                setScreen((pre) => !pre);\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            onToggle={handleToggle}\r\n                            triggerReload={triggerReload} // ✅ you're passing it\r\n                        />\r\n                    ) : (\r\n                        <NewDeliveryOrder\r\n                            editValues={orderInfo}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                            reload={() => {\r\n                                setReload((prev) => !prev);\r\n                                setScreen((prev) => !prev);\r\n                            }}\r\n                            switchScreen={() => setScreen(true)}\r\n                            editOn={true}\r\n                        />\r\n                        // reload={() => {\r\n                        //     setReload(pre => !pre);\r\n                        //     setScreen(pre => !pre)\r\n                        // }}\r\n                        // switchScreen={switchScreen}\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {Object.keys(viewOrder).length > 0 && (\r\n                <InvoiceBillTemplate\r\n                    orderDetails={viewOrder?.orderDetails}\r\n                    orderProducts={viewOrder?.orderProducts}\r\n                    download={true}\r\n                    actionOpen={true}\r\n                    clearDetails={() => setViewOrder({})}\r\n                    TitleText={\"Sale Order\"}\r\n                />\r\n            )}\r\n            <Dialog\r\n                open={deliveryDialogBox}\r\n                onClose={handleCloseDialog}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>Delivery Details</DialogTitle>\r\n                <DialogContent>\r\n                    <form>\r\n                        <td style={{ verticalAlign: \"middle\" }}>Delivery Date <span style={{ color: \"red\" }}>*</span></td>\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            type=\"date\"\r\n                            name=\"Do_Date\"\r\n                            value={deliveryDetails.Do_Date}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <div>\r\n                            <div style={{ verticalAlign: \"middle\" }}>Godown <span style={{ color: \"red\" }}>*</span></div>\r\n                            <div>\r\n                                <Select\r\n                                    value={\r\n                                        deliveryDetails?.GoDown_Id\r\n                                            ? {\r\n                                                value: deliveryDetails?.GoDown_Id,\r\n                                                label: deliveryDetails?.GodDown_Name,\r\n                                            }\r\n                                            : { value: \"\", label: \"select\", isDisabled: true }\r\n                                    }\r\n                                    onChange={(e) =>\r\n                                        setDeliveryDetails({\r\n                                            ...deliveryDetails,\r\n                                            GoDown_Id: e.value,\r\n                                            GodDown_Name: e.label,\r\n                                        })\r\n                                    }\r\n                                    options={[\r\n                                        { value: \"\", label: \"select\", isDisabled: true },\r\n                                        ...godDown.map((obj) => ({\r\n                                            value: obj?.Godown_Id,\r\n                                            label: obj?.Godown_Name,\r\n                                        })),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    menuPortalTarget={document.body}\r\n                                    menuPosition=\"fixed\"\r\n                                    menuPlacement=\"auto\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog}>Cancel</Button>\r\n                    <Button onClick={handleSubmit}>Submit</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Retailer_Id,\r\n                                                label: filters?.RetailerGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Retailer_Id: e.value,\r\n                                                    RetailerGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...retailers.map((obj) => ({\r\n                                                    value: obj?.Retailer_Id,\r\n                                                    label: obj?.Retailer_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Salse Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Sales_Person_Id,\r\n                                                label: filters?.SalsePersonGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Sales_Person_Id: e.value,\r\n                                                    SalsePersonGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...salesPerson.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Created_by,\r\n                                                label: filters?.CreatedByGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Created_by: e.value,\r\n                                                    CreatedByGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...users.map((obj) => ({\r\n                                                    value: obj?.UserId,\r\n                                                    label: obj?.Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Sales Person Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Fromdate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Todate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            type=\"date\"\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Cancel_status: Number(e.target.value),\r\n                                                })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Routes</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Route_Id,\r\n                                                label: filters?.RoutesGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Route_Id: e.value,\r\n                                                    RoutesGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...routes.map((obj) => ({\r\n                                                    value: obj?.Route_Id,\r\n                                                    label: obj?.Route_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Route Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Area</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{\r\n                                                value: filters?.Area_Id,\r\n                                                label: filters?.AreaGet,\r\n                                            }}\r\n                                            onChange={(e) =>\r\n                                                setFilters({\r\n                                                    ...filters,\r\n                                                    Area_Id: e.value,\r\n                                                    AreaGet: e.label,\r\n                                                })\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL\" },\r\n                                                ...area.map((obj) => ({\r\n                                                    value: obj?.Area_Id,\r\n                                                    label: obj?.Area_Name,\r\n                                                })),\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Area Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SalesDeliveryConvert;"],"names":["_ref","loadingOn","loadingOff","selectedRows","setSelectedRows","useState","storage","JSON","parse","localStorage","getItem","saleOrders","setSaleOrders","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","screen","setScreen","orderInfo","setOrderInfo","viewOrder","setViewOrder","reload","setReload","routes","setRoutes","area","setArea","isDeliveryDetailsVisible","setIsDeliveryDetailsVisible","godDown","setGodDown","checked","Created_by","UserId","Branch_Id","BranchId","deliveryDialogBox","setDeliveryDialogBox","handleCloseDialog","DeliveryList","setDeliveryList","initialValue","Fromdate","getPreviousDate","Todate","ISOString","Retailer_Id","RetailerGet","CreatedByGet","Sales_Person_Id","SalsePersonGet","Cancel_status","Route_Id","RoutesGet","Area_Id","AreaGet","filters","setFilters","reloadKey","setReloadKey","deliveryDetails","setDeliveryDetails","Do_Date","Vehicle_No","Trip_No","Trip_Date","StartTime","Delivery_Person_Id","Delivery_Location","Delivery_Time","Payment_Ref_No","Payment_Mode","Payment_Status","Narration","Alter_Id","Delivery_Status","GoDown_Id","GodDown_Name","dialog","setDialog","orderDetails","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","Company_id","saleOrderColumn","Field_Name","ColumnHeader","isVisible","pointer","isCustomCell","Cell","_ref2","row","isSelected","some","selectedRow","So_Id","_jsx","type","onChange","filter","handleCheckboxChange","disabled","isConverted","onFocus","target","blur","style","cursor","transform","width","height","Fied_Data","align","_ref3","_ref4","_convert$label","convert","convertedStatus","find","status","id","Number","className","color","children","label","_ref5","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","orderProducts","Products_List","size","Visibility","switchScreen","_objectSpread","TwoWheelerIcon","closeDialog","Card","isValidObject","length","FilterAlt","Button","variant","Array","isArray","Product_Array","forEach","item","push","setTripDetails","Switch","inputProps","CardContent","FilterableTable","dataArray","columns","isExpendable","tableMaxHeight","expandableComp","_ref6","Branch_Name","Sales_Person_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","DeliveryDetailsList","editValues","prev","pre","onToggle","handleToggle","triggerReload","NewDeliveryOrder","editOn","Object","keys","InvoiceBillTemplate","download","actionOpen","clearDetails","TitleText","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","verticalAlign","TextField","name","value","InputLabelProps","shrink","Select","isDisabled","options","map","obj","Godown_Id","Godown_Name","styles","customSelectStyles","isSearchable","menuPortalTarget","document","body","menuPosition","menuPlacement","DialogActions","async","tripData","response","method","bodyData","toast","message","Retailer_Name","placeholder","Name","Route_Name","Area_Name"],"sourceRoot":""}